{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/three/three.js","webpack:///./src/maths/vector.js","webpack:///./src/maths/system.js","webpack:///./index.js","webpack:///./src/app.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_RESULT__","v1","min","max","matrix","quaternion","q","startP","startEnd","points","closestPoint","x","y","z","v","segCenter","segDir","diff","box","p1","p2","sphere","v0","position","scale","m1","q1","obj","context","focus","fov","aspect","near","far","eyeRight","eyeLeft","color","textureLoader","materialLoader","offsetMatrix","matrixPosition","radians","axis","vector","THREE","REVISION","undefined","Number","EPSILON","Math","pow","sign","Function","this","toString","match","assign","target","TypeError","output","index","arguments","length","source","nextKey","MOUSE","LEFT","MIDDLE","RIGHT","CullFaceNone","CullFaceBack","CullFaceFront","CullFaceFrontBack","FrontFaceDirectionCW","FrontFaceDirectionCCW","BasicShadowMap","PCFShadowMap","PCFSoftShadowMap","FrontSide","BackSide","DoubleSide","FlatShading","SmoothShading","NoColors","FaceColors","VertexColors","NoBlending","NormalBlending","AdditiveBlending","SubtractiveBlending","MultiplyBlending","CustomBlending","AddEquation","SubtractEquation","ReverseSubtractEquation","MinEquation","MaxEquation","ZeroFactor","OneFactor","SrcColorFactor","OneMinusSrcColorFactor","SrcAlphaFactor","OneMinusSrcAlphaFactor","DstAlphaFactor","OneMinusDstAlphaFactor","DstColorFactor","OneMinusDstColorFactor","SrcAlphaSaturateFactor","NeverDepth","AlwaysDepth","LessDepth","LessEqualDepth","EqualDepth","GreaterEqualDepth","GreaterDepth","NotEqualDepth","MultiplyOperation","MixOperation","AddOperation","NoToneMapping","LinearToneMapping","ReinhardToneMapping","Uncharted2ToneMapping","CineonToneMapping","UVMapping","CubeReflectionMapping","CubeRefractionMapping","EquirectangularReflectionMapping","EquirectangularRefractionMapping","SphericalReflectionMapping","CubeUVReflectionMapping","CubeUVRefractionMapping","RepeatWrapping","ClampToEdgeWrapping","MirroredRepeatWrapping","NearestFilter","NearestMipMapNearestFilter","NearestMipMapLinearFilter","LinearFilter","LinearMipMapNearestFilter","LinearMipMapLinearFilter","UnsignedByteType","ByteType","ShortType","UnsignedShortType","IntType","UnsignedIntType","FloatType","HalfFloatType","UnsignedShort4444Type","UnsignedShort5551Type","UnsignedShort565Type","AlphaFormat","RGBFormat","RGBAFormat","LuminanceFormat","LuminanceAlphaFormat","RGBEFormat","DepthFormat","RGB_S3TC_DXT1_Format","RGBA_S3TC_DXT1_Format","RGBA_S3TC_DXT3_Format","RGBA_S3TC_DXT5_Format","RGB_PVRTC_4BPPV1_Format","RGB_PVRTC_2BPPV1_Format","RGBA_PVRTC_4BPPV1_Format","RGBA_PVRTC_2BPPV1_Format","RGB_ETC1_Format","LoopOnce","LoopRepeat","LoopPingPong","InterpolateDiscrete","InterpolateLinear","InterpolateSmooth","ZeroCurvatureEnding","ZeroSlopeEnding","WrapAroundEnding","TrianglesDrawMode","TriangleStripDrawMode","TriangleFanDrawMode","LinearEncoding","sRGBEncoding","GammaEncoding","RGBEEncoding","LogLuvEncoding","RGBM7Encoding","RGBM16Encoding","RGBDEncoding","BasicDepthPacking","RGBADepthPacking","Color","g","b","set","setRGB","constructor","copy","setHex","setStyle","setScalar","scalar","hex","floor","setHSL","hue2rgb","t","h","euclideanModulo","clamp","style","handleAlpha","string","parseFloat","console","warn","exec","components","parseInt","size","charAt","ColorKeywords","clone","copyGammaToLinear","gammaFactor","copyLinearToGamma","safeInverse","convertGammaToLinear","convertLinearToGamma","sqrt","getHex","getHexString","slice","getHSL","optionalTarget","hue","saturation","hsl","lightness","delta","getStyle","offsetHSL","add","addColors","color1","color2","addScalar","multiply","multiplyScalar","lerp","alpha","equals","fromArray","array","offset","toArray","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","Quaternion","w","_x","_y","_z","_w","onChangeCallback","setFromEuler","euler","update","Euler","Error","c1","cos","c2","c3","s1","sin","s2","s3","order","setFromAxisAngle","angle","halfAngle","setFromRotationMatrix","te","elements","m11","m12","m13","m21","m22","m23","m31","m32","m33","trace","setFromUnitVectors","vFrom","vTo","Vector3","dot","abs","crossVectors","normalize","inverse","conjugate","lengthSq","multiplyQuaternions","premultiply","a","qax","qay","qaz","qaw","qbx","qby","qbz","qbw","slerp","qb","cosHalfTheta","sinHalfTheta","halfTheta","atan2","ratioA","ratioB","onChange","callback","qa","qm","slerpFlat","dst","dstOffset","src0","srcOffset0","src1","srcOffset1","x0","y0","z0","w0","x1","y1","z1","w1","dir","sqrSin","len","tDir","f","Vector2","width","height","setX","setY","setComponent","getComponent","addVectors","addScaledVector","sub","subVectors","subScalar","isFinite","divide","divideScalar","clampScalar","minVal","maxVal","clampLength","ceil","round","roundToZero","negate","lengthManhattan","PI","distanceTo","distanceToSquared","dx","dy","setLength","lerpVectors","v2","fromAttribute","attribute","itemSize","rotateAround","center","setZ","multiplyVectors","applyEuler","error","applyQuaternion","applyAxisAngle","applyMatrix3","e","applyMatrix4","applyProjection","qx","qy","qz","qw","ix","iy","iz","iw","project","camera","Matrix4","multiplyMatrices","projectionMatrix","getInverse","matrixWorld","unproject","transformDirection","cross","ax","ay","az","bx","by","bz","projectOnVector","projectOnPlane","planeNormal","reflect","normal","angleTo","theta","acos","dz","setFromSpherical","sinPhiRadius","phi","radius","setFromMatrixPosition","setFromMatrixColumn","setFromMatrixScale","sx","sy","sz","temp","Vector4","setW","setAxisAngleFromQuaternion","setAxisAngleFromRotationMatrix","xx","yy","zz","xy","xz","yz","_order","DefaultOrder","RotationOrders","asin","setFromQuaternion","makeRotationFromQuaternion","setFromVector3","reorder","newOrder","toVector3","optionalResult","Line3","start","end","line","distanceSq","distance","at","result","closestPointToPointParameter","point","clampToLine","startEnd2","closestPointToPoint","Box2","Infinity","setFromPoints","makeEmpty","il","expandByPoint","setFromCenterAndSize","halfSize","isEmpty","expandByVector","expandByScalar","containsPoint","containsBox","getParameter","intersectsBox","clampPoint","distanceToPoint","intersect","union","translate","Box3","setFromArray","minX","minY","minZ","maxX","maxY","maxZ","setFromObject","scope","updateMatrixWorld","traverse","node","geometry","Geometry","vertices","BufferGeometry","attributes","positions","intersectsSphere","intersectsPlane","plane","constant","getBoundingSphere","Sphere","Matrix3","Float32Array","n11","n12","n13","n21","n22","n23","n31","n32","n33","identity","me","setFromMatrix4","applyToVector3Array","j","applyToBuffer","buffer","getX","getY","getZ","setXYZ","determinant","throwOnDegenerate","t11","t12","t13","det","msg","detInv","transpose","tmp","flattenToArrayOffset","getNormalMatrix","matrix4","transposeIntoArray","n14","n24","n34","n41","n42","n43","n44","copyPosition","extractBasis","xAxis","yAxis","zAxis","makeBasis","extractRotation","scaleX","scaleY","scaleZ","makeRotationFromEuler","ae","af","be","bf","ce","cf","de","df","ac","ad","bc","bd","x2","y2","z2","wx","wy","wz","lookAt","eye","up","a11","a12","a13","a14","a21","a22","a23","a24","a31","a32","a33","a34","a41","a42","a43","a44","b11","b12","b13","b14","b21","b22","b23","b24","b31","b32","b33","b34","b41","b42","b43","b44","multiplyToArray","getPosition","setPosition","t14","getMaxScaleOnAxis","scaleXSq","scaleYSq","scaleZSq","makeTranslation","makeRotationX","makeRotationY","makeRotationZ","makeRotationAxis","tx","ty","makeScale","compose","decompose","invSX","invSY","invSZ","makeFrustum","left","right","bottom","top","makePerspective","ymax","DEG2RAD","ymin","xmin","xmax","makeOrthographic","Ray","origin","direction","ray","recast","directionDistance","distanceSqToPoint","distanceSqToSegment","optionalPointOnRay","optionalPointOnSegment","s0","sqrDist","extDet","segExtent","a01","b0","b1","invDet","intersectSphere","tca","d2","radius2","thc","t0","t1","distanceToPlane","denominator","intersectPlane","distToPoint","intersectBox","tmin","tmax","tymin","tymax","tzmin","tzmax","invdirx","invdiry","invdirz","intersectTriangle","edge1","edge2","backfaceCulling","DdN","DdQxE2","DdE1xQ","QdN","optionalCenter","maxRadiusSq","empty","radiusSum","deltaLengthSq","getBoundingBox","Frustum","p0","p3","p4","p5","planes","Plane","frustum","setFromMatrix","me0","me1","me2","me3","me4","me5","me6","me7","me8","me9","me10","me11","me12","me13","me14","me15","setComponents","intersectsObject","boundingSphere","computeBoundingSphere","intersectsSprite","sprite","negRadius","d1","setFromNormalAndCoplanarPoint","setFromCoplanarPoints","inverseNormalLength","distanceToSphere","projectPoint","orthoPoint","perpendicularMagnitude","intersectLine","intersectsLine","startSign","endSign","coplanarPoint","optionalNormalMatrix","referencePoint","normalMatrix","Spherical","other","makeSafe","vec3","RAD2DEG","generateUUID","chars","split","uuid","Array","rnd","random","join","mapLinear","a1","a2","b2","smoothstep","smootherstep","random16","randInt","low","high","randFloat","randFloatSpread","range","degToRad","degrees","radToDeg","isPowerOfTwo","nearestPowerOfTwo","log","LN2","nextPowerOfTwo","Spline","intPoint","weight","w2","w3","pa","pb","pc","pd","v3","interpolate","t2","t3","initFromArray","getPoint","k","getControlPointsArray","coords","getLength","nSubDivisions","nSamples","oldIntPoint","oldPosition","tmpVec","chunkLengths","totalLength","chunks","total","reparametrizeByArcLength","samplingCoef","indexCurrent","indexNext","realDistance","sampling","newpoints","sl","push","Triangle","resultLengthSq","barycoordFromPoint","dot00","dot01","dot02","dot11","dot12","denom","invDenom","u","setFromPointsAndIndices","i0","i1","i2","triangle","area","midpoint","edgeList","projectedPoint","minDistance","Interpolant","parameterPositions","sampleValues","sampleSize","resultBuffer","_cachedIndex","valueSize","evaluate","pp","validate_interval","seek","linear_scan","forward_scan","giveUpAt","afterEnd_","t1global","beforeStart_","mid","intervalChanged_","interpolate_","settings","DefaultSettings_","getSettings_","copySampleValue_","values","stride","CubicInterpolant","_weightPrev","_offsetPrev","_weightNext","_offsetNext","create","endingStart","endingEnd","iPrev","iNext","tPrev","tNext","halfDt","o1","o0","oP","oN","wP","wN","ppp","sP","sN","DiscreteInterpolant","LinearInterpolant","offset1","offset0","weight1","weight0","QuaternionLinearInterpolant","Clock","autoStart","startTime","oldTime","elapsedTime","running","performance","Date","now","stop","getElapsedTime","getDelta","newTime","EventDispatcher","addEventListener","type","listener","_listeners","listeners","indexOf","hasEventListener","removeEventListener","listenerArray","splice","dispatchEvent","event","Layers","mask","channel","enable","toggle","disable","test","layers","ascSort","intersectObject","raycaster","intersects","recursive","visible","raycast","children","Raycaster","params","Mesh","Line","LOD","Points","threshold","Sprite","defineProperties","PointCloud","linePrecision","setFromCamera","PerspectiveCamera","OrthographicCamera","sort","intersectObjects","objects","isArray","Object3D","Object3DIdCount","parent","DefaultUp","rotation","modelViewMatrix","matrixAutoUpdate","DefaultMatrixAutoUpdate","matrixWorldNeedsUpdate","castShadow","receiveShadow","frustumCulled","renderOrder","userData","applyMatrix","setRotationFromAxisAngle","setRotationFromEuler","setRotationFromMatrix","setRotationFromQuaternion","rotateOnAxis","rotateX","rotateY","rotateZ","translateOnAxis","translateX","translateY","translateZ","localToWorld","worldToLocal","remove","getObjectById","id","getObjectByProperty","getObjectByName","getWorldPosition","getWorldQuaternion","getWorldRotation","getWorldScale","getWorldDirection","traverseVisible","traverseAncestors","updateMatrix","force","toJSON","meta","isRootObject","geometries","materials","textures","images","metadata","version","generator","JSON","stringify","material","extractFromCache","cache","key","data","parse","child","Face3","materialIndex","vertexNormals","vertexColors","BufferAttribute","normalized","dynamic","updateRange","count","needsUpdate","setDynamic","copyAt","index1","index2","copyArray","copyColorsArray","colors","copyIndicesArray","indices","copyVector2sArray","vectors","copyVector3sArray","copyVector4sArray","getW","setXY","setXYZW","Int8Attribute","Int8Array","Uint8Attribute","Uint8Array","Uint8ClampedAttribute","Uint8ClampedArray","Int16Attribute","Int16Array","Uint16Attribute","Uint16Array","Int32Attribute","Int32Array","Uint32Attribute","Uint32Array","Float32Attribute","Float64Attribute","Float64Array","DynamicBufferAttribute","InstancedBufferAttribute","meshPerAttribute","InterleavedBuffer","InstancedInterleavedBuffer","InterleavedBufferAttribute","interleavedBuffer","GeometryIdCount","faces","faceVertexUvs","morphTargets","morphNormals","skinWeights","skinIndices","lineDistances","boundingBox","verticesNeedUpdate","elementsNeedUpdate","uvsNeedUpdate","normalsNeedUpdate","colorsNeedUpdate","lineDistancesNeedUpdate","groupsNeedUpdate","face","jl","computeBoundingBox","fromBufferGeometry","normals","uvs","uv","uvs2","uv2","tempNormals","tempUVs","tempUVs2","addFace","groups","group","computeFaceNormals","cb","ab","fl","vA","vB","vC","computeVertexNormals","areaWeighted","vl","computeMorphNormals","__originalFaceNormal","__originalVertexNormals","tmpGeo","faceNormals","dstNormalsFace","dstNormalsVertex","faceNormal","computeTangents","computeLineDistances","merge","materialIndexOffset","vertexOffset","vertices1","vertices2","faces1","faces2","uvs1","vertexCopy","faceCopy","faceVertexNormals","faceVertexColors","uvCopy","mergeMesh","mesh","mergeVertices","verticesMap","unique","changes","precision","faceIndicesToRemove","idx","sortFacesByMaterialIndex","_id","newUvs1","newUvs2","parameters","vertex","normalsHash","colorsHash","uvsHash","hasFaceVertexUv","hasFaceNormal","hasFaceVertexNormal","hasFaceColor","hasFaceVertexColor","faceType","setBit","getUvIndex","getNormalIndex","getColorIndex","enabled","hash","uvsCopy","kl","dispose","DirectGeometry","computeGroups","fromGeometry","morphTargetsPosition","hasFaceVertexUv2","morphTargetsLength","morphTargetsNormal","morphNormalsLength","hasSkinIndices","hasSkinWeights","vertexUvs","morphTarget","morphNormal","morphAttributes","drawRange","getIndex","setIndex","addAttribute","getAttribute","removeAttribute","addGroup","clearGroups","setDrawRange","updateFromObject","direct","__directGeometry","lineDistance","fromDirectGeometry","isNaN","pA","pB","pC","normalizeNormals","attributeArray1","attribute2","attributeArray2","toNonIndexed","geometry2","array2","MaxIndex","InstancedBufferGeometry","maxInstancedCount","instances","Uniform","onUpdate","onUpdateCallback","AnimationAction","_new","mixer","clip","localRoot","_mixer","_clip","_localRoot","tracks","nTracks","interpolants","interpolantSettings","interpolant","createInterpolant","_interpolantSettings","_interpolants","_propertyBindings","_cacheIndex","_byClipCacheIndex","_timeScaleInterpolant","_weightInterpolant","loop","_loopCount","_startTime","time","timeScale","_effectiveTimeScale","_effectiveWeight","repetitions","paused","clampWhenFinished","zeroSlopeAtStart","zeroSlopeAtEnd","play","_activateAction","_deactivateAction","reset","stopFading","stopWarping","isRunning","_isActiveAction","isScheduled","startAt","setLoop","mode","setEffectiveWeight","getEffectiveWeight","fadeIn","duration","_scheduleFading","fadeOut","crossFadeFrom","fadeOutAction","warp","fadeInDuration","fadeOutDuration","startEndRatio","endStartRatio","crossFadeTo","fadeInAction","weightInterpolant","_takeBackControlInterpolant","setEffectiveTimeScale","getEffectiveTimeScale","setDuration","syncWith","action","halt","startTimeScale","endTimeScale","_lendControlInterpolant","times","timeScaleInterpolant","getMixer","getClip","getRoot","_root","_update","deltaTime","timeDirection","accuIndex","timeRunning","_updateTimeScale","clipTime","_updateTime","_updateWeight","propertyMixers","accumulate","interpolantValue","loopCount","_setEndings","handle_stop","pingPong","loopDelta","pending","atStart","atEnd","weightNow","weightThen","AnimationClip","resetDuration","trim","optimize","track","json","jsonTracks","frameTime","fps","KeyframeTrack","clipTracks","CreateFromMorphTargetSequence","morphTargetSequence","noLoop","numMorphTargets","AnimationUtils","getKeyframeOrder","sortedArray","NumberKeyframeTrack","findByName","objectOrClipArray","clipArray","animations","CreateClipsFromMorphTargetSequences","animationToMorphTargets","pattern","parts","animationMorphTargets","clips","parseAnimation","animation","bones","nodeName","addNonemptyTrack","trackType","trackName","animationKeys","propertyName","destTracks","flattenJSON","clipName","hierarchyTracks","hierarchy","keys","morphTargetNames","morphTargetName","animationKey","boneName","VectorKeyframeTrack","QuaternionKeyframeTrack","AnimationMixer","root","_initMemoryManager","_accuIndex","clipAction","optionalRoot","rootUuid","clipObject","clipUuid","actionsForClip","_actionsByClip","prototypeAction","existingAction","actionByRoot","knownActions","newAction","_Action","_bindAction","_addInactiveAction","stopAllAction","actions","_actions","nActions","_nActiveActions","bindings","_bindings","nBindings","_nActiveBindings","useCount","apply","uncacheClip","actionsByClip","actionsToRemove","cacheIndex","lastInactiveAction","pop","_removeInactiveBindingsForAction","uncacheRoot","_removeInactiveAction","bindingByName","_bindingsByRootAndName","binding","restoreOriginalState","_removeInactiveBinding","uncacheAction","bindingsByRoot","bindingsByName","referenceCount","_addInactiveBinding","path","parsedPath","PropertyMixer","PropertyBinding","ValueTypeName","getValueSize","_lendBinding","saveOriginalState","_lendAction","_takeBackBinding","_takeBackAction","_controlInterpolants","_nActiveControlInterpolants","stats","inUse","controlInterpolants","knownActionsForClip","lastKnownAction","byClipCacheIndex","prevIndex","lastActiveIndex","firstInactiveAction","firstInactiveIndex","lastActiveAction","propBinding","rootNode","lastInactiveBinding","remove_empty_map","_","firstInactiveBinding","lastActiveBinding","_controlInterpolantsResultBuffer","__cacheIndex","lastActiveInterpolant","AnimationObjectGroup","var_args","_objects","nCachedObjects_","_indicesByUUID","_paths","_parsedPaths","_bindingsIndicesByPath","bindingsPerObject","nObjects","nCachedObjects","indicesByUUID","paths","parsedPaths","knownObject","firstActiveIndex","lastCachedObject","bindingsForPath","lastCached","lastCachedIndex","firstActiveObject","firstActive","uncache","lastObject","lastIndex","last","subscribe_","indicesByPath","unsubscribe_","lastBindingsIndex","lastBindings","arraySlice","from","to","isTypedArray","subarray","convertArray","forceClone","BYTES_PER_ELEMENT","ArrayBuffer","isView","DataView","nValues","srcOffset","jsonKeys","valuePropertyName","interpolation","TimeBufferType","ValueBufferType","setInterpolation","DefaultInterpolation","validate","InterpolantFactoryMethodDiscrete","InterpolantFactoryMethodLinear","InterpolantFactoryMethodSmooth","factoryMethod","message","getInterpolation","shift","timeOffset","endTime","nKeys","valid","prevTime","currTime","writeIndex","keep","offsetP","offsetN","readOffset","writeOffset","_getTrackTypeForValueTypeName","typeName","toLowerCase","ColorKeyframeTrack","BooleanKeyframeTrack","StringKeyframeTrack","parseTrackName","findNode","getValue","targetArray","bind","setValue","sourceArray","targetObject","objectName","propertyIndex","_getValue_unavailable","_setValue_unavailable","objectIndex","skeleton","nodeProperty","versioning","Versioning","None","NeedsUpdate","MatrixWorldNeedsUpdate","bindingType","BindingType","Direct","ArrayElement","resolvedProperty","HasFromToArray","EntireArray","GetterByBindingType","SetterByBindingTypeAndVersioning","unbind","_getValue_unbound","_setValue_unbound","dest","Composite","targetGroup","optionalParsedPath","_targetGroup","firstValidIndex","re","matches","results","bone","searchSkeleton","searchNodeSubtree","childNode","subTreeNode","mixFunction","bufferType","_slerp","_select","_lerp","_mixBufferRegion","cumulativeWeight","currentWeight","mix","originalValueOffset","Audio","createBufferSource","onended","onEnded","gain","createGain","connect","getInput","autoplay","playbackRate","isPlaying","hasPlaybackControl","sourceType","filters","getOutput","setNodeSource","audioNode","setBuffer","audioBuffer","pause","currentTime","disconnect","getFilters","setFilters","getFilter","setFilter","filter","setPlaybackRate","getPlaybackRate","getLoop","getVolume","setVolume","AudioAnalyser","audio","fftSize","analyser","createAnalyser","frequencyBinCount","getFrequencyData","getByteFrequencyData","getAverageFrequency","window","AudioContext","webkitAudioContext","PositionalAudio","panner","createPanner","getRefDistance","refDistance","setRefDistance","getRolloffFactor","rolloffFactor","setRolloffFactor","getDistanceModel","distanceModel","setDistanceModel","getMaxDistance","maxDistance","setMaxDistance","AudioListener","destination","removeFilter","getMasterVolume","setMasterVolume","orientation","setOrientation","Camera","matrixWorldInverse","CubeCamera","cubeResolution","cameraPX","cameraNX","cameraPY","cameraNY","cameraPZ","cameraNZ","options","format","magFilter","minFilter","renderTarget","WebGLRenderTargetCube","updateCubeMap","renderer","scene","generateMipmaps","texture","activeCubeFace","render","setRenderTarget","zoom","updateProjectionMatrix","cx","cy","view","filmGauge","filmOffset","setFocalLength","focalLength","vExtentSlope","getFilmHeight","atan","getFocalLength","getEffectiveFOV","getFilmWidth","setViewOffset","fullWidth","fullHeight","offsetX","offsetY","clearViewOffset","skew","StereoCamera","cameraL","cameraR","eyeSepOnProjection","Light","intensity","groundColor","decay","penumbra","LightShadow","bias","mapSize","map","AmbientLight","DirectionalLight","shadow","DirectionalLightShadow","light","HemisphereLight","skyColor","PointLight","power","SpotLight","SpotLightShadow","AudioLoader","manager","DefaultLoadingManager","load","url","onLoad","onProgress","onError","loader","XHRLoader","setResponseType","decodeAudioData","Cache","files","file","clear","Loader","onLoadStart","onLoadProgress","onLoadComplete","crossOrigin","extractUrlBase","initMaterials","texturePath","createMaterial","TextureLoader","MaterialLoader","loadTexture","repeat","wrap","anisotropy","fullPath","Handlers","setCrossOrigin","wrapS","wrapT","blending","specular","emissive","shininess","mapDiffuseRepeat","mapDiffuseOffset","mapDiffuseWrap","mapDiffuseAnisotropy","lightMap","mapLightRepeat","mapLightOffset","mapLightWrap","mapLightAnisotropy","aoMap","mapAORepeat","mapAOOffset","mapAOWrap","mapAOAnisotropy","bumpMap","mapBumpRepeat","mapBumpOffset","mapBumpWrap","mapBumpAnisotropy","bumpScale","normalMap","mapNormalRepeat","mapNormalOffset","mapNormalWrap","mapNormalAnisotropy","normalScale","specularMap","mapSpecularRepeat","mapSpecularOffset","mapSpecularWrap","mapSpecularAnisotropy","alphaMap","mapAlphaRepeat","mapAlphaOffset","mapAlphaWrap","mapAlphaAnisotropy","side","opacity","transparent","setTextures","handlers","regex","cached","setTimeout","request","XMLHttpRequest","overrideMimeType","open","response","status","itemEnd","itemError","responseType","withCredentials","send","itemStart","setPath","setWithCredentials","FontLoader","text","substring","font","Font","ImageLoader","image","document","createElement","src","JSONLoader","statusDomElement","_statusDomElement","setTexturePath","isBitSet","fi","zLength","colorIndex","normalIndex","uvIndex","isQuad","hasMaterial","faceA","faceB","uvLayer","nUvLayers","parseModel","influencesPerVertex","parseSkin","dstVertices","srcVertices","morphColors","parseMorphing","outputAnimations","concat","morphAnimationClips","parseAnimations","LoadingManager","isLoading","itemsLoaded","itemsTotal","onStart","BufferGeometryLoader","TYPED_ARRAYS","typedArray","drawcalls","offsets","getTexture","roughness","metalness","uniforms","vertexShader","fragmentShader","shading","alphaTest","depthTest","depthWrite","colorWrite","wireframe","wireframeLinewidth","sizeAttenuation","displacementMap","displacementScale","displacementBias","roughnessMap","metalnessMap","emissiveMap","emissiveIntensity","envMap","combine","reflectivity","lightMapIntensity","aoMapIntensity","ObjectLoader","lastIndexOf","parseGeometries","parseImages","parseTextures","parseMaterials","parseObject","geometryLoader","bufferGeometryLoader","widthSegments","heightSegments","depth","depthSegments","segments","thetaStart","thetaLength","radiusTop","radiusBottom","radialSegments","openEnded","phiStart","phiLength","detail","innerRadius","outerRadius","thetaSegments","phiSegments","tube","tubularSegments","arc","loadImage","parseConstant","Texture","mapping","getGeometry","getMaterial","Scene","SkinnedMesh","Group","levels","level","addLevel","CubeTextureLoader","urls","CubeTexture","loaded","DataTextureLoader","BinaryTextureLoader","_parser","DataTexture","texData","mipmaps","mipmapCount","CompressedTextureLoader","CompressedTexture","texDatas","isCubemap","Material","MaterialIdCount","fog","lights","blendSrc","blendDst","blendEquation","blendSrcAlpha","blendDstAlpha","blendEquationAlpha","depthFunc","clippingPlanes","clipShadows","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","premultipliedAlpha","overdraw","_needsUpdate","setValues","newValue","currentValue","isRoot","srcPlanes","dstPlanes","LineBasicMaterial","linewidth","linecap","linejoin","LineDashedMaterial","dashSize","gapSize","MeshBasicMaterial","refractionRatio","wireframeLinecap","wireframeLinejoin","skinning","MeshDepthMaterial","depthPacking","MeshLambertMaterial","MeshNormalMaterial","MeshPhongMaterial","MeshStandardMaterial","defines","STANDARD","envMapIntensity","MeshPhysicalMaterial","PHYSICAL","MultiMaterial","PointsMaterial","ShaderMaterial","clipping","extensions","derivatives","fragDepth","drawBuffers","shaderTextureLOD","defaultAttributeValues","index0AttributeName","UniformsUtils","RawShaderMaterial","SpriteMaterial","ShadowMaterial","UniformsLib","ShaderChunk","encoding","TextureIdCount","sourceFile","DEFAULT_IMAGE","DEFAULT_MAPPING","premultiplyAlpha","flipY","unpackAlignment","canvas","toDataURL","getContext","drawImage","getDataURL","transformUv","DepthTexture","CanvasTexture","VideoTexture","video","requestAnimationFrame","readyState","HAVE_CURRENT_DATA","inverseMatrix","localThreshold","localThresholdSq","testPoint","rayPointDistanceSq","intersectPoint","distanceToRay","LineSegments","precisionSq","vStart","vEnd","interSegment","interRay","step","faceIndex","nbVertices","drawMode","updateMorphTargets","setDrawMode","morphTargetBase","morphTargetInfluences","morphTargetDictionary","ml","getMorphTargetIndexByName","tempA","tempB","tempC","uvA","uvB","uvC","barycoord","intersectionPoint","intersectionPointWorld","uvIntersection","uv1","uv3","checkIntersection","checkBufferGeometryIntersection","intersection","fvA","fvB","fvC","isFaceMaterial","faceMaterial","morphInfluences","tl","influence","targets","uvs_f","Bone","skin","Skeleton","boneInverses","useVertexTexture","identityMatrix","boneTextureWidth","boneTextureHeight","boneMatrices","boneTexture","calculateInverses","bl","pose","bindMode","bindMatrix","bindMatrixInverse","gbone","pos","rotq","scl","normalizeSkinWeights","sw","vec","skinWeight","getObjectForDistance","LensFlare","lensFlares","positionScreen","customUpdateCallback","updateLensFlares","flare","vecX","vecY","wantedRotation","overrideMaterial","autoUpdate","Fog","FogExp2","density","merged","uniforms_src","uniforms_dst","parameter_src","common","diffuse","offsetRepeat","flipEnvMap","aomap","lightmap","emissivemap","bumpmap","normalmap","displacementmap","roughnessmap","metalnessmap","fogDensity","fogNear","fogFar","fogColor","ambientLightColor","directionalLights","properties","shadowBias","shadowRadius","shadowMapSize","directionalShadowMap","directionalShadowMatrix","spotLights","coneCos","penumbraCos","spotShadowMap","spotShadowMatrix","pointLights","pointShadowMap","pointShadowMatrix","hemisphereLights","ShaderLib","basic","lambert","phong","standard","dashed","totalSize","cube","tCube","tFlip","equirect","tEquirect","distanceRGBA","lightPos","WebGLRenderer","_canvas","_context","_alpha","_depth","_stencil","stencil","_antialias","antialias","_premultipliedAlpha","_preserveDrawingBuffer","preserveDrawingBuffer","opaqueObjects","opaqueObjectsLastIndex","transparentObjects","transparentObjectsLastIndex","sprites","domElement","autoClear","autoClearColor","autoClearDepth","autoClearStencil","sortObjects","localClippingEnabled","gammaInput","gammaOutput","physicallyCorrectLights","toneMapping","toneMappingExposure","toneMappingWhitePoint","maxMorphTargets","maxMorphNormals","autoScaleCubemaps","_gl","_this","_currentProgram","_currentRenderTarget","_currentFramebuffer","_currentMaterialId","_currentGeometryProgram","_currentCamera","_currentScissor","_currentScissorTest","_currentViewport","_usedTextureUnits","_clearColor","_clearAlpha","_width","_height","_pixelRatio","_scissor","_scissorTest","_viewport","_frustum","_clipping","WebGLClipping","_clippingEnabled","_localClippingEnabled","_sphere","_projScreenMatrix","_vector3","_lights","ambient","directional","spot","hemi","shadows","_infoMemory","_infoRender","calls","info","memory","programs","getShaderPrecisionFormat","rangeMin","rangeMax","onContextLost","_isWebGL2","WebGL2RenderingContext","WebGLExtensions","capabilities","WebGLCapabilities","state","WebGLState","paramThreeToGL","WebGLProperties","WebGLObjects","programCache","WebGLPrograms","lightCache","WebGLLights","bufferRenderer","WebGLBufferRenderer","indexedBufferRenderer","WebGLIndexedBufferRenderer","getTargetPixelRatio","glClearColor","clearColor","setDefaultGLState","init","scissor","viewport","resetGLState","shadowMap","WebGLShadowMap","warned","spritePlugin","SpritePlugin","lensFlarePlugin","LensFlarePlugin","preventDefault","onTextureDispose","textureProperties","__image__webglTextureCube","deleteTexture","__webglInit","__webglTexture","delete","deallocateTexture","onRenderTargetDispose","renderTargetProperties","depthTexture","deleteFramebuffer","__webglFramebuffer","__webglDepthbuffer","deleteRenderbuffer","deallocateRenderTarget","onMaterialDispose","releaseMaterialProgramReference","deallocateMaterial","programInfo","program","releaseProgram","absNumericalSort","painterSortStable","reversePainterSortStable","pushRenderItem","renderItem","isSphereViewable","numPlanes","negRad","renderObjects","renderList","ImmediateRenderObject","setMaterial","setProgram","renderBufferImmediate","renderBufferDirect","CULL_FACE","setFlipSided","setBlending","setDepthFunc","setDepthTest","setDepthWrite","setColorWrite","setPolygonOffset","materialProperties","useCache","setState","numClippingPlanes","lightsHash","getParameters","code","getProgramCode","programChange","shaderID","shader","__webglShader","acquireProgram","getAttributes","numSupportedMorphTargets","numSupportedMorphNormals","uniform","progUniforms","getUniforms","uniformsList","WebGLUniforms","seqWithValue","seq","dynamicUniforms","splitDynamic","initMaterial","refreshProgram","refreshMaterial","refreshLights","p_uniforms","m_uniforms","useProgram","logarithmicDepthBuffer","uCamPos","cameraPosition","setOptional","floatVertexTextures","refreshUniformsFog","uvScaleMap","WebGLRenderTarget","refreshUniformsCommon","refreshUniformsLine","refreshUniformsDash","clientHeight","refreshUniformsPoints","refreshUniformsLambert","refreshUniformsPhong","refreshUniformsStandard","refreshUniformsPhysical","upload","dynUniforms","evalDynamic","setTextureParameters","textureType","isPowerOfTwoImage","extension","texParameteri","TEXTURE_WRAP_S","TEXTURE_WRAP_T","TEXTURE_MAG_FILTER","TEXTURE_MIN_FILTER","CLAMP_TO_EDGE","filterFallback","__currentAnisotropy","texParameterf","TEXTURE_MAX_ANISOTROPY_EXT","getMaxAnisotropy","uploadTexture","slot","createTexture","activeTexture","TEXTURE0","bindTexture","TEXTURE_2D","pixelStorei","UNPACK_FLIP_Y_WEBGL","UNPACK_PREMULTIPLY_ALPHA_WEBGL","UNPACK_ALIGNMENT","clampToMaxSize","maxTextureSize","textureNeedsPowerOfTwo","HTMLImageElement","HTMLCanvasElement","makePowerOfTwo","glFormat","glType","mipmap","internalFormat","DEPTH_COMPONENT","DEPTH_COMPONENT32F","DEPTH_COMPONENT16","texImage2D","getCompressedTextureFormats","compressedTexImage2D","generateMipmap","__version","maxSize","setupFrameBufferTexture","framebuffer","attachment","textureTarget","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","setupRenderBufferStorage","renderbuffer","bindRenderbuffer","RENDERBUFFER","depthBuffer","stencilBuffer","renderbufferStorage","framebufferRenderbuffer","DEPTH_ATTACHMENT","DEPTH_STENCIL","DEPTH_STENCIL_ATTACHMENT","RGBA4","setupDepthRenderbuffer","isCube","setTexture2D","webglDepthTexture","setupDepthTexture","createRenderbuffer","NEAREST","LINEAR","REPEAT","MIRRORED_REPEAT","NEAREST_MIPMAP_NEAREST","NEAREST_MIPMAP_LINEAR","LINEAR_MIPMAP_NEAREST","LINEAR_MIPMAP_LINEAR","UNSIGNED_BYTE","UNSIGNED_SHORT_4_4_4_4","UNSIGNED_SHORT_5_5_5_1","UNSIGNED_SHORT_5_6_5","BYTE","SHORT","UNSIGNED_SHORT","INT","UNSIGNED_INT","FLOAT","HALF_FLOAT_OES","ALPHA","RGB","RGBA","LUMINANCE","LUMINANCE_ALPHA","FUNC_ADD","FUNC_SUBTRACT","FUNC_REVERSE_SUBTRACT","ZERO","ONE","SRC_COLOR","ONE_MINUS_SRC_COLOR","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","DST_ALPHA","ONE_MINUS_DST_ALPHA","DST_COLOR","ONE_MINUS_DST_COLOR","SRC_ALPHA_SATURATE","COMPRESSED_RGB_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT3_EXT","COMPRESSED_RGBA_S3TC_DXT5_EXT","COMPRESSED_RGB_PVRTC_4BPPV1_IMG","COMPRESSED_RGB_PVRTC_2BPPV1_IMG","COMPRESSED_RGBA_PVRTC_4BPPV1_IMG","COMPRESSED_RGBA_PVRTC_2BPPV1_IMG","COMPRESSED_RGB_ETC1_WEBGL","MIN_EXT","MAX_EXT","getContextAttributes","forceContextLoss","loseContext","MAX_TEXTURE_MAX_ANISOTROPY_EXT","getPrecision","getPixelRatio","setPixelRatio","setSize","getSize","updateStyle","setViewport","setScissor","setScissorTest","boolean","getClearColor","setClearColor","getClearAlpha","setClearAlpha","bits","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","STENCIL_BUFFER_BIT","clearDepth","clearStencil","clearTarget","initAttributes","buffers","hasPositions","createBuffer","hasNormals","hasUvs","hasColors","bindBuffer","ARRAY_BUFFER","bufferData","positionArray","DYNAMIC_DRAW","enableAttribute","vertexAttribPointer","normalArray","nx","ny","nz","uvArray","colorArray","disableUnusedAttributes","drawArrays","TRIANGLES","updateBuffers","geometryProgram","activeInfluences","getWireframeAttribute","startIndex","geometryAttributes","programAttributes","materialDefaultAttributeValues","programAttribute","geometryAttribute","getAttributeBuffer","enableAttributeAndDivisor","vertexAttrib2fv","vertexAttrib3fv","vertexAttrib4fv","vertexAttrib1fv","setupVertexAttributes","ELEMENT_ARRAY_BUFFER","dataCount","rangeStart","rangeCount","groupStart","groupCount","drawStart","drawEnd","drawCount","setLineWidth","setMode","LINES","TRIANGLE_STRIP","TRIANGLE_FAN","lineWidth","LINE_STRIP","POINTS","renderInstances","forceClear","projectObject","isObjectViewable","groupMaterial","beginShadows","lightShadowsLength","setupShadows","ll","viewMatrix","directionalLength","pointLength","spotLength","hemiLength","setupLights","endShadows","TEXTURE_CUBE_MAP","updateRenderTargetMipmap","setFaceCulling","cullFace","frontFaceDirection","setCullFace","allocTextureUnit","textureUnit","maxTextures","complete","setTexture","setTextureCube","isCompressed","isDataTexture","cubeImage","maxCubemapSize","TEXTURE_CUBE_MAP_POSITIVE_X","setTextureCubeDynamic","getCurrentRenderTarget","isTargetPowerOfTwo","createFramebuffer","COLOR_ATTACHMENT0","setupRenderTarget","scissorTest","activeMipMapLevel","readRenderTargetPixels","restore","IMPLEMENTATION_COLOR_READ_FORMAT","IMPLEMENTATION_COLOR_READ_TYPE","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","readPixels","drawArraysInstancedANGLE","globalState","numGlobalPlanes","renderingShadows","viewNormalMatrix","resetGlobalState","projectPlanes","skipTransform","nPlanes","dstArray","flatSize","i4","enableLocalClipping","fromCache","nGlobal","lGlobal","clippingState","drawElements","drawElementsInstancedANGLE","gl","getExtension","getMaxPrecision","VERTEX_SHADER","HIGH_FLOAT","FRAGMENT_SHADER","MEDIUM_FLOAT","MAX_TEXTURE_IMAGE_UNITS","maxVertexTextures","MAX_VERTEX_TEXTURE_IMAGE_UNITS","MAX_TEXTURE_SIZE","MAX_CUBE_MAP_TEXTURE_SIZE","maxAttributes","MAX_VERTEX_ATTRIBS","maxVertexUniforms","MAX_VERTEX_UNIFORM_VECTORS","maxVaryings","MAX_VARYING_VECTORS","maxFragmentUniforms","MAX_FRAGMENT_UNIFORM_VECTORS","vertexTextures","floatFragmentTextures","_maxPrecision","WebGLGeometries","onGeometryDispose","buffergeometry","deleteAttribute","deleteAttributes","bufferproperty","__webglBuffer","deleteBuffer","removeAttributeBuffer","_bufferGeometry","updateAttribute","attributeProperties","usage","STATIC_DRAW","bufferSubData","updateBuffer","checkEdge","edges","list","TypeArray","WebGLProgram","programIdCount","getEncodingComponents","getTexelDecodingFunction","functionName","filterEmptyLine","replaceLightNums","replace","numDirLights","numSpotLights","numPointLights","numHemiLights","parseIncludes","include","unrollLoops","snippet","unroll","shadowMapTypeDefine","shadowMapType","envMapTypeDefine","envMapModeDefine","envMapBlendingDefine","prefixVertex","prefixFragment","gammaFactorDefine","customExtensions","rendererExtensions","envMapCubeUV","flatShading","generateExtensions","customDefines","generateDefines","createProgram","supportsVertexTextures","maxBones","doubleSided","flipSided","shadowMapEnabled","useFog","fogExp","toneMappingName","getToneMappingFunction","outputEncoding","mapEncoding","envMapEncoding","emissiveMapEncoding","vertexGlsl","fragmentGlsl","glVertexShader","WebGLShader","glFragmentShader","attachShader","bindAttribLocation","linkProgram","cachedUniforms","cachedAttributes","programLog","getProgramInfoLog","vertexLog","getShaderInfoLog","fragmentLog","runnable","haveDiagnostics","getProgramParameter","LINK_STATUS","getError","VALIDATE_STATUS","diagnostics","prefix","deleteShader","identifiers","ACTIVE_ATTRIBUTES","getActiveAttrib","getAttribLocation","fetchAttributeLocations","destroy","deleteProgram","usedTimes","shaderIDs","parameterNames","getTextureEncodingFromMap","gammaOverrideLinear","nClipPlanes","nVertexUniforms","allocateBones","currentRenderTarget","envMapMode","pl","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","lines","addLineNumbers","_renderer","_state","_lightShadows","_shadowMapSize","_lookTarget","_lightPositionWorld","_renderList","_MorphingFlag","_SkinningFlag","_NumberOfMaterialVariants","_depthMaterials","_distanceMaterials","_materialCache","cubeDirections","cubeUps","cube2DViewPorts","depthMaterialTemplate","distanceShader","distanceUniforms","useMorphing","useSkinning","depthMaterial","distanceMaterial","USE_SHADOWMAP","getDepthMaterial","isPointLight","lightPositionWorld","materialVariants","customMaterial","customDepthMaterial","customDistanceMaterial","variantIndex","keyA","keyB","materialsForVariant","cachedMaterial","renderSingleSided","renderReverseSided","shadowCamera","faceCount","BLEND","vpWidth","vpHeight","pars","shadowMatrix","vpDimensions","clearAlpha","WebGLColorBuffer","WebGLDepthBuffer","WebGLStencilBuffer","maxVertexAttributes","newAttributes","enabledAttributes","attributeDivisors","compressedTextureFormats","currentBlending","currentBlendEquation","currentBlendSrc","currentBlendDst","currentBlendEquationAlpha","currentBlendSrcAlpha","currentBlendDstAlpha","currentPremultipledAlpha","currentFlipSided","currentCullFace","currentLineWidth","currentPolygonOffsetFactor","currentPolygonOffsetUnits","currentScissorTest","currentTextureSlot","currentBoundTextures","currentScissor","currentViewport","emptyTextures","DEPTH_TEST","enableVertexAttribArray","vertexAttribDivisorANGLE","disableVertexAttribArray","formats","COMPRESSED_TEXTURE_FORMATS","blendEquationSeparate","blendFuncSeparate","blendFunc","setMask","setTest","setFunc","setStencilTest","stencilTest","setStencilWrite","stencilWrite","setStencilFunc","stencilFunc","stencilRef","stencilMask","setStencilOp","stencilFail","stencilZFail","stencilZPass","setOp","frontFace","CW","CCW","BACK","FRONT","FRONT_AND_BACK","factor","units","POLYGON_OFFSET_FILL","getScissorTest","SCISSOR_TEST","webglSlot","webglType","webglTexture","boundTexture","setClear","locked","currentColorMask","currentColorClear","colorMask","setLocked","lock","currentDepthMask","currentDepthFunc","currentDepthClear","depthMask","NEVER","ALWAYS","LESS","LEQUAL","EQUAL","GEQUAL","GREATER","NOTEQUAL","currentStencilMask","currentStencilFunc","currentStencilRef","currentStencilFuncMask","currentStencilFail","currentStencilZFail","currentStencilZPass","currentStencilClear","STENCIL_TEST","stencilOp","UniformContainer","arrayCacheF32","arrayCacheI32","flatten","nBlocks","blockSize","firstElem","allocTexUnits","setValue1f","uniform1f","addr","setValue1i","uniform1i","setValue2fv","uniform2fv","uniform2f","setValue3fv","uniform3f","uniform3fv","setValue4fv","uniform4fv","uniform4f","setValue2fm","uniformMatrix2fv","setValue3fm","uniformMatrix3fv","setValue4fm","uniformMatrix4fv","setValueT1","unit","setValueT6","setValue2iv","uniform2iv","setValue3iv","uniform3iv","setValue4iv","uniform4iv","setValue1fv","uniform1fv","setValue1iv","uniform1iv","setValueV2a","setValueV3a","setValueV4a","setValueM2a","setValueM3a","setValueM4a","setValueT1a","tex","setValueT6a","SingleUniform","activeInfo","getSingularSetter","PureArrayUniform","getPureArraySetter","StructuredUniform","RePathPart","addUniform","container","uniformObject","parseUniform","pathLength","matchEnd","idIsIndex","subscript","next","ACTIVE_UNIFORMS","getActiveUniform","getUniformLocation","flares","vertexBuffer","elementBuffer","tempTexture","occlusionTexture","renderType","occlusionMap","screenPosition","tempPosition","invAspect","halfViewportWidth","halfViewportHeight","screenPositionPixels","validArea","TEXTURE1","copyTexImage2D","spritePosition","spriteRotation","spriteScale","uvOffset","uvScale","fogType","fillStyle","fillRect","oldFogType","sceneFogType","Face4","LineStrip","LinePieces","MeshFaceMaterial","Particle","ParticleSystem","PointCloudMaterial","ParticleBasicMaterial","ParticleSystemMaterial","Vertex","isIntersectionBox","isIntersectionSphere","multiplyVector3","multiplyVector3Array","extractPosition","multiplyVector4","rotateAxis","crossVector","rotateByAxis","isIntersectionLine","isIntersectionPlane","setEulerFromRotationMatrix","setEulerFromQuaternion","getPositionFromMatrix","getScaleFromMatrix","getColumnFromMatrix","getChildByName","renderDepth","eulerOrder","useQuaternion","setLens","onlyShadow","shadowCameraFov","shadowCameraLeft","shadowCameraRight","shadowCameraTop","shadowCameraBottom","shadowCameraNear","shadowCameraFar","shadowCameraVisible","shadowDarkness","shadowMapWidth","shadowMapHeight","addIndex","addDrawCall","indexOffset","clearDrawCalls","computeOffsets","wrapAround","wrapRGB","metal","supportsFloatTextures","supportsHalfFloatTextures","supportsStandardDerivatives","supportsCompressedTextureS3TC","supportsCompressedTexturePVRTC","supportsBlendMinMax","supportsInstancedArrays","enableScissorTest","addPrePlugin","addPostPlugin","updateShadowMap","shadowMapCullFace","getData","GeometryUtils","geometry1","ImageUtils","loadTextureCube","loadCompressedTexture","loadCompressedTextureCube","Projector","projectVector","unprojectVector","pickingRay","CanvasRenderer","CurveUtils","tangentQuadraticBezier","tangentCubicBezier","tangentSpline","SceneUtils","createMultiMaterialObject","detach","attach","ShapeUtils","contour","triangulate","snip","verts","px","py","aX","aY","bX","bY","cX","cY","cCROSSap","bCROSScp","vertIndices","nv","triangulateShape","holes","point_in_segment_2D_colin","inSegPt1","inSegPt2","inOtherPt","intersect_segments_2D","inSeg1Pt1","inSeg1Pt2","inSeg2Pt1","inSeg2Pt2","inExcludeAdjacentSegs","seg1dx","seg1dy","seg2dx","seg2dy","seg1seg2dx","seg1seg2dy","limit","perpSeg1","perpSeg2","factorSeg1","seg1min","seg1max","seg1minVal","seg1maxVal","seg2min","seg2max","seg2minVal","seg2maxVal","seg1Pt","seg2Pt","isPointInsideAngle","inVertex","inLegFromPt","inLegToPt","legFromPtX","legFromPtY","legToPtX","legToPtY","otherPtX","otherPtY","from2toAngle","from2otherAngle","other2toAngle","allPointsMap","allpoints","hl","shapeWithoutHoles","hole","shape","isCutLineInsideAngles","inShapeIdx","inHoleIdx","lastShapeIdx","prevShapeIdx","nextShapeIdx","insideAngle","lastHoleIdx","prevHoleIdx","nextHoleIdx","intersectsShapeEdge","inShapePt","inHolePt","sIdx","nextIdx","indepHoles","intersectsHoleEdge","ihIdx","chkHole","hIdx","holeIndex","shapeIndex","shapePt","holePt","holeIdx","cutKey","tmpShape1","tmpShape2","tmpHole1","tmpHole2","failedCuts","minShapeIndex","counter","h2","removeHoles","triangles","isClockWise","pts","b2p0","b2p1","b2p2","b3","b3p0","b3p1","b3p2","b3p3","Curve","getPointAt","getUtoTmapping","getPoints","divisions","getSpacedPoints","lengths","getLengths","cacheArcLengths","current","sum","updateArcLengths","targetArcLength","arcLengths","comparison","lengthBefore","getTangent","pt1","getTangentAt","getPointFunc","CurvePath","curves","autoClose","curve","closePath","startPoint","endPoint","LineCurve","curveLengths","getCurveLengths","lens","cacheLengths","sums","createPointsGeometry","createGeometry","createSpacedPointsGeometry","generateShapes","createPath","glyph","glyphs","cpx","cpy","cpx0","cpy0","cpx1","cpy1","cpx2","cpy2","laste","Path","outline","_cachedOutline","moveTo","lineTo","quadraticCurveTo","bezierCurveTo","ha","String","resolution","ret","createPaths","shapes","toShapes","fromPoints","args","lastargs","aCPx","aCPy","QuadraticBezierCurve","aCP1x","aCP1y","aCP2x","aCP2y","CubicBezierCurve","splineThru","npts","SplineCurve","aRadius","aStartAngle","aEndAngle","aClockwise","absarc","absellipse","ellipse","xRadius","yRadius","aRotation","EllipseCurve","lastPoint","item","spts","spline","deltaAngle","tdivisions","isCCW","noHoles","toShapesNoHoles","inSubpaths","tmpPath","tmpShape","Shape","isPointInsidePolygon","inPt","inPolygon","polyLen","inside","edgeLowPt","edgeHighPt","edgeDx","edgeDy","perpEdge","subPaths","inActions","lastPath","extractSubpaths","solid","holesFirst","tmpPoints","tmpHoles","betterShapeHoles","newShapes","newShapeHoles","mainIdx","ambiguous","toChange","sLen","sho","ho","hole_unassigned","s2Idx","froms","tos","extrude","ExtrudeGeometry","makeGeometry","ShapeGeometry","getPointsHoles","holesPts","extractAllPoints","extractPoints","point0","point1","point2","point3","ArcCurve","LineCurve3","QuadraticBezierCurve3","CubicBezierCurve3","SplineCurve3","CatmullRomCurve3","CubicPoly","pz","c0","initNonuniformCatmullRom","x3","dt0","dt1","dt2","initCatmullRom","tension","calc","closed","ClosedSplineCurve3","BoxGeometry","BoxBufferGeometry","CubeGeometry","vertexCount","calculateVertexCount","indexCount","vertexBufferOffset","uvBufferOffset","indexBufferOffset","numberOfVertices","buildPlane","udir","vdir","gridX","gridY","segmentWidth","segmentHeight","widthHalf","heightHalf","depthHalf","gridX1","gridY1","vertexCounter","CircleGeometry","CircleBufferGeometry","ii","segment","CylinderBufferGeometry","nbCap","calculateIndexCount","indexArray","halfHeight","generateCap","centerIndexStart","centerIndexEnd","cosTheta","sinTheta","tanTheta","indexRow","i3","generateTorso","CylinderGeometry","ConeBufferGeometry","ConeGeometry","EdgesGeometry","thresholdAngle","thresholdDot","edge","sortFunction","vert1","vert2","face1","face2","addShapeList","addShape","extrudePts","splineTube","binormal","position2","ahole","amount","bevelThickness","bevelSize","bevelSegments","bevelEnabled","curveSegments","steps","extrudePath","extrudeByPath","uvgen","UVGenerator","WorldUVGenerator","frames","TubeGeometry","FrenetFrames","shapesOffset","shapePoints","reverse","scalePt2","pt","bs","vert","vlen","flen","getBevelVec","inPrev","inNext","v_trans_x","v_trans_y","shrink_by","v_prev_x","v_prev_y","v_next_x","v_next_y","v_prev_lensq","collinear0","v_prev_len","v_next_len","ptPrevShift_x","ptPrevShift_y","sf","v_trans_lensq","direction_eq","contourMovements","oneHoleMovements","holesMovements","verticesMovements","binormals","sidewalls","layeroffset","slen1","slen2","f4","f3","generateTopUV","wallContour","stepIndex","stepsLength","contourIndex1","contourIndex2","generateSideWallUV","layer","buildLidFaces","buildSideFaces","indexA","indexB","indexC","indexD","LatheBufferGeometry","base","inverseSegments","n1","n2","LatheGeometry","PlaneGeometry","PlaneBufferGeometry","width_half","height_half","segment_width","segment_height","offset2","RingBufferGeometry","radiusStep","thetaSegmentLevel","RingGeometry","SphereGeometry","SphereBufferGeometry","thetaEnd","verticesRow","v4","TextGeometry","TorusBufferGeometry","TorusGeometry","TorusKnotBufferGeometry","P1","P2","B","T","N","calculatePositionOnCurve","cu","su","quOverP","cs","TorusKnotGeometry","heightScale","taper","NoTaper","ip","jp","uva","uvb","uvc","uvd","grid","numpoints","pos2","tangents","SinusoidalTaper","smallest","tz","mat","MAX_VALUE","initialNormal3","PolyhedronGeometry","that","prepare","centroid","subdivide","azimuth","inclination","make","azi","correctUV","cols","aj","bj","rows","DodecahedronGeometry","IcosahedronGeometry","OctahedronGeometry","TetrahedronGeometry","ParametricGeometry","func","slices","stacks","sliceCount","WireframeGeometry","numEdges","ol","numTris","AxisHelper","ArrowHelper","lineGeometry","coneGeometry","headLength","headWidth","cone","setDirection","setColor","BoxHelper","BoundingBoxHelper","CameraHelper","pointMap","addLine","addPoint","setPoint","DirectionalLightHelper","lightPlane","targetLine","EdgesHelper","FaceNormalsHelper","nNormals","objGeometry","GridHelper","setColors","HemisphereLightHelper","sphereSize","lightSphere","PointLightHelper","SkeletonHelper","getBoneList","boneList","matrixWorldInv","boneMatrix","SpotLightHelper","vector2","coneLength","coneWidth","VertexNormalsHelper","objPos","objNorm","WireframeHelper","renderCallback","MorphBlendMesh","animationsMap","animationsList","numFrames","endFrame","createAnimation","setAnimationWeight","lastFrame","currentFrame","active","directionBackwards","mirroredLoop","autoCreateAnimations","firstAnimation","frameRanges","setAnimationDirectionForward","setAnimationDirectionBackward","setAnimationFPS","setAnimationDuration","setAnimationTime","getAnimationTime","getAnimationDuration","playAnimation","stopAnimation","keyframe","Vector","vector_classCallCheck","invert","fn","k1","k2","k3","k4","toFixed","three","rand","LorenzSystem","system_classCallCheck","sigma","rho","beta","initialPosition","currentPosition","previousPosition","rk4","calculateNextVector","index_app","App","systemCount","app_classCallCheck","innerWidth","innerHeight","systems","mustRender","initialize","getElementById","systemDoms","newMaterial","newColorizedMaterial","newSystem","system","colorBox","innerHTML","body","appendChild","clearThree","generateSystems","forEach","element","process","previous","geo","timer","getTime","app"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","var self = self || {};// File:src/Three.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nvar THREE = { REVISION: '77' };\r\n\r\n//\r\n\r\nif ( typeof define === 'function' && define.amd ) {\r\n\r\n\tdefine( 'three', THREE );\r\n\r\n} else if ( 'undefined' !== typeof exports && 'undefined' !== typeof module ) {\r\n\r\n\tmodule.exports = THREE;\r\n\r\n}\r\n\r\n// Polyfills\r\n\r\nif ( Number.EPSILON === undefined ) {\r\n\r\n\tNumber.EPSILON = Math.pow( 2, - 52 );\r\n\r\n}\r\n\r\n//\r\n\r\nif ( Math.sign === undefined ) {\r\n\r\n\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign\r\n\r\n\tMath.sign = function ( x ) {\r\n\r\n\t\treturn ( x < 0 ) ? - 1 : ( x > 0 ) ? 1 : + x;\r\n\r\n\t};\r\n\r\n}\r\n\r\nif ( Function.prototype.name === undefined ) {\r\n\r\n\t// Missing in IE9-11.\r\n\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name\r\n\r\n\tObject.defineProperty( Function.prototype, 'name', {\r\n\r\n\t\tget: function () {\r\n\r\n\t\t\treturn this.toString().match( /^\\s*function\\s*(\\S*)\\s*\\(/ )[ 1 ];\r\n\r\n\t\t}\r\n\r\n\t} );\r\n\r\n}\r\n\r\nif ( Object.assign === undefined ) {\r\n\r\n\t// Missing in IE.\r\n\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\r\n\r\n\t( function () {\r\n\r\n\t\tObject.assign = function ( target ) {\r\n\r\n\t\t\t'use strict';\r\n\r\n\t\t\tif ( target === undefined || target === null ) {\r\n\r\n\t\t\t\tthrow new TypeError( 'Cannot convert undefined or null to object' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar output = Object( target );\r\n\r\n\t\t\tfor ( var index = 1; index < arguments.length; index ++ ) {\r\n\r\n\t\t\t\tvar source = arguments[ index ];\r\n\r\n\t\t\t\tif ( source !== undefined && source !== null ) {\r\n\r\n\t\t\t\t\tfor ( var nextKey in source ) {\r\n\r\n\t\t\t\t\t\tif ( Object.prototype.hasOwnProperty.call( source, nextKey ) ) {\r\n\r\n\t\t\t\t\t\t\toutput[ nextKey ] = source[ nextKey ];\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn output;\r\n\r\n\t\t};\r\n\r\n\t} )();\r\n\r\n}\r\n\r\n//\r\n\r\nObject.assign( THREE, {\r\n\r\n\t// https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent.button\r\n\r\n\tMOUSE: { LEFT: 0, MIDDLE: 1, RIGHT: 2 },\r\n\r\n\t// GL STATE CONSTANTS\r\n\r\n\tCullFaceNone: 0,\r\n\tCullFaceBack: 1,\r\n\tCullFaceFront: 2,\r\n\tCullFaceFrontBack: 3,\r\n\r\n\tFrontFaceDirectionCW: 0,\r\n\tFrontFaceDirectionCCW: 1,\r\n\r\n\t// SHADOWING TYPES\r\n\r\n\tBasicShadowMap: 0,\r\n\tPCFShadowMap: 1,\r\n\tPCFSoftShadowMap: 2,\r\n\r\n\t// MATERIAL CONSTANTS\r\n\r\n\t// side\r\n\r\n\tFrontSide: 0,\r\n\tBackSide: 1,\r\n\tDoubleSide: 2,\r\n\r\n\t// shading\r\n\r\n\tFlatShading: 1,\r\n\tSmoothShading: 2,\r\n\r\n\t// colors\r\n\r\n\tNoColors: 0,\r\n\tFaceColors: 1,\r\n\tVertexColors: 2,\r\n\r\n\t// blending modes\r\n\r\n\tNoBlending: 0,\r\n\tNormalBlending: 1,\r\n\tAdditiveBlending: 2,\r\n\tSubtractiveBlending: 3,\r\n\tMultiplyBlending: 4,\r\n\tCustomBlending: 5,\r\n\r\n\t// custom blending equations\r\n\t// (numbers start from 100 not to clash with other\r\n\t// mappings to OpenGL constants defined in Texture.js)\r\n\r\n\tAddEquation: 100,\r\n\tSubtractEquation: 101,\r\n\tReverseSubtractEquation: 102,\r\n\tMinEquation: 103,\r\n\tMaxEquation: 104,\r\n\r\n\t// custom blending destination factors\r\n\r\n\tZeroFactor: 200,\r\n\tOneFactor: 201,\r\n\tSrcColorFactor: 202,\r\n\tOneMinusSrcColorFactor: 203,\r\n\tSrcAlphaFactor: 204,\r\n\tOneMinusSrcAlphaFactor: 205,\r\n\tDstAlphaFactor: 206,\r\n\tOneMinusDstAlphaFactor: 207,\r\n\r\n\t// custom blending source factors\r\n\r\n\t//ZeroFactor: 200,\r\n\t//OneFactor: 201,\r\n\t//SrcAlphaFactor: 204,\r\n\t//OneMinusSrcAlphaFactor: 205,\r\n\t//DstAlphaFactor: 206,\r\n\t//OneMinusDstAlphaFactor: 207,\r\n\tDstColorFactor: 208,\r\n\tOneMinusDstColorFactor: 209,\r\n\tSrcAlphaSaturateFactor: 210,\r\n\r\n\t// depth modes\r\n\r\n\tNeverDepth: 0,\r\n\tAlwaysDepth: 1,\r\n\tLessDepth: 2,\r\n\tLessEqualDepth: 3,\r\n\tEqualDepth: 4,\r\n\tGreaterEqualDepth: 5,\r\n\tGreaterDepth: 6,\r\n\tNotEqualDepth: 7,\r\n\r\n\r\n\t// TEXTURE CONSTANTS\r\n\r\n\tMultiplyOperation: 0,\r\n\tMixOperation: 1,\r\n\tAddOperation: 2,\r\n\r\n\t// Tone Mapping modes\r\n\r\n\tNoToneMapping: 0, // do not do any tone mapping, not even exposure (required for special purpose passes.)\r\n\tLinearToneMapping: 1, // only apply exposure.\r\n\tReinhardToneMapping: 2,\r\n\tUncharted2ToneMapping: 3, // John Hable\r\n\tCineonToneMapping: 4, // optimized filmic operator by Jim Hejl and Richard Burgess-Dawson\r\n\r\n\t// Mapping modes\r\n\r\n\tUVMapping: 300,\r\n\r\n\tCubeReflectionMapping: 301,\r\n\tCubeRefractionMapping: 302,\r\n\r\n\tEquirectangularReflectionMapping: 303,\r\n\tEquirectangularRefractionMapping: 304,\r\n\r\n\tSphericalReflectionMapping: 305,\r\n\tCubeUVReflectionMapping: 306,\r\n\tCubeUVRefractionMapping: 307,\r\n\r\n\t// Wrapping modes\r\n\r\n\tRepeatWrapping: 1000,\r\n\tClampToEdgeWrapping: 1001,\r\n\tMirroredRepeatWrapping: 1002,\r\n\r\n\t// Filters\r\n\r\n\tNearestFilter: 1003,\r\n\tNearestMipMapNearestFilter: 1004,\r\n\tNearestMipMapLinearFilter: 1005,\r\n\tLinearFilter: 1006,\r\n\tLinearMipMapNearestFilter: 1007,\r\n\tLinearMipMapLinearFilter: 1008,\r\n\r\n\t// Data types\r\n\r\n\tUnsignedByteType: 1009,\r\n\tByteType: 1010,\r\n\tShortType: 1011,\r\n\tUnsignedShortType: 1012,\r\n\tIntType: 1013,\r\n\tUnsignedIntType: 1014,\r\n\tFloatType: 1015,\r\n\tHalfFloatType: 1025,\r\n\r\n\t// Pixel types\r\n\r\n\t//UnsignedByteType: 1009,\r\n\tUnsignedShort4444Type: 1016,\r\n\tUnsignedShort5551Type: 1017,\r\n\tUnsignedShort565Type: 1018,\r\n\r\n\t// Pixel formats\r\n\r\n\tAlphaFormat: 1019,\r\n\tRGBFormat: 1020,\r\n\tRGBAFormat: 1021,\r\n\tLuminanceFormat: 1022,\r\n\tLuminanceAlphaFormat: 1023,\r\n\t// THREE.RGBEFormat handled as THREE.RGBAFormat in shaders\r\n\tRGBEFormat: THREE.RGBAFormat, //1024;\r\n\tDepthFormat: 1026,\r\n\r\n\t// DDS / ST3C Compressed texture formats\r\n\r\n\tRGB_S3TC_DXT1_Format: 2001,\r\n\tRGBA_S3TC_DXT1_Format: 2002,\r\n\tRGBA_S3TC_DXT3_Format: 2003,\r\n\tRGBA_S3TC_DXT5_Format: 2004,\r\n\r\n\t// PVRTC compressed texture formats\r\n\r\n\tRGB_PVRTC_4BPPV1_Format: 2100,\r\n\tRGB_PVRTC_2BPPV1_Format: 2101,\r\n\tRGBA_PVRTC_4BPPV1_Format: 2102,\r\n\tRGBA_PVRTC_2BPPV1_Format: 2103,\r\n\r\n\t// ETC compressed texture formats\r\n\r\n\tRGB_ETC1_Format: 2151,\r\n\r\n\t// Loop styles for AnimationAction\r\n\r\n\tLoopOnce: 2200,\r\n\tLoopRepeat: 2201,\r\n\tLoopPingPong: 2202,\r\n\r\n\t// Interpolation\r\n\r\n\tInterpolateDiscrete: 2300,\r\n\tInterpolateLinear: 2301,\r\n\tInterpolateSmooth: 2302,\r\n\r\n\t// Interpolant ending modes\r\n\r\n\tZeroCurvatureEnding: 2400,\r\n\tZeroSlopeEnding: 2401,\r\n\tWrapAroundEnding: 2402,\r\n\r\n\t// Triangle Draw modes\r\n\r\n\tTrianglesDrawMode: 0,\r\n\tTriangleStripDrawMode: 1,\r\n\tTriangleFanDrawMode: 2,\r\n\r\n\t// Texture Encodings\r\n\r\n\tLinearEncoding: 3000, // No encoding at all.\r\n\tsRGBEncoding: 3001,\r\n\tGammaEncoding: 3007, // uses GAMMA_FACTOR, for backwards compatibility with WebGLRenderer.gammaInput/gammaOutput\r\n\r\n\t// The following Texture Encodings are for RGB-only (no alpha) HDR light emission sources.\r\n\t// These encodings should not specified as output encodings except in rare situations.\r\n\tRGBEEncoding: 3002, // AKA Radiance.\r\n\tLogLuvEncoding: 3003,\r\n\tRGBM7Encoding: 3004,\r\n\tRGBM16Encoding: 3005,\r\n\tRGBDEncoding: 3006, // MaxRange is 256.\r\n\r\n\t// Depth packing strategies\r\n\r\n\tBasicDepthPacking: 3200, // for writing to float textures for high precision or for visualizing results in RGB buffers\r\n\tRGBADepthPacking: 3201 // for packing into RGBA buffers.\r\n\r\n} );\r\n\r\n// File:src/math/Color.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.Color = function ( r, g, b ) {\r\n\r\n\tif ( g === undefined && b === undefined ) {\r\n\r\n\t\t// r is THREE.Color, hex or string\r\n\t\treturn this.set( r );\r\n\r\n\t}\r\n\r\n\treturn this.setRGB( r, g, b );\r\n\r\n};\r\n\r\nTHREE.Color.prototype = {\r\n\r\n\tconstructor: THREE.Color,\r\n\r\n\tr: 1, g: 1, b: 1,\r\n\r\n\tset: function ( value ) {\r\n\r\n\t\tif ( value instanceof THREE.Color ) {\r\n\r\n\t\t\tthis.copy( value );\r\n\r\n\t\t} else if ( typeof value === 'number' ) {\r\n\r\n\t\t\tthis.setHex( value );\r\n\r\n\t\t} else if ( typeof value === 'string' ) {\r\n\r\n\t\t\tthis.setStyle( value );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetScalar: function ( scalar ) {\r\n\r\n\t\tthis.r = scalar;\r\n\t\tthis.g = scalar;\r\n\t\tthis.b = scalar;\r\n\r\n\t},\r\n\r\n\tsetHex: function ( hex ) {\r\n\r\n\t\thex = Math.floor( hex );\r\n\r\n\t\tthis.r = ( hex >> 16 & 255 ) / 255;\r\n\t\tthis.g = ( hex >> 8 & 255 ) / 255;\r\n\t\tthis.b = ( hex & 255 ) / 255;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetRGB: function ( r, g, b ) {\r\n\r\n\t\tthis.r = r;\r\n\t\tthis.g = g;\r\n\t\tthis.b = b;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetHSL: function () {\r\n\r\n\t\tfunction hue2rgb( p, q, t ) {\r\n\r\n\t\t\tif ( t < 0 ) t += 1;\r\n\t\t\tif ( t > 1 ) t -= 1;\r\n\t\t\tif ( t < 1 / 6 ) return p + ( q - p ) * 6 * t;\r\n\t\t\tif ( t < 1 / 2 ) return q;\r\n\t\t\tif ( t < 2 / 3 ) return p + ( q - p ) * 6 * ( 2 / 3 - t );\r\n\t\t\treturn p;\r\n\r\n\t\t}\r\n\r\n\t\treturn function ( h, s, l ) {\r\n\r\n\t\t\t// h,s,l ranges are in 0.0 - 1.0\r\n\t\t\th = THREE.Math.euclideanModulo( h, 1 );\r\n\t\t\ts = THREE.Math.clamp( s, 0, 1 );\r\n\t\t\tl = THREE.Math.clamp( l, 0, 1 );\r\n\r\n\t\t\tif ( s === 0 ) {\r\n\r\n\t\t\t\tthis.r = this.g = this.b = l;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tvar p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );\r\n\t\t\t\tvar q = ( 2 * l ) - p;\r\n\r\n\t\t\t\tthis.r = hue2rgb( q, p, h + 1 / 3 );\r\n\t\t\t\tthis.g = hue2rgb( q, p, h );\r\n\t\t\t\tthis.b = hue2rgb( q, p, h - 1 / 3 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tsetStyle: function ( style ) {\r\n\r\n\t\tfunction handleAlpha( string ) {\r\n\r\n\t\t\tif ( string === undefined ) return;\r\n\r\n\t\t\tif ( parseFloat( string ) < 1 ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\r\n\t\tvar m;\r\n\r\n\t\tif ( m = /^((?:rgb|hsl)a?)\\(\\s*([^\\)]*)\\)/.exec( style ) ) {\r\n\r\n\t\t\t// rgb / hsl\r\n\r\n\t\t\tvar color;\r\n\t\t\tvar name = m[ 1 ];\r\n\t\t\tvar components = m[ 2 ];\r\n\r\n\t\t\tswitch ( name ) {\r\n\r\n\t\t\t\tcase 'rgb':\r\n\t\t\t\tcase 'rgba':\r\n\r\n\t\t\t\t\tif ( color = /^(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\r\n\r\n\t\t\t\t\t\t// rgb(255,0,0) rgba(255,0,0,0.5)\r\n\t\t\t\t\t\tthis.r = Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255;\r\n\t\t\t\t\t\tthis.g = Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255;\r\n\t\t\t\t\t\tthis.b = Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255;\r\n\r\n\t\t\t\t\t\thandleAlpha( color[ 5 ] );\r\n\r\n\t\t\t\t\t\treturn this;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( color = /^(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\r\n\r\n\t\t\t\t\t\t// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)\r\n\t\t\t\t\t\tthis.r = Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100;\r\n\t\t\t\t\t\tthis.g = Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100;\r\n\t\t\t\t\t\tthis.b = Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100;\r\n\r\n\t\t\t\t\t\thandleAlpha( color[ 5 ] );\r\n\r\n\t\t\t\t\t\treturn this;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'hsl':\r\n\t\t\t\tcase 'hsla':\r\n\r\n\t\t\t\t\tif ( color = /^([0-9]*\\.?[0-9]+)\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(,\\s*([0-9]*\\.?[0-9]+)\\s*)?$/.exec( components ) ) {\r\n\r\n\t\t\t\t\t\t// hsl(120,50%,50%) hsla(120,50%,50%,0.5)\r\n\t\t\t\t\t\tvar h = parseFloat( color[ 1 ] ) / 360;\r\n\t\t\t\t\t\tvar s = parseInt( color[ 2 ], 10 ) / 100;\r\n\t\t\t\t\t\tvar l = parseInt( color[ 3 ], 10 ) / 100;\r\n\r\n\t\t\t\t\t\thandleAlpha( color[ 5 ] );\r\n\r\n\t\t\t\t\t\treturn this.setHSL( h, s, l );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( m = /^\\#([A-Fa-f0-9]+)$/.exec( style ) ) {\r\n\r\n\t\t\t// hex color\r\n\r\n\t\t\tvar hex = m[ 1 ];\r\n\t\t\tvar size = hex.length;\r\n\r\n\t\t\tif ( size === 3 ) {\r\n\r\n\t\t\t\t// #ff0\r\n\t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 0 ), 16 ) / 255;\r\n\t\t\t\tthis.g = parseInt( hex.charAt( 1 ) + hex.charAt( 1 ), 16 ) / 255;\r\n\t\t\t\tthis.b = parseInt( hex.charAt( 2 ) + hex.charAt( 2 ), 16 ) / 255;\r\n\r\n\t\t\t\treturn this;\r\n\r\n\t\t\t} else if ( size === 6 ) {\r\n\r\n\t\t\t\t// #ff0000\r\n\t\t\t\tthis.r = parseInt( hex.charAt( 0 ) + hex.charAt( 1 ), 16 ) / 255;\r\n\t\t\t\tthis.g = parseInt( hex.charAt( 2 ) + hex.charAt( 3 ), 16 ) / 255;\r\n\t\t\t\tthis.b = parseInt( hex.charAt( 4 ) + hex.charAt( 5 ), 16 ) / 255;\r\n\r\n\t\t\t\treturn this;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( style && style.length > 0 ) {\r\n\r\n\t\t\t// color keywords\r\n\t\t\tvar hex = THREE.ColorKeywords[ style ];\r\n\r\n\t\t\tif ( hex !== undefined ) {\r\n\r\n\t\t\t\t// red\r\n\t\t\t\tthis.setHex( hex );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// unknown color\r\n\t\t\t\tconsole.warn( 'THREE.Color: Unknown color ' + style );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor( this.r, this.g, this.b );\r\n\r\n\t},\r\n\r\n\tcopy: function ( color ) {\r\n\r\n\t\tthis.r = color.r;\r\n\t\tthis.g = color.g;\r\n\t\tthis.b = color.b;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcopyGammaToLinear: function ( color, gammaFactor ) {\r\n\r\n\t\tif ( gammaFactor === undefined ) gammaFactor = 2.0;\r\n\r\n\t\tthis.r = Math.pow( color.r, gammaFactor );\r\n\t\tthis.g = Math.pow( color.g, gammaFactor );\r\n\t\tthis.b = Math.pow( color.b, gammaFactor );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcopyLinearToGamma: function ( color, gammaFactor ) {\r\n\r\n\t\tif ( gammaFactor === undefined ) gammaFactor = 2.0;\r\n\r\n\t\tvar safeInverse = ( gammaFactor > 0 ) ? ( 1.0 / gammaFactor ) : 1.0;\r\n\r\n\t\tthis.r = Math.pow( color.r, safeInverse );\r\n\t\tthis.g = Math.pow( color.g, safeInverse );\r\n\t\tthis.b = Math.pow( color.b, safeInverse );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tconvertGammaToLinear: function () {\r\n\r\n\t\tvar r = this.r, g = this.g, b = this.b;\r\n\r\n\t\tthis.r = r * r;\r\n\t\tthis.g = g * g;\r\n\t\tthis.b = b * b;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tconvertLinearToGamma: function () {\r\n\r\n\t\tthis.r = Math.sqrt( this.r );\r\n\t\tthis.g = Math.sqrt( this.g );\r\n\t\tthis.b = Math.sqrt( this.b );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tgetHex: function () {\r\n\r\n\t\treturn ( this.r * 255 ) << 16 ^ ( this.g * 255 ) << 8 ^ ( this.b * 255 ) << 0;\r\n\r\n\t},\r\n\r\n\tgetHexString: function () {\r\n\r\n\t\treturn ( '000000' + this.getHex().toString( 16 ) ).slice( - 6 );\r\n\r\n\t},\r\n\r\n\tgetHSL: function ( optionalTarget ) {\r\n\r\n\t\t// h,s,l ranges are in 0.0 - 1.0\r\n\r\n\t\tvar hsl = optionalTarget || { h: 0, s: 0, l: 0 };\r\n\r\n\t\tvar r = this.r, g = this.g, b = this.b;\r\n\r\n\t\tvar max = Math.max( r, g, b );\r\n\t\tvar min = Math.min( r, g, b );\r\n\r\n\t\tvar hue, saturation;\r\n\t\tvar lightness = ( min + max ) / 2.0;\r\n\r\n\t\tif ( min === max ) {\r\n\r\n\t\t\thue = 0;\r\n\t\t\tsaturation = 0;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tvar delta = max - min;\r\n\r\n\t\t\tsaturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );\r\n\r\n\t\t\tswitch ( max ) {\r\n\r\n\t\t\t\tcase r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;\r\n\t\t\t\tcase g: hue = ( b - r ) / delta + 2; break;\r\n\t\t\t\tcase b: hue = ( r - g ) / delta + 4; break;\r\n\r\n\t\t\t}\r\n\r\n\t\t\thue /= 6;\r\n\r\n\t\t}\r\n\r\n\t\thsl.h = hue;\r\n\t\thsl.s = saturation;\r\n\t\thsl.l = lightness;\r\n\r\n\t\treturn hsl;\r\n\r\n\t},\r\n\r\n\tgetStyle: function () {\r\n\r\n\t\treturn 'rgb(' + ( ( this.r * 255 ) | 0 ) + ',' + ( ( this.g * 255 ) | 0 ) + ',' + ( ( this.b * 255 ) | 0 ) + ')';\r\n\r\n\t},\r\n\r\n\toffsetHSL: function ( h, s, l ) {\r\n\r\n\t\tvar hsl = this.getHSL();\r\n\r\n\t\thsl.h += h; hsl.s += s; hsl.l += l;\r\n\r\n\t\tthis.setHSL( hsl.h, hsl.s, hsl.l );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tadd: function ( color ) {\r\n\r\n\t\tthis.r += color.r;\r\n\t\tthis.g += color.g;\r\n\t\tthis.b += color.b;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\taddColors: function ( color1, color2 ) {\r\n\r\n\t\tthis.r = color1.r + color2.r;\r\n\t\tthis.g = color1.g + color2.g;\r\n\t\tthis.b = color1.b + color2.b;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\taddScalar: function ( s ) {\r\n\r\n\t\tthis.r += s;\r\n\t\tthis.g += s;\r\n\t\tthis.b += s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiply: function ( color ) {\r\n\r\n\t\tthis.r *= color.r;\r\n\t\tthis.g *= color.g;\r\n\t\tthis.b *= color.b;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiplyScalar: function ( s ) {\r\n\r\n\t\tthis.r *= s;\r\n\t\tthis.g *= s;\r\n\t\tthis.b *= s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tlerp: function ( color, alpha ) {\r\n\r\n\t\tthis.r += ( color.r - this.r ) * alpha;\r\n\t\tthis.g += ( color.g - this.g ) * alpha;\r\n\t\tthis.b += ( color.b - this.b ) * alpha;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tequals: function ( c ) {\r\n\r\n\t\treturn ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );\r\n\r\n\t},\r\n\r\n\tfromArray: function ( array, offset ) {\r\n\r\n\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\tthis.r = array[ offset ];\r\n\t\tthis.g = array[ offset + 1 ];\r\n\t\tthis.b = array[ offset + 2 ];\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\ttoArray: function ( array, offset ) {\r\n\r\n\t\tif ( array === undefined ) array = [];\r\n\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\tarray[ offset ] = this.r;\r\n\t\tarray[ offset + 1 ] = this.g;\r\n\t\tarray[ offset + 2 ] = this.b;\r\n\r\n\t\treturn array;\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.ColorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,\r\n'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,\r\n'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,\r\n'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,\r\n'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,\r\n'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,\r\n'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,\r\n'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,\r\n'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,\r\n'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,\r\n'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,\r\n'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,\r\n'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,\r\n'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,\r\n'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,\r\n'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,\r\n'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,\r\n'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,\r\n'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,\r\n'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,\r\n'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,\r\n'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,\r\n'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,\r\n'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };\r\n\r\n// File:src/math/Quaternion.js\r\n\r\n/**\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author WestLangley / http://github.com/WestLangley\r\n * @author bhouston / http://clara.io\r\n */\r\n\r\nTHREE.Quaternion = function ( x, y, z, w ) {\r\n\r\n\tthis._x = x || 0;\r\n\tthis._y = y || 0;\r\n\tthis._z = z || 0;\r\n\tthis._w = ( w !== undefined ) ? w : 1;\r\n\r\n};\r\n\r\nTHREE.Quaternion.prototype = {\r\n\r\n\tconstructor: THREE.Quaternion,\r\n\r\n\tget x () {\r\n\r\n\t\treturn this._x;\r\n\r\n\t},\r\n\r\n\tset x ( value ) {\r\n\r\n\t\tthis._x = value;\r\n\t\tthis.onChangeCallback();\r\n\r\n\t},\r\n\r\n\tget y () {\r\n\r\n\t\treturn this._y;\r\n\r\n\t},\r\n\r\n\tset y ( value ) {\r\n\r\n\t\tthis._y = value;\r\n\t\tthis.onChangeCallback();\r\n\r\n\t},\r\n\r\n\tget z () {\r\n\r\n\t\treturn this._z;\r\n\r\n\t},\r\n\r\n\tset z ( value ) {\r\n\r\n\t\tthis._z = value;\r\n\t\tthis.onChangeCallback();\r\n\r\n\t},\r\n\r\n\tget w () {\r\n\r\n\t\treturn this._w;\r\n\r\n\t},\r\n\r\n\tset w ( value ) {\r\n\r\n\t\tthis._w = value;\r\n\t\tthis.onChangeCallback();\r\n\r\n\t},\r\n\r\n\tset: function ( x, y, z, w ) {\r\n\r\n\t\tthis._x = x;\r\n\t\tthis._y = y;\r\n\t\tthis._z = z;\r\n\t\tthis._w = w;\r\n\r\n\t\tthis.onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor( this._x, this._y, this._z, this._w );\r\n\r\n\t},\r\n\r\n\tcopy: function ( quaternion ) {\r\n\r\n\t\tthis._x = quaternion.x;\r\n\t\tthis._y = quaternion.y;\r\n\t\tthis._z = quaternion.z;\r\n\t\tthis._w = quaternion.w;\r\n\r\n\t\tthis.onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromEuler: function ( euler, update ) {\r\n\r\n\t\tif ( euler instanceof THREE.Euler === false ) {\r\n\r\n\t\t\tthrow new Error( 'THREE.Quaternion: .setFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );\r\n\r\n\t\t}\r\n\r\n\t\t// http://www.mathworks.com/matlabcentral/fileexchange/\r\n\t\t// \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\r\n\t\t//\tcontent/SpinCalc.m\r\n\r\n\t\tvar c1 = Math.cos( euler._x / 2 );\r\n\t\tvar c2 = Math.cos( euler._y / 2 );\r\n\t\tvar c3 = Math.cos( euler._z / 2 );\r\n\t\tvar s1 = Math.sin( euler._x / 2 );\r\n\t\tvar s2 = Math.sin( euler._y / 2 );\r\n\t\tvar s3 = Math.sin( euler._z / 2 );\r\n\r\n\t\tvar order = euler.order;\r\n\r\n\t\tif ( order === 'XYZ' ) {\r\n\r\n\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\r\n\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\r\n\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\r\n\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\r\n\r\n\t\t} else if ( order === 'YXZ' ) {\r\n\r\n\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\r\n\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\r\n\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\r\n\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\r\n\r\n\t\t} else if ( order === 'ZXY' ) {\r\n\r\n\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\r\n\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\r\n\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\r\n\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\r\n\r\n\t\t} else if ( order === 'ZYX' ) {\r\n\r\n\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\r\n\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\r\n\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\r\n\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\r\n\r\n\t\t} else if ( order === 'YZX' ) {\r\n\r\n\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\r\n\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\r\n\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\r\n\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\r\n\r\n\t\t} else if ( order === 'XZY' ) {\r\n\r\n\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\r\n\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\r\n\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\r\n\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\r\n\r\n\t\t}\r\n\r\n\t\tif ( update !== false ) this.onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromAxisAngle: function ( axis, angle ) {\r\n\r\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\r\n\r\n\t\t// assumes axis is normalized\r\n\r\n\t\tvar halfAngle = angle / 2, s = Math.sin( halfAngle );\r\n\r\n\t\tthis._x = axis.x * s;\r\n\t\tthis._y = axis.y * s;\r\n\t\tthis._z = axis.z * s;\r\n\t\tthis._w = Math.cos( halfAngle );\r\n\r\n\t\tthis.onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromRotationMatrix: function ( m ) {\r\n\r\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\r\n\r\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\r\n\r\n\t\tvar te = m.elements,\r\n\r\n\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\r\n\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\r\n\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],\r\n\r\n\t\t\ttrace = m11 + m22 + m33,\r\n\t\t\ts;\r\n\r\n\t\tif ( trace > 0 ) {\r\n\r\n\t\t\ts = 0.5 / Math.sqrt( trace + 1.0 );\r\n\r\n\t\t\tthis._w = 0.25 / s;\r\n\t\t\tthis._x = ( m32 - m23 ) * s;\r\n\t\t\tthis._y = ( m13 - m31 ) * s;\r\n\t\t\tthis._z = ( m21 - m12 ) * s;\r\n\r\n\t\t} else if ( m11 > m22 && m11 > m33 ) {\r\n\r\n\t\t\ts = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );\r\n\r\n\t\t\tthis._w = ( m32 - m23 ) / s;\r\n\t\t\tthis._x = 0.25 * s;\r\n\t\t\tthis._y = ( m12 + m21 ) / s;\r\n\t\t\tthis._z = ( m13 + m31 ) / s;\r\n\r\n\t\t} else if ( m22 > m33 ) {\r\n\r\n\t\t\ts = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );\r\n\r\n\t\t\tthis._w = ( m13 - m31 ) / s;\r\n\t\t\tthis._x = ( m12 + m21 ) / s;\r\n\t\t\tthis._y = 0.25 * s;\r\n\t\t\tthis._z = ( m23 + m32 ) / s;\r\n\r\n\t\t} else {\r\n\r\n\t\t\ts = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );\r\n\r\n\t\t\tthis._w = ( m21 - m12 ) / s;\r\n\t\t\tthis._x = ( m13 + m31 ) / s;\r\n\t\t\tthis._y = ( m23 + m32 ) / s;\r\n\t\t\tthis._z = 0.25 * s;\r\n\r\n\t\t}\r\n\r\n\t\tthis.onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromUnitVectors: function () {\r\n\r\n\t\t// http://lolengine.net/blog/2014/02/24/quaternion-from-two-vectors-final\r\n\r\n\t\t// assumes direction vectors vFrom and vTo are normalized\r\n\r\n\t\tvar v1, r;\r\n\r\n\t\tvar EPS = 0.000001;\r\n\r\n\t\treturn function ( vFrom, vTo ) {\r\n\r\n\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\r\n\r\n\t\t\tr = vFrom.dot( vTo ) + 1;\r\n\r\n\t\t\tif ( r < EPS ) {\r\n\r\n\t\t\t\tr = 0;\r\n\r\n\t\t\t\tif ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {\r\n\r\n\t\t\t\t\tv1.set( - vFrom.y, vFrom.x, 0 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tv1.set( 0, - vFrom.z, vFrom.y );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tv1.crossVectors( vFrom, vTo );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis._x = v1.x;\r\n\t\t\tthis._y = v1.y;\r\n\t\t\tthis._z = v1.z;\r\n\t\t\tthis._w = r;\r\n\r\n\t\t\treturn this.normalize();\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tinverse: function () {\r\n\r\n\t\treturn this.conjugate().normalize();\r\n\r\n\t},\r\n\r\n\tconjugate: function () {\r\n\r\n\t\tthis._x *= - 1;\r\n\t\tthis._y *= - 1;\r\n\t\tthis._z *= - 1;\r\n\r\n\t\tthis.onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdot: function ( v ) {\r\n\r\n\t\treturn this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\r\n\r\n\t},\r\n\r\n\tlengthSq: function () {\r\n\r\n\t\treturn this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\r\n\r\n\t},\r\n\r\n\tlength: function () {\r\n\r\n\t\treturn Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );\r\n\r\n\t},\r\n\r\n\tnormalize: function () {\r\n\r\n\t\tvar l = this.length();\r\n\r\n\t\tif ( l === 0 ) {\r\n\r\n\t\t\tthis._x = 0;\r\n\t\t\tthis._y = 0;\r\n\t\t\tthis._z = 0;\r\n\t\t\tthis._w = 1;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tl = 1 / l;\r\n\r\n\t\t\tthis._x = this._x * l;\r\n\t\t\tthis._y = this._y * l;\r\n\t\t\tthis._z = this._z * l;\r\n\t\t\tthis._w = this._w * l;\r\n\r\n\t\t}\r\n\r\n\t\tthis.onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiply: function ( q, p ) {\r\n\r\n\t\tif ( p !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );\r\n\t\t\treturn this.multiplyQuaternions( q, p );\r\n\r\n\t\t}\r\n\r\n\t\treturn this.multiplyQuaternions( this, q );\r\n\r\n\t},\r\n\r\n\tpremultiply: function ( q ) {\r\n\r\n\t\treturn this.multiplyQuaternions( q, this );\r\n\r\n\t},\r\n\r\n\tmultiplyQuaternions: function ( a, b ) {\r\n\r\n\t\t// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\r\n\r\n\t\tvar qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;\r\n\t\tvar qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;\r\n\r\n\t\tthis._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\r\n\t\tthis._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\r\n\t\tthis._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\r\n\t\tthis._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\r\n\r\n\t\tthis.onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tslerp: function ( qb, t ) {\r\n\r\n\t\tif ( t === 0 ) return this;\r\n\t\tif ( t === 1 ) return this.copy( qb );\r\n\r\n\t\tvar x = this._x, y = this._y, z = this._z, w = this._w;\r\n\r\n\t\t// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\r\n\r\n\t\tvar cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\r\n\r\n\t\tif ( cosHalfTheta < 0 ) {\r\n\r\n\t\t\tthis._w = - qb._w;\r\n\t\t\tthis._x = - qb._x;\r\n\t\t\tthis._y = - qb._y;\r\n\t\t\tthis._z = - qb._z;\r\n\r\n\t\t\tcosHalfTheta = - cosHalfTheta;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.copy( qb );\r\n\r\n\t\t}\r\n\r\n\t\tif ( cosHalfTheta >= 1.0 ) {\r\n\r\n\t\t\tthis._w = w;\r\n\t\t\tthis._x = x;\r\n\t\t\tthis._y = y;\r\n\t\t\tthis._z = z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t\tvar sinHalfTheta = Math.sqrt( 1.0 - cosHalfTheta * cosHalfTheta );\r\n\r\n\t\tif ( Math.abs( sinHalfTheta ) < 0.001 ) {\r\n\r\n\t\t\tthis._w = 0.5 * ( w + this._w );\r\n\t\t\tthis._x = 0.5 * ( x + this._x );\r\n\t\t\tthis._y = 0.5 * ( y + this._y );\r\n\t\t\tthis._z = 0.5 * ( z + this._z );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t\tvar halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );\r\n\t\tvar ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,\r\n\t\tratioB = Math.sin( t * halfTheta ) / sinHalfTheta;\r\n\r\n\t\tthis._w = ( w * ratioA + this._w * ratioB );\r\n\t\tthis._x = ( x * ratioA + this._x * ratioB );\r\n\t\tthis._y = ( y * ratioA + this._y * ratioB );\r\n\t\tthis._z = ( z * ratioA + this._z * ratioB );\r\n\r\n\t\tthis.onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tequals: function ( quaternion ) {\r\n\r\n\t\treturn ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );\r\n\r\n\t},\r\n\r\n\tfromArray: function ( array, offset ) {\r\n\r\n\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\tthis._x = array[ offset ];\r\n\t\tthis._y = array[ offset + 1 ];\r\n\t\tthis._z = array[ offset + 2 ];\r\n\t\tthis._w = array[ offset + 3 ];\r\n\r\n\t\tthis.onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\ttoArray: function ( array, offset ) {\r\n\r\n\t\tif ( array === undefined ) array = [];\r\n\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\tarray[ offset ] = this._x;\r\n\t\tarray[ offset + 1 ] = this._y;\r\n\t\tarray[ offset + 2 ] = this._z;\r\n\t\tarray[ offset + 3 ] = this._w;\r\n\r\n\t\treturn array;\r\n\r\n\t},\r\n\r\n\tonChange: function ( callback ) {\r\n\r\n\t\tthis.onChangeCallback = callback;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tonChangeCallback: function () {}\r\n\r\n};\r\n\r\nObject.assign( THREE.Quaternion, {\r\n\r\n\tslerp: function( qa, qb, qm, t ) {\r\n\r\n\t\treturn qm.copy( qa ).slerp( qb, t );\r\n\r\n\t},\r\n\r\n\tslerpFlat: function(\r\n\t\t\tdst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {\r\n\r\n\t\t// fuzz-free, array-based Quaternion SLERP operation\r\n\r\n\t\tvar x0 = src0[ srcOffset0 + 0 ],\r\n\t\t\ty0 = src0[ srcOffset0 + 1 ],\r\n\t\t\tz0 = src0[ srcOffset0 + 2 ],\r\n\t\t\tw0 = src0[ srcOffset0 + 3 ],\r\n\r\n\t\t\tx1 = src1[ srcOffset1 + 0 ],\r\n\t\t\ty1 = src1[ srcOffset1 + 1 ],\r\n\t\t\tz1 = src1[ srcOffset1 + 2 ],\r\n\t\t\tw1 = src1[ srcOffset1 + 3 ];\r\n\r\n\t\tif ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {\r\n\r\n\t\t\tvar s = 1 - t,\r\n\r\n\t\t\t\tcos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\r\n\r\n\t\t\t\tdir = ( cos >= 0 ? 1 : - 1 ),\r\n\t\t\t\tsqrSin = 1 - cos * cos;\r\n\r\n\t\t\t// Skip the Slerp for tiny steps to avoid numeric problems:\r\n\t\t\tif ( sqrSin > Number.EPSILON ) {\r\n\r\n\t\t\t\tvar sin = Math.sqrt( sqrSin ),\r\n\t\t\t\t\tlen = Math.atan2( sin, cos * dir );\r\n\r\n\t\t\t\ts = Math.sin( s * len ) / sin;\r\n\t\t\t\tt = Math.sin( t * len ) / sin;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar tDir = t * dir;\r\n\r\n\t\t\tx0 = x0 * s + x1 * tDir;\r\n\t\t\ty0 = y0 * s + y1 * tDir;\r\n\t\t\tz0 = z0 * s + z1 * tDir;\r\n\t\t\tw0 = w0 * s + w1 * tDir;\r\n\r\n\t\t\t// Normalize in case we just did a lerp:\r\n\t\t\tif ( s === 1 - t ) {\r\n\r\n\t\t\t\tvar f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );\r\n\r\n\t\t\t\tx0 *= f;\r\n\t\t\t\ty0 *= f;\r\n\t\t\t\tz0 *= f;\r\n\t\t\t\tw0 *= f;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tdst[ dstOffset ] = x0;\r\n\t\tdst[ dstOffset + 1 ] = y0;\r\n\t\tdst[ dstOffset + 2 ] = z0;\r\n\t\tdst[ dstOffset + 3 ] = w0;\r\n\r\n\t}\r\n\r\n} );\r\n\r\n// File:src/math/Vector2.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author philogb / http://blog.thejit.org/\r\n * @author egraether / http://egraether.com/\r\n * @author zz85 / http://www.lab4games.net/zz85/blog\r\n */\r\n\r\nTHREE.Vector2 = function ( x, y ) {\r\n\r\n\tthis.x = x || 0;\r\n\tthis.y = y || 0;\r\n\r\n};\r\n\r\nTHREE.Vector2.prototype = {\r\n\r\n\tconstructor: THREE.Vector2,\r\n\r\n\tget width() {\r\n\r\n\t\treturn this.x;\r\n\r\n\t},\r\n\r\n\tset width( value ) {\r\n\r\n\t\tthis.x = value;\r\n\r\n\t},\r\n\r\n\tget height() {\r\n\r\n\t\treturn this.y;\r\n\r\n\t},\r\n\r\n\tset height( value ) {\r\n\r\n\t\tthis.y = value;\r\n\r\n\t},\r\n\r\n\t//\r\n\r\n\tset: function ( x, y ) {\r\n\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetScalar: function ( scalar ) {\r\n\r\n\t\tthis.x = scalar;\r\n\t\tthis.y = scalar;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetX: function ( x ) {\r\n\r\n\t\tthis.x = x;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetY: function ( y ) {\r\n\r\n\t\tthis.y = y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetComponent: function ( index, value ) {\r\n\r\n\t\tswitch ( index ) {\r\n\r\n\t\t\tcase 0: this.x = value; break;\r\n\t\t\tcase 1: this.y = value; break;\r\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tgetComponent: function ( index ) {\r\n\r\n\t\tswitch ( index ) {\r\n\r\n\t\t\tcase 0: return this.x;\r\n\t\t\tcase 1: return this.y;\r\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor( this.x, this.y );\r\n\r\n\t},\r\n\r\n\tcopy: function ( v ) {\r\n\r\n\t\tthis.x = v.x;\r\n\t\tthis.y = v.y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tadd: function ( v, w ) {\r\n\r\n\t\tif ( w !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\r\n\t\t\treturn this.addVectors( v, w );\r\n\r\n\t\t}\r\n\r\n\t\tthis.x += v.x;\r\n\t\tthis.y += v.y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\taddScalar: function ( s ) {\r\n\r\n\t\tthis.x += s;\r\n\t\tthis.y += s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\taddVectors: function ( a, b ) {\r\n\r\n\t\tthis.x = a.x + b.x;\r\n\t\tthis.y = a.y + b.y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\taddScaledVector: function ( v, s ) {\r\n\r\n\t\tthis.x += v.x * s;\r\n\t\tthis.y += v.y * s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsub: function ( v, w ) {\r\n\r\n\t\tif ( w !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\r\n\t\t\treturn this.subVectors( v, w );\r\n\r\n\t\t}\r\n\r\n\t\tthis.x -= v.x;\r\n\t\tthis.y -= v.y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsubScalar: function ( s ) {\r\n\r\n\t\tthis.x -= s;\r\n\t\tthis.y -= s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsubVectors: function ( a, b ) {\r\n\r\n\t\tthis.x = a.x - b.x;\r\n\t\tthis.y = a.y - b.y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiply: function ( v ) {\r\n\r\n\t\tthis.x *= v.x;\r\n\t\tthis.y *= v.y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiplyScalar: function ( scalar ) {\r\n\r\n\t\tif ( isFinite( scalar ) ) {\r\n\r\n\t\t\tthis.x *= scalar;\r\n\t\t\tthis.y *= scalar;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.x = 0;\r\n\t\t\tthis.y = 0;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdivide: function ( v ) {\r\n\r\n\t\tthis.x /= v.x;\r\n\t\tthis.y /= v.y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdivideScalar: function ( scalar ) {\r\n\r\n\t\treturn this.multiplyScalar( 1 / scalar );\r\n\r\n\t},\r\n\r\n\tmin: function ( v ) {\r\n\r\n\t\tthis.x = Math.min( this.x, v.x );\r\n\t\tthis.y = Math.min( this.y, v.y );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmax: function ( v ) {\r\n\r\n\t\tthis.x = Math.max( this.x, v.x );\r\n\t\tthis.y = Math.max( this.y, v.y );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclamp: function ( min, max ) {\r\n\r\n\t\t// This function assumes min < max, if this assumption isn't true it will not operate correctly\r\n\r\n\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\r\n\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclampScalar: function () {\r\n\r\n\t\tvar min, max;\r\n\r\n\t\treturn function clampScalar( minVal, maxVal ) {\r\n\r\n\t\t\tif ( min === undefined ) {\r\n\r\n\t\t\t\tmin = new THREE.Vector2();\r\n\t\t\t\tmax = new THREE.Vector2();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tmin.set( minVal, minVal );\r\n\t\t\tmax.set( maxVal, maxVal );\r\n\r\n\t\t\treturn this.clamp( min, max );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tclampLength: function ( min, max ) {\r\n\r\n\t\tvar length = this.length();\r\n\r\n\t\treturn this.multiplyScalar( Math.max( min, Math.min( max, length ) ) / length );\r\n\r\n\t},\r\n\r\n\tfloor: function () {\r\n\r\n\t\tthis.x = Math.floor( this.x );\r\n\t\tthis.y = Math.floor( this.y );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tceil: function () {\r\n\r\n\t\tthis.x = Math.ceil( this.x );\r\n\t\tthis.y = Math.ceil( this.y );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tround: function () {\r\n\r\n\t\tthis.x = Math.round( this.x );\r\n\t\tthis.y = Math.round( this.y );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\troundToZero: function () {\r\n\r\n\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\r\n\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tnegate: function () {\r\n\r\n\t\tthis.x = - this.x;\r\n\t\tthis.y = - this.y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdot: function ( v ) {\r\n\r\n\t\treturn this.x * v.x + this.y * v.y;\r\n\r\n\t},\r\n\r\n\tlengthSq: function () {\r\n\r\n\t\treturn this.x * this.x + this.y * this.y;\r\n\r\n\t},\r\n\r\n\tlength: function () {\r\n\r\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y );\r\n\r\n\t},\r\n\r\n\tlengthManhattan: function() {\r\n\r\n\t\treturn Math.abs( this.x ) + Math.abs( this.y );\r\n\r\n\t},\r\n\r\n\tnormalize: function () {\r\n\r\n\t\treturn this.divideScalar( this.length() );\r\n\r\n\t},\r\n\r\n\tangle: function () {\r\n\r\n\t\t// computes the angle in radians with respect to the positive x-axis\r\n\r\n\t\tvar angle = Math.atan2( this.y, this.x );\r\n\r\n\t\tif ( angle < 0 ) angle += 2 * Math.PI;\r\n\r\n\t\treturn angle;\r\n\r\n\t},\r\n\r\n\tdistanceTo: function ( v ) {\r\n\r\n\t\treturn Math.sqrt( this.distanceToSquared( v ) );\r\n\r\n\t},\r\n\r\n\tdistanceToSquared: function ( v ) {\r\n\r\n\t\tvar dx = this.x - v.x, dy = this.y - v.y;\r\n\t\treturn dx * dx + dy * dy;\r\n\r\n\t},\r\n\r\n\tsetLength: function ( length ) {\r\n\r\n\t\treturn this.multiplyScalar( length / this.length() );\r\n\r\n\t},\r\n\r\n\tlerp: function ( v, alpha ) {\r\n\r\n\t\tthis.x += ( v.x - this.x ) * alpha;\r\n\t\tthis.y += ( v.y - this.y ) * alpha;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tlerpVectors: function ( v1, v2, alpha ) {\r\n\r\n\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\r\n\r\n\t},\r\n\r\n\tequals: function ( v ) {\r\n\r\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) );\r\n\r\n\t},\r\n\r\n\tfromArray: function ( array, offset ) {\r\n\r\n\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\tthis.x = array[ offset ];\r\n\t\tthis.y = array[ offset + 1 ];\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\ttoArray: function ( array, offset ) {\r\n\r\n\t\tif ( array === undefined ) array = [];\r\n\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\tarray[ offset ] = this.x;\r\n\t\tarray[ offset + 1 ] = this.y;\r\n\r\n\t\treturn array;\r\n\r\n\t},\r\n\r\n\tfromAttribute: function ( attribute, index, offset ) {\r\n\r\n\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\tindex = index * attribute.itemSize + offset;\r\n\r\n\t\tthis.x = attribute.array[ index ];\r\n\t\tthis.y = attribute.array[ index + 1 ];\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\trotateAround: function ( center, angle ) {\r\n\r\n\t\tvar c = Math.cos( angle ), s = Math.sin( angle );\r\n\r\n\t\tvar x = this.x - center.x;\r\n\t\tvar y = this.y - center.y;\r\n\r\n\t\tthis.x = x * c - y * s + center.x;\r\n\t\tthis.y = x * s + y * c + center.y;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/math/Vector3.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author *kile / http://kile.stravaganza.org/\r\n * @author philogb / http://blog.thejit.org/\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author egraether / http://egraether.com/\r\n * @author WestLangley / http://github.com/WestLangley\r\n */\r\n\r\nTHREE.Vector3 = function ( x, y, z ) {\r\n\r\n\tthis.x = x || 0;\r\n\tthis.y = y || 0;\r\n\tthis.z = z || 0;\r\n\r\n};\r\n\r\nTHREE.Vector3.prototype = {\r\n\r\n\tconstructor: THREE.Vector3,\r\n\r\n\tset: function ( x, y, z ) {\r\n\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\t\tthis.z = z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetScalar: function ( scalar ) {\r\n\r\n\t\tthis.x = scalar;\r\n\t\tthis.y = scalar;\r\n\t\tthis.z = scalar;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetX: function ( x ) {\r\n\r\n\t\tthis.x = x;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetY: function ( y ) {\r\n\r\n\t\tthis.y = y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetZ: function ( z ) {\r\n\r\n\t\tthis.z = z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetComponent: function ( index, value ) {\r\n\r\n\t\tswitch ( index ) {\r\n\r\n\t\t\tcase 0: this.x = value; break;\r\n\t\t\tcase 1: this.y = value; break;\r\n\t\t\tcase 2: this.z = value; break;\r\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tgetComponent: function ( index ) {\r\n\r\n\t\tswitch ( index ) {\r\n\r\n\t\t\tcase 0: return this.x;\r\n\t\t\tcase 1: return this.y;\r\n\t\t\tcase 2: return this.z;\r\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor( this.x, this.y, this.z );\r\n\r\n\t},\r\n\r\n\tcopy: function ( v ) {\r\n\r\n\t\tthis.x = v.x;\r\n\t\tthis.y = v.y;\r\n\t\tthis.z = v.z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tadd: function ( v, w ) {\r\n\r\n\t\tif ( w !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\r\n\t\t\treturn this.addVectors( v, w );\r\n\r\n\t\t}\r\n\r\n\t\tthis.x += v.x;\r\n\t\tthis.y += v.y;\r\n\t\tthis.z += v.z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\taddScalar: function ( s ) {\r\n\r\n\t\tthis.x += s;\r\n\t\tthis.y += s;\r\n\t\tthis.z += s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\taddVectors: function ( a, b ) {\r\n\r\n\t\tthis.x = a.x + b.x;\r\n\t\tthis.y = a.y + b.y;\r\n\t\tthis.z = a.z + b.z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\taddScaledVector: function ( v, s ) {\r\n\r\n\t\tthis.x += v.x * s;\r\n\t\tthis.y += v.y * s;\r\n\t\tthis.z += v.z * s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsub: function ( v, w ) {\r\n\r\n\t\tif ( w !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\r\n\t\t\treturn this.subVectors( v, w );\r\n\r\n\t\t}\r\n\r\n\t\tthis.x -= v.x;\r\n\t\tthis.y -= v.y;\r\n\t\tthis.z -= v.z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsubScalar: function ( s ) {\r\n\r\n\t\tthis.x -= s;\r\n\t\tthis.y -= s;\r\n\t\tthis.z -= s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsubVectors: function ( a, b ) {\r\n\r\n\t\tthis.x = a.x - b.x;\r\n\t\tthis.y = a.y - b.y;\r\n\t\tthis.z = a.z - b.z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiply: function ( v, w ) {\r\n\r\n\t\tif ( w !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );\r\n\t\t\treturn this.multiplyVectors( v, w );\r\n\r\n\t\t}\r\n\r\n\t\tthis.x *= v.x;\r\n\t\tthis.y *= v.y;\r\n\t\tthis.z *= v.z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiplyScalar: function ( scalar ) {\r\n\r\n\t\tif ( isFinite( scalar ) ) {\r\n\r\n\t\t\tthis.x *= scalar;\r\n\t\t\tthis.y *= scalar;\r\n\t\t\tthis.z *= scalar;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.x = 0;\r\n\t\t\tthis.y = 0;\r\n\t\t\tthis.z = 0;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiplyVectors: function ( a, b ) {\r\n\r\n\t\tthis.x = a.x * b.x;\r\n\t\tthis.y = a.y * b.y;\r\n\t\tthis.z = a.z * b.z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tapplyEuler: function () {\r\n\r\n\t\tvar quaternion;\r\n\r\n\t\treturn function applyEuler( euler ) {\r\n\r\n\t\t\tif ( euler instanceof THREE.Euler === false ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( quaternion === undefined ) quaternion = new THREE.Quaternion();\r\n\r\n\t\t\treturn this.applyQuaternion( quaternion.setFromEuler( euler ) );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tapplyAxisAngle: function () {\r\n\r\n\t\tvar quaternion;\r\n\r\n\t\treturn function applyAxisAngle( axis, angle ) {\r\n\r\n\t\t\tif ( quaternion === undefined ) quaternion = new THREE.Quaternion();\r\n\r\n\t\t\treturn this.applyQuaternion( quaternion.setFromAxisAngle( axis, angle ) );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tapplyMatrix3: function ( m ) {\r\n\r\n\t\tvar x = this.x, y = this.y, z = this.z;\r\n\t\tvar e = m.elements;\r\n\r\n\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;\r\n\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;\r\n\t\tthis.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tapplyMatrix4: function ( m ) {\r\n\r\n\t\t// input: THREE.Matrix4 affine matrix\r\n\r\n\t\tvar x = this.x, y = this.y, z = this.z;\r\n\t\tvar e = m.elements;\r\n\r\n\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z + e[ 12 ];\r\n\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z + e[ 13 ];\r\n\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ];\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tapplyProjection: function ( m ) {\r\n\r\n\t\t// input: THREE.Matrix4 projection matrix\r\n\r\n\t\tvar x = this.x, y = this.y, z = this.z;\r\n\t\tvar e = m.elements;\r\n\t\tvar d = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] ); // perspective divide\r\n\r\n\t\tthis.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z + e[ 12 ] ) * d;\r\n\t\tthis.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z + e[ 13 ] ) * d;\r\n\t\tthis.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * d;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tapplyQuaternion: function ( q ) {\r\n\r\n\t\tvar x = this.x, y = this.y, z = this.z;\r\n\t\tvar qx = q.x, qy = q.y, qz = q.z, qw = q.w;\r\n\r\n\t\t// calculate quat * vector\r\n\r\n\t\tvar ix =  qw * x + qy * z - qz * y;\r\n\t\tvar iy =  qw * y + qz * x - qx * z;\r\n\t\tvar iz =  qw * z + qx * y - qy * x;\r\n\t\tvar iw = - qx * x - qy * y - qz * z;\r\n\r\n\t\t// calculate result * inverse quat\r\n\r\n\t\tthis.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;\r\n\t\tthis.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;\r\n\t\tthis.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tproject: function () {\r\n\r\n\t\tvar matrix;\r\n\r\n\t\treturn function project( camera ) {\r\n\r\n\t\t\tif ( matrix === undefined ) matrix = new THREE.Matrix4();\r\n\r\n\t\t\tmatrix.multiplyMatrices( camera.projectionMatrix, matrix.getInverse( camera.matrixWorld ) );\r\n\t\t\treturn this.applyProjection( matrix );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tunproject: function () {\r\n\r\n\t\tvar matrix;\r\n\r\n\t\treturn function unproject( camera ) {\r\n\r\n\t\t\tif ( matrix === undefined ) matrix = new THREE.Matrix4();\r\n\r\n\t\t\tmatrix.multiplyMatrices( camera.matrixWorld, matrix.getInverse( camera.projectionMatrix ) );\r\n\t\t\treturn this.applyProjection( matrix );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\ttransformDirection: function ( m ) {\r\n\r\n\t\t// input: THREE.Matrix4 affine matrix\r\n\t\t// vector interpreted as a direction\r\n\r\n\t\tvar x = this.x, y = this.y, z = this.z;\r\n\t\tvar e = m.elements;\r\n\r\n\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z;\r\n\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z;\r\n\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;\r\n\r\n\t\treturn this.normalize();\r\n\r\n\t},\r\n\r\n\tdivide: function ( v ) {\r\n\r\n\t\tthis.x /= v.x;\r\n\t\tthis.y /= v.y;\r\n\t\tthis.z /= v.z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdivideScalar: function ( scalar ) {\r\n\r\n\t\treturn this.multiplyScalar( 1 / scalar );\r\n\r\n\t},\r\n\r\n\tmin: function ( v ) {\r\n\r\n\t\tthis.x = Math.min( this.x, v.x );\r\n\t\tthis.y = Math.min( this.y, v.y );\r\n\t\tthis.z = Math.min( this.z, v.z );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmax: function ( v ) {\r\n\r\n\t\tthis.x = Math.max( this.x, v.x );\r\n\t\tthis.y = Math.max( this.y, v.y );\r\n\t\tthis.z = Math.max( this.z, v.z );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclamp: function ( min, max ) {\r\n\r\n\t\t// This function assumes min < max, if this assumption isn't true it will not operate correctly\r\n\r\n\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\r\n\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\r\n\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclampScalar: function () {\r\n\r\n\t\tvar min, max;\r\n\r\n\t\treturn function clampScalar( minVal, maxVal ) {\r\n\r\n\t\t\tif ( min === undefined ) {\r\n\r\n\t\t\t\tmin = new THREE.Vector3();\r\n\t\t\t\tmax = new THREE.Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tmin.set( minVal, minVal, minVal );\r\n\t\t\tmax.set( maxVal, maxVal, maxVal );\r\n\r\n\t\t\treturn this.clamp( min, max );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tclampLength: function ( min, max ) {\r\n\r\n\t\tvar length = this.length();\r\n\r\n\t\treturn this.multiplyScalar( Math.max( min, Math.min( max, length ) ) / length );\r\n\r\n\t},\r\n\r\n\tfloor: function () {\r\n\r\n\t\tthis.x = Math.floor( this.x );\r\n\t\tthis.y = Math.floor( this.y );\r\n\t\tthis.z = Math.floor( this.z );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tceil: function () {\r\n\r\n\t\tthis.x = Math.ceil( this.x );\r\n\t\tthis.y = Math.ceil( this.y );\r\n\t\tthis.z = Math.ceil( this.z );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tround: function () {\r\n\r\n\t\tthis.x = Math.round( this.x );\r\n\t\tthis.y = Math.round( this.y );\r\n\t\tthis.z = Math.round( this.z );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\troundToZero: function () {\r\n\r\n\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\r\n\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\r\n\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tnegate: function () {\r\n\r\n\t\tthis.x = - this.x;\r\n\t\tthis.y = - this.y;\r\n\t\tthis.z = - this.z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdot: function ( v ) {\r\n\r\n\t\treturn this.x * v.x + this.y * v.y + this.z * v.z;\r\n\r\n\t},\r\n\r\n\tlengthSq: function () {\r\n\r\n\t\treturn this.x * this.x + this.y * this.y + this.z * this.z;\r\n\r\n\t},\r\n\r\n\tlength: function () {\r\n\r\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );\r\n\r\n\t},\r\n\r\n\tlengthManhattan: function () {\r\n\r\n\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );\r\n\r\n\t},\r\n\r\n\tnormalize: function () {\r\n\r\n\t\treturn this.divideScalar( this.length() );\r\n\r\n\t},\r\n\r\n\tsetLength: function ( length ) {\r\n\r\n\t\treturn this.multiplyScalar( length / this.length() );\r\n\r\n\t},\r\n\r\n\tlerp: function ( v, alpha ) {\r\n\r\n\t\tthis.x += ( v.x - this.x ) * alpha;\r\n\t\tthis.y += ( v.y - this.y ) * alpha;\r\n\t\tthis.z += ( v.z - this.z ) * alpha;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tlerpVectors: function ( v1, v2, alpha ) {\r\n\r\n\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\r\n\r\n\t},\r\n\r\n\tcross: function ( v, w ) {\r\n\r\n\t\tif ( w !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );\r\n\t\t\treturn this.crossVectors( v, w );\r\n\r\n\t\t}\r\n\r\n\t\tvar x = this.x, y = this.y, z = this.z;\r\n\r\n\t\tthis.x = y * v.z - z * v.y;\r\n\t\tthis.y = z * v.x - x * v.z;\r\n\t\tthis.z = x * v.y - y * v.x;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcrossVectors: function ( a, b ) {\r\n\r\n\t\tvar ax = a.x, ay = a.y, az = a.z;\r\n\t\tvar bx = b.x, by = b.y, bz = b.z;\r\n\r\n\t\tthis.x = ay * bz - az * by;\r\n\t\tthis.y = az * bx - ax * bz;\r\n\t\tthis.z = ax * by - ay * bx;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tprojectOnVector: function () {\r\n\r\n\t\tvar v1, dot;\r\n\r\n\t\treturn function projectOnVector( vector ) {\r\n\r\n\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\r\n\r\n\t\t\tv1.copy( vector ).normalize();\r\n\r\n\t\t\tdot = this.dot( v1 );\r\n\r\n\t\t\treturn this.copy( v1 ).multiplyScalar( dot );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tprojectOnPlane: function () {\r\n\r\n\t\tvar v1;\r\n\r\n\t\treturn function projectOnPlane( planeNormal ) {\r\n\r\n\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\r\n\r\n\t\t\tv1.copy( this ).projectOnVector( planeNormal );\r\n\r\n\t\t\treturn this.sub( v1 );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\treflect: function () {\r\n\r\n\t\t// reflect incident vector off plane orthogonal to normal\r\n\t\t// normal is assumed to have unit length\r\n\r\n\t\tvar v1;\r\n\r\n\t\treturn function reflect( normal ) {\r\n\r\n\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\r\n\r\n\t\t\treturn this.sub( v1.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tangleTo: function ( v ) {\r\n\r\n\t\tvar theta = this.dot( v ) / ( Math.sqrt( this.lengthSq() * v.lengthSq() ) );\r\n\r\n\t\t// clamp, to handle numerical problems\r\n\r\n\t\treturn Math.acos( THREE.Math.clamp( theta, - 1, 1 ) );\r\n\r\n\t},\r\n\r\n\tdistanceTo: function ( v ) {\r\n\r\n\t\treturn Math.sqrt( this.distanceToSquared( v ) );\r\n\r\n\t},\r\n\r\n\tdistanceToSquared: function ( v ) {\r\n\r\n\t\tvar dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;\r\n\r\n\t\treturn dx * dx + dy * dy + dz * dz;\r\n\r\n\t},\r\n\r\n\tsetFromSpherical: function( s ) {\r\n\r\n\t\tvar sinPhiRadius = Math.sin( s.phi ) * s.radius;\r\n\r\n\t\tthis.x = sinPhiRadius * Math.sin( s.theta );\r\n\t\tthis.y = Math.cos( s.phi ) * s.radius;\r\n\t\tthis.z = sinPhiRadius * Math.cos( s.theta );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromMatrixPosition: function ( m ) {\r\n\r\n\t\treturn this.setFromMatrixColumn( m, 3 );\r\n\r\n\t},\r\n\r\n\tsetFromMatrixScale: function ( m ) {\r\n\r\n\t\tvar sx = this.setFromMatrixColumn( m, 0 ).length();\r\n\t\tvar sy = this.setFromMatrixColumn( m, 1 ).length();\r\n\t\tvar sz = this.setFromMatrixColumn( m, 2 ).length();\r\n\r\n\t\tthis.x = sx;\r\n\t\tthis.y = sy;\r\n\t\tthis.z = sz;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromMatrixColumn: function ( m, index ) {\r\n\r\n\t\tif ( typeof m === 'number' ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Vector3: setFromMatrixColumn now expects ( matrix, index ).' );\r\n\t\t\tvar temp = m\r\n\t\t\tm = index;\r\n\t\t\tindex = temp;\r\n\r\n\t\t}\r\n\r\n\t\treturn this.fromArray( m.elements, index * 4 );\r\n\r\n\t},\r\n\r\n\tequals: function ( v ) {\r\n\r\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );\r\n\r\n\t},\r\n\r\n\tfromArray: function ( array, offset ) {\r\n\r\n\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\tthis.x = array[ offset ];\r\n\t\tthis.y = array[ offset + 1 ];\r\n\t\tthis.z = array[ offset + 2 ];\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\ttoArray: function ( array, offset ) {\r\n\r\n\t\tif ( array === undefined ) array = [];\r\n\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\tarray[ offset ] = this.x;\r\n\t\tarray[ offset + 1 ] = this.y;\r\n\t\tarray[ offset + 2 ] = this.z;\r\n\r\n\t\treturn array;\r\n\r\n\t},\r\n\r\n\tfromAttribute: function ( attribute, index, offset ) {\r\n\r\n\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\tindex = index * attribute.itemSize + offset;\r\n\r\n\t\tthis.x = attribute.array[ index ];\r\n\t\tthis.y = attribute.array[ index + 1 ];\r\n\t\tthis.z = attribute.array[ index + 2 ];\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/math/Vector4.js\r\n\r\n/**\r\n * @author supereggbert / http://www.paulbrunt.co.uk/\r\n * @author philogb / http://blog.thejit.org/\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author egraether / http://egraether.com/\r\n * @author WestLangley / http://github.com/WestLangley\r\n */\r\n\r\nTHREE.Vector4 = function ( x, y, z, w ) {\r\n\r\n\tthis.x = x || 0;\r\n\tthis.y = y || 0;\r\n\tthis.z = z || 0;\r\n\tthis.w = ( w !== undefined ) ? w : 1;\r\n\r\n};\r\n\r\nTHREE.Vector4.prototype = {\r\n\r\n\tconstructor: THREE.Vector4,\r\n\r\n\tset: function ( x, y, z, w ) {\r\n\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\t\tthis.z = z;\r\n\t\tthis.w = w;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetScalar: function ( scalar ) {\r\n\r\n\t\tthis.x = scalar;\r\n\t\tthis.y = scalar;\r\n\t\tthis.z = scalar;\r\n\t\tthis.w = scalar;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetX: function ( x ) {\r\n\r\n\t\tthis.x = x;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetY: function ( y ) {\r\n\r\n\t\tthis.y = y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetZ: function ( z ) {\r\n\r\n\t\tthis.z = z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetW: function ( w ) {\r\n\r\n\t\tthis.w = w;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetComponent: function ( index, value ) {\r\n\r\n\t\tswitch ( index ) {\r\n\r\n\t\t\tcase 0: this.x = value; break;\r\n\t\t\tcase 1: this.y = value; break;\r\n\t\t\tcase 2: this.z = value; break;\r\n\t\t\tcase 3: this.w = value; break;\r\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tgetComponent: function ( index ) {\r\n\r\n\t\tswitch ( index ) {\r\n\r\n\t\t\tcase 0: return this.x;\r\n\t\t\tcase 1: return this.y;\r\n\t\t\tcase 2: return this.z;\r\n\t\t\tcase 3: return this.w;\r\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor( this.x, this.y, this.z, this.w );\r\n\r\n\t},\r\n\r\n\tcopy: function ( v ) {\r\n\r\n\t\tthis.x = v.x;\r\n\t\tthis.y = v.y;\r\n\t\tthis.z = v.z;\r\n\t\tthis.w = ( v.w !== undefined ) ? v.w : 1;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tadd: function ( v, w ) {\r\n\r\n\t\tif ( w !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );\r\n\t\t\treturn this.addVectors( v, w );\r\n\r\n\t\t}\r\n\r\n\t\tthis.x += v.x;\r\n\t\tthis.y += v.y;\r\n\t\tthis.z += v.z;\r\n\t\tthis.w += v.w;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\taddScalar: function ( s ) {\r\n\r\n\t\tthis.x += s;\r\n\t\tthis.y += s;\r\n\t\tthis.z += s;\r\n\t\tthis.w += s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\taddVectors: function ( a, b ) {\r\n\r\n\t\tthis.x = a.x + b.x;\r\n\t\tthis.y = a.y + b.y;\r\n\t\tthis.z = a.z + b.z;\r\n\t\tthis.w = a.w + b.w;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\taddScaledVector: function ( v, s ) {\r\n\r\n\t\tthis.x += v.x * s;\r\n\t\tthis.y += v.y * s;\r\n\t\tthis.z += v.z * s;\r\n\t\tthis.w += v.w * s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsub: function ( v, w ) {\r\n\r\n\t\tif ( w !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );\r\n\t\t\treturn this.subVectors( v, w );\r\n\r\n\t\t}\r\n\r\n\t\tthis.x -= v.x;\r\n\t\tthis.y -= v.y;\r\n\t\tthis.z -= v.z;\r\n\t\tthis.w -= v.w;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsubScalar: function ( s ) {\r\n\r\n\t\tthis.x -= s;\r\n\t\tthis.y -= s;\r\n\t\tthis.z -= s;\r\n\t\tthis.w -= s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsubVectors: function ( a, b ) {\r\n\r\n\t\tthis.x = a.x - b.x;\r\n\t\tthis.y = a.y - b.y;\r\n\t\tthis.z = a.z - b.z;\r\n\t\tthis.w = a.w - b.w;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiplyScalar: function ( scalar ) {\r\n\r\n\t\tif ( isFinite( scalar ) ) {\r\n\r\n\t\t\tthis.x *= scalar;\r\n\t\t\tthis.y *= scalar;\r\n\t\t\tthis.z *= scalar;\r\n\t\t\tthis.w *= scalar;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.x = 0;\r\n\t\t\tthis.y = 0;\r\n\t\t\tthis.z = 0;\r\n\t\t\tthis.w = 0;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tapplyMatrix4: function ( m ) {\r\n\r\n\t\tvar x = this.x, y = this.y, z = this.z, w = this.w;\r\n\t\tvar e = m.elements;\r\n\r\n\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;\r\n\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;\r\n\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;\r\n\t\tthis.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdivideScalar: function ( scalar ) {\r\n\r\n\t\treturn this.multiplyScalar( 1 / scalar );\r\n\r\n\t},\r\n\r\n\tsetAxisAngleFromQuaternion: function ( q ) {\r\n\r\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\r\n\r\n\t\t// q is assumed to be normalized\r\n\r\n\t\tthis.w = 2 * Math.acos( q.w );\r\n\r\n\t\tvar s = Math.sqrt( 1 - q.w * q.w );\r\n\r\n\t\tif ( s < 0.0001 ) {\r\n\r\n\t\t\t this.x = 1;\r\n\t\t\t this.y = 0;\r\n\t\t\t this.z = 0;\r\n\r\n\t\t} else {\r\n\r\n\t\t\t this.x = q.x / s;\r\n\t\t\t this.y = q.y / s;\r\n\t\t\t this.z = q.z / s;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetAxisAngleFromRotationMatrix: function ( m ) {\r\n\r\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\r\n\r\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\r\n\r\n\t\tvar angle, x, y, z,\t\t// variables for result\r\n\t\t\tepsilon = 0.01,\t\t// margin to allow for rounding errors\r\n\t\t\tepsilon2 = 0.1,\t\t// margin to distinguish between 0 and 180 degrees\r\n\r\n\t\t\tte = m.elements,\r\n\r\n\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\r\n\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\r\n\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\r\n\r\n\t\tif ( ( Math.abs( m12 - m21 ) < epsilon ) &&\r\n\t\t     ( Math.abs( m13 - m31 ) < epsilon ) &&\r\n\t\t     ( Math.abs( m23 - m32 ) < epsilon ) ) {\r\n\r\n\t\t\t// singularity found\r\n\t\t\t// first check for identity matrix which must have +1 for all terms\r\n\t\t\t// in leading diagonal and zero in other terms\r\n\r\n\t\t\tif ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&\r\n\t\t\t     ( Math.abs( m13 + m31 ) < epsilon2 ) &&\r\n\t\t\t     ( Math.abs( m23 + m32 ) < epsilon2 ) &&\r\n\t\t\t     ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {\r\n\r\n\t\t\t\t// this singularity is identity matrix so angle = 0\r\n\r\n\t\t\t\tthis.set( 1, 0, 0, 0 );\r\n\r\n\t\t\t\treturn this; // zero angle, arbitrary axis\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// otherwise this singularity is angle = 180\r\n\r\n\t\t\tangle = Math.PI;\r\n\r\n\t\t\tvar xx = ( m11 + 1 ) / 2;\r\n\t\t\tvar yy = ( m22 + 1 ) / 2;\r\n\t\t\tvar zz = ( m33 + 1 ) / 2;\r\n\t\t\tvar xy = ( m12 + m21 ) / 4;\r\n\t\t\tvar xz = ( m13 + m31 ) / 4;\r\n\t\t\tvar yz = ( m23 + m32 ) / 4;\r\n\r\n\t\t\tif ( ( xx > yy ) && ( xx > zz ) ) {\r\n\r\n\t\t\t\t// m11 is the largest diagonal term\r\n\r\n\t\t\t\tif ( xx < epsilon ) {\r\n\r\n\t\t\t\t\tx = 0;\r\n\t\t\t\t\ty = 0.707106781;\r\n\t\t\t\t\tz = 0.707106781;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tx = Math.sqrt( xx );\r\n\t\t\t\t\ty = xy / x;\r\n\t\t\t\t\tz = xz / x;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( yy > zz ) {\r\n\r\n\t\t\t\t// m22 is the largest diagonal term\r\n\r\n\t\t\t\tif ( yy < epsilon ) {\r\n\r\n\t\t\t\t\tx = 0.707106781;\r\n\t\t\t\t\ty = 0;\r\n\t\t\t\t\tz = 0.707106781;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\ty = Math.sqrt( yy );\r\n\t\t\t\t\tx = xy / y;\r\n\t\t\t\t\tz = yz / y;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// m33 is the largest diagonal term so base result on this\r\n\r\n\t\t\t\tif ( zz < epsilon ) {\r\n\r\n\t\t\t\t\tx = 0.707106781;\r\n\t\t\t\t\ty = 0.707106781;\r\n\t\t\t\t\tz = 0;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tz = Math.sqrt( zz );\r\n\t\t\t\t\tx = xz / z;\r\n\t\t\t\t\ty = yz / z;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.set( x, y, z, angle );\r\n\r\n\t\t\treturn this; // return 180 deg rotation\r\n\r\n\t\t}\r\n\r\n\t\t// as we have reached here there are no singularities so we can handle normally\r\n\r\n\t\tvar s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +\r\n\t\t                   ( m13 - m31 ) * ( m13 - m31 ) +\r\n\t\t                   ( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize\r\n\r\n\t\tif ( Math.abs( s ) < 0.001 ) s = 1;\r\n\r\n\t\t// prevent divide by zero, should not happen if matrix is orthogonal and should be\r\n\t\t// caught by singularity test above, but I've left it in just in case\r\n\r\n\t\tthis.x = ( m32 - m23 ) / s;\r\n\t\tthis.y = ( m13 - m31 ) / s;\r\n\t\tthis.z = ( m21 - m12 ) / s;\r\n\t\tthis.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmin: function ( v ) {\r\n\r\n\t\tthis.x = Math.min( this.x, v.x );\r\n\t\tthis.y = Math.min( this.y, v.y );\r\n\t\tthis.z = Math.min( this.z, v.z );\r\n\t\tthis.w = Math.min( this.w, v.w );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmax: function ( v ) {\r\n\r\n\t\tthis.x = Math.max( this.x, v.x );\r\n\t\tthis.y = Math.max( this.y, v.y );\r\n\t\tthis.z = Math.max( this.z, v.z );\r\n\t\tthis.w = Math.max( this.w, v.w );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclamp: function ( min, max ) {\r\n\r\n\t\t// This function assumes min < max, if this assumption isn't true it will not operate correctly\r\n\r\n\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\r\n\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\r\n\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\r\n\t\tthis.w = Math.max( min.w, Math.min( max.w, this.w ) );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclampScalar: function () {\r\n\r\n\t\tvar min, max;\r\n\r\n\t\treturn function clampScalar( minVal, maxVal ) {\r\n\r\n\t\t\tif ( min === undefined ) {\r\n\r\n\t\t\t\tmin = new THREE.Vector4();\r\n\t\t\t\tmax = new THREE.Vector4();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tmin.set( minVal, minVal, minVal, minVal );\r\n\t\t\tmax.set( maxVal, maxVal, maxVal, maxVal );\r\n\r\n\t\t\treturn this.clamp( min, max );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tfloor: function () {\r\n\r\n\t\tthis.x = Math.floor( this.x );\r\n\t\tthis.y = Math.floor( this.y );\r\n\t\tthis.z = Math.floor( this.z );\r\n\t\tthis.w = Math.floor( this.w );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tceil: function () {\r\n\r\n\t\tthis.x = Math.ceil( this.x );\r\n\t\tthis.y = Math.ceil( this.y );\r\n\t\tthis.z = Math.ceil( this.z );\r\n\t\tthis.w = Math.ceil( this.w );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tround: function () {\r\n\r\n\t\tthis.x = Math.round( this.x );\r\n\t\tthis.y = Math.round( this.y );\r\n\t\tthis.z = Math.round( this.z );\r\n\t\tthis.w = Math.round( this.w );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\troundToZero: function () {\r\n\r\n\t\tthis.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );\r\n\t\tthis.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );\r\n\t\tthis.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );\r\n\t\tthis.w = ( this.w < 0 ) ? Math.ceil( this.w ) : Math.floor( this.w );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tnegate: function () {\r\n\r\n\t\tthis.x = - this.x;\r\n\t\tthis.y = - this.y;\r\n\t\tthis.z = - this.z;\r\n\t\tthis.w = - this.w;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdot: function ( v ) {\r\n\r\n\t\treturn this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\r\n\r\n\t},\r\n\r\n\tlengthSq: function () {\r\n\r\n\t\treturn this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\r\n\r\n\t},\r\n\r\n\tlength: function () {\r\n\r\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );\r\n\r\n\t},\r\n\r\n\tlengthManhattan: function () {\r\n\r\n\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );\r\n\r\n\t},\r\n\r\n\tnormalize: function () {\r\n\r\n\t\treturn this.divideScalar( this.length() );\r\n\r\n\t},\r\n\r\n\tsetLength: function ( length ) {\r\n\r\n\t\treturn this.multiplyScalar( length / this.length() );\r\n\r\n\t},\r\n\r\n\tlerp: function ( v, alpha ) {\r\n\r\n\t\tthis.x += ( v.x - this.x ) * alpha;\r\n\t\tthis.y += ( v.y - this.y ) * alpha;\r\n\t\tthis.z += ( v.z - this.z ) * alpha;\r\n\t\tthis.w += ( v.w - this.w ) * alpha;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tlerpVectors: function ( v1, v2, alpha ) {\r\n\r\n\t\treturn this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );\r\n\r\n\t},\r\n\r\n\tequals: function ( v ) {\r\n\r\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );\r\n\r\n\t},\r\n\r\n\tfromArray: function ( array, offset ) {\r\n\r\n\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\tthis.x = array[ offset ];\r\n\t\tthis.y = array[ offset + 1 ];\r\n\t\tthis.z = array[ offset + 2 ];\r\n\t\tthis.w = array[ offset + 3 ];\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\ttoArray: function ( array, offset ) {\r\n\r\n\t\tif ( array === undefined ) array = [];\r\n\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\tarray[ offset ] = this.x;\r\n\t\tarray[ offset + 1 ] = this.y;\r\n\t\tarray[ offset + 2 ] = this.z;\r\n\t\tarray[ offset + 3 ] = this.w;\r\n\r\n\t\treturn array;\r\n\r\n\t},\r\n\r\n\tfromAttribute: function ( attribute, index, offset ) {\r\n\r\n\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\tindex = index * attribute.itemSize + offset;\r\n\r\n\t\tthis.x = attribute.array[ index ];\r\n\t\tthis.y = attribute.array[ index + 1 ];\r\n\t\tthis.z = attribute.array[ index + 2 ];\r\n\t\tthis.w = attribute.array[ index + 3 ];\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/math/Euler.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author WestLangley / http://github.com/WestLangley\r\n * @author bhouston / http://clara.io\r\n */\r\n\r\nTHREE.Euler = function ( x, y, z, order ) {\r\n\r\n\tthis._x = x || 0;\r\n\tthis._y = y || 0;\r\n\tthis._z = z || 0;\r\n\tthis._order = order || THREE.Euler.DefaultOrder;\r\n\r\n};\r\n\r\nTHREE.Euler.RotationOrders = [ 'XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX' ];\r\n\r\nTHREE.Euler.DefaultOrder = 'XYZ';\r\n\r\nTHREE.Euler.prototype = {\r\n\r\n\tconstructor: THREE.Euler,\r\n\r\n\tget x () {\r\n\r\n\t\treturn this._x;\r\n\r\n\t},\r\n\r\n\tset x ( value ) {\r\n\r\n\t\tthis._x = value;\r\n\t\tthis.onChangeCallback();\r\n\r\n\t},\r\n\r\n\tget y () {\r\n\r\n\t\treturn this._y;\r\n\r\n\t},\r\n\r\n\tset y ( value ) {\r\n\r\n\t\tthis._y = value;\r\n\t\tthis.onChangeCallback();\r\n\r\n\t},\r\n\r\n\tget z () {\r\n\r\n\t\treturn this._z;\r\n\r\n\t},\r\n\r\n\tset z ( value ) {\r\n\r\n\t\tthis._z = value;\r\n\t\tthis.onChangeCallback();\r\n\r\n\t},\r\n\r\n\tget order () {\r\n\r\n\t\treturn this._order;\r\n\r\n\t},\r\n\r\n\tset order ( value ) {\r\n\r\n\t\tthis._order = value;\r\n\t\tthis.onChangeCallback();\r\n\r\n\t},\r\n\r\n\tset: function ( x, y, z, order ) {\r\n\r\n\t\tthis._x = x;\r\n\t\tthis._y = y;\r\n\t\tthis._z = z;\r\n\t\tthis._order = order || this._order;\r\n\r\n\t\tthis.onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor( this._x, this._y, this._z, this._order );\r\n\r\n\t},\r\n\r\n\tcopy: function ( euler ) {\r\n\r\n\t\tthis._x = euler._x;\r\n\t\tthis._y = euler._y;\r\n\t\tthis._z = euler._z;\r\n\t\tthis._order = euler._order;\r\n\r\n\t\tthis.onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromRotationMatrix: function ( m, order, update ) {\r\n\r\n\t\tvar clamp = THREE.Math.clamp;\r\n\r\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\r\n\r\n\t\tvar te = m.elements;\r\n\t\tvar m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];\r\n\t\tvar m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];\r\n\t\tvar m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\r\n\r\n\t\torder = order || this._order;\r\n\r\n\t\tif ( order === 'XYZ' ) {\r\n\r\n\t\t\tthis._y = Math.asin( clamp( m13, - 1, 1 ) );\r\n\r\n\t\t\tif ( Math.abs( m13 ) < 0.99999 ) {\r\n\r\n\t\t\t\tthis._x = Math.atan2( - m23, m33 );\r\n\t\t\t\tthis._z = Math.atan2( - m12, m11 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis._x = Math.atan2( m32, m22 );\r\n\t\t\t\tthis._z = 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( order === 'YXZ' ) {\r\n\r\n\t\t\tthis._x = Math.asin( - clamp( m23, - 1, 1 ) );\r\n\r\n\t\t\tif ( Math.abs( m23 ) < 0.99999 ) {\r\n\r\n\t\t\t\tthis._y = Math.atan2( m13, m33 );\r\n\t\t\t\tthis._z = Math.atan2( m21, m22 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis._y = Math.atan2( - m31, m11 );\r\n\t\t\t\tthis._z = 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( order === 'ZXY' ) {\r\n\r\n\t\t\tthis._x = Math.asin( clamp( m32, - 1, 1 ) );\r\n\r\n\t\t\tif ( Math.abs( m32 ) < 0.99999 ) {\r\n\r\n\t\t\t\tthis._y = Math.atan2( - m31, m33 );\r\n\t\t\t\tthis._z = Math.atan2( - m12, m22 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis._y = 0;\r\n\t\t\t\tthis._z = Math.atan2( m21, m11 );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( order === 'ZYX' ) {\r\n\r\n\t\t\tthis._y = Math.asin( - clamp( m31, - 1, 1 ) );\r\n\r\n\t\t\tif ( Math.abs( m31 ) < 0.99999 ) {\r\n\r\n\t\t\t\tthis._x = Math.atan2( m32, m33 );\r\n\t\t\t\tthis._z = Math.atan2( m21, m11 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis._x = 0;\r\n\t\t\t\tthis._z = Math.atan2( - m12, m22 );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( order === 'YZX' ) {\r\n\r\n\t\t\tthis._z = Math.asin( clamp( m21, - 1, 1 ) );\r\n\r\n\t\t\tif ( Math.abs( m21 ) < 0.99999 ) {\r\n\r\n\t\t\t\tthis._x = Math.atan2( - m23, m22 );\r\n\t\t\t\tthis._y = Math.atan2( - m31, m11 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis._x = 0;\r\n\t\t\t\tthis._y = Math.atan2( m13, m33 );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( order === 'XZY' ) {\r\n\r\n\t\t\tthis._z = Math.asin( - clamp( m12, - 1, 1 ) );\r\n\r\n\t\t\tif ( Math.abs( m12 ) < 0.99999 ) {\r\n\r\n\t\t\t\tthis._x = Math.atan2( m32, m22 );\r\n\t\t\t\tthis._y = Math.atan2( m13, m11 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis._x = Math.atan2( - m23, m33 );\r\n\t\t\t\tthis._y = 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconsole.warn( 'THREE.Euler: .setFromRotationMatrix() given unsupported order: ' + order );\r\n\r\n\t\t}\r\n\r\n\t\tthis._order = order;\r\n\r\n\t\tif ( update !== false ) this.onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromQuaternion: function () {\r\n\r\n\t\tvar matrix;\r\n\r\n\t\treturn function ( q, order, update ) {\r\n\r\n\t\t\tif ( matrix === undefined ) matrix = new THREE.Matrix4();\r\n\r\n\t\t\tmatrix.makeRotationFromQuaternion( q );\r\n\r\n\t\t\treturn this.setFromRotationMatrix( matrix, order, update );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tsetFromVector3: function ( v, order ) {\r\n\r\n\t\treturn this.set( v.x, v.y, v.z, order || this._order );\r\n\r\n\t},\r\n\r\n\treorder: function () {\r\n\r\n\t\t// WARNING: this discards revolution information -bhouston\r\n\r\n\t\tvar q = new THREE.Quaternion();\r\n\r\n\t\treturn function ( newOrder ) {\r\n\r\n\t\t\tq.setFromEuler( this );\r\n\t\t\t\r\n\t\t\treturn this.setFromQuaternion( q, newOrder );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tequals: function ( euler ) {\r\n\r\n\t\treturn ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );\r\n\r\n\t},\r\n\r\n\tfromArray: function ( array ) {\r\n\r\n\t\tthis._x = array[ 0 ];\r\n\t\tthis._y = array[ 1 ];\r\n\t\tthis._z = array[ 2 ];\r\n\t\tif ( array[ 3 ] !== undefined ) this._order = array[ 3 ];\r\n\r\n\t\tthis.onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\ttoArray: function ( array, offset ) {\r\n\r\n\t\tif ( array === undefined ) array = [];\r\n\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\tarray[ offset ] = this._x;\r\n\t\tarray[ offset + 1 ] = this._y;\r\n\t\tarray[ offset + 2 ] = this._z;\r\n\t\tarray[ offset + 3 ] = this._order;\r\n\r\n\t\treturn array;\r\n\r\n\t},\r\n\r\n\ttoVector3: function ( optionalResult ) {\r\n\r\n\t\tif ( optionalResult ) {\r\n\r\n\t\t\treturn optionalResult.set( this._x, this._y, this._z );\r\n\r\n\t\t} else {\r\n\r\n\t\t\treturn new THREE.Vector3( this._x, this._y, this._z );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tonChange: function ( callback ) {\r\n\r\n\t\tthis.onChangeCallback = callback;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tonChangeCallback: function () {}\r\n\r\n};\r\n\r\n// File:src/math/Line3.js\r\n\r\n/**\r\n * @author bhouston / http://clara.io\r\n */\r\n\r\nTHREE.Line3 = function ( start, end ) {\r\n\r\n\tthis.start = ( start !== undefined ) ? start : new THREE.Vector3();\r\n\tthis.end = ( end !== undefined ) ? end : new THREE.Vector3();\r\n\r\n};\r\n\r\nTHREE.Line3.prototype = {\r\n\r\n\tconstructor: THREE.Line3,\r\n\r\n\tset: function ( start, end ) {\r\n\r\n\t\tthis.start.copy( start );\r\n\t\tthis.end.copy( end );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t},\r\n\r\n\tcopy: function ( line ) {\r\n\r\n\t\tthis.start.copy( line.start );\r\n\t\tthis.end.copy( line.end );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcenter: function ( optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\treturn result.addVectors( this.start, this.end ).multiplyScalar( 0.5 );\r\n\r\n\t},\r\n\r\n\tdelta: function ( optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\treturn result.subVectors( this.end, this.start );\r\n\r\n\t},\r\n\r\n\tdistanceSq: function () {\r\n\r\n\t\treturn this.start.distanceToSquared( this.end );\r\n\r\n\t},\r\n\r\n\tdistance: function () {\r\n\r\n\t\treturn this.start.distanceTo( this.end );\r\n\r\n\t},\r\n\r\n\tat: function ( t, optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\r\n\t\treturn this.delta( result ).multiplyScalar( t ).add( this.start );\r\n\r\n\t},\r\n\r\n\tclosestPointToPointParameter: function () {\r\n\r\n\t\tvar startP = new THREE.Vector3();\r\n\t\tvar startEnd = new THREE.Vector3();\r\n\r\n\t\treturn function ( point, clampToLine ) {\r\n\r\n\t\t\tstartP.subVectors( point, this.start );\r\n\t\t\tstartEnd.subVectors( this.end, this.start );\r\n\r\n\t\t\tvar startEnd2 = startEnd.dot( startEnd );\r\n\t\t\tvar startEnd_startP = startEnd.dot( startP );\r\n\r\n\t\t\tvar t = startEnd_startP / startEnd2;\r\n\r\n\t\t\tif ( clampToLine ) {\r\n\r\n\t\t\t\tt = THREE.Math.clamp( t, 0, 1 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn t;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tclosestPointToPoint: function ( point, clampToLine, optionalTarget ) {\r\n\r\n\t\tvar t = this.closestPointToPointParameter( point, clampToLine );\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\r\n\t\treturn this.delta( result ).multiplyScalar( t ).add( this.start );\r\n\r\n\t},\r\n\r\n\tapplyMatrix4: function ( matrix ) {\r\n\r\n\t\tthis.start.applyMatrix4( matrix );\r\n\t\tthis.end.applyMatrix4( matrix );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tequals: function ( line ) {\r\n\r\n\t\treturn line.start.equals( this.start ) && line.end.equals( this.end );\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/math/Box2.js\r\n\r\n/**\r\n * @author bhouston / http://clara.io\r\n */\r\n\r\nTHREE.Box2 = function ( min, max ) {\r\n\r\n\tthis.min = ( min !== undefined ) ? min : new THREE.Vector2( + Infinity, + Infinity );\r\n\tthis.max = ( max !== undefined ) ? max : new THREE.Vector2( - Infinity, - Infinity );\r\n\r\n};\r\n\r\nTHREE.Box2.prototype = {\r\n\r\n\tconstructor: THREE.Box2,\r\n\r\n\tset: function ( min, max ) {\r\n\r\n\t\tthis.min.copy( min );\r\n\t\tthis.max.copy( max );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromPoints: function ( points ) {\r\n\r\n\t\tthis.makeEmpty();\r\n\r\n\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\r\n\r\n\t\t\tthis.expandByPoint( points[ i ] );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromCenterAndSize: function () {\r\n\r\n\t\tvar v1 = new THREE.Vector2();\r\n\r\n\t\treturn function ( center, size ) {\r\n\r\n\t\t\tvar halfSize = v1.copy( size ).multiplyScalar( 0.5 );\r\n\t\t\tthis.min.copy( center ).sub( halfSize );\r\n\t\t\tthis.max.copy( center ).add( halfSize );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t},\r\n\r\n\tcopy: function ( box ) {\r\n\r\n\t\tthis.min.copy( box.min );\r\n\t\tthis.max.copy( box.max );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmakeEmpty: function () {\r\n\r\n\t\tthis.min.x = this.min.y = + Infinity;\r\n\t\tthis.max.x = this.max.y = - Infinity;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tisEmpty: function () {\r\n\r\n\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\r\n\r\n\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );\r\n\r\n\t},\r\n\r\n\tcenter: function ( optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector2();\r\n\t\treturn result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\r\n\r\n\t},\r\n\r\n\tsize: function ( optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector2();\r\n\t\treturn result.subVectors( this.max, this.min );\r\n\r\n\t},\r\n\r\n\texpandByPoint: function ( point ) {\r\n\r\n\t\tthis.min.min( point );\r\n\t\tthis.max.max( point );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\texpandByVector: function ( vector ) {\r\n\r\n\t\tthis.min.sub( vector );\r\n\t\tthis.max.add( vector );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\texpandByScalar: function ( scalar ) {\r\n\r\n\t\tthis.min.addScalar( - scalar );\r\n\t\tthis.max.addScalar( scalar );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcontainsPoint: function ( point ) {\r\n\r\n\t\tif ( point.x < this.min.x || point.x > this.max.x ||\r\n\t\t     point.y < this.min.y || point.y > this.max.y ) {\r\n\r\n\t\t\treturn false;\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t},\r\n\r\n\tcontainsBox: function ( box ) {\r\n\r\n\t\tif ( ( this.min.x <= box.min.x ) && ( box.max.x <= this.max.x ) &&\r\n\t\t     ( this.min.y <= box.min.y ) && ( box.max.y <= this.max.y ) ) {\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\r\n\t},\r\n\r\n\tgetParameter: function ( point, optionalTarget ) {\r\n\r\n\t\t// This can potentially have a divide by zero if the box\r\n\t\t// has a size dimension of 0.\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector2();\r\n\r\n\t\treturn result.set(\r\n\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\r\n\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y )\r\n\t\t);\r\n\r\n\t},\r\n\r\n\tintersectsBox: function ( box ) {\r\n\r\n\t\t// using 6 splitting planes to rule out intersections.\r\n\r\n\t\tif ( box.max.x < this.min.x || box.min.x > this.max.x ||\r\n\t\t     box.max.y < this.min.y || box.min.y > this.max.y ) {\r\n\r\n\t\t\treturn false;\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t},\r\n\r\n\tclampPoint: function ( point, optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector2();\r\n\t\treturn result.copy( point ).clamp( this.min, this.max );\r\n\r\n\t},\r\n\r\n\tdistanceToPoint: function () {\r\n\r\n\t\tvar v1 = new THREE.Vector2();\r\n\r\n\t\treturn function ( point ) {\r\n\r\n\t\t\tvar clampedPoint = v1.copy( point ).clamp( this.min, this.max );\r\n\t\t\treturn clampedPoint.sub( point ).length();\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tintersect: function ( box ) {\r\n\r\n\t\tthis.min.max( box.min );\r\n\t\tthis.max.min( box.max );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tunion: function ( box ) {\r\n\r\n\t\tthis.min.min( box.min );\r\n\t\tthis.max.max( box.max );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\ttranslate: function ( offset ) {\r\n\r\n\t\tthis.min.add( offset );\r\n\t\tthis.max.add( offset );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tequals: function ( box ) {\r\n\r\n\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/math/Box3.js\r\n\r\n/**\r\n * @author bhouston / http://clara.io\r\n * @author WestLangley / http://github.com/WestLangley\r\n */\r\n\r\nTHREE.Box3 = function ( min, max ) {\r\n\r\n\tthis.min = ( min !== undefined ) ? min : new THREE.Vector3( + Infinity, + Infinity, + Infinity );\r\n\tthis.max = ( max !== undefined ) ? max : new THREE.Vector3( - Infinity, - Infinity, - Infinity );\r\n\r\n};\r\n\r\nTHREE.Box3.prototype = {\r\n\r\n\tconstructor: THREE.Box3,\r\n\r\n\tset: function ( min, max ) {\r\n\r\n\t\tthis.min.copy( min );\r\n\t\tthis.max.copy( max );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromArray: function ( array ) {\r\n\r\n\t\tvar minX = + Infinity;\r\n\t\tvar minY = + Infinity;\r\n\t\tvar minZ = + Infinity;\r\n\r\n\t\tvar maxX = - Infinity;\r\n\t\tvar maxY = - Infinity;\r\n\t\tvar maxZ = - Infinity;\r\n\r\n\t\tfor ( var i = 0, l = array.length; i < l; i += 3 ) {\r\n\r\n\t\t\tvar x = array[ i ];\r\n\t\t\tvar y = array[ i + 1 ];\r\n\t\t\tvar z = array[ i + 2 ];\r\n\r\n\t\t\tif ( x < minX ) minX = x;\r\n\t\t\tif ( y < minY ) minY = y;\r\n\t\t\tif ( z < minZ ) minZ = z;\r\n\r\n\t\t\tif ( x > maxX ) maxX = x;\r\n\t\t\tif ( y > maxY ) maxY = y;\r\n\t\t\tif ( z > maxZ ) maxZ = z;\r\n\r\n\t\t}\r\n\r\n\t\tthis.min.set( minX, minY, minZ );\r\n\t\tthis.max.set( maxX, maxY, maxZ );\r\n\r\n\t},\r\n\r\n\tsetFromPoints: function ( points ) {\r\n\r\n\t\tthis.makeEmpty();\r\n\r\n\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\r\n\r\n\t\t\tthis.expandByPoint( points[ i ] );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromCenterAndSize: function () {\r\n\r\n\t\tvar v1 = new THREE.Vector3();\r\n\r\n\t\treturn function ( center, size ) {\r\n\r\n\t\t\tvar halfSize = v1.copy( size ).multiplyScalar( 0.5 );\r\n\r\n\t\t\tthis.min.copy( center ).sub( halfSize );\r\n\t\t\tthis.max.copy( center ).add( halfSize );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tsetFromObject: function () {\r\n\r\n\t\t// Computes the world-axis-aligned bounding box of an object (including its children),\r\n\t\t// accounting for both the object's, and children's, world transforms\r\n\r\n\t\tvar v1 = new THREE.Vector3();\r\n\r\n\t\treturn function ( object ) {\r\n\r\n\t\t\tvar scope = this;\r\n\r\n\t\t\tobject.updateMatrixWorld( true );\r\n\r\n\t\t\tthis.makeEmpty();\r\n\r\n\t\t\tobject.traverse( function ( node ) {\r\n\r\n\t\t\t\tvar geometry = node.geometry;\r\n\r\n\t\t\t\tif ( geometry !== undefined ) {\r\n\r\n\t\t\t\t\tif ( geometry instanceof THREE.Geometry ) {\r\n\r\n\t\t\t\t\t\tvar vertices = geometry.vertices;\r\n\r\n\t\t\t\t\t\tfor ( var i = 0, il = vertices.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\t\t\tv1.copy( vertices[ i ] );\r\n\t\t\t\t\t\t\tv1.applyMatrix4( node.matrixWorld );\r\n\r\n\t\t\t\t\t\t\tscope.expandByPoint( v1 );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else if ( geometry instanceof THREE.BufferGeometry && geometry.attributes[ 'position' ] !== undefined ) {\r\n\r\n\t\t\t\t\t\tvar positions = geometry.attributes[ 'position' ].array;\r\n\r\n\t\t\t\t\t\tfor ( var i = 0, il = positions.length; i < il; i += 3 ) {\r\n\r\n\t\t\t\t\t\t\tv1.fromArray( positions, i );\r\n\t\t\t\t\t\t\tv1.applyMatrix4( node.matrixWorld );\r\n\r\n\t\t\t\t\t\t\tscope.expandByPoint( v1 );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t},\r\n\r\n\tcopy: function ( box ) {\r\n\r\n\t\tthis.min.copy( box.min );\r\n\t\tthis.max.copy( box.max );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmakeEmpty: function () {\r\n\r\n\t\tthis.min.x = this.min.y = this.min.z = + Infinity;\r\n\t\tthis.max.x = this.max.y = this.max.z = - Infinity;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tisEmpty: function () {\r\n\r\n\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\r\n\r\n\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );\r\n\r\n\t},\r\n\r\n\tcenter: function ( optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\treturn result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\r\n\r\n\t},\r\n\r\n\tsize: function ( optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\treturn result.subVectors( this.max, this.min );\r\n\r\n\t},\r\n\r\n\texpandByPoint: function ( point ) {\r\n\r\n\t\tthis.min.min( point );\r\n\t\tthis.max.max( point );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\texpandByVector: function ( vector ) {\r\n\r\n\t\tthis.min.sub( vector );\r\n\t\tthis.max.add( vector );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\texpandByScalar: function ( scalar ) {\r\n\r\n\t\tthis.min.addScalar( - scalar );\r\n\t\tthis.max.addScalar( scalar );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcontainsPoint: function ( point ) {\r\n\r\n\t\tif ( point.x < this.min.x || point.x > this.max.x ||\r\n\t\t\t\t point.y < this.min.y || point.y > this.max.y ||\r\n\t\t\t\t point.z < this.min.z || point.z > this.max.z ) {\r\n\r\n\t\t\treturn false;\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t},\r\n\r\n\tcontainsBox: function ( box ) {\r\n\r\n\t\tif ( ( this.min.x <= box.min.x ) && ( box.max.x <= this.max.x ) &&\r\n\t\t\t ( this.min.y <= box.min.y ) && ( box.max.y <= this.max.y ) &&\r\n\t\t\t ( this.min.z <= box.min.z ) && ( box.max.z <= this.max.z ) ) {\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\r\n\t},\r\n\r\n\tgetParameter: function ( point, optionalTarget ) {\r\n\r\n\t\t// This can potentially have a divide by zero if the box\r\n\t\t// has a size dimension of 0.\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\r\n\t\treturn result.set(\r\n\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\r\n\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y ),\r\n\t\t\t( point.z - this.min.z ) / ( this.max.z - this.min.z )\r\n\t\t);\r\n\r\n\t},\r\n\r\n\tintersectsBox: function ( box ) {\r\n\r\n\t\t// using 6 splitting planes to rule out intersections.\r\n\r\n\t\tif ( box.max.x < this.min.x || box.min.x > this.max.x ||\r\n\t\t\t\t box.max.y < this.min.y || box.min.y > this.max.y ||\r\n\t\t\t\t box.max.z < this.min.z || box.min.z > this.max.z ) {\r\n\r\n\t\t\treturn false;\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t},\r\n\r\n\tintersectsSphere: ( function () {\r\n\r\n\t\tvar closestPoint;\r\n\r\n\t\treturn function intersectsSphere( sphere ) {\r\n\r\n\t\t\tif ( closestPoint === undefined ) closestPoint = new THREE.Vector3();\r\n\r\n\t\t\t// Find the point on the AABB closest to the sphere center.\r\n\t\t\tthis.clampPoint( sphere.center, closestPoint );\r\n\r\n\t\t\t// If that point is inside the sphere, the AABB and sphere intersect.\r\n\t\t\treturn closestPoint.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );\r\n\r\n\t\t};\r\n\r\n\t} )(),\r\n\r\n\tintersectsPlane: function ( plane ) {\r\n\r\n\t\t// We compute the minimum and maximum dot product values. If those values\r\n\t\t// are on the same side (back or front) of the plane, then there is no intersection.\r\n\r\n\t\tvar min, max;\r\n\r\n\t\tif ( plane.normal.x > 0 ) {\r\n\r\n\t\t\tmin = plane.normal.x * this.min.x;\r\n\t\t\tmax = plane.normal.x * this.max.x;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tmin = plane.normal.x * this.max.x;\r\n\t\t\tmax = plane.normal.x * this.min.x;\r\n\r\n\t\t}\r\n\r\n\t\tif ( plane.normal.y > 0 ) {\r\n\r\n\t\t\tmin += plane.normal.y * this.min.y;\r\n\t\t\tmax += plane.normal.y * this.max.y;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tmin += plane.normal.y * this.max.y;\r\n\t\t\tmax += plane.normal.y * this.min.y;\r\n\r\n\t\t}\r\n\r\n\t\tif ( plane.normal.z > 0 ) {\r\n\r\n\t\t\tmin += plane.normal.z * this.min.z;\r\n\t\t\tmax += plane.normal.z * this.max.z;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tmin += plane.normal.z * this.max.z;\r\n\t\t\tmax += plane.normal.z * this.min.z;\r\n\r\n\t\t}\r\n\r\n\t\treturn ( min <= plane.constant && max >= plane.constant );\r\n\r\n\t},\r\n\r\n\tclampPoint: function ( point, optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\treturn result.copy( point ).clamp( this.min, this.max );\r\n\r\n\t},\r\n\r\n\tdistanceToPoint: function () {\r\n\r\n\t\tvar v1 = new THREE.Vector3();\r\n\r\n\t\treturn function ( point ) {\r\n\r\n\t\t\tvar clampedPoint = v1.copy( point ).clamp( this.min, this.max );\r\n\t\t\treturn clampedPoint.sub( point ).length();\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tgetBoundingSphere: function () {\r\n\r\n\t\tvar v1 = new THREE.Vector3();\r\n\r\n\t\treturn function ( optionalTarget ) {\r\n\r\n\t\t\tvar result = optionalTarget || new THREE.Sphere();\r\n\r\n\t\t\tresult.center = this.center();\r\n\t\t\tresult.radius = this.size( v1 ).length() * 0.5;\r\n\r\n\t\t\treturn result;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tintersect: function ( box ) {\r\n\r\n\t\tthis.min.max( box.min );\r\n\t\tthis.max.min( box.max );\r\n\r\n\t\t// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.\r\n\t\tif( this.isEmpty() ) this.makeEmpty();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tunion: function ( box ) {\r\n\r\n\t\tthis.min.min( box.min );\r\n\t\tthis.max.max( box.max );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tapplyMatrix4: function () {\r\n\r\n\t\tvar points = [\r\n\t\t\tnew THREE.Vector3(),\r\n\t\t\tnew THREE.Vector3(),\r\n\t\t\tnew THREE.Vector3(),\r\n\t\t\tnew THREE.Vector3(),\r\n\t\t\tnew THREE.Vector3(),\r\n\t\t\tnew THREE.Vector3(),\r\n\t\t\tnew THREE.Vector3(),\r\n\t\t\tnew THREE.Vector3()\r\n\t\t];\r\n\r\n\t\treturn function ( matrix ) {\r\n\r\n\t\t\t// transform of empty box is an empty box.\r\n\t\t\tif( this.isEmpty() ) return this;\r\n\r\n\t\t\t// NOTE: I am using a binary pattern to specify all 2^3 combinations below\r\n\t\t\tpoints[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000\r\n\t\t\tpoints[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001\r\n\t\t\tpoints[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010\r\n\t\t\tpoints[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011\r\n\t\t\tpoints[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100\r\n\t\t\tpoints[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101\r\n\t\t\tpoints[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110\r\n\t\t\tpoints[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix );\t// 111\r\n\r\n\t\t\tthis.setFromPoints( points );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\ttranslate: function ( offset ) {\r\n\r\n\t\tthis.min.add( offset );\r\n\t\tthis.max.add( offset );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tequals: function ( box ) {\r\n\r\n\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/math/Matrix3.js\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author WestLangley / http://github.com/WestLangley\r\n * @author bhouston / http://clara.io\r\n * @author tschw\r\n */\r\n\r\nTHREE.Matrix3 = function () {\r\n\r\n\tthis.elements = new Float32Array( [\r\n\r\n\t\t1, 0, 0,\r\n\t\t0, 1, 0,\r\n\t\t0, 0, 1\r\n\r\n\t] );\r\n\r\n\tif ( arguments.length > 0 ) {\r\n\r\n\t\tconsole.error( 'THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.' );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.Matrix3.prototype = {\r\n\r\n\tconstructor: THREE.Matrix3,\r\n\r\n\tset: function ( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tte[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;\r\n\t\tte[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;\r\n\t\tte[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tidentity: function () {\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\t1, 0, 0,\r\n\t\t\t0, 1, 0,\r\n\t\t\t0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor().fromArray( this.elements );\r\n\r\n\t},\r\n\r\n\tcopy: function ( m ) {\r\n\r\n\t\tvar me = m.elements;\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\tme[ 0 ], me[ 3 ], me[ 6 ],\r\n\t\t\tme[ 1 ], me[ 4 ], me[ 7 ],\r\n\t\t\tme[ 2 ], me[ 5 ], me[ 8 ]\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromMatrix4: function( m ) {\r\n\r\n\t\tvar me = m.elements;\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\tme[ 0 ], me[ 4 ], me[  8 ],\r\n\t\t\tme[ 1 ], me[ 5 ], me[  9 ],\r\n\t\t\tme[ 2 ], me[ 6 ], me[ 10 ]\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tapplyToVector3Array: function () {\r\n\r\n\t\tvar v1;\r\n\r\n\t\treturn function ( array, offset, length ) {\r\n\r\n\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\r\n\t\t\tif ( offset === undefined ) offset = 0;\r\n\t\t\tif ( length === undefined ) length = array.length;\r\n\r\n\t\t\tfor ( var i = 0, j = offset; i < length; i += 3, j += 3 ) {\r\n\r\n\t\t\t\tv1.fromArray( array, j );\r\n\t\t\t\tv1.applyMatrix3( this );\r\n\t\t\t\tv1.toArray( array, j );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn array;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tapplyToBuffer: function () {\r\n\r\n\t\tvar v1;\r\n\r\n\t\treturn function applyToBuffer( buffer, offset, length ) {\r\n\r\n\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\r\n\t\t\tif ( offset === undefined ) offset = 0;\r\n\t\t\tif ( length === undefined ) length = buffer.length / buffer.itemSize;\r\n\r\n\t\t\tfor ( var i = 0, j = offset; i < length; i ++, j ++ ) {\r\n\r\n\t\t\t\tv1.x = buffer.getX( j );\r\n\t\t\t\tv1.y = buffer.getY( j );\r\n\t\t\t\tv1.z = buffer.getZ( j );\r\n\r\n\t\t\t\tv1.applyMatrix3( this );\r\n\r\n\t\t\t\tbuffer.setXYZ( v1.x, v1.y, v1.z );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn buffer;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tmultiplyScalar: function ( s ) {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tte[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;\r\n\t\tte[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;\r\n\t\tte[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdeterminant: function () {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tvar a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],\r\n\t\t\td = te[ 3 ], e = te[ 4 ], f = te[ 5 ],\r\n\t\t\tg = te[ 6 ], h = te[ 7 ], i = te[ 8 ];\r\n\r\n\t\treturn a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;\r\n\r\n\t},\r\n\r\n\tgetInverse: function ( matrix, throwOnDegenerate ) {\r\n\r\n\t\tif ( matrix instanceof THREE.Matrix4 ) {\r\n\r\n\t\t\tconsole.error( \"THREE.Matrix3.getInverse no longer takes a Matrix4 argument.\" );\r\n\r\n\t\t}\r\n\r\n\t\tvar me = matrix.elements,\r\n\t\t\tte = this.elements,\r\n\r\n\t\t\tn11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ],\r\n\t\t\tn12 = me[ 3 ], n22 = me[ 4 ], n32 = me[ 5 ],\r\n\t\t\tn13 = me[ 6 ], n23 = me[ 7 ], n33 = me[ 8 ],\r\n\r\n\t\t\tt11 = n33 * n22 - n32 * n23,\r\n\t\t\tt12 = n32 * n13 - n33 * n12,\r\n\t\t\tt13 = n23 * n12 - n22 * n13,\r\n\r\n\t\t\tdet = n11 * t11 + n21 * t12 + n31 * t13;\r\n\r\n\t\tif ( det === 0 ) {\r\n\r\n\t\t\tvar msg = \"THREE.Matrix3.getInverse(): can't invert matrix, determinant is 0\";\r\n\r\n\t\t\tif ( throwOnDegenerate || false ) {\r\n\r\n\t\t\t\tthrow new Error( msg );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tconsole.warn( msg );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this.identity();\r\n\t\t}\r\n\t\t\r\n\t\tvar detInv = 1 / det;\r\n\r\n\t\tte[ 0 ] = t11 * detInv;\r\n\t\tte[ 1 ] = ( n31 * n23 - n33 * n21 ) * detInv;\r\n\t\tte[ 2 ] = ( n32 * n21 - n31 * n22 ) * detInv;\r\n\r\n\t\tte[ 3 ] = t12 * detInv;\r\n\t\tte[ 4 ] = ( n33 * n11 - n31 * n13 ) * detInv;\r\n\t\tte[ 5 ] = ( n31 * n12 - n32 * n11 ) * detInv;\r\n\r\n\t\tte[ 6 ] = t13 * detInv;\r\n\t\tte[ 7 ] = ( n21 * n13 - n23 * n11 ) * detInv;\r\n\t\tte[ 8 ] = ( n22 * n11 - n21 * n12 ) * detInv;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\ttranspose: function () {\r\n\r\n\t\tvar tmp, m = this.elements;\r\n\r\n\t\ttmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;\r\n\t\ttmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;\r\n\t\ttmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tflattenToArrayOffset: function ( array, offset ) {\r\n\r\n\t\tconsole.warn( \"THREE.Matrix3: .flattenToArrayOffset is deprecated \" +\r\n\t\t\t\t\"- just use .toArray instead.\" );\r\n\r\n\t\treturn this.toArray( array, offset );\r\n\r\n\t},\r\n\r\n\tgetNormalMatrix: function ( matrix4 ) {\r\n\r\n\t\treturn this.setFromMatrix4( matrix4 ).getInverse( this ).transpose();\r\n\r\n\t},\r\n\r\n\ttransposeIntoArray: function ( r ) {\r\n\r\n\t\tvar m = this.elements;\r\n\r\n\t\tr[ 0 ] = m[ 0 ];\r\n\t\tr[ 1 ] = m[ 3 ];\r\n\t\tr[ 2 ] = m[ 6 ];\r\n\t\tr[ 3 ] = m[ 1 ];\r\n\t\tr[ 4 ] = m[ 4 ];\r\n\t\tr[ 5 ] = m[ 7 ];\r\n\t\tr[ 6 ] = m[ 2 ];\r\n\t\tr[ 7 ] = m[ 5 ];\r\n\t\tr[ 8 ] = m[ 8 ];\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tfromArray: function ( array ) {\r\n\r\n\t\tthis.elements.set( array );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\ttoArray: function ( array, offset ) {\r\n\r\n\t\tif ( array === undefined ) array = [];\r\n\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tarray[ offset ] = te[ 0 ];\r\n\t\tarray[ offset + 1 ] = te[ 1 ];\r\n\t\tarray[ offset + 2 ] = te[ 2 ];\r\n\r\n\t\tarray[ offset + 3 ] = te[ 3 ];\r\n\t\tarray[ offset + 4 ] = te[ 4 ];\r\n\t\tarray[ offset + 5 ] = te[ 5 ];\r\n\r\n\t\tarray[ offset + 6 ] = te[ 6 ];\r\n\t\tarray[ offset + 7 ] = te[ 7 ];\r\n\t\tarray[ offset + 8 ]  = te[ 8 ];\r\n\r\n\t\treturn array;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/math/Matrix4.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author supereggbert / http://www.paulbrunt.co.uk/\r\n * @author philogb / http://blog.thejit.org/\r\n * @author jordi_ros / http://plattsoft.com\r\n * @author D1plo1d / http://github.com/D1plo1d\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author timknip / http://www.floorplanner.com/\r\n * @author bhouston / http://clara.io\r\n * @author WestLangley / http://github.com/WestLangley\r\n */\r\n\r\nTHREE.Matrix4 = function () {\r\n\r\n\tthis.elements = new Float32Array( [\r\n\r\n\t\t1, 0, 0, 0,\r\n\t\t0, 1, 0, 0,\r\n\t\t0, 0, 1, 0,\r\n\t\t0, 0, 0, 1\r\n\r\n\t] );\r\n\r\n\tif ( arguments.length > 0 ) {\r\n\r\n\t\tconsole.error( 'THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.' );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.Matrix4.prototype = {\r\n\r\n\tconstructor: THREE.Matrix4,\r\n\r\n\tset: function ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tte[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;\r\n\t\tte[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;\r\n\t\tte[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;\r\n\t\tte[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tidentity: function () {\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\t1, 0, 0, 0,\r\n\t\t\t0, 1, 0, 0,\r\n\t\t\t0, 0, 1, 0,\r\n\t\t\t0, 0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new THREE.Matrix4().fromArray( this.elements );\r\n\r\n\t},\r\n\r\n\tcopy: function ( m ) {\r\n\r\n\t\tthis.elements.set( m.elements );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcopyPosition: function ( m ) {\r\n\r\n\t\tvar te = this.elements;\r\n\t\tvar me = m.elements;\r\n\r\n\t\tte[ 12 ] = me[ 12 ];\r\n\t\tte[ 13 ] = me[ 13 ];\r\n\t\tte[ 14 ] = me[ 14 ];\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\textractBasis: function ( xAxis, yAxis, zAxis ) {\r\n\r\n\t\txAxis.setFromMatrixColumn( this, 0 );\r\n\t\tyAxis.setFromMatrixColumn( this, 1 );\r\n\t\tzAxis.setFromMatrixColumn( this, 2 );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmakeBasis: function ( xAxis, yAxis, zAxis ) {\r\n\r\n\t\tthis.set(\r\n\t\t\txAxis.x, yAxis.x, zAxis.x, 0,\r\n\t\t\txAxis.y, yAxis.y, zAxis.y, 0,\r\n\t\t\txAxis.z, yAxis.z, zAxis.z, 0,\r\n\t\t\t0,       0,       0,       1\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\textractRotation: function () {\r\n\r\n\t\tvar v1;\r\n\r\n\t\treturn function ( m ) {\r\n\r\n\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\r\n\r\n\t\t\tvar te = this.elements;\r\n\t\t\tvar me = m.elements;\r\n\r\n\t\t\tvar scaleX = 1 / v1.setFromMatrixColumn( m, 0 ).length();\r\n\t\t\tvar scaleY = 1 / v1.setFromMatrixColumn( m, 1 ).length();\r\n\t\t\tvar scaleZ = 1 / v1.setFromMatrixColumn( m, 2 ).length();\r\n\r\n\t\t\tte[ 0 ] = me[ 0 ] * scaleX;\r\n\t\t\tte[ 1 ] = me[ 1 ] * scaleX;\r\n\t\t\tte[ 2 ] = me[ 2 ] * scaleX;\r\n\r\n\t\t\tte[ 4 ] = me[ 4 ] * scaleY;\r\n\t\t\tte[ 5 ] = me[ 5 ] * scaleY;\r\n\t\t\tte[ 6 ] = me[ 6 ] * scaleY;\r\n\r\n\t\t\tte[ 8 ] = me[ 8 ] * scaleZ;\r\n\t\t\tte[ 9 ] = me[ 9 ] * scaleZ;\r\n\t\t\tte[ 10 ] = me[ 10 ] * scaleZ;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tmakeRotationFromEuler: function ( euler ) {\r\n\r\n\t\tif ( euler instanceof THREE.Euler === false ) {\r\n\r\n\t\t\tconsole.error( 'THREE.Matrix: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );\r\n\r\n\t\t}\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tvar x = euler.x, y = euler.y, z = euler.z;\r\n\t\tvar a = Math.cos( x ), b = Math.sin( x );\r\n\t\tvar c = Math.cos( y ), d = Math.sin( y );\r\n\t\tvar e = Math.cos( z ), f = Math.sin( z );\r\n\r\n\t\tif ( euler.order === 'XYZ' ) {\r\n\r\n\t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\r\n\r\n\t\t\tte[ 0 ] = c * e;\r\n\t\t\tte[ 4 ] = - c * f;\r\n\t\t\tte[ 8 ] = d;\r\n\r\n\t\t\tte[ 1 ] = af + be * d;\r\n\t\t\tte[ 5 ] = ae - bf * d;\r\n\t\t\tte[ 9 ] = - b * c;\r\n\r\n\t\t\tte[ 2 ] = bf - ae * d;\r\n\t\t\tte[ 6 ] = be + af * d;\r\n\t\t\tte[ 10 ] = a * c;\r\n\r\n\t\t} else if ( euler.order === 'YXZ' ) {\r\n\r\n\t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\r\n\r\n\t\t\tte[ 0 ] = ce + df * b;\r\n\t\t\tte[ 4 ] = de * b - cf;\r\n\t\t\tte[ 8 ] = a * d;\r\n\r\n\t\t\tte[ 1 ] = a * f;\r\n\t\t\tte[ 5 ] = a * e;\r\n\t\t\tte[ 9 ] = - b;\r\n\r\n\t\t\tte[ 2 ] = cf * b - de;\r\n\t\t\tte[ 6 ] = df + ce * b;\r\n\t\t\tte[ 10 ] = a * c;\r\n\r\n\t\t} else if ( euler.order === 'ZXY' ) {\r\n\r\n\t\t\tvar ce = c * e, cf = c * f, de = d * e, df = d * f;\r\n\r\n\t\t\tte[ 0 ] = ce - df * b;\r\n\t\t\tte[ 4 ] = - a * f;\r\n\t\t\tte[ 8 ] = de + cf * b;\r\n\r\n\t\t\tte[ 1 ] = cf + de * b;\r\n\t\t\tte[ 5 ] = a * e;\r\n\t\t\tte[ 9 ] = df - ce * b;\r\n\r\n\t\t\tte[ 2 ] = - a * d;\r\n\t\t\tte[ 6 ] = b;\r\n\t\t\tte[ 10 ] = a * c;\r\n\r\n\t\t} else if ( euler.order === 'ZYX' ) {\r\n\r\n\t\t\tvar ae = a * e, af = a * f, be = b * e, bf = b * f;\r\n\r\n\t\t\tte[ 0 ] = c * e;\r\n\t\t\tte[ 4 ] = be * d - af;\r\n\t\t\tte[ 8 ] = ae * d + bf;\r\n\r\n\t\t\tte[ 1 ] = c * f;\r\n\t\t\tte[ 5 ] = bf * d + ae;\r\n\t\t\tte[ 9 ] = af * d - be;\r\n\r\n\t\t\tte[ 2 ] = - d;\r\n\t\t\tte[ 6 ] = b * c;\r\n\t\t\tte[ 10 ] = a * c;\r\n\r\n\t\t} else if ( euler.order === 'YZX' ) {\r\n\r\n\t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\r\n\r\n\t\t\tte[ 0 ] = c * e;\r\n\t\t\tte[ 4 ] = bd - ac * f;\r\n\t\t\tte[ 8 ] = bc * f + ad;\r\n\r\n\t\t\tte[ 1 ] = f;\r\n\t\t\tte[ 5 ] = a * e;\r\n\t\t\tte[ 9 ] = - b * e;\r\n\r\n\t\t\tte[ 2 ] = - d * e;\r\n\t\t\tte[ 6 ] = ad * f + bc;\r\n\t\t\tte[ 10 ] = ac - bd * f;\r\n\r\n\t\t} else if ( euler.order === 'XZY' ) {\r\n\r\n\t\t\tvar ac = a * c, ad = a * d, bc = b * c, bd = b * d;\r\n\r\n\t\t\tte[ 0 ] = c * e;\r\n\t\t\tte[ 4 ] = - f;\r\n\t\t\tte[ 8 ] = d * e;\r\n\r\n\t\t\tte[ 1 ] = ac * f + bd;\r\n\t\t\tte[ 5 ] = a * e;\r\n\t\t\tte[ 9 ] = ad * f - bc;\r\n\r\n\t\t\tte[ 2 ] = bc * f - ad;\r\n\t\t\tte[ 6 ] = b * e;\r\n\t\t\tte[ 10 ] = bd * f + ac;\r\n\r\n\t\t}\r\n\r\n\t\t// last column\r\n\t\tte[ 3 ] = 0;\r\n\t\tte[ 7 ] = 0;\r\n\t\tte[ 11 ] = 0;\r\n\r\n\t\t// bottom row\r\n\t\tte[ 12 ] = 0;\r\n\t\tte[ 13 ] = 0;\r\n\t\tte[ 14 ] = 0;\r\n\t\tte[ 15 ] = 1;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmakeRotationFromQuaternion: function ( q ) {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tvar x = q.x, y = q.y, z = q.z, w = q.w;\r\n\t\tvar x2 = x + x, y2 = y + y, z2 = z + z;\r\n\t\tvar xx = x * x2, xy = x * y2, xz = x * z2;\r\n\t\tvar yy = y * y2, yz = y * z2, zz = z * z2;\r\n\t\tvar wx = w * x2, wy = w * y2, wz = w * z2;\r\n\r\n\t\tte[ 0 ] = 1 - ( yy + zz );\r\n\t\tte[ 4 ] = xy - wz;\r\n\t\tte[ 8 ] = xz + wy;\r\n\r\n\t\tte[ 1 ] = xy + wz;\r\n\t\tte[ 5 ] = 1 - ( xx + zz );\r\n\t\tte[ 9 ] = yz - wx;\r\n\r\n\t\tte[ 2 ] = xz - wy;\r\n\t\tte[ 6 ] = yz + wx;\r\n\t\tte[ 10 ] = 1 - ( xx + yy );\r\n\r\n\t\t// last column\r\n\t\tte[ 3 ] = 0;\r\n\t\tte[ 7 ] = 0;\r\n\t\tte[ 11 ] = 0;\r\n\r\n\t\t// bottom row\r\n\t\tte[ 12 ] = 0;\r\n\t\tte[ 13 ] = 0;\r\n\t\tte[ 14 ] = 0;\r\n\t\tte[ 15 ] = 1;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tlookAt: function () {\r\n\r\n\t\tvar x, y, z;\r\n\r\n\t\treturn function ( eye, target, up ) {\r\n\r\n\t\t\tif ( x === undefined ) {\r\n\r\n\t\t\t\tx = new THREE.Vector3();\r\n\t\t\t\ty = new THREE.Vector3();\r\n\t\t\t\tz = new THREE.Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tz.subVectors( eye, target ).normalize();\r\n\r\n\t\t\tif ( z.lengthSq() === 0 ) {\r\n\r\n\t\t\t\tz.z = 1;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tx.crossVectors( up, z ).normalize();\r\n\r\n\t\t\tif ( x.lengthSq() === 0 ) {\r\n\r\n\t\t\t\tz.z += 0.0001;\r\n\t\t\t\tx.crossVectors( up, z ).normalize();\r\n\r\n\t\t\t}\r\n\r\n\t\t\ty.crossVectors( z, x );\r\n\r\n\r\n\t\t\tte[ 0 ] = x.x; te[ 4 ] = y.x; te[ 8 ] = z.x;\r\n\t\t\tte[ 1 ] = x.y; te[ 5 ] = y.y; te[ 9 ] = z.y;\r\n\t\t\tte[ 2 ] = x.z; te[ 6 ] = y.z; te[ 10 ] = z.z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tmultiply: function ( m, n ) {\r\n\r\n\t\tif ( n !== undefined ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.' );\r\n\t\t\treturn this.multiplyMatrices( m, n );\r\n\r\n\t\t}\r\n\r\n\t\treturn this.multiplyMatrices( this, m );\r\n\r\n\t},\r\n\r\n\tpremultiply: function ( m ) {\r\n\r\n\t\treturn this.multiplyMatrices( m, this );\r\n\r\n\t},\r\n\r\n\tmultiplyMatrices: function ( a, b ) {\r\n\r\n\t\tvar ae = a.elements;\r\n\t\tvar be = b.elements;\r\n\t\tvar te = this.elements;\r\n\r\n\t\tvar a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];\r\n\t\tvar a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];\r\n\t\tvar a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];\r\n\t\tvar a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];\r\n\r\n\t\tvar b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];\r\n\t\tvar b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];\r\n\t\tvar b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];\r\n\t\tvar b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];\r\n\r\n\t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\r\n\t\tte[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\r\n\t\tte[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\r\n\t\tte[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\r\n\r\n\t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\r\n\t\tte[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\r\n\t\tte[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\r\n\t\tte[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\r\n\r\n\t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\r\n\t\tte[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\r\n\t\tte[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\r\n\t\tte[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\r\n\r\n\t\tte[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\r\n\t\tte[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\r\n\t\tte[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\r\n\t\tte[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiplyToArray: function ( a, b, r ) {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tthis.multiplyMatrices( a, b );\r\n\r\n\t\tr[ 0 ] = te[ 0 ]; r[ 1 ] = te[ 1 ]; r[ 2 ] = te[ 2 ]; r[ 3 ] = te[ 3 ];\r\n\t\tr[ 4 ] = te[ 4 ]; r[ 5 ] = te[ 5 ]; r[ 6 ] = te[ 6 ]; r[ 7 ] = te[ 7 ];\r\n\t\tr[ 8 ]  = te[ 8 ]; r[ 9 ]  = te[ 9 ]; r[ 10 ] = te[ 10 ]; r[ 11 ] = te[ 11 ];\r\n\t\tr[ 12 ] = te[ 12 ]; r[ 13 ] = te[ 13 ]; r[ 14 ] = te[ 14 ]; r[ 15 ] = te[ 15 ];\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmultiplyScalar: function ( s ) {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tte[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;\r\n\t\tte[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;\r\n\t\tte[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;\r\n\t\tte[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tapplyToVector3Array: function () {\r\n\r\n\t\tvar v1;\r\n\r\n\t\treturn function ( array, offset, length ) {\r\n\r\n\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\r\n\t\t\tif ( offset === undefined ) offset = 0;\r\n\t\t\tif ( length === undefined ) length = array.length;\r\n\r\n\t\t\tfor ( var i = 0, j = offset; i < length; i += 3, j += 3 ) {\r\n\r\n\t\t\t\tv1.fromArray( array, j );\r\n\t\t\t\tv1.applyMatrix4( this );\r\n\t\t\t\tv1.toArray( array, j );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn array;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tapplyToBuffer: function () {\r\n\r\n\t\tvar v1;\r\n\r\n\t\treturn function applyToBuffer( buffer, offset, length ) {\r\n\r\n\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\r\n\t\t\tif ( offset === undefined ) offset = 0;\r\n\t\t\tif ( length === undefined ) length = buffer.length / buffer.itemSize;\r\n\r\n\t\t\tfor ( var i = 0, j = offset; i < length; i ++, j ++ ) {\r\n\r\n\t\t\t\tv1.x = buffer.getX( j );\r\n\t\t\t\tv1.y = buffer.getY( j );\r\n\t\t\t\tv1.z = buffer.getZ( j );\r\n\r\n\t\t\t\tv1.applyMatrix4( this );\r\n\r\n\t\t\t\tbuffer.setXYZ( v1.x, v1.y, v1.z );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn buffer;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tdeterminant: function () {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tvar n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];\r\n\t\tvar n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];\r\n\t\tvar n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];\r\n\t\tvar n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];\r\n\r\n\t\t//TODO: make this more efficient\r\n\t\t//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )\r\n\r\n\t\treturn (\r\n\t\t\tn41 * (\r\n\t\t\t\t+ n14 * n23 * n32\r\n\t\t\t\t - n13 * n24 * n32\r\n\t\t\t\t - n14 * n22 * n33\r\n\t\t\t\t + n12 * n24 * n33\r\n\t\t\t\t + n13 * n22 * n34\r\n\t\t\t\t - n12 * n23 * n34\r\n\t\t\t) +\r\n\t\t\tn42 * (\r\n\t\t\t\t+ n11 * n23 * n34\r\n\t\t\t\t - n11 * n24 * n33\r\n\t\t\t\t + n14 * n21 * n33\r\n\t\t\t\t - n13 * n21 * n34\r\n\t\t\t\t + n13 * n24 * n31\r\n\t\t\t\t - n14 * n23 * n31\r\n\t\t\t) +\r\n\t\t\tn43 * (\r\n\t\t\t\t+ n11 * n24 * n32\r\n\t\t\t\t - n11 * n22 * n34\r\n\t\t\t\t - n14 * n21 * n32\r\n\t\t\t\t + n12 * n21 * n34\r\n\t\t\t\t + n14 * n22 * n31\r\n\t\t\t\t - n12 * n24 * n31\r\n\t\t\t) +\r\n\t\t\tn44 * (\r\n\t\t\t\t- n13 * n22 * n31\r\n\t\t\t\t - n11 * n23 * n32\r\n\t\t\t\t + n11 * n22 * n33\r\n\t\t\t\t + n13 * n21 * n32\r\n\t\t\t\t - n12 * n21 * n33\r\n\t\t\t\t + n12 * n23 * n31\r\n\t\t\t)\r\n\r\n\t\t);\r\n\r\n\t},\r\n\r\n\ttranspose: function () {\r\n\r\n\t\tvar te = this.elements;\r\n\t\tvar tmp;\r\n\r\n\t\ttmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;\r\n\t\ttmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;\r\n\t\ttmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;\r\n\r\n\t\ttmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;\r\n\t\ttmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;\r\n\t\ttmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tflattenToArrayOffset: function ( array, offset ) {\r\n\r\n\t\tconsole.warn( \"THREE.Matrix3: .flattenToArrayOffset is deprecated \" +\r\n\t\t\t\t\"- just use .toArray instead.\" );\r\n\r\n\t\treturn this.toArray( array, offset );\r\n\r\n\t},\r\n\r\n\tgetPosition: function () {\r\n\r\n\t\tvar v1;\r\n\r\n\t\treturn function () {\r\n\r\n\t\t\tif ( v1 === undefined ) v1 = new THREE.Vector3();\r\n\t\t\tconsole.warn( 'THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.' );\r\n\r\n\t\t\treturn v1.setFromMatrixColumn( this, 3 );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tsetPosition: function ( v ) {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tte[ 12 ] = v.x;\r\n\t\tte[ 13 ] = v.y;\r\n\t\tte[ 14 ] = v.z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tgetInverse: function ( m, throwOnDegenerate ) {\r\n\r\n\t\t// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\r\n\t\tvar te = this.elements,\r\n\t\t\tme = m.elements,\r\n\r\n\t\t\tn11 = me[ 0 ], n21 = me[ 1 ], n31 = me[ 2 ], n41 = me[ 3 ],\r\n\t\t\tn12 = me[ 4 ], n22 = me[ 5 ], n32 = me[ 6 ], n42 = me[ 7 ],\r\n\t\t\tn13 = me[ 8 ], n23 = me[ 9 ], n33 = me[ 10 ], n43 = me[ 11 ],\r\n\t\t\tn14 = me[ 12 ], n24 = me[ 13 ], n34 = me[ 14 ], n44 = me[ 15 ],\r\n\r\n\t\t\tt11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,\r\n\t\t\tt12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,\r\n\t\t\tt13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,\r\n\t\t\tt14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\r\n\r\n\t\tvar det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;\r\n\r\n\t\tif ( det === 0 ) {\r\n\r\n\t\t\tvar msg = \"THREE.Matrix4.getInverse(): can't invert matrix, determinant is 0\";\r\n\r\n\t\t\tif ( throwOnDegenerate || false ) {\r\n\r\n\t\t\t\tthrow new Error( msg );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tconsole.warn( msg );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this.identity();\r\n\r\n\t\t}\r\n\t\t\r\n\t\tvar detInv = 1 / det;\r\n\r\n\t\tte[ 0 ] = t11 * detInv;\r\n\t\tte[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;\r\n\t\tte[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;\r\n\t\tte[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;\r\n\r\n\t\tte[ 4 ] = t12 * detInv;\r\n\t\tte[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;\r\n\t\tte[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;\r\n\t\tte[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;\r\n\r\n\t\tte[ 8 ] = t13 * detInv;\r\n\t\tte[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;\r\n\t\tte[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;\r\n\t\tte[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;\r\n\r\n\t\tte[ 12 ] = t14 * detInv;\r\n\t\tte[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;\r\n\t\tte[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;\r\n\t\tte[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tscale: function ( v ) {\r\n\r\n\t\tvar te = this.elements;\r\n\t\tvar x = v.x, y = v.y, z = v.z;\r\n\r\n\t\tte[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;\r\n\t\tte[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;\r\n\t\tte[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;\r\n\t\tte[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tgetMaxScaleOnAxis: function () {\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tvar scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];\r\n\t\tvar scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];\r\n\t\tvar scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];\r\n\r\n\t\treturn Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );\r\n\r\n\t},\r\n\r\n\tmakeTranslation: function ( x, y, z ) {\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\t1, 0, 0, x,\r\n\t\t\t0, 1, 0, y,\r\n\t\t\t0, 0, 1, z,\r\n\t\t\t0, 0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmakeRotationX: function ( theta ) {\r\n\r\n\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\t1, 0,  0, 0,\r\n\t\t\t0, c, - s, 0,\r\n\t\t\t0, s,  c, 0,\r\n\t\t\t0, 0,  0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmakeRotationY: function ( theta ) {\r\n\r\n\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\t c, 0, s, 0,\r\n\t\t\t 0, 1, 0, 0,\r\n\t\t\t- s, 0, c, 0,\r\n\t\t\t 0, 0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmakeRotationZ: function ( theta ) {\r\n\r\n\t\tvar c = Math.cos( theta ), s = Math.sin( theta );\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\tc, - s, 0, 0,\r\n\t\t\ts,  c, 0, 0,\r\n\t\t\t0,  0, 1, 0,\r\n\t\t\t0,  0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmakeRotationAxis: function ( axis, angle ) {\r\n\r\n\t\t// Based on http://www.gamedev.net/reference/articles/article1199.asp\r\n\r\n\t\tvar c = Math.cos( angle );\r\n\t\tvar s = Math.sin( angle );\r\n\t\tvar t = 1 - c;\r\n\t\tvar x = axis.x, y = axis.y, z = axis.z;\r\n\t\tvar tx = t * x, ty = t * y;\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\ttx * x + c, tx * y - s * z, tx * z + s * y, 0,\r\n\t\t\ttx * y + s * z, ty * y + c, ty * z - s * x, 0,\r\n\t\t\ttx * z - s * y, ty * z + s * x, t * z * z + c, 0,\r\n\t\t\t0, 0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\t return this;\r\n\r\n\t},\r\n\r\n\tmakeScale: function ( x, y, z ) {\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\tx, 0, 0, 0,\r\n\t\t\t0, y, 0, 0,\r\n\t\t\t0, 0, z, 0,\r\n\t\t\t0, 0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcompose: function ( position, quaternion, scale ) {\r\n\r\n\t\tthis.makeRotationFromQuaternion( quaternion );\r\n\t\tthis.scale( scale );\r\n\t\tthis.setPosition( position );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdecompose: function () {\r\n\r\n\t\tvar vector, matrix;\r\n\r\n\t\treturn function ( position, quaternion, scale ) {\r\n\r\n\t\t\tif ( vector === undefined ) {\r\n\r\n\t\t\t\tvector = new THREE.Vector3();\r\n\t\t\t\tmatrix = new THREE.Matrix4();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar te = this.elements;\r\n\r\n\t\t\tvar sx = vector.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();\r\n\t\t\tvar sy = vector.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();\r\n\t\t\tvar sz = vector.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();\r\n\r\n\t\t\t// if determine is negative, we need to invert one scale\r\n\t\t\tvar det = this.determinant();\r\n\t\t\tif ( det < 0 ) {\r\n\r\n\t\t\t\tsx = - sx;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tposition.x = te[ 12 ];\r\n\t\t\tposition.y = te[ 13 ];\r\n\t\t\tposition.z = te[ 14 ];\r\n\r\n\t\t\t// scale the rotation part\r\n\r\n\t\t\tmatrix.elements.set( this.elements ); // at this point matrix is incomplete so we can't use .copy()\r\n\r\n\t\t\tvar invSX = 1 / sx;\r\n\t\t\tvar invSY = 1 / sy;\r\n\t\t\tvar invSZ = 1 / sz;\r\n\r\n\t\t\tmatrix.elements[ 0 ] *= invSX;\r\n\t\t\tmatrix.elements[ 1 ] *= invSX;\r\n\t\t\tmatrix.elements[ 2 ] *= invSX;\r\n\r\n\t\t\tmatrix.elements[ 4 ] *= invSY;\r\n\t\t\tmatrix.elements[ 5 ] *= invSY;\r\n\t\t\tmatrix.elements[ 6 ] *= invSY;\r\n\r\n\t\t\tmatrix.elements[ 8 ] *= invSZ;\r\n\t\t\tmatrix.elements[ 9 ] *= invSZ;\r\n\t\t\tmatrix.elements[ 10 ] *= invSZ;\r\n\r\n\t\t\tquaternion.setFromRotationMatrix( matrix );\r\n\r\n\t\t\tscale.x = sx;\r\n\t\t\tscale.y = sy;\r\n\t\t\tscale.z = sz;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tmakeFrustum: function ( left, right, bottom, top, near, far ) {\r\n\r\n\t\tvar te = this.elements;\r\n\t\tvar x = 2 * near / ( right - left );\r\n\t\tvar y = 2 * near / ( top - bottom );\r\n\r\n\t\tvar a = ( right + left ) / ( right - left );\r\n\t\tvar b = ( top + bottom ) / ( top - bottom );\r\n\t\tvar c = - ( far + near ) / ( far - near );\r\n\t\tvar d = - 2 * far * near / ( far - near );\r\n\r\n\t\tte[ 0 ] = x;\tte[ 4 ] = 0;\tte[ 8 ] = a;\tte[ 12 ] = 0;\r\n\t\tte[ 1 ] = 0;\tte[ 5 ] = y;\tte[ 9 ] = b;\tte[ 13 ] = 0;\r\n\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = c;\tte[ 14 ] = d;\r\n\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = - 1;\tte[ 15 ] = 0;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tmakePerspective: function ( fov, aspect, near, far ) {\r\n\r\n\t\tvar ymax = near * Math.tan( THREE.Math.DEG2RAD * fov * 0.5 );\r\n\t\tvar ymin = - ymax;\r\n\t\tvar xmin = ymin * aspect;\r\n\t\tvar xmax = ymax * aspect;\r\n\r\n\t\treturn this.makeFrustum( xmin, xmax, ymin, ymax, near, far );\r\n\r\n\t},\r\n\r\n\tmakeOrthographic: function ( left, right, top, bottom, near, far ) {\r\n\r\n\t\tvar te = this.elements;\r\n\t\tvar w = 1.0 / ( right - left );\r\n\t\tvar h = 1.0 / ( top - bottom );\r\n\t\tvar p = 1.0 / ( far - near );\r\n\r\n\t\tvar x = ( right + left ) * w;\r\n\t\tvar y = ( top + bottom ) * h;\r\n\t\tvar z = ( far + near ) * p;\r\n\r\n\t\tte[ 0 ] = 2 * w;\tte[ 4 ] = 0;\tte[ 8 ] = 0;\tte[ 12 ] = - x;\r\n\t\tte[ 1 ] = 0;\tte[ 5 ] = 2 * h;\tte[ 9 ] = 0;\tte[ 13 ] = - y;\r\n\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = - 2 * p;\tte[ 14 ] = - z;\r\n\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = 0;\tte[ 15 ] = 1;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tequals: function ( matrix ) {\r\n\r\n\t\tvar te = this.elements;\r\n\t\tvar me = matrix.elements;\r\n\r\n\t\tfor ( var i = 0; i < 16; i ++ ) {\r\n\r\n\t\t\tif ( te[ i ] !== me[ i ] ) return false;\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t},\r\n\r\n\tfromArray: function ( array ) {\r\n\r\n\t\tthis.elements.set( array );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\ttoArray: function ( array, offset ) {\r\n\r\n\t\tif ( array === undefined ) array = [];\r\n\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\tvar te = this.elements;\r\n\r\n\t\tarray[ offset ] = te[ 0 ];\r\n\t\tarray[ offset + 1 ] = te[ 1 ];\r\n\t\tarray[ offset + 2 ] = te[ 2 ];\r\n\t\tarray[ offset + 3 ] = te[ 3 ];\r\n\r\n\t\tarray[ offset + 4 ] = te[ 4 ];\r\n\t\tarray[ offset + 5 ] = te[ 5 ];\r\n\t\tarray[ offset + 6 ] = te[ 6 ];\r\n\t\tarray[ offset + 7 ] = te[ 7 ];\r\n\r\n\t\tarray[ offset + 8 ]  = te[ 8 ];\r\n\t\tarray[ offset + 9 ]  = te[ 9 ];\r\n\t\tarray[ offset + 10 ] = te[ 10 ];\r\n\t\tarray[ offset + 11 ] = te[ 11 ];\r\n\r\n\t\tarray[ offset + 12 ] = te[ 12 ];\r\n\t\tarray[ offset + 13 ] = te[ 13 ];\r\n\t\tarray[ offset + 14 ] = te[ 14 ];\r\n\t\tarray[ offset + 15 ] = te[ 15 ];\r\n\r\n\t\treturn array;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/math/Ray.js\r\n\r\n/**\r\n * @author bhouston / http://clara.io\r\n */\r\n\r\nTHREE.Ray = function ( origin, direction ) {\r\n\r\n\tthis.origin = ( origin !== undefined ) ? origin : new THREE.Vector3();\r\n\tthis.direction = ( direction !== undefined ) ? direction : new THREE.Vector3();\r\n\r\n};\r\n\r\nTHREE.Ray.prototype = {\r\n\r\n\tconstructor: THREE.Ray,\r\n\r\n\tset: function ( origin, direction ) {\r\n\r\n\t\tthis.origin.copy( origin );\r\n\t\tthis.direction.copy( direction );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t},\r\n\r\n\tcopy: function ( ray ) {\r\n\r\n\t\tthis.origin.copy( ray.origin );\r\n\t\tthis.direction.copy( ray.direction );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tat: function ( t, optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\r\n\t\treturn result.copy( this.direction ).multiplyScalar( t ).add( this.origin );\r\n\r\n\t},\r\n\r\n\tlookAt: function ( v ) {\r\n\r\n\t\tthis.direction.copy( v ).sub( this.origin ).normalize();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\trecast: function () {\r\n\r\n\t\tvar v1 = new THREE.Vector3();\r\n\r\n\t\treturn function ( t ) {\r\n\r\n\t\t\tthis.origin.copy( this.at( t, v1 ) );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tclosestPointToPoint: function ( point, optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\tresult.subVectors( point, this.origin );\r\n\t\tvar directionDistance = result.dot( this.direction );\r\n\r\n\t\tif ( directionDistance < 0 ) {\r\n\r\n\t\t\treturn result.copy( this.origin );\r\n\r\n\t\t}\r\n\r\n\t\treturn result.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\r\n\r\n\t},\r\n\r\n\tdistanceToPoint: function ( point ) {\r\n\r\n\t\treturn Math.sqrt( this.distanceSqToPoint( point ) );\r\n\r\n\t},\r\n\r\n\tdistanceSqToPoint: function () {\r\n\r\n\t\tvar v1 = new THREE.Vector3();\r\n\r\n\t\treturn function ( point ) {\r\n\r\n\t\t\tvar directionDistance = v1.subVectors( point, this.origin ).dot( this.direction );\r\n\r\n\t\t\t// point behind the ray\r\n\r\n\t\t\tif ( directionDistance < 0 ) {\r\n\r\n\t\t\t\treturn this.origin.distanceToSquared( point );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tv1.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );\r\n\r\n\t\t\treturn v1.distanceToSquared( point );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tdistanceSqToSegment: function () {\r\n\r\n\t\tvar segCenter = new THREE.Vector3();\r\n\t\tvar segDir = new THREE.Vector3();\r\n\t\tvar diff = new THREE.Vector3();\r\n\r\n\t\treturn function ( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {\r\n\r\n\t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteDistRaySegment.h\r\n\t\t\t// It returns the min distance between the ray and the segment\r\n\t\t\t// defined by v0 and v1\r\n\t\t\t// It can also set two optional targets :\r\n\t\t\t// - The closest point on the ray\r\n\t\t\t// - The closest point on the segment\r\n\r\n\t\t\tsegCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );\r\n\t\t\tsegDir.copy( v1 ).sub( v0 ).normalize();\r\n\t\t\tdiff.copy( this.origin ).sub( segCenter );\r\n\r\n\t\t\tvar segExtent = v0.distanceTo( v1 ) * 0.5;\r\n\t\t\tvar a01 = - this.direction.dot( segDir );\r\n\t\t\tvar b0 = diff.dot( this.direction );\r\n\t\t\tvar b1 = - diff.dot( segDir );\r\n\t\t\tvar c = diff.lengthSq();\r\n\t\t\tvar det = Math.abs( 1 - a01 * a01 );\r\n\t\t\tvar s0, s1, sqrDist, extDet;\r\n\r\n\t\t\tif ( det > 0 ) {\r\n\r\n\t\t\t\t// The ray and segment are not parallel.\r\n\r\n\t\t\t\ts0 = a01 * b1 - b0;\r\n\t\t\t\ts1 = a01 * b0 - b1;\r\n\t\t\t\textDet = segExtent * det;\r\n\r\n\t\t\t\tif ( s0 >= 0 ) {\r\n\r\n\t\t\t\t\tif ( s1 >= - extDet ) {\r\n\r\n\t\t\t\t\t\tif ( s1 <= extDet ) {\r\n\r\n\t\t\t\t\t\t\t// region 0\r\n\t\t\t\t\t\t\t// Minimum at interior points of ray and segment.\r\n\r\n\t\t\t\t\t\t\tvar invDet = 1 / det;\r\n\t\t\t\t\t\t\ts0 *= invDet;\r\n\t\t\t\t\t\t\ts1 *= invDet;\r\n\t\t\t\t\t\t\tsqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t// region 1\r\n\r\n\t\t\t\t\t\t\ts1 = segExtent;\r\n\t\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\r\n\t\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t// region 5\r\n\r\n\t\t\t\t\t\ts1 = - segExtent;\r\n\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\r\n\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tif ( s1 <= - extDet ) {\r\n\r\n\t\t\t\t\t\t// region 4\r\n\r\n\t\t\t\t\t\ts0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );\r\n\t\t\t\t\t\ts1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\r\n\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\r\n\r\n\t\t\t\t\t} else if ( s1 <= extDet ) {\r\n\r\n\t\t\t\t\t\t// region 3\r\n\r\n\t\t\t\t\t\ts0 = 0;\r\n\t\t\t\t\t\ts1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );\r\n\t\t\t\t\t\tsqrDist = s1 * ( s1 + 2 * b1 ) + c;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t// region 2\r\n\r\n\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * segExtent + b0 ) );\r\n\t\t\t\t\t\ts1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\r\n\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// Ray and segment are parallel.\r\n\r\n\t\t\t\ts1 = ( a01 > 0 ) ? - segExtent : segExtent;\r\n\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\r\n\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( optionalPointOnRay ) {\r\n\r\n\t\t\t\toptionalPointOnRay.copy( this.direction ).multiplyScalar( s0 ).add( this.origin );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( optionalPointOnSegment ) {\r\n\r\n\t\t\t\toptionalPointOnSegment.copy( segDir ).multiplyScalar( s1 ).add( segCenter );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn sqrDist;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tintersectSphere: function () {\r\n\r\n\t\tvar v1 = new THREE.Vector3();\r\n\r\n\t\treturn function ( sphere, optionalTarget ) {\r\n\r\n\t\t\tv1.subVectors( sphere.center, this.origin );\r\n\t\t\tvar tca = v1.dot( this.direction );\r\n\t\t\tvar d2 = v1.dot( v1 ) - tca * tca;\r\n\t\t\tvar radius2 = sphere.radius * sphere.radius;\r\n\r\n\t\t\tif ( d2 > radius2 ) return null;\r\n\r\n\t\t\tvar thc = Math.sqrt( radius2 - d2 );\r\n\r\n\t\t\t// t0 = first intersect point - entrance on front of sphere\r\n\t\t\tvar t0 = tca - thc;\r\n\r\n\t\t\t// t1 = second intersect point - exit point on back of sphere\r\n\t\t\tvar t1 = tca + thc;\r\n\r\n\t\t\t// test to see if both t0 and t1 are behind the ray - if so, return null\r\n\t\t\tif ( t0 < 0 && t1 < 0 ) return null;\r\n\r\n\t\t\t// test to see if t0 is behind the ray:\r\n\t\t\t// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,\r\n\t\t\t// in order to always return an intersect point that is in front of the ray.\r\n\t\t\tif ( t0 < 0 ) return this.at( t1, optionalTarget );\r\n\r\n\t\t\t// else t0 is in front of the ray, so return the first collision point scaled by t0\r\n\t\t\treturn this.at( t0, optionalTarget );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tintersectsSphere: function ( sphere ) {\r\n\r\n\t\treturn this.distanceToPoint( sphere.center ) <= sphere.radius;\r\n\r\n\t},\r\n\r\n\tdistanceToPlane: function ( plane ) {\r\n\r\n\t\tvar denominator = plane.normal.dot( this.direction );\r\n\r\n\t\tif ( denominator === 0 ) {\r\n\r\n\t\t\t// line is coplanar, return origin\r\n\t\t\tif ( plane.distanceToPoint( this.origin ) === 0 ) {\r\n\r\n\t\t\t\treturn 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Null is preferable to undefined since undefined means.... it is undefined\r\n\r\n\t\t\treturn null;\r\n\r\n\t\t}\r\n\r\n\t\tvar t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;\r\n\r\n\t\t// Return if the ray never intersects the plane\r\n\r\n\t\treturn t >= 0 ? t :  null;\r\n\r\n\t},\r\n\r\n\tintersectPlane: function ( plane, optionalTarget ) {\r\n\r\n\t\tvar t = this.distanceToPlane( plane );\r\n\r\n\t\tif ( t === null ) {\r\n\r\n\t\t\treturn null;\r\n\r\n\t\t}\r\n\r\n\t\treturn this.at( t, optionalTarget );\r\n\r\n\t},\r\n\r\n\r\n\r\n\tintersectsPlane: function ( plane ) {\r\n\r\n\t\t// check if the ray lies on the plane first\r\n\r\n\t\tvar distToPoint = plane.distanceToPoint( this.origin );\r\n\r\n\t\tif ( distToPoint === 0 ) {\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t}\r\n\r\n\t\tvar denominator = plane.normal.dot( this.direction );\r\n\r\n\t\tif ( denominator * distToPoint < 0 ) {\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t}\r\n\r\n\t\t// ray origin is behind the plane (and is pointing behind it)\r\n\r\n\t\treturn false;\r\n\r\n\t},\r\n\r\n\tintersectBox: function ( box, optionalTarget ) {\r\n\r\n\t\tvar tmin, tmax, tymin, tymax, tzmin, tzmax;\r\n\r\n\t\tvar invdirx = 1 / this.direction.x,\r\n\t\t\tinvdiry = 1 / this.direction.y,\r\n\t\t\tinvdirz = 1 / this.direction.z;\r\n\r\n\t\tvar origin = this.origin;\r\n\r\n\t\tif ( invdirx >= 0 ) {\r\n\r\n\t\t\ttmin = ( box.min.x - origin.x ) * invdirx;\r\n\t\t\ttmax = ( box.max.x - origin.x ) * invdirx;\r\n\r\n\t\t} else {\r\n\r\n\t\t\ttmin = ( box.max.x - origin.x ) * invdirx;\r\n\t\t\ttmax = ( box.min.x - origin.x ) * invdirx;\r\n\r\n\t\t}\r\n\r\n\t\tif ( invdiry >= 0 ) {\r\n\r\n\t\t\ttymin = ( box.min.y - origin.y ) * invdiry;\r\n\t\t\ttymax = ( box.max.y - origin.y ) * invdiry;\r\n\r\n\t\t} else {\r\n\r\n\t\t\ttymin = ( box.max.y - origin.y ) * invdiry;\r\n\t\t\ttymax = ( box.min.y - origin.y ) * invdiry;\r\n\r\n\t\t}\r\n\r\n\t\tif ( ( tmin > tymax ) || ( tymin > tmax ) ) return null;\r\n\r\n\t\t// These lines also handle the case where tmin or tmax is NaN\r\n\t\t// (result of 0 * Infinity). x !== x returns true if x is NaN\r\n\r\n\t\tif ( tymin > tmin || tmin !== tmin ) tmin = tymin;\r\n\r\n\t\tif ( tymax < tmax || tmax !== tmax ) tmax = tymax;\r\n\r\n\t\tif ( invdirz >= 0 ) {\r\n\r\n\t\t\ttzmin = ( box.min.z - origin.z ) * invdirz;\r\n\t\t\ttzmax = ( box.max.z - origin.z ) * invdirz;\r\n\r\n\t\t} else {\r\n\r\n\t\t\ttzmin = ( box.max.z - origin.z ) * invdirz;\r\n\t\t\ttzmax = ( box.min.z - origin.z ) * invdirz;\r\n\r\n\t\t}\r\n\r\n\t\tif ( ( tmin > tzmax ) || ( tzmin > tmax ) ) return null;\r\n\r\n\t\tif ( tzmin > tmin || tmin !== tmin ) tmin = tzmin;\r\n\r\n\t\tif ( tzmax < tmax || tmax !== tmax ) tmax = tzmax;\r\n\r\n\t\t//return point closest to the ray (positive side)\r\n\r\n\t\tif ( tmax < 0 ) return null;\r\n\r\n\t\treturn this.at( tmin >= 0 ? tmin : tmax, optionalTarget );\r\n\r\n\t},\r\n\r\n\tintersectsBox: ( function () {\r\n\r\n\t\tvar v = new THREE.Vector3();\r\n\r\n\t\treturn function ( box ) {\r\n\r\n\t\t\treturn this.intersectBox( box, v ) !== null;\r\n\r\n\t\t};\r\n\r\n\t} )(),\r\n\r\n\tintersectTriangle: function () {\r\n\r\n\t\t// Compute the offset origin, edges, and normal.\r\n\t\tvar diff = new THREE.Vector3();\r\n\t\tvar edge1 = new THREE.Vector3();\r\n\t\tvar edge2 = new THREE.Vector3();\r\n\t\tvar normal = new THREE.Vector3();\r\n\r\n\t\treturn function ( a, b, c, backfaceCulling, optionalTarget ) {\r\n\r\n\t\t\t// from http://www.geometrictools.com/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h\r\n\r\n\t\t\tedge1.subVectors( b, a );\r\n\t\t\tedge2.subVectors( c, a );\r\n\t\t\tnormal.crossVectors( edge1, edge2 );\r\n\r\n\t\t\t// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\r\n\t\t\t// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\r\n\t\t\t//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\r\n\t\t\t//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\r\n\t\t\t//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\r\n\t\t\tvar DdN = this.direction.dot( normal );\r\n\t\t\tvar sign;\r\n\r\n\t\t\tif ( DdN > 0 ) {\r\n\r\n\t\t\t\tif ( backfaceCulling ) return null;\r\n\t\t\t\tsign = 1;\r\n\r\n\t\t\t} else if ( DdN < 0 ) {\r\n\r\n\t\t\t\tsign = - 1;\r\n\t\t\t\tDdN = - DdN;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\treturn null;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tdiff.subVectors( this.origin, a );\r\n\t\t\tvar DdQxE2 = sign * this.direction.dot( edge2.crossVectors( diff, edge2 ) );\r\n\r\n\t\t\t// b1 < 0, no intersection\r\n\t\t\tif ( DdQxE2 < 0 ) {\r\n\r\n\t\t\t\treturn null;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar DdE1xQ = sign * this.direction.dot( edge1.cross( diff ) );\r\n\r\n\t\t\t// b2 < 0, no intersection\r\n\t\t\tif ( DdE1xQ < 0 ) {\r\n\r\n\t\t\t\treturn null;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// b1+b2 > 1, no intersection\r\n\t\t\tif ( DdQxE2 + DdE1xQ > DdN ) {\r\n\r\n\t\t\t\treturn null;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Line intersects triangle, check if ray does.\r\n\t\t\tvar QdN = - sign * diff.dot( normal );\r\n\r\n\t\t\t// t < 0, no intersection\r\n\t\t\tif ( QdN < 0 ) {\r\n\r\n\t\t\t\treturn null;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Ray intersects triangle.\r\n\t\t\treturn this.at( QdN / DdN, optionalTarget );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tapplyMatrix4: function ( matrix4 ) {\r\n\r\n\t\tthis.direction.add( this.origin ).applyMatrix4( matrix4 );\r\n\t\tthis.origin.applyMatrix4( matrix4 );\r\n\t\tthis.direction.sub( this.origin );\r\n\t\tthis.direction.normalize();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tequals: function ( ray ) {\r\n\r\n\t\treturn ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/math/Sphere.js\r\n\r\n/**\r\n * @author bhouston / http://clara.io\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.Sphere = function ( center, radius ) {\r\n\r\n\tthis.center = ( center !== undefined ) ? center : new THREE.Vector3();\r\n\tthis.radius = ( radius !== undefined ) ? radius : 0;\r\n\r\n};\r\n\r\nTHREE.Sphere.prototype = {\r\n\r\n\tconstructor: THREE.Sphere,\r\n\r\n\tset: function ( center, radius ) {\r\n\r\n\t\tthis.center.copy( center );\r\n\t\tthis.radius = radius;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromPoints: function () {\r\n\r\n\t\tvar box = new THREE.Box3();\r\n\r\n\t\treturn function ( points, optionalCenter ) {\r\n\r\n\t\t\tvar center = this.center;\r\n\r\n\t\t\tif ( optionalCenter !== undefined ) {\r\n\r\n\t\t\t\tcenter.copy( optionalCenter );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tbox.setFromPoints( points ).center( center );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar maxRadiusSq = 0;\r\n\r\n\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.radius = Math.sqrt( maxRadiusSq );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t},\r\n\r\n\tcopy: function ( sphere ) {\r\n\r\n\t\tthis.center.copy( sphere.center );\r\n\t\tthis.radius = sphere.radius;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tempty: function () {\r\n\r\n\t\treturn ( this.radius <= 0 );\r\n\r\n\t},\r\n\r\n\tcontainsPoint: function ( point ) {\r\n\r\n\t\treturn ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );\r\n\r\n\t},\r\n\r\n\tdistanceToPoint: function ( point ) {\r\n\r\n\t\treturn ( point.distanceTo( this.center ) - this.radius );\r\n\r\n\t},\r\n\r\n\tintersectsSphere: function ( sphere ) {\r\n\r\n\t\tvar radiusSum = this.radius + sphere.radius;\r\n\r\n\t\treturn sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );\r\n\r\n\t},\r\n\r\n\tintersectsBox: function ( box ) {\r\n\r\n\t\treturn box.intersectsSphere( this );\r\n\r\n\t},\r\n\r\n\tintersectsPlane: function ( plane ) {\r\n\r\n\t\t// We use the following equation to compute the signed distance from\r\n\t\t// the center of the sphere to the plane.\r\n\t\t//\r\n\t\t// distance = q * n - d\r\n\t\t//\r\n\t\t// If this distance is greater than the radius of the sphere,\r\n\t\t// then there is no intersection.\r\n\r\n\t\treturn Math.abs( this.center.dot( plane.normal ) - plane.constant ) <= this.radius;\r\n\r\n\t},\r\n\r\n\tclampPoint: function ( point, optionalTarget ) {\r\n\r\n\t\tvar deltaLengthSq = this.center.distanceToSquared( point );\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\r\n\t\tresult.copy( point );\r\n\r\n\t\tif ( deltaLengthSq > ( this.radius * this.radius ) ) {\r\n\r\n\t\t\tresult.sub( this.center ).normalize();\r\n\t\t\tresult.multiplyScalar( this.radius ).add( this.center );\r\n\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\r\n\t},\r\n\r\n\tgetBoundingBox: function ( optionalTarget ) {\r\n\r\n\t\tvar box = optionalTarget || new THREE.Box3();\r\n\r\n\t\tbox.set( this.center, this.center );\r\n\t\tbox.expandByScalar( this.radius );\r\n\r\n\t\treturn box;\r\n\r\n\t},\r\n\r\n\tapplyMatrix4: function ( matrix ) {\r\n\r\n\t\tthis.center.applyMatrix4( matrix );\r\n\t\tthis.radius = this.radius * matrix.getMaxScaleOnAxis();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\ttranslate: function ( offset ) {\r\n\r\n\t\tthis.center.add( offset );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tequals: function ( sphere ) {\r\n\r\n\t\treturn sphere.center.equals( this.center ) && ( sphere.radius === this.radius );\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/math/Frustum.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author bhouston / http://clara.io\r\n */\r\n\r\nTHREE.Frustum = function ( p0, p1, p2, p3, p4, p5 ) {\r\n\r\n\tthis.planes = [\r\n\r\n\t\t( p0 !== undefined ) ? p0 : new THREE.Plane(),\r\n\t\t( p1 !== undefined ) ? p1 : new THREE.Plane(),\r\n\t\t( p2 !== undefined ) ? p2 : new THREE.Plane(),\r\n\t\t( p3 !== undefined ) ? p3 : new THREE.Plane(),\r\n\t\t( p4 !== undefined ) ? p4 : new THREE.Plane(),\r\n\t\t( p5 !== undefined ) ? p5 : new THREE.Plane()\r\n\r\n\t];\r\n\r\n};\r\n\r\nTHREE.Frustum.prototype = {\r\n\r\n\tconstructor: THREE.Frustum,\r\n\r\n\tset: function ( p0, p1, p2, p3, p4, p5 ) {\r\n\r\n\t\tvar planes = this.planes;\r\n\r\n\t\tplanes[ 0 ].copy( p0 );\r\n\t\tplanes[ 1 ].copy( p1 );\r\n\t\tplanes[ 2 ].copy( p2 );\r\n\t\tplanes[ 3 ].copy( p3 );\r\n\t\tplanes[ 4 ].copy( p4 );\r\n\t\tplanes[ 5 ].copy( p5 );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t},\r\n\r\n\tcopy: function ( frustum ) {\r\n\r\n\t\tvar planes = this.planes;\r\n\r\n\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\tplanes[ i ].copy( frustum.planes[ i ] );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromMatrix: function ( m ) {\r\n\r\n\t\tvar planes = this.planes;\r\n\t\tvar me = m.elements;\r\n\t\tvar me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];\r\n\t\tvar me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];\r\n\t\tvar me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];\r\n\t\tvar me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];\r\n\r\n\t\tplanes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();\r\n\t\tplanes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();\r\n\t\tplanes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();\r\n\t\tplanes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();\r\n\t\tplanes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();\r\n\t\tplanes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tintersectsObject: function () {\r\n\r\n\t\tvar sphere = new THREE.Sphere();\r\n\r\n\t\treturn function ( object ) {\r\n\r\n\t\t\tvar geometry = object.geometry;\r\n\r\n\t\t\tif ( geometry.boundingSphere === null )\r\n\t\t\t\tgeometry.computeBoundingSphere();\r\n\r\n\t\t\tsphere.copy( geometry.boundingSphere )\r\n\t\t\t\t.applyMatrix4( object.matrixWorld );\r\n\r\n\t\t\treturn this.intersectsSphere( sphere );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tintersectsSprite: function () {\r\n\r\n\t\tvar sphere = new THREE.Sphere();\r\n\r\n\t\treturn function ( sprite ) {\r\n\r\n\t\t\tsphere.center.set( 0, 0, 0 );\r\n\t\t\tsphere.radius = 0.7071067811865476;\r\n\t\t\tsphere.applyMatrix4( sprite.matrixWorld );\r\n\r\n\t\t\treturn this.intersectsSphere( sphere );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tintersectsSphere: function ( sphere ) {\r\n\r\n\t\tvar planes = this.planes;\r\n\t\tvar center = sphere.center;\r\n\t\tvar negRadius = - sphere.radius;\r\n\r\n\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\tvar distance = planes[ i ].distanceToPoint( center );\r\n\r\n\t\t\tif ( distance < negRadius ) {\r\n\r\n\t\t\t\treturn false;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t},\r\n\r\n\tintersectsBox: function () {\r\n\r\n\t\tvar p1 = new THREE.Vector3(),\r\n\t\t\tp2 = new THREE.Vector3();\r\n\r\n\t\treturn function ( box ) {\r\n\r\n\t\t\tvar planes = this.planes;\r\n\r\n\t\t\tfor ( var i = 0; i < 6 ; i ++ ) {\r\n\r\n\t\t\t\tvar plane = planes[ i ];\r\n\r\n\t\t\t\tp1.x = plane.normal.x > 0 ? box.min.x : box.max.x;\r\n\t\t\t\tp2.x = plane.normal.x > 0 ? box.max.x : box.min.x;\r\n\t\t\t\tp1.y = plane.normal.y > 0 ? box.min.y : box.max.y;\r\n\t\t\t\tp2.y = plane.normal.y > 0 ? box.max.y : box.min.y;\r\n\t\t\t\tp1.z = plane.normal.z > 0 ? box.min.z : box.max.z;\r\n\t\t\t\tp2.z = plane.normal.z > 0 ? box.max.z : box.min.z;\r\n\r\n\t\t\t\tvar d1 = plane.distanceToPoint( p1 );\r\n\t\t\t\tvar d2 = plane.distanceToPoint( p2 );\r\n\r\n\t\t\t\t// if both outside plane, no intersection\r\n\r\n\t\t\t\tif ( d1 < 0 && d2 < 0 ) {\r\n\r\n\t\t\t\t\treturn false;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\r\n\tcontainsPoint: function ( point ) {\r\n\r\n\t\tvar planes = this.planes;\r\n\r\n\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\tif ( planes[ i ].distanceToPoint( point ) < 0 ) {\r\n\r\n\t\t\t\treturn false;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/math/Plane.js\r\n\r\n/**\r\n * @author bhouston / http://clara.io\r\n */\r\n\r\nTHREE.Plane = function ( normal, constant ) {\r\n\r\n\tthis.normal = ( normal !== undefined ) ? normal : new THREE.Vector3( 1, 0, 0 );\r\n\tthis.constant = ( constant !== undefined ) ? constant : 0;\r\n\r\n};\r\n\r\nTHREE.Plane.prototype = {\r\n\r\n\tconstructor: THREE.Plane,\r\n\r\n\tset: function ( normal, constant ) {\r\n\r\n\t\tthis.normal.copy( normal );\r\n\t\tthis.constant = constant;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetComponents: function ( x, y, z, w ) {\r\n\r\n\t\tthis.normal.set( x, y, z );\r\n\t\tthis.constant = w;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromNormalAndCoplanarPoint: function ( normal, point ) {\r\n\r\n\t\tthis.normal.copy( normal );\r\n\t\tthis.constant = - point.dot( this.normal );\t// must be this.normal, not normal, as this.normal is normalized\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromCoplanarPoints: function () {\r\n\r\n\t\tvar v1 = new THREE.Vector3();\r\n\t\tvar v2 = new THREE.Vector3();\r\n\r\n\t\treturn function ( a, b, c ) {\r\n\r\n\t\t\tvar normal = v1.subVectors( c, b ).cross( v2.subVectors( a, b ) ).normalize();\r\n\r\n\t\t\t// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\r\n\r\n\t\t\tthis.setFromNormalAndCoplanarPoint( normal, a );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t},\r\n\r\n\tcopy: function ( plane ) {\r\n\r\n\t\tthis.normal.copy( plane.normal );\r\n\t\tthis.constant = plane.constant;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tnormalize: function () {\r\n\r\n\t\t// Note: will lead to a divide by zero if the plane is invalid.\r\n\r\n\t\tvar inverseNormalLength = 1.0 / this.normal.length();\r\n\t\tthis.normal.multiplyScalar( inverseNormalLength );\r\n\t\tthis.constant *= inverseNormalLength;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tnegate: function () {\r\n\r\n\t\tthis.constant *= - 1;\r\n\t\tthis.normal.negate();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdistanceToPoint: function ( point ) {\r\n\r\n\t\treturn this.normal.dot( point ) + this.constant;\r\n\r\n\t},\r\n\r\n\tdistanceToSphere: function ( sphere ) {\r\n\r\n\t\treturn this.distanceToPoint( sphere.center ) - sphere.radius;\r\n\r\n\t},\r\n\r\n\tprojectPoint: function ( point, optionalTarget ) {\r\n\r\n\t\treturn this.orthoPoint( point, optionalTarget ).sub( point ).negate();\r\n\r\n\t},\r\n\r\n\torthoPoint: function ( point, optionalTarget ) {\r\n\r\n\t\tvar perpendicularMagnitude = this.distanceToPoint( point );\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\treturn result.copy( this.normal ).multiplyScalar( perpendicularMagnitude );\r\n\r\n\t},\r\n\r\n\tintersectLine: function () {\r\n\r\n\t\tvar v1 = new THREE.Vector3();\r\n\r\n\t\treturn function ( line, optionalTarget ) {\r\n\r\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\r\n\t\t\tvar direction = line.delta( v1 );\r\n\r\n\t\t\tvar denominator = this.normal.dot( direction );\r\n\r\n\t\t\tif ( denominator === 0 ) {\r\n\r\n\t\t\t\t// line is coplanar, return origin\r\n\t\t\t\tif ( this.distanceToPoint( line.start ) === 0 ) {\r\n\r\n\t\t\t\t\treturn result.copy( line.start );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Unsure if this is the correct method to handle this case.\r\n\t\t\t\treturn undefined;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;\r\n\r\n\t\t\tif ( t < 0 || t > 1 ) {\r\n\r\n\t\t\t\treturn undefined;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn result.copy( direction ).multiplyScalar( t ).add( line.start );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tintersectsLine: function ( line ) {\r\n\r\n\t\t// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\r\n\r\n\t\tvar startSign = this.distanceToPoint( line.start );\r\n\t\tvar endSign = this.distanceToPoint( line.end );\r\n\r\n\t\treturn ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );\r\n\r\n\t},\r\n\r\n\tintersectsBox: function ( box ) {\r\n\r\n\t\treturn box.intersectsPlane( this );\r\n\r\n\t},\r\n\r\n\tintersectsSphere: function ( sphere ) {\r\n\r\n\t\treturn sphere.intersectsPlane( this );\r\n\r\n\t},\r\n\r\n\tcoplanarPoint: function ( optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\treturn result.copy( this.normal ).multiplyScalar( - this.constant );\r\n\r\n\t},\r\n\r\n\tapplyMatrix4: function () {\r\n\r\n\t\tvar v1 = new THREE.Vector3();\r\n\t\tvar m1 = new THREE.Matrix3();\r\n\r\n\t\treturn function ( matrix, optionalNormalMatrix ) {\r\n\r\n\t\t\tvar referencePoint = this.coplanarPoint( v1 ).applyMatrix4( matrix );\r\n\r\n\t\t\t// transform normal based on theory here:\r\n\t\t\t// http://www.songho.ca/opengl/gl_normaltransform.html\r\n\t\t\tvar normalMatrix = optionalNormalMatrix || m1.getNormalMatrix( matrix );\r\n\t\t\tvar normal = this.normal.applyMatrix3( normalMatrix ).normalize();\r\n\r\n\t\t\t// recalculate constant (like in setFromNormalAndCoplanarPoint)\r\n\t\t\tthis.constant = - referencePoint.dot( normal );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\ttranslate: function ( offset ) {\r\n\r\n\t\tthis.constant = this.constant - offset.dot( this.normal );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tequals: function ( plane ) {\r\n\r\n\t\treturn plane.normal.equals( this.normal ) && ( plane.constant === this.constant );\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/math/Spherical.js\r\n\r\n/**\r\n * @author bhouston / http://clara.io\r\n * @author WestLangley / http://github.com/WestLangley\r\n *\r\n * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system\r\n *\r\n * The poles (phi) are at the positive and negative y axis.\r\n * The equator starts at positive z.\r\n */\r\n\r\nTHREE.Spherical = function ( radius, phi, theta ) {\r\n\r\n\tthis.radius = ( radius !== undefined ) ? radius : 1.0;\r\n\tthis.phi = ( phi !== undefined ) ? phi : 0; // up / down towards top and bottom pole\r\n\tthis.theta = ( theta !== undefined ) ? theta : 0; // around the equator of the sphere\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\nTHREE.Spherical.prototype = {\r\n\r\n\tconstructor: THREE.Spherical,\r\n\r\n\tset: function ( radius, phi, theta ) {\r\n\r\n\t\tthis.radius = radius;\r\n\t\tthis.phi = phi;\r\n\t\tthis.theta = theta;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t},\r\n\r\n\tcopy: function ( other ) {\r\n\r\n\t\tthis.radius.copy( other.radius );\r\n\t\tthis.phi.copy( other.phi );\r\n\t\tthis.theta.copy( other.theta );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\t// restrict phi to be betwee EPS and PI-EPS\r\n\tmakeSafe: function() {\r\n\r\n\t\tvar EPS = 0.000001;\r\n\t\tthis.phi = Math.max( EPS, Math.min( Math.PI - EPS, this.phi ) );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromVector3: function( vec3 ) {\r\n\r\n\t\tthis.radius = vec3.length();\r\n\r\n\t\tif ( this.radius === 0 ) {\r\n\r\n\t\t\tthis.theta = 0;\r\n\t\t\tthis.phi = 0;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.theta = Math.atan2( vec3.x, vec3.z ); // equator angle around y-up axis\r\n\t\t\tthis.phi = Math.acos( THREE.Math.clamp( vec3.y / this.radius, - 1, 1 ) ); // polar angle\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n};\r\n\r\n// File:src/math/Math.js\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.Math = {\r\n\r\n\tDEG2RAD: Math.PI / 180,\r\n\tRAD2DEG: 180 / Math.PI,\r\n\r\n\tgenerateUUID: function () {\r\n\r\n\t\t// http://www.broofa.com/Tools/Math.uuid.htm\r\n\r\n\t\tvar chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split( '' );\r\n\t\tvar uuid = new Array( 36 );\r\n\t\tvar rnd = 0, r;\r\n\r\n\t\treturn function () {\r\n\r\n\t\t\tfor ( var i = 0; i < 36; i ++ ) {\r\n\r\n\t\t\t\tif ( i === 8 || i === 13 || i === 18 || i === 23 ) {\r\n\r\n\t\t\t\t\tuuid[ i ] = '-';\r\n\r\n\t\t\t\t} else if ( i === 14 ) {\r\n\r\n\t\t\t\t\tuuid[ i ] = '4';\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tif ( rnd <= 0x02 ) rnd = 0x2000000 + ( Math.random() * 0x1000000 ) | 0;\r\n\t\t\t\t\tr = rnd & 0xf;\r\n\t\t\t\t\trnd = rnd >> 4;\r\n\t\t\t\t\tuuid[ i ] = chars[ ( i === 19 ) ? ( r & 0x3 ) | 0x8 : r ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn uuid.join( '' );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tclamp: function ( value, min, max ) {\r\n\r\n\t\treturn Math.max( min, Math.min( max, value ) );\r\n\r\n\t},\r\n\r\n\t// compute euclidian modulo of m % n\r\n\t// https://en.wikipedia.org/wiki/Modulo_operation\r\n\r\n\teuclideanModulo: function ( n, m ) {\r\n\r\n\t\treturn ( ( n % m ) + m ) % m;\r\n\r\n\t},\r\n\r\n\t// Linear mapping from range <a1, a2> to range <b1, b2>\r\n\r\n\tmapLinear: function ( x, a1, a2, b1, b2 ) {\r\n\r\n\t\treturn b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );\r\n\r\n\t},\r\n\r\n\t// http://en.wikipedia.org/wiki/Smoothstep\r\n\r\n\tsmoothstep: function ( x, min, max ) {\r\n\r\n\t\tif ( x <= min ) return 0;\r\n\t\tif ( x >= max ) return 1;\r\n\r\n\t\tx = ( x - min ) / ( max - min );\r\n\r\n\t\treturn x * x * ( 3 - 2 * x );\r\n\r\n\t},\r\n\r\n\tsmootherstep: function ( x, min, max ) {\r\n\r\n\t\tif ( x <= min ) return 0;\r\n\t\tif ( x >= max ) return 1;\r\n\r\n\t\tx = ( x - min ) / ( max - min );\r\n\r\n\t\treturn x * x * x * ( x * ( x * 6 - 15 ) + 10 );\r\n\r\n\t},\r\n\r\n\trandom16: function () {\r\n\r\n\t\tconsole.warn( 'THREE.Math.random16() has been deprecated. Use Math.random() instead.' );\r\n\t\treturn Math.random();\r\n\r\n\t},\r\n\r\n\t// Random integer from <low, high> interval\r\n\r\n\trandInt: function ( low, high ) {\r\n\r\n\t\treturn low + Math.floor( Math.random() * ( high - low + 1 ) );\r\n\r\n\t},\r\n\r\n\t// Random float from <low, high> interval\r\n\r\n\trandFloat: function ( low, high ) {\r\n\r\n\t\treturn low + Math.random() * ( high - low );\r\n\r\n\t},\r\n\r\n\t// Random float from <-range/2, range/2> interval\r\n\r\n\trandFloatSpread: function ( range ) {\r\n\r\n\t\treturn range * ( 0.5 - Math.random() );\r\n\r\n\t},\r\n\r\n\tdegToRad: function ( degrees ) {\r\n\r\n\t\treturn degrees * THREE.Math.DEG2RAD;\r\n\r\n\t},\r\n\r\n\tradToDeg: function ( radians ) {\r\n\r\n\t\treturn radians * THREE.Math.RAD2DEG;\r\n\r\n\t},\r\n\r\n\tisPowerOfTwo: function ( value ) {\r\n\r\n\t\treturn ( value & ( value - 1 ) ) === 0 && value !== 0;\r\n\r\n\t},\r\n\r\n\tnearestPowerOfTwo: function ( value ) {\r\n\r\n\t\treturn Math.pow( 2, Math.round( Math.log( value ) / Math.LN2 ) );\r\n\r\n\t},\r\n\r\n\tnextPowerOfTwo: function ( value ) {\r\n\r\n\t\tvalue --;\r\n\t\tvalue |= value >> 1;\r\n\t\tvalue |= value >> 2;\r\n\t\tvalue |= value >> 4;\r\n\t\tvalue |= value >> 8;\r\n\t\tvalue |= value >> 16;\r\n\t\tvalue ++;\r\n\r\n\t\treturn value;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/math/Spline.js\r\n\r\n/**\r\n * Spline from Tween.js, slightly optimized (and trashed)\r\n * http://sole.github.com/tween.js/examples/05_spline.html\r\n *\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.Spline = function ( points ) {\r\n\r\n\tthis.points = points;\r\n\r\n\tvar c = [], v3 = { x: 0, y: 0, z: 0 },\r\n\tpoint, intPoint, weight, w2, w3,\r\n\tpa, pb, pc, pd;\r\n\r\n\tthis.initFromArray = function ( a ) {\r\n\r\n\t\tthis.points = [];\r\n\r\n\t\tfor ( var i = 0; i < a.length; i ++ ) {\r\n\r\n\t\t\tthis.points[ i ] = { x: a[ i ][ 0 ], y: a[ i ][ 1 ], z: a[ i ][ 2 ] };\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.getPoint = function ( k ) {\r\n\r\n\t\tpoint = ( this.points.length - 1 ) * k;\r\n\t\tintPoint = Math.floor( point );\r\n\t\tweight = point - intPoint;\r\n\r\n\t\tc[ 0 ] = intPoint === 0 ? intPoint : intPoint - 1;\r\n\t\tc[ 1 ] = intPoint;\r\n\t\tc[ 2 ] = intPoint  > this.points.length - 2 ? this.points.length - 1 : intPoint + 1;\r\n\t\tc[ 3 ] = intPoint  > this.points.length - 3 ? this.points.length - 1 : intPoint + 2;\r\n\r\n\t\tpa = this.points[ c[ 0 ] ];\r\n\t\tpb = this.points[ c[ 1 ] ];\r\n\t\tpc = this.points[ c[ 2 ] ];\r\n\t\tpd = this.points[ c[ 3 ] ];\r\n\r\n\t\tw2 = weight * weight;\r\n\t\tw3 = weight * w2;\r\n\r\n\t\tv3.x = interpolate( pa.x, pb.x, pc.x, pd.x, weight, w2, w3 );\r\n\t\tv3.y = interpolate( pa.y, pb.y, pc.y, pd.y, weight, w2, w3 );\r\n\t\tv3.z = interpolate( pa.z, pb.z, pc.z, pd.z, weight, w2, w3 );\r\n\r\n\t\treturn v3;\r\n\r\n\t};\r\n\r\n\tthis.getControlPointsArray = function () {\r\n\r\n\t\tvar i, p, l = this.points.length,\r\n\t\t\tcoords = [];\r\n\r\n\t\tfor ( i = 0; i < l; i ++ ) {\r\n\r\n\t\t\tp = this.points[ i ];\r\n\t\t\tcoords[ i ] = [ p.x, p.y, p.z ];\r\n\r\n\t\t}\r\n\r\n\t\treturn coords;\r\n\r\n\t};\r\n\r\n\t// approximate length by summing linear segments\r\n\r\n\tthis.getLength = function ( nSubDivisions ) {\r\n\r\n\t\tvar i, index, nSamples, position,\r\n\t\t\tpoint = 0, intPoint = 0, oldIntPoint = 0,\r\n\t\t\toldPosition = new THREE.Vector3(),\r\n\t\t\ttmpVec = new THREE.Vector3(),\r\n\t\t\tchunkLengths = [],\r\n\t\t\ttotalLength = 0;\r\n\r\n\t\t// first point has 0 length\r\n\r\n\t\tchunkLengths[ 0 ] = 0;\r\n\r\n\t\tif ( ! nSubDivisions ) nSubDivisions = 100;\r\n\r\n\t\tnSamples = this.points.length * nSubDivisions;\r\n\r\n\t\toldPosition.copy( this.points[ 0 ] );\r\n\r\n\t\tfor ( i = 1; i < nSamples; i ++ ) {\r\n\r\n\t\t\tindex = i / nSamples;\r\n\r\n\t\t\tposition = this.getPoint( index );\r\n\t\t\ttmpVec.copy( position );\r\n\r\n\t\t\ttotalLength += tmpVec.distanceTo( oldPosition );\r\n\r\n\t\t\toldPosition.copy( position );\r\n\r\n\t\t\tpoint = ( this.points.length - 1 ) * index;\r\n\t\t\tintPoint = Math.floor( point );\r\n\r\n\t\t\tif ( intPoint !== oldIntPoint ) {\r\n\r\n\t\t\t\tchunkLengths[ intPoint ] = totalLength;\r\n\t\t\t\toldIntPoint = intPoint;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// last point ends with total length\r\n\r\n\t\tchunkLengths[ chunkLengths.length ] = totalLength;\r\n\r\n\t\treturn { chunks: chunkLengths, total: totalLength };\r\n\r\n\t};\r\n\r\n\tthis.reparametrizeByArcLength = function ( samplingCoef ) {\r\n\r\n\t\tvar i, j,\r\n\t\t\tindex, indexCurrent, indexNext,\r\n\t\t\trealDistance,\r\n\t\t\tsampling, position,\r\n\t\t\tnewpoints = [],\r\n\t\t\ttmpVec = new THREE.Vector3(),\r\n\t\t\tsl = this.getLength();\r\n\r\n\t\tnewpoints.push( tmpVec.copy( this.points[ 0 ] ).clone() );\r\n\r\n\t\tfor ( i = 1; i < this.points.length; i ++ ) {\r\n\r\n\t\t\t//tmpVec.copy( this.points[ i - 1 ] );\r\n\t\t\t//linearDistance = tmpVec.distanceTo( this.points[ i ] );\r\n\r\n\t\t\trealDistance = sl.chunks[ i ] - sl.chunks[ i - 1 ];\r\n\r\n\t\t\tsampling = Math.ceil( samplingCoef * realDistance / sl.total );\r\n\r\n\t\t\tindexCurrent = ( i - 1 ) / ( this.points.length - 1 );\r\n\t\t\tindexNext = i / ( this.points.length - 1 );\r\n\r\n\t\t\tfor ( j = 1; j < sampling - 1; j ++ ) {\r\n\r\n\t\t\t\tindex = indexCurrent + j * ( 1 / sampling ) * ( indexNext - indexCurrent );\r\n\r\n\t\t\t\tposition = this.getPoint( index );\r\n\t\t\t\tnewpoints.push( tmpVec.copy( position ).clone() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tnewpoints.push( tmpVec.copy( this.points[ i ] ).clone() );\r\n\r\n\t\t}\r\n\r\n\t\tthis.points = newpoints;\r\n\r\n\t};\r\n\r\n\t// Catmull-Rom\r\n\r\n\tfunction interpolate( p0, p1, p2, p3, t, t2, t3 ) {\r\n\r\n\t\tvar v0 = ( p2 - p0 ) * 0.5,\r\n\t\t\tv1 = ( p3 - p1 ) * 0.5;\r\n\r\n\t\treturn ( 2 * ( p1 - p2 ) + v0 + v1 ) * t3 + ( - 3 * ( p1 - p2 ) - 2 * v0 - v1 ) * t2 + v0 * t + p1;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/math/Triangle.js\r\n\r\n/**\r\n * @author bhouston / http://clara.io\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.Triangle = function ( a, b, c ) {\r\n\r\n\tthis.a = ( a !== undefined ) ? a : new THREE.Vector3();\r\n\tthis.b = ( b !== undefined ) ? b : new THREE.Vector3();\r\n\tthis.c = ( c !== undefined ) ? c : new THREE.Vector3();\r\n\r\n};\r\n\r\nTHREE.Triangle.normal = function () {\r\n\r\n\tvar v0 = new THREE.Vector3();\r\n\r\n\treturn function ( a, b, c, optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\r\n\t\tresult.subVectors( c, b );\r\n\t\tv0.subVectors( a, b );\r\n\t\tresult.cross( v0 );\r\n\r\n\t\tvar resultLengthSq = result.lengthSq();\r\n\t\tif ( resultLengthSq > 0 ) {\r\n\r\n\t\t\treturn result.multiplyScalar( 1 / Math.sqrt( resultLengthSq ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn result.set( 0, 0, 0 );\r\n\r\n\t};\r\n\r\n}();\r\n\r\n// static/instance method to calculate barycentric coordinates\r\n// based on: http://www.blackpawn.com/texts/pointinpoly/default.html\r\nTHREE.Triangle.barycoordFromPoint = function () {\r\n\r\n\tvar v0 = new THREE.Vector3();\r\n\tvar v1 = new THREE.Vector3();\r\n\tvar v2 = new THREE.Vector3();\r\n\r\n\treturn function ( point, a, b, c, optionalTarget ) {\r\n\r\n\t\tv0.subVectors( c, a );\r\n\t\tv1.subVectors( b, a );\r\n\t\tv2.subVectors( point, a );\r\n\r\n\t\tvar dot00 = v0.dot( v0 );\r\n\t\tvar dot01 = v0.dot( v1 );\r\n\t\tvar dot02 = v0.dot( v2 );\r\n\t\tvar dot11 = v1.dot( v1 );\r\n\t\tvar dot12 = v1.dot( v2 );\r\n\r\n\t\tvar denom = ( dot00 * dot11 - dot01 * dot01 );\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\r\n\t\t// collinear or singular triangle\r\n\t\tif ( denom === 0 ) {\r\n\r\n\t\t\t// arbitrary location outside of triangle?\r\n\t\t\t// not sure if this is the best idea, maybe should be returning undefined\r\n\t\t\treturn result.set( - 2, - 1, - 1 );\r\n\r\n\t\t}\r\n\r\n\t\tvar invDenom = 1 / denom;\r\n\t\tvar u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;\r\n\t\tvar v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;\r\n\r\n\t\t// barycentric coordinates must always sum to 1\r\n\t\treturn result.set( 1 - u - v, v, u );\r\n\r\n\t};\r\n\r\n}();\r\n\r\nTHREE.Triangle.containsPoint = function () {\r\n\r\n\tvar v1 = new THREE.Vector3();\r\n\r\n\treturn function ( point, a, b, c ) {\r\n\r\n\t\tvar result = THREE.Triangle.barycoordFromPoint( point, a, b, c, v1 );\r\n\r\n\t\treturn ( result.x >= 0 ) && ( result.y >= 0 ) && ( ( result.x + result.y ) <= 1 );\r\n\r\n\t};\r\n\r\n}();\r\n\r\nTHREE.Triangle.prototype = {\r\n\r\n\tconstructor: THREE.Triangle,\r\n\r\n\tset: function ( a, b, c ) {\r\n\r\n\t\tthis.a.copy( a );\r\n\t\tthis.b.copy( b );\r\n\t\tthis.c.copy( c );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetFromPointsAndIndices: function ( points, i0, i1, i2 ) {\r\n\r\n\t\tthis.a.copy( points[ i0 ] );\r\n\t\tthis.b.copy( points[ i1 ] );\r\n\t\tthis.c.copy( points[ i2 ] );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t},\r\n\r\n\tcopy: function ( triangle ) {\r\n\r\n\t\tthis.a.copy( triangle.a );\r\n\t\tthis.b.copy( triangle.b );\r\n\t\tthis.c.copy( triangle.c );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tarea: function () {\r\n\r\n\t\tvar v0 = new THREE.Vector3();\r\n\t\tvar v1 = new THREE.Vector3();\r\n\r\n\t\treturn function () {\r\n\r\n\t\t\tv0.subVectors( this.c, this.b );\r\n\t\t\tv1.subVectors( this.a, this.b );\r\n\r\n\t\t\treturn v0.cross( v1 ).length() * 0.5;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tmidpoint: function ( optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\treturn result.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );\r\n\r\n\t},\r\n\r\n\tnormal: function ( optionalTarget ) {\r\n\r\n\t\treturn THREE.Triangle.normal( this.a, this.b, this.c, optionalTarget );\r\n\r\n\t},\r\n\r\n\tplane: function ( optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Plane();\r\n\r\n\t\treturn result.setFromCoplanarPoints( this.a, this.b, this.c );\r\n\r\n\t},\r\n\r\n\tbarycoordFromPoint: function ( point, optionalTarget ) {\r\n\r\n\t\treturn THREE.Triangle.barycoordFromPoint( point, this.a, this.b, this.c, optionalTarget );\r\n\r\n\t},\r\n\r\n\tcontainsPoint: function ( point ) {\r\n\r\n\t\treturn THREE.Triangle.containsPoint( point, this.a, this.b, this.c );\r\n\r\n\t},\r\n\r\n\tclosestPointToPoint: function () {\r\n\r\n\t\tvar plane, edgeList, projectedPoint, closestPoint;\r\n\r\n\t\treturn function closestPointToPoint( point, optionalTarget ) {\r\n\r\n\t\t\tif ( plane === undefined ) {\r\n\r\n\t\t\t\tplane = new THREE.Plane();\r\n\t\t\t\tedgeList = [ new THREE.Line3(), new THREE.Line3(), new THREE.Line3() ];\r\n\t\t\t\tprojectedPoint = new THREE.Vector3();\r\n\t\t\t\tclosestPoint = new THREE.Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\t\t\tvar minDistance = Infinity;\r\n\r\n\t\t\t// project the point onto the plane of the triangle\r\n\r\n\t\t\tplane.setFromCoplanarPoints( this.a, this.b, this.c );\r\n\t\t\tplane.projectPoint( point, projectedPoint );\r\n\r\n\t\t\t// check if the projection lies within the triangle\r\n\r\n\t\t\tif( this.containsPoint( projectedPoint ) === true ) {\r\n\r\n\t\t\t\t// if so, this is the closest point\r\n\r\n\t\t\t\tresult.copy( projectedPoint );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// if not, the point falls outside the triangle. the result is the closest point to the triangle's edges or vertices\r\n\r\n\t\t\t\tedgeList[ 0 ].set( this.a, this.b );\r\n\t\t\t\tedgeList[ 1 ].set( this.b, this.c );\r\n\t\t\t\tedgeList[ 2 ].set( this.c, this.a );\r\n\r\n\t\t\t\tfor( var i = 0; i < edgeList.length; i ++ ) {\r\n\r\n\t\t\t\t\tedgeList[ i ].closestPointToPoint( projectedPoint, true, closestPoint );\r\n\r\n\t\t\t\t\tvar distance = projectedPoint.distanceToSquared( closestPoint );\r\n\r\n\t\t\t\t\tif( distance < minDistance ) {\r\n\r\n\t\t\t\t\t\tminDistance = distance;\r\n\r\n\t\t\t\t\t\tresult.copy( closestPoint );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn result;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tequals: function ( triangle ) {\r\n\r\n\t\treturn triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/math/Interpolant.js\r\n\r\n/**\r\n * Abstract base class of interpolants over parametric samples.\r\n *\r\n * The parameter domain is one dimensional, typically the time or a path\r\n * along a curve defined by the data.\r\n *\r\n * The sample values can have any dimensionality and derived classes may\r\n * apply special interpretations to the data.\r\n *\r\n * This class provides the interval seek in a Template Method, deferring\r\n * the actual interpolation to derived classes.\r\n *\r\n * Time complexity is O(1) for linear access crossing at most two points\r\n * and O(log N) for random access, where N is the number of positions.\r\n *\r\n * References:\r\n *\r\n * \t\thttp://www.oodesign.com/template-method-pattern.html\r\n *\r\n * @author tschw\r\n */\r\n\r\nTHREE.Interpolant = function(\r\n\t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\r\n\r\n\tthis.parameterPositions = parameterPositions;\r\n\tthis._cachedIndex = 0;\r\n\r\n\tthis.resultBuffer = resultBuffer !== undefined ?\r\n\t\t\tresultBuffer : new sampleValues.constructor( sampleSize );\r\n\tthis.sampleValues = sampleValues;\r\n\tthis.valueSize = sampleSize;\r\n\r\n};\r\n\r\nTHREE.Interpolant.prototype = {\r\n\r\n\tconstructor: THREE.Interpolant,\r\n\r\n\tevaluate: function( t ) {\r\n\r\n\t\tvar pp = this.parameterPositions,\r\n\t\t\ti1 = this._cachedIndex,\r\n\r\n\t\t\tt1 = pp[   i1   ],\r\n\t\t\tt0 = pp[ i1 - 1 ];\r\n\r\n\t\tvalidate_interval: {\r\n\r\n\t\t\tseek: {\r\n\r\n\t\t\t\tvar right;\r\n\r\n\t\t\t\tlinear_scan: {\r\n//- See http://jsperf.com/comparison-to-undefined/3\r\n//- slower code:\r\n//-\r\n//- \t\t\t\tif ( t >= t1 || t1 === undefined ) {\r\n\t\t\t\t\tforward_scan: if ( ! ( t < t1 ) ) {\r\n\r\n\t\t\t\t\t\tfor ( var giveUpAt = i1 + 2; ;) {\r\n\r\n\t\t\t\t\t\t\tif ( t1 === undefined ) {\r\n\r\n\t\t\t\t\t\t\t\tif ( t < t0 ) break forward_scan;\r\n\r\n\t\t\t\t\t\t\t\t// after end\r\n\r\n\t\t\t\t\t\t\t\ti1 = pp.length;\r\n\t\t\t\t\t\t\t\tthis._cachedIndex = i1;\r\n\t\t\t\t\t\t\t\treturn this.afterEnd_( i1 - 1, t, t0 );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif ( i1 === giveUpAt ) break; // this loop\r\n\r\n\t\t\t\t\t\t\tt0 = t1;\r\n\t\t\t\t\t\t\tt1 = pp[ ++ i1 ];\r\n\r\n\t\t\t\t\t\t\tif ( t < t1 ) {\r\n\r\n\t\t\t\t\t\t\t\t// we have arrived at the sought interval\r\n\t\t\t\t\t\t\t\tbreak seek;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// prepare binary search on the right side of the index\r\n\t\t\t\t\t\tright = pp.length;\r\n\t\t\t\t\t\tbreak linear_scan;\r\n\r\n\t\t\t\t\t}\r\n\r\n//- slower code:\r\n//-\t\t\t\t\tif ( t < t0 || t0 === undefined ) {\r\n\t\t\t\t\tif ( ! ( t >= t0 ) ) {\r\n\r\n\t\t\t\t\t\t// looping?\r\n\r\n\t\t\t\t\t\tvar t1global = pp[ 1 ];\r\n\r\n\t\t\t\t\t\tif ( t < t1global ) {\r\n\r\n\t\t\t\t\t\t\ti1 = 2; // + 1, using the scan for the details\r\n\t\t\t\t\t\t\tt0 = t1global;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// linear reverse scan\r\n\r\n\t\t\t\t\t\tfor ( var giveUpAt = i1 - 2; ;) {\r\n\r\n\t\t\t\t\t\t\tif ( t0 === undefined ) {\r\n\r\n\t\t\t\t\t\t\t\t// before start\r\n\r\n\t\t\t\t\t\t\t\tthis._cachedIndex = 0;\r\n\t\t\t\t\t\t\t\treturn this.beforeStart_( 0, t, t1 );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tif ( i1 === giveUpAt ) break; // this loop\r\n\r\n\t\t\t\t\t\t\tt1 = t0;\r\n\t\t\t\t\t\t\tt0 = pp[ -- i1 - 1 ];\r\n\r\n\t\t\t\t\t\t\tif ( t >= t0 ) {\r\n\r\n\t\t\t\t\t\t\t\t// we have arrived at the sought interval\r\n\t\t\t\t\t\t\t\tbreak seek;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// prepare binary search on the left side of the index\r\n\t\t\t\t\t\tright = i1;\r\n\t\t\t\t\t\ti1 = 0;\r\n\t\t\t\t\t\tbreak linear_scan;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// the interval is valid\r\n\r\n\t\t\t\t\tbreak validate_interval;\r\n\r\n\t\t\t\t} // linear scan\r\n\r\n\t\t\t\t// binary search\r\n\r\n\t\t\t\twhile ( i1 < right ) {\r\n\r\n\t\t\t\t\tvar mid = ( i1 + right ) >>> 1;\r\n\r\n\t\t\t\t\tif ( t < pp[ mid ] ) {\r\n\r\n\t\t\t\t\t\tright = mid;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\ti1 = mid + 1;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tt1 = pp[   i1   ];\r\n\t\t\t\tt0 = pp[ i1 - 1 ];\r\n\r\n\t\t\t\t// check boundary cases, again\r\n\r\n\t\t\t\tif ( t0 === undefined ) {\r\n\r\n\t\t\t\t\tthis._cachedIndex = 0;\r\n\t\t\t\t\treturn this.beforeStart_( 0, t, t1 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( t1 === undefined ) {\r\n\r\n\t\t\t\t\ti1 = pp.length;\r\n\t\t\t\t\tthis._cachedIndex = i1;\r\n\t\t\t\t\treturn this.afterEnd_( i1 - 1, t0, t );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} // seek\r\n\r\n\t\t\tthis._cachedIndex = i1;\r\n\r\n\t\t\tthis.intervalChanged_( i1, t0, t1 );\r\n\r\n\t\t} // validate_interval\r\n\r\n\t\treturn this.interpolate_( i1, t0, t, t1 );\r\n\r\n\t},\r\n\r\n\tsettings: null, // optional, subclass-specific settings structure\r\n\t// Note: The indirection allows central control of many interpolants.\r\n\r\n\t// --- Protected interface\r\n\r\n\tDefaultSettings_: {},\r\n\r\n\tgetSettings_: function() {\r\n\r\n\t\treturn this.settings || this.DefaultSettings_;\r\n\r\n\t},\r\n\r\n\tcopySampleValue_: function( index ) {\r\n\r\n\t\t// copies a sample value to the result buffer\r\n\r\n\t\tvar result = this.resultBuffer,\r\n\t\t\tvalues = this.sampleValues,\r\n\t\t\tstride = this.valueSize,\r\n\t\t\toffset = index * stride;\r\n\r\n\t\tfor ( var i = 0; i !== stride; ++ i ) {\r\n\r\n\t\t\tresult[ i ] = values[ offset + i ];\r\n\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\r\n\t},\r\n\r\n\t// Template methods for derived classes:\r\n\r\n\tinterpolate_: function( i1, t0, t, t1 ) {\r\n\r\n\t\tthrow new Error( \"call to abstract method\" );\r\n\t\t// implementations shall return this.resultBuffer\r\n\r\n\t},\r\n\r\n\tintervalChanged_: function( i1, t0, t1 ) {\r\n\r\n\t\t// empty\r\n\r\n\t}\r\n\r\n};\r\n\r\nObject.assign( THREE.Interpolant.prototype, {\r\n\r\n\tbeforeStart_: //( 0, t, t0 ), returns this.resultBuffer\r\n\t\tTHREE.Interpolant.prototype.copySampleValue_,\r\n\r\n\tafterEnd_: //( N-1, tN-1, t ), returns this.resultBuffer\r\n\t\tTHREE.Interpolant.prototype.copySampleValue_\r\n\r\n} );\r\n\r\n// File:src/math/interpolants/CubicInterpolant.js\r\n\r\n/**\r\n * Fast and simple cubic spline interpolant.\r\n *\r\n * It was derived from a Hermitian construction setting the first derivative\r\n * at each sample position to the linear slope between neighboring positions\r\n * over their parameter interval.\r\n *\r\n * @author tschw\r\n */\r\n\r\nTHREE.CubicInterpolant = function(\r\n\t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\r\n\r\n\tTHREE.Interpolant.call(\r\n\t\t\tthis, parameterPositions, sampleValues, sampleSize, resultBuffer );\r\n\r\n\tthis._weightPrev = -0;\r\n\tthis._offsetPrev = -0;\r\n\tthis._weightNext = -0;\r\n\tthis._offsetNext = -0;\r\n\r\n};\r\n\r\nTHREE.CubicInterpolant.prototype =\r\n\t\tObject.assign( Object.create( THREE.Interpolant.prototype ), {\r\n\r\n\tconstructor: THREE.CubicInterpolant,\r\n\r\n\tDefaultSettings_: {\r\n\r\n\t\tendingStart: \tTHREE.ZeroCurvatureEnding,\r\n\t\tendingEnd:\t\tTHREE.ZeroCurvatureEnding\r\n\r\n\t},\r\n\r\n\tintervalChanged_: function( i1, t0, t1 ) {\r\n\r\n\t\tvar pp = this.parameterPositions,\r\n\t\t\tiPrev = i1 - 2,\r\n\t\t\tiNext = i1 + 1,\r\n\r\n\t\t\ttPrev = pp[ iPrev ],\r\n\t\t\ttNext = pp[ iNext ];\r\n\r\n\t\tif ( tPrev === undefined ) {\r\n\r\n\t\t\tswitch ( this.getSettings_().endingStart ) {\r\n\r\n\t\t\t\tcase THREE.ZeroSlopeEnding:\r\n\r\n\t\t\t\t\t// f'(t0) = 0\r\n\t\t\t\t\tiPrev = i1;\r\n\t\t\t\t\ttPrev = 2 * t0 - t1;\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase THREE.WrapAroundEnding:\r\n\r\n\t\t\t\t\t// use the other end of the curve\r\n\t\t\t\t\tiPrev = pp.length - 2;\r\n\t\t\t\t\ttPrev = t0 + pp[ iPrev ] - pp[ iPrev + 1 ];\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tdefault: // ZeroCurvatureEnding\r\n\r\n\t\t\t\t\t// f''(t0) = 0 a.k.a. Natural Spline\r\n\t\t\t\t\tiPrev = i1;\r\n\t\t\t\t\ttPrev = t1;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( tNext === undefined ) {\r\n\r\n\t\t\tswitch ( this.getSettings_().endingEnd ) {\r\n\r\n\t\t\t\tcase THREE.ZeroSlopeEnding:\r\n\r\n\t\t\t\t\t// f'(tN) = 0\r\n\t\t\t\t\tiNext = i1;\r\n\t\t\t\t\ttNext = 2 * t1 - t0;\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase THREE.WrapAroundEnding:\r\n\r\n\t\t\t\t\t// use the other end of the curve\r\n\t\t\t\t\tiNext = 1;\r\n\t\t\t\t\ttNext = t1 + pp[ 1 ] - pp[ 0 ];\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tdefault: // ZeroCurvatureEnding\r\n\r\n\t\t\t\t\t// f''(tN) = 0, a.k.a. Natural Spline\r\n\t\t\t\t\tiNext = i1 - 1;\r\n\t\t\t\t\ttNext = t0;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tvar halfDt = ( t1 - t0 ) * 0.5,\r\n\t\t\tstride = this.valueSize;\r\n\r\n\t\tthis._weightPrev = halfDt / ( t0 - tPrev );\r\n\t\tthis._weightNext = halfDt / ( tNext - t1 );\r\n\t\tthis._offsetPrev = iPrev * stride;\r\n\t\tthis._offsetNext = iNext * stride;\r\n\r\n\t},\r\n\r\n\tinterpolate_: function( i1, t0, t, t1 ) {\r\n\r\n\t\tvar result = this.resultBuffer,\r\n\t\t\tvalues = this.sampleValues,\r\n\t\t\tstride = this.valueSize,\r\n\r\n\t\t\to1 = i1 * stride,\t\to0 = o1 - stride,\r\n\t\t\toP = this._offsetPrev, \toN = this._offsetNext,\r\n\t\t\twP = this._weightPrev,\twN = this._weightNext,\r\n\r\n\t\t\tp = ( t - t0 ) / ( t1 - t0 ),\r\n\t\t\tpp = p * p,\r\n\t\t\tppp = pp * p;\r\n\r\n\t\t// evaluate polynomials\r\n\r\n\t\tvar sP =     - wP   * ppp   +         2 * wP    * pp    -          wP   * p;\r\n\t\tvar s0 = ( 1 + wP ) * ppp   + (-1.5 - 2 * wP )  * pp    + ( -0.5 + wP ) * p     + 1;\r\n\t\tvar s1 = (-1 - wN ) * ppp   + ( 1.5 +   wN   )  * pp    +    0.5        * p;\r\n\t\tvar sN =       wN   * ppp   -           wN      * pp;\r\n\r\n\t\t// combine data linearly\r\n\r\n\t\tfor ( var i = 0; i !== stride; ++ i ) {\r\n\r\n\t\t\tresult[ i ] =\r\n\t\t\t\t\tsP * values[ oP + i ] +\r\n\t\t\t\t\ts0 * values[ o0 + i ] +\r\n\t\t\t\t\ts1 * values[ o1 + i ] +\r\n\t\t\t\t\tsN * values[ oN + i ];\r\n\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\r\n\t}\r\n\r\n} );\r\n\r\n// File:src/math/interpolants/DiscreteInterpolant.js\r\n\r\n/**\r\n *\r\n * Interpolant that evaluates to the sample value at the position preceeding\r\n * the parameter.\r\n *\r\n * @author tschw\r\n */\r\n\r\nTHREE.DiscreteInterpolant = function(\r\n\t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\r\n\r\n\tTHREE.Interpolant.call(\r\n\t\t\tthis, parameterPositions, sampleValues, sampleSize, resultBuffer );\r\n\r\n};\r\n\r\nTHREE.DiscreteInterpolant.prototype =\r\n\t\tObject.assign( Object.create( THREE.Interpolant.prototype ), {\r\n\r\n\tconstructor: THREE.DiscreteInterpolant,\r\n\r\n\tinterpolate_: function( i1, t0, t, t1 ) {\r\n\r\n\t\treturn this.copySampleValue_( i1 - 1 );\r\n\r\n\t}\r\n\r\n} );\r\n\r\n// File:src/math/interpolants/LinearInterpolant.js\r\n\r\n/**\r\n * @author tschw\r\n */\r\n\r\nTHREE.LinearInterpolant = function(\r\n\t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\r\n\r\n\tTHREE.Interpolant.call(\r\n\t\t\tthis, parameterPositions, sampleValues, sampleSize, resultBuffer );\r\n\r\n};\r\n\r\nTHREE.LinearInterpolant.prototype =\r\n\t\tObject.assign( Object.create( THREE.Interpolant.prototype ), {\r\n\r\n\tconstructor: THREE.LinearInterpolant,\r\n\r\n\tinterpolate_: function( i1, t0, t, t1 ) {\r\n\r\n\t\tvar result = this.resultBuffer,\r\n\t\t\tvalues = this.sampleValues,\r\n\t\t\tstride = this.valueSize,\r\n\r\n\t\t\toffset1 = i1 * stride,\r\n\t\t\toffset0 = offset1 - stride,\r\n\r\n\t\t\tweight1 = ( t - t0 ) / ( t1 - t0 ),\r\n\t\t\tweight0 = 1 - weight1;\r\n\r\n\t\tfor ( var i = 0; i !== stride; ++ i ) {\r\n\r\n\t\t\tresult[ i ] =\r\n\t\t\t\t\tvalues[ offset0 + i ] * weight0 +\r\n\t\t\t\t\tvalues[ offset1 + i ] * weight1;\r\n\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\r\n\t}\r\n\r\n} );\r\n\r\n// File:src/math/interpolants/QuaternionLinearInterpolant.js\r\n\r\n/**\r\n * Spherical linear unit quaternion interpolant.\r\n *\r\n * @author tschw\r\n */\r\n\r\nTHREE.QuaternionLinearInterpolant = function(\r\n\t\tparameterPositions, sampleValues, sampleSize, resultBuffer ) {\r\n\r\n\tTHREE.Interpolant.call(\r\n\t\t\tthis, parameterPositions, sampleValues, sampleSize, resultBuffer );\r\n\r\n};\r\n\r\nTHREE.QuaternionLinearInterpolant.prototype =\r\n\t\tObject.assign( Object.create( THREE.Interpolant.prototype ), {\r\n\r\n\tconstructor: THREE.QuaternionLinearInterpolant,\r\n\r\n\tinterpolate_: function( i1, t0, t, t1 ) {\r\n\r\n\t\tvar result = this.resultBuffer,\r\n\t\t\tvalues = this.sampleValues,\r\n\t\t\tstride = this.valueSize,\r\n\r\n\t\t\toffset = i1 * stride,\r\n\r\n\t\t\talpha = ( t - t0 ) / ( t1 - t0 );\r\n\r\n\t\tfor ( var end = offset + stride; offset !== end; offset += 4 ) {\r\n\r\n\t\t\tTHREE.Quaternion.slerpFlat( result, 0,\r\n\t\t\t\t\tvalues, offset - stride, values, offset, alpha );\r\n\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\r\n\t}\r\n\r\n} );\r\n\r\n// File:src/core/Clock.js\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.Clock = function ( autoStart ) {\r\n\r\n\tthis.autoStart = ( autoStart !== undefined ) ? autoStart : true;\r\n\r\n\tthis.startTime = 0;\r\n\tthis.oldTime = 0;\r\n\tthis.elapsedTime = 0;\r\n\r\n\tthis.running = false;\r\n\r\n};\r\n\r\nTHREE.Clock.prototype = {\r\n\r\n\tconstructor: THREE.Clock,\r\n\r\n\tstart: function () {\r\n\r\n\t\tthis.startTime = ( performance || Date ).now();\r\n\r\n\t\tthis.oldTime = this.startTime;\r\n\t\tthis.running = true;\r\n\r\n\t},\r\n\r\n\tstop: function () {\r\n\r\n\t\tthis.getElapsedTime();\r\n\t\tthis.running = false;\r\n\r\n\t},\r\n\r\n\tgetElapsedTime: function () {\r\n\r\n\t\tthis.getDelta();\r\n\t\treturn this.elapsedTime;\r\n\r\n\t},\r\n\r\n\tgetDelta: function () {\r\n\r\n\t\tvar diff = 0;\r\n\r\n\t\tif ( this.autoStart && ! this.running ) {\r\n\r\n\t\t\tthis.start();\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.running ) {\r\n\r\n\t\t\tvar newTime = ( performance || Date ).now();\r\n\r\n\t\t\tdiff = ( newTime - this.oldTime ) / 1000;\r\n\t\t\tthis.oldTime = newTime;\r\n\r\n\t\t\tthis.elapsedTime += diff;\r\n\r\n\t\t}\r\n\r\n\t\treturn diff;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/core/EventDispatcher.js\r\n\r\n/**\r\n * https://github.com/mrdoob/eventdispatcher.js/\r\n */\r\n\r\nTHREE.EventDispatcher = function () {};\r\n\r\nObject.assign( THREE.EventDispatcher.prototype, {\r\n\r\n\taddEventListener: function ( type, listener ) {\r\n\r\n\t\tif ( this._listeners === undefined ) this._listeners = {};\r\n\r\n\t\tvar listeners = this._listeners;\r\n\r\n\t\tif ( listeners[ type ] === undefined ) {\r\n\r\n\t\t\tlisteners[ type ] = [];\r\n\r\n\t\t}\r\n\r\n\t\tif ( listeners[ type ].indexOf( listener ) === - 1 ) {\r\n\r\n\t\t\tlisteners[ type ].push( listener );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\thasEventListener: function ( type, listener ) {\r\n\r\n\t\tif ( this._listeners === undefined ) return false;\r\n\r\n\t\tvar listeners = this._listeners;\r\n\r\n\t\tif ( listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1 ) {\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\r\n\t},\r\n\r\n\tremoveEventListener: function ( type, listener ) {\r\n\r\n\t\tif ( this._listeners === undefined ) return;\r\n\r\n\t\tvar listeners = this._listeners;\r\n\t\tvar listenerArray = listeners[ type ];\r\n\r\n\t\tif ( listenerArray !== undefined ) {\r\n\r\n\t\t\tvar index = listenerArray.indexOf( listener );\r\n\r\n\t\t\tif ( index !== - 1 ) {\r\n\r\n\t\t\t\tlistenerArray.splice( index, 1 );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tdispatchEvent: function ( event ) {\r\n\r\n\t\tif ( this._listeners === undefined ) return;\r\n\r\n\t\tvar listeners = this._listeners;\r\n\t\tvar listenerArray = listeners[ event.type ];\r\n\r\n\t\tif ( listenerArray !== undefined ) {\r\n\r\n\t\t\tevent.target = this;\r\n\r\n\t\t\tvar array = [], i = 0;\r\n\t\t\tvar length = listenerArray.length;\r\n\r\n\t\t\tfor ( i = 0; i < length; i ++ ) {\r\n\r\n\t\t\t\tarray[ i ] = listenerArray[ i ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( i = 0; i < length; i ++ ) {\r\n\r\n\t\t\t\tarray[ i ].call( this, event );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n} );\r\n\r\n// File:src/core/Layers.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.Layers = function () {\r\n\r\n\tthis.mask = 1;\r\n\r\n};\r\n\r\nTHREE.Layers.prototype = {\r\n\r\n\tconstructor: THREE.Layers,\r\n\r\n\tset: function ( channel ) {\r\n\r\n\t\tthis.mask = 1 << channel;\r\n\r\n\t},\r\n\r\n\tenable: function ( channel ) {\r\n\r\n\t\tthis.mask |= 1 << channel;\r\n\r\n\t},\r\n\r\n\ttoggle: function ( channel ) {\r\n\r\n\t\tthis.mask ^= 1 << channel;\r\n\r\n\t},\r\n\r\n\tdisable: function ( channel ) {\r\n\r\n\t\tthis.mask &= ~ ( 1 << channel );\r\n\r\n\t},\r\n\r\n\ttest: function ( layers ) {\r\n\r\n\t\treturn ( this.mask & layers.mask ) !== 0;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/core/Raycaster.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author bhouston / http://clara.io/\r\n * @author stephomi / http://stephaneginier.com/\r\n */\r\n\r\n( function ( THREE ) {\r\n\r\n\tTHREE.Raycaster = function ( origin, direction, near, far ) {\r\n\r\n\t\tthis.ray = new THREE.Ray( origin, direction );\r\n\t\t// direction is assumed to be normalized (for accurate distance calculations)\r\n\r\n\t\tthis.near = near || 0;\r\n\t\tthis.far = far || Infinity;\r\n\r\n\t\tthis.params = {\r\n\t\t\tMesh: {},\r\n\t\t\tLine: {},\r\n\t\t\tLOD: {},\r\n\t\t\tPoints: { threshold: 1 },\r\n\t\t\tSprite: {}\r\n\t\t};\r\n\r\n\t\tObject.defineProperties( this.params, {\r\n\t\t\tPointCloud: {\r\n\t\t\t\tget: function () {\r\n\t\t\t\t\tconsole.warn( 'THREE.Raycaster: params.PointCloud has been renamed to params.Points.' );\r\n\t\t\t\t\treturn this.Points;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} );\r\n\r\n\t};\r\n\r\n\tfunction ascSort( a, b ) {\r\n\r\n\t\treturn a.distance - b.distance;\r\n\r\n\t}\r\n\r\n\tfunction intersectObject( object, raycaster, intersects, recursive ) {\r\n\r\n\t\tif ( object.visible === false ) return;\r\n\r\n\t\tobject.raycast( raycaster, intersects );\r\n\r\n\t\tif ( recursive === true ) {\r\n\r\n\t\t\tvar children = object.children;\r\n\r\n\t\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tintersectObject( children[ i ], raycaster, intersects, true );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tTHREE.Raycaster.prototype = {\r\n\r\n\t\tconstructor: THREE.Raycaster,\r\n\r\n\t\tlinePrecision: 1,\r\n\r\n\t\tset: function ( origin, direction ) {\r\n\r\n\t\t\t// direction is assumed to be normalized (for accurate distance calculations)\r\n\r\n\t\t\tthis.ray.set( origin, direction );\r\n\r\n\t\t},\r\n\r\n\t\tsetFromCamera: function ( coords, camera ) {\r\n\r\n\t\t\tif ( camera instanceof THREE.PerspectiveCamera ) {\r\n\r\n\t\t\t\tthis.ray.origin.setFromMatrixPosition( camera.matrixWorld );\r\n\t\t\t\tthis.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();\r\n\r\n\t\t\t} else if ( camera instanceof THREE.OrthographicCamera ) {\r\n\r\n\t\t\t\tthis.ray.origin.set( coords.x, coords.y, - 1 ).unproject( camera );\r\n\t\t\t\tthis.ray.direction.set( 0, 0, - 1 ).transformDirection( camera.matrixWorld );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tconsole.error( 'THREE.Raycaster: Unsupported camera type.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tintersectObject: function ( object, recursive ) {\r\n\r\n\t\t\tvar intersects = [];\r\n\r\n\t\t\tintersectObject( object, this, intersects, recursive );\r\n\r\n\t\t\tintersects.sort( ascSort );\r\n\r\n\t\t\treturn intersects;\r\n\r\n\t\t},\r\n\r\n\t\tintersectObjects: function ( objects, recursive ) {\r\n\r\n\t\t\tvar intersects = [];\r\n\r\n\t\t\tif ( Array.isArray( objects ) === false ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Raycaster.intersectObjects: objects is not an Array.' );\r\n\t\t\t\treturn intersects;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var i = 0, l = objects.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tintersectObject( objects[ i ], this, intersects, recursive );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tintersects.sort( ascSort );\r\n\r\n\t\t\treturn intersects;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n}( THREE ) );\r\n\r\n// File:src/core/Object3D.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author WestLangley / http://github.com/WestLangley\r\n * @author elephantatwork / www.elephantatwork.ch\r\n */\r\n\r\nTHREE.Object3D = function () {\r\n\r\n\tObject.defineProperty( this, 'id', { value: THREE.Object3DIdCount ++ } );\r\n\r\n\tthis.uuid = THREE.Math.generateUUID();\r\n\r\n\tthis.name = '';\r\n\tthis.type = 'Object3D';\r\n\r\n\tthis.parent = null;\r\n\tthis.children = [];\r\n\r\n\tthis.up = THREE.Object3D.DefaultUp.clone();\r\n\r\n\tvar position = new THREE.Vector3();\r\n\tvar rotation = new THREE.Euler();\r\n\tvar quaternion = new THREE.Quaternion();\r\n\tvar scale = new THREE.Vector3( 1, 1, 1 );\r\n\r\n\tfunction onRotationChange() {\r\n\r\n\t\tquaternion.setFromEuler( rotation, false );\r\n\r\n\t}\r\n\r\n\tfunction onQuaternionChange() {\r\n\r\n\t\trotation.setFromQuaternion( quaternion, undefined, false );\r\n\r\n\t}\r\n\r\n\trotation.onChange( onRotationChange );\r\n\tquaternion.onChange( onQuaternionChange );\r\n\r\n\tObject.defineProperties( this, {\r\n\t\tposition: {\r\n\t\t\tenumerable: true,\r\n\t\t\tvalue: position\r\n\t\t},\r\n\t\trotation: {\r\n\t\t\tenumerable: true,\r\n\t\t\tvalue: rotation\r\n\t\t},\r\n\t\tquaternion: {\r\n\t\t\tenumerable: true,\r\n\t\t\tvalue: quaternion\r\n\t\t},\r\n\t\tscale: {\r\n\t\t\tenumerable: true,\r\n\t\t\tvalue: scale\r\n\t\t},\r\n\t\tmodelViewMatrix: {\r\n\t\t\tvalue: new THREE.Matrix4()\r\n\t\t},\r\n\t\tnormalMatrix: {\r\n\t\t\tvalue: new THREE.Matrix3()\r\n\t\t}\r\n\t} );\r\n\r\n\tthis.matrix = new THREE.Matrix4();\r\n\tthis.matrixWorld = new THREE.Matrix4();\r\n\r\n\tthis.matrixAutoUpdate = THREE.Object3D.DefaultMatrixAutoUpdate;\r\n\tthis.matrixWorldNeedsUpdate = false;\r\n\r\n\tthis.layers = new THREE.Layers();\r\n\tthis.visible = true;\r\n\r\n\tthis.castShadow = false;\r\n\tthis.receiveShadow = false;\r\n\r\n\tthis.frustumCulled = true;\r\n\tthis.renderOrder = 0;\r\n\r\n\tthis.userData = {};\r\n\r\n};\r\n\r\nTHREE.Object3D.DefaultUp = new THREE.Vector3( 0, 1, 0 );\r\nTHREE.Object3D.DefaultMatrixAutoUpdate = true;\r\n\r\nObject.assign( THREE.Object3D.prototype, THREE.EventDispatcher.prototype, {\r\n\r\n\tapplyMatrix: function ( matrix ) {\r\n\r\n\t\tthis.matrix.multiplyMatrices( matrix, this.matrix );\r\n\r\n\t\tthis.matrix.decompose( this.position, this.quaternion, this.scale );\r\n\r\n\t},\r\n\r\n\tsetRotationFromAxisAngle: function ( axis, angle ) {\r\n\r\n\t\t// assumes axis is normalized\r\n\r\n\t\tthis.quaternion.setFromAxisAngle( axis, angle );\r\n\r\n\t},\r\n\r\n\tsetRotationFromEuler: function ( euler ) {\r\n\r\n\t\tthis.quaternion.setFromEuler( euler, true );\r\n\r\n\t},\r\n\r\n\tsetRotationFromMatrix: function ( m ) {\r\n\r\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\r\n\r\n\t\tthis.quaternion.setFromRotationMatrix( m );\r\n\r\n\t},\r\n\r\n\tsetRotationFromQuaternion: function ( q ) {\r\n\r\n\t\t// assumes q is normalized\r\n\r\n\t\tthis.quaternion.copy( q );\r\n\r\n\t},\r\n\r\n\trotateOnAxis: function () {\r\n\r\n\t\t// rotate object on axis in object space\r\n\t\t// axis is assumed to be normalized\r\n\r\n\t\tvar q1 = new THREE.Quaternion();\r\n\r\n\t\treturn function ( axis, angle ) {\r\n\r\n\t\t\tq1.setFromAxisAngle( axis, angle );\r\n\r\n\t\t\tthis.quaternion.multiply( q1 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\trotateX: function () {\r\n\r\n\t\tvar v1 = new THREE.Vector3( 1, 0, 0 );\r\n\r\n\t\treturn function ( angle ) {\r\n\r\n\t\t\treturn this.rotateOnAxis( v1, angle );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\trotateY: function () {\r\n\r\n\t\tvar v1 = new THREE.Vector3( 0, 1, 0 );\r\n\r\n\t\treturn function ( angle ) {\r\n\r\n\t\t\treturn this.rotateOnAxis( v1, angle );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\trotateZ: function () {\r\n\r\n\t\tvar v1 = new THREE.Vector3( 0, 0, 1 );\r\n\r\n\t\treturn function ( angle ) {\r\n\r\n\t\t\treturn this.rotateOnAxis( v1, angle );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\ttranslateOnAxis: function () {\r\n\r\n\t\t// translate object by distance along axis in object space\r\n\t\t// axis is assumed to be normalized\r\n\r\n\t\tvar v1 = new THREE.Vector3();\r\n\r\n\t\treturn function ( axis, distance ) {\r\n\r\n\t\t\tv1.copy( axis ).applyQuaternion( this.quaternion );\r\n\r\n\t\t\tthis.position.add( v1.multiplyScalar( distance ) );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\ttranslateX: function () {\r\n\r\n\t\tvar v1 = new THREE.Vector3( 1, 0, 0 );\r\n\r\n\t\treturn function ( distance ) {\r\n\r\n\t\t\treturn this.translateOnAxis( v1, distance );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\ttranslateY: function () {\r\n\r\n\t\tvar v1 = new THREE.Vector3( 0, 1, 0 );\r\n\r\n\t\treturn function ( distance ) {\r\n\r\n\t\t\treturn this.translateOnAxis( v1, distance );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\ttranslateZ: function () {\r\n\r\n\t\tvar v1 = new THREE.Vector3( 0, 0, 1 );\r\n\r\n\t\treturn function ( distance ) {\r\n\r\n\t\t\treturn this.translateOnAxis( v1, distance );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tlocalToWorld: function ( vector ) {\r\n\r\n\t\treturn vector.applyMatrix4( this.matrixWorld );\r\n\r\n\t},\r\n\r\n\tworldToLocal: function () {\r\n\r\n\t\tvar m1 = new THREE.Matrix4();\r\n\r\n\t\treturn function ( vector ) {\r\n\r\n\t\t\treturn vector.applyMatrix4( m1.getInverse( this.matrixWorld ) );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tlookAt: function () {\r\n\r\n\t\t// This routine does not support objects with rotated and/or translated parent(s)\r\n\r\n\t\tvar m1 = new THREE.Matrix4();\r\n\r\n\t\treturn function ( vector ) {\r\n\r\n\t\t\tm1.lookAt( vector, this.position, this.up );\r\n\r\n\t\t\tthis.quaternion.setFromRotationMatrix( m1 );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tadd: function ( object ) {\r\n\r\n\t\tif ( arguments.length > 1 ) {\r\n\r\n\t\t\tfor ( var i = 0; i < arguments.length; i ++ ) {\r\n\r\n\t\t\t\tthis.add( arguments[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t\tif ( object === this ) {\r\n\r\n\t\t\tconsole.error( \"THREE.Object3D.add: object can't be added as a child of itself.\", object );\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t\tif ( object instanceof THREE.Object3D ) {\r\n\r\n\t\t\tif ( object.parent !== null ) {\r\n\r\n\t\t\t\tobject.parent.remove( object );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tobject.parent = this;\r\n\t\t\tobject.dispatchEvent( { type: 'added' } );\r\n\r\n\t\t\tthis.children.push( object );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconsole.error( \"THREE.Object3D.add: object not an instance of THREE.Object3D.\", object );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tremove: function ( object ) {\r\n\r\n\t\tif ( arguments.length > 1 ) {\r\n\r\n\t\t\tfor ( var i = 0; i < arguments.length; i ++ ) {\r\n\r\n\t\t\t\tthis.remove( arguments[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tvar index = this.children.indexOf( object );\r\n\r\n\t\tif ( index !== - 1 ) {\r\n\r\n\t\t\tobject.parent = null;\r\n\r\n\t\t\tobject.dispatchEvent( { type: 'removed' } );\r\n\r\n\t\t\tthis.children.splice( index, 1 );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tgetObjectById: function ( id ) {\r\n\r\n\t\treturn this.getObjectByProperty( 'id', id );\r\n\r\n\t},\r\n\r\n\tgetObjectByName: function ( name ) {\r\n\r\n\t\treturn this.getObjectByProperty( 'name', name );\r\n\r\n\t},\r\n\r\n\tgetObjectByProperty: function ( name, value ) {\r\n\r\n\t\tif ( this[ name ] === value ) return this;\r\n\r\n\t\tfor ( var i = 0, l = this.children.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar child = this.children[ i ];\r\n\t\t\tvar object = child.getObjectByProperty( name, value );\r\n\r\n\t\t\tif ( object !== undefined ) {\r\n\r\n\t\t\t\treturn object;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn undefined;\r\n\r\n\t},\r\n\r\n\tgetWorldPosition: function ( optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\r\n\t\tthis.updateMatrixWorld( true );\r\n\r\n\t\treturn result.setFromMatrixPosition( this.matrixWorld );\r\n\r\n\t},\r\n\r\n\tgetWorldQuaternion: function () {\r\n\r\n\t\tvar position = new THREE.Vector3();\r\n\t\tvar scale = new THREE.Vector3();\r\n\r\n\t\treturn function ( optionalTarget ) {\r\n\r\n\t\t\tvar result = optionalTarget || new THREE.Quaternion();\r\n\r\n\t\t\tthis.updateMatrixWorld( true );\r\n\r\n\t\t\tthis.matrixWorld.decompose( position, result, scale );\r\n\r\n\t\t\treturn result;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tgetWorldRotation: function () {\r\n\r\n\t\tvar quaternion = new THREE.Quaternion();\r\n\r\n\t\treturn function ( optionalTarget ) {\r\n\r\n\t\t\tvar result = optionalTarget || new THREE.Euler();\r\n\r\n\t\t\tthis.getWorldQuaternion( quaternion );\r\n\r\n\t\t\treturn result.setFromQuaternion( quaternion, this.rotation.order, false );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tgetWorldScale: function () {\r\n\r\n\t\tvar position = new THREE.Vector3();\r\n\t\tvar quaternion = new THREE.Quaternion();\r\n\r\n\t\treturn function ( optionalTarget ) {\r\n\r\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\r\n\t\t\tthis.updateMatrixWorld( true );\r\n\r\n\t\t\tthis.matrixWorld.decompose( position, quaternion, result );\r\n\r\n\t\t\treturn result;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tgetWorldDirection: function () {\r\n\r\n\t\tvar quaternion = new THREE.Quaternion();\r\n\r\n\t\treturn function ( optionalTarget ) {\r\n\r\n\t\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\r\n\t\t\tthis.getWorldQuaternion( quaternion );\r\n\r\n\t\t\treturn result.set( 0, 0, 1 ).applyQuaternion( quaternion );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\traycast: function () {},\r\n\r\n\ttraverse: function ( callback ) {\r\n\r\n\t\tcallback( this );\r\n\r\n\t\tvar children = this.children;\r\n\r\n\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\r\n\r\n\t\t\tchildren[ i ].traverse( callback );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\ttraverseVisible: function ( callback ) {\r\n\r\n\t\tif ( this.visible === false ) return;\r\n\r\n\t\tcallback( this );\r\n\r\n\t\tvar children = this.children;\r\n\r\n\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\r\n\r\n\t\t\tchildren[ i ].traverseVisible( callback );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\ttraverseAncestors: function ( callback ) {\r\n\r\n\t\tvar parent = this.parent;\r\n\r\n\t\tif ( parent !== null ) {\r\n\r\n\t\t\tcallback( parent );\r\n\r\n\t\t\tparent.traverseAncestors( callback );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tupdateMatrix: function () {\r\n\r\n\t\tthis.matrix.compose( this.position, this.quaternion, this.scale );\r\n\r\n\t\tthis.matrixWorldNeedsUpdate = true;\r\n\r\n\t},\r\n\r\n\tupdateMatrixWorld: function ( force ) {\r\n\r\n\t\tif ( this.matrixAutoUpdate === true ) this.updateMatrix();\r\n\r\n\t\tif ( this.matrixWorldNeedsUpdate === true || force === true ) {\r\n\r\n\t\t\tif ( this.parent === null ) {\r\n\r\n\t\t\t\tthis.matrixWorld.copy( this.matrix );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.matrixWorldNeedsUpdate = false;\r\n\r\n\t\t\tforce = true;\r\n\r\n\t\t}\r\n\r\n\t\t// update children\r\n\r\n\t\tfor ( var i = 0, l = this.children.length; i < l; i ++ ) {\r\n\r\n\t\t\tthis.children[ i ].updateMatrixWorld( force );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\ttoJSON: function ( meta ) {\r\n\r\n\t\t// meta is '' when called from JSON.stringify\r\n\t\tvar isRootObject = ( meta === undefined || meta === '' );\r\n\r\n\t\tvar output = {};\r\n\r\n\t\t// meta is a hash used to collect geometries, materials.\r\n\t\t// not providing it implies that this is the root object\r\n\t\t// being serialized.\r\n\t\tif ( isRootObject ) {\r\n\r\n\t\t\t// initialize meta obj\r\n\t\t\tmeta = {\r\n\t\t\t\tgeometries: {},\r\n\t\t\t\tmaterials: {},\r\n\t\t\t\ttextures: {},\r\n\t\t\t\timages: {}\r\n\t\t\t};\r\n\r\n\t\t\toutput.metadata = {\r\n\t\t\t\tversion: 4.4,\r\n\t\t\t\ttype: 'Object',\r\n\t\t\t\tgenerator: 'Object3D.toJSON'\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\t// standard Object3D serialization\r\n\r\n\t\tvar object = {};\r\n\r\n\t\tobject.uuid = this.uuid;\r\n\t\tobject.type = this.type;\r\n\r\n\t\tif ( this.name !== '' ) object.name = this.name;\r\n\t\tif ( JSON.stringify( this.userData ) !== '{}' ) object.userData = this.userData;\r\n\t\tif ( this.castShadow === true ) object.castShadow = true;\r\n\t\tif ( this.receiveShadow === true ) object.receiveShadow = true;\r\n\t\tif ( this.visible === false ) object.visible = false;\r\n\r\n\t\tobject.matrix = this.matrix.toArray();\r\n\r\n\t\t//\r\n\r\n\t\tif ( this.geometry !== undefined ) {\r\n\r\n\t\t\tif ( meta.geometries[ this.geometry.uuid ] === undefined ) {\r\n\r\n\t\t\t\tmeta.geometries[ this.geometry.uuid ] = this.geometry.toJSON( meta );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tobject.geometry = this.geometry.uuid;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.material !== undefined ) {\r\n\r\n\t\t\tif ( meta.materials[ this.material.uuid ] === undefined ) {\r\n\r\n\t\t\t\tmeta.materials[ this.material.uuid ] = this.material.toJSON( meta );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tobject.material = this.material.uuid;\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tif ( this.children.length > 0 ) {\r\n\r\n\t\t\tobject.children = [];\r\n\r\n\t\t\tfor ( var i = 0; i < this.children.length; i ++ ) {\r\n\r\n\t\t\t\tobject.children.push( this.children[ i ].toJSON( meta ).object );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( isRootObject ) {\r\n\r\n\t\t\tvar geometries = extractFromCache( meta.geometries );\r\n\t\t\tvar materials = extractFromCache( meta.materials );\r\n\t\t\tvar textures = extractFromCache( meta.textures );\r\n\t\t\tvar images = extractFromCache( meta.images );\r\n\r\n\t\t\tif ( geometries.length > 0 ) output.geometries = geometries;\r\n\t\t\tif ( materials.length > 0 ) output.materials = materials;\r\n\t\t\tif ( textures.length > 0 ) output.textures = textures;\r\n\t\t\tif ( images.length > 0 ) output.images = images;\r\n\r\n\t\t}\r\n\r\n\t\toutput.object = object;\r\n\r\n\t\treturn output;\r\n\r\n\t\t// extract data from the cache hash\r\n\t\t// remove metadata on each item\r\n\t\t// and return as array\r\n\t\tfunction extractFromCache ( cache ) {\r\n\r\n\t\t\tvar values = [];\r\n\t\t\tfor ( var key in cache ) {\r\n\r\n\t\t\t\tvar data = cache[ key ];\r\n\t\t\t\tdelete data.metadata;\r\n\t\t\t\tvalues.push( data );\r\n\r\n\t\t\t}\r\n\t\t\treturn values;\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tclone: function ( recursive ) {\r\n\r\n\t\treturn new this.constructor().copy( this, recursive );\r\n\r\n\t},\r\n\r\n\tcopy: function ( source, recursive ) {\r\n\r\n\t\tif ( recursive === undefined ) recursive = true;\r\n\r\n\t\tthis.name = source.name;\r\n\r\n\t\tthis.up.copy( source.up );\r\n\r\n\t\tthis.position.copy( source.position );\r\n\t\tthis.quaternion.copy( source.quaternion );\r\n\t\tthis.scale.copy( source.scale );\r\n\r\n\t\tthis.matrix.copy( source.matrix );\r\n\t\tthis.matrixWorld.copy( source.matrixWorld );\r\n\r\n\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\r\n\t\tthis.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;\r\n\r\n\t\tthis.visible = source.visible;\r\n\r\n\t\tthis.castShadow = source.castShadow;\r\n\t\tthis.receiveShadow = source.receiveShadow;\r\n\r\n\t\tthis.frustumCulled = source.frustumCulled;\r\n\t\tthis.renderOrder = source.renderOrder;\r\n\r\n\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\r\n\r\n\t\tif ( recursive === true ) {\r\n\r\n\t\t\tfor ( var i = 0; i < source.children.length; i ++ ) {\r\n\r\n\t\t\t\tvar child = source.children[ i ];\r\n\t\t\t\tthis.add( child.clone() );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n} );\r\n\r\nTHREE.Object3DIdCount = 0;\r\n\r\n// File:src/core/Face3.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.Face3 = function ( a, b, c, normal, color, materialIndex ) {\r\n\r\n\tthis.a = a;\r\n\tthis.b = b;\r\n\tthis.c = c;\r\n\r\n\tthis.normal = normal instanceof THREE.Vector3 ? normal : new THREE.Vector3();\r\n\tthis.vertexNormals = Array.isArray( normal ) ? normal : [];\r\n\r\n\tthis.color = color instanceof THREE.Color ? color : new THREE.Color();\r\n\tthis.vertexColors = Array.isArray( color ) ? color : [];\r\n\r\n\tthis.materialIndex = materialIndex !== undefined ? materialIndex : 0;\r\n\r\n};\r\n\r\nTHREE.Face3.prototype = {\r\n\r\n\tconstructor: THREE.Face3,\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t},\r\n\r\n\tcopy: function ( source ) {\r\n\r\n\t\tthis.a = source.a;\r\n\t\tthis.b = source.b;\r\n\t\tthis.c = source.c;\r\n\r\n\t\tthis.normal.copy( source.normal );\r\n\t\tthis.color.copy( source.color );\r\n\r\n\t\tthis.materialIndex = source.materialIndex;\r\n\r\n\t\tfor ( var i = 0, il = source.vertexNormals.length; i < il; i ++ ) {\r\n\r\n\t\t\tthis.vertexNormals[ i ] = source.vertexNormals[ i ].clone();\r\n\r\n\t\t}\r\n\r\n\t\tfor ( var i = 0, il = source.vertexColors.length; i < il; i ++ ) {\r\n\r\n\t\t\tthis.vertexColors[ i ] = source.vertexColors[ i ].clone();\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/core/BufferAttribute.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.BufferAttribute = function ( array, itemSize, normalized ) {\r\n\r\n\tthis.uuid = THREE.Math.generateUUID();\r\n\r\n\tthis.array = array;\r\n\tthis.itemSize = itemSize;\r\n\r\n\tthis.dynamic = false;\r\n\tthis.updateRange = { offset: 0, count: - 1 };\r\n\r\n\tthis.version = 0;\r\n\tthis.normalized = normalized === true;\r\n\r\n};\r\n\r\nTHREE.BufferAttribute.prototype = {\r\n\r\n\tconstructor: THREE.BufferAttribute,\r\n\r\n\tget count() {\r\n\r\n\t\treturn this.array.length / this.itemSize;\r\n\r\n\t},\r\n\r\n\tset needsUpdate( value ) {\r\n\r\n\t\tif ( value === true ) this.version ++;\r\n\r\n\t},\r\n\r\n\tsetDynamic: function ( value ) {\r\n\r\n\t\tthis.dynamic = value;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcopy: function ( source ) {\r\n\r\n\t\tthis.array = new source.array.constructor( source.array );\r\n\t\tthis.itemSize = source.itemSize;\r\n\r\n\t\tthis.dynamic = source.dynamic;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcopyAt: function ( index1, attribute, index2 ) {\r\n\r\n\t\tindex1 *= this.itemSize;\r\n\t\tindex2 *= attribute.itemSize;\r\n\r\n\t\tfor ( var i = 0, l = this.itemSize; i < l; i ++ ) {\r\n\r\n\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcopyArray: function ( array ) {\r\n\r\n\t\tthis.array.set( array );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcopyColorsArray: function ( colors ) {\r\n\r\n\t\tvar array = this.array, offset = 0;\r\n\r\n\t\tfor ( var i = 0, l = colors.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar color = colors[ i ];\r\n\r\n\t\t\tif ( color === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyColorsArray(): color is undefined', i );\r\n\t\t\t\tcolor = new THREE.Color();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tarray[ offset ++ ] = color.r;\r\n\t\t\tarray[ offset ++ ] = color.g;\r\n\t\t\tarray[ offset ++ ] = color.b;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcopyIndicesArray: function ( indices ) {\r\n\r\n\t\tvar array = this.array, offset = 0;\r\n\r\n\t\tfor ( var i = 0, l = indices.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar index = indices[ i ];\r\n\r\n\t\t\tarray[ offset ++ ] = index.a;\r\n\t\t\tarray[ offset ++ ] = index.b;\r\n\t\t\tarray[ offset ++ ] = index.c;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcopyVector2sArray: function ( vectors ) {\r\n\r\n\t\tvar array = this.array, offset = 0;\r\n\r\n\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar vector = vectors[ i ];\r\n\r\n\t\t\tif ( vector === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i );\r\n\t\t\t\tvector = new THREE.Vector2();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tarray[ offset ++ ] = vector.x;\r\n\t\t\tarray[ offset ++ ] = vector.y;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcopyVector3sArray: function ( vectors ) {\r\n\r\n\t\tvar array = this.array, offset = 0;\r\n\r\n\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar vector = vectors[ i ];\r\n\r\n\t\t\tif ( vector === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i );\r\n\t\t\t\tvector = new THREE.Vector3();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tarray[ offset ++ ] = vector.x;\r\n\t\t\tarray[ offset ++ ] = vector.y;\r\n\t\t\tarray[ offset ++ ] = vector.z;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcopyVector4sArray: function ( vectors ) {\r\n\r\n\t\tvar array = this.array, offset = 0;\r\n\r\n\t\tfor ( var i = 0, l = vectors.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar vector = vectors[ i ];\r\n\r\n\t\t\tif ( vector === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i );\r\n\t\t\t\tvector = new THREE.Vector4();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tarray[ offset ++ ] = vector.x;\r\n\t\t\tarray[ offset ++ ] = vector.y;\r\n\t\t\tarray[ offset ++ ] = vector.z;\r\n\t\t\tarray[ offset ++ ] = vector.w;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tset: function ( value, offset ) {\r\n\r\n\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\tthis.array.set( value, offset );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tgetX: function ( index ) {\r\n\r\n\t\treturn this.array[ index * this.itemSize ];\r\n\r\n\t},\r\n\r\n\tsetX: function ( index, x ) {\r\n\r\n\t\tthis.array[ index * this.itemSize ] = x;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tgetY: function ( index ) {\r\n\r\n\t\treturn this.array[ index * this.itemSize + 1 ];\r\n\r\n\t},\r\n\r\n\tsetY: function ( index, y ) {\r\n\r\n\t\tthis.array[ index * this.itemSize + 1 ] = y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tgetZ: function ( index ) {\r\n\r\n\t\treturn this.array[ index * this.itemSize + 2 ];\r\n\r\n\t},\r\n\r\n\tsetZ: function ( index, z ) {\r\n\r\n\t\tthis.array[ index * this.itemSize + 2 ] = z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tgetW: function ( index ) {\r\n\r\n\t\treturn this.array[ index * this.itemSize + 3 ];\r\n\r\n\t},\r\n\r\n\tsetW: function ( index, w ) {\r\n\r\n\t\tthis.array[ index * this.itemSize + 3 ] = w;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetXY: function ( index, x, y ) {\r\n\r\n\t\tindex *= this.itemSize;\r\n\r\n\t\tthis.array[ index + 0 ] = x;\r\n\t\tthis.array[ index + 1 ] = y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetXYZ: function ( index, x, y, z ) {\r\n\r\n\t\tindex *= this.itemSize;\r\n\r\n\t\tthis.array[ index + 0 ] = x;\r\n\t\tthis.array[ index + 1 ] = y;\r\n\t\tthis.array[ index + 2 ] = z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetXYZW: function ( index, x, y, z, w ) {\r\n\r\n\t\tindex *= this.itemSize;\r\n\r\n\t\tthis.array[ index + 0 ] = x;\r\n\t\tthis.array[ index + 1 ] = y;\r\n\t\tthis.array[ index + 2 ] = z;\r\n\t\tthis.array[ index + 3 ] = w;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t}\r\n\r\n};\r\n\r\n//\r\n\r\nTHREE.Int8Attribute = function ( array, itemSize ) {\r\n\r\n\treturn new THREE.BufferAttribute( new Int8Array( array ), itemSize );\r\n\r\n};\r\n\r\nTHREE.Uint8Attribute = function ( array, itemSize ) {\r\n\r\n\treturn new THREE.BufferAttribute( new Uint8Array( array ), itemSize );\r\n\r\n};\r\n\r\nTHREE.Uint8ClampedAttribute = function ( array, itemSize ) {\r\n\r\n\treturn new THREE.BufferAttribute( new Uint8ClampedArray( array ), itemSize );\r\n\r\n};\r\n\r\nTHREE.Int16Attribute = function ( array, itemSize ) {\r\n\r\n\treturn new THREE.BufferAttribute( new Int16Array( array ), itemSize );\r\n\r\n};\r\n\r\nTHREE.Uint16Attribute = function ( array, itemSize ) {\r\n\r\n\treturn new THREE.BufferAttribute( new Uint16Array( array ), itemSize );\r\n\r\n};\r\n\r\nTHREE.Int32Attribute = function ( array, itemSize ) {\r\n\r\n\treturn new THREE.BufferAttribute( new Int32Array( array ), itemSize );\r\n\r\n};\r\n\r\nTHREE.Uint32Attribute = function ( array, itemSize ) {\r\n\r\n\treturn new THREE.BufferAttribute( new Uint32Array( array ), itemSize );\r\n\r\n};\r\n\r\nTHREE.Float32Attribute = function ( array, itemSize ) {\r\n\r\n\treturn new THREE.BufferAttribute( new Float32Array( array ), itemSize );\r\n\r\n};\r\n\r\nTHREE.Float64Attribute = function ( array, itemSize ) {\r\n\r\n\treturn new THREE.BufferAttribute( new Float64Array( array ), itemSize );\r\n\r\n};\r\n\r\n\r\n// Deprecated\r\n\r\nTHREE.DynamicBufferAttribute = function ( array, itemSize ) {\r\n\r\n\tconsole.warn( 'THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead.' );\r\n\treturn new THREE.BufferAttribute( array, itemSize ).setDynamic( true );\r\n\r\n};\r\n\r\n// File:src/core/InstancedBufferAttribute.js\r\n\r\n/**\r\n * @author benaadams / https://twitter.com/ben_a_adams\r\n */\r\n\r\nTHREE.InstancedBufferAttribute = function ( array, itemSize, meshPerAttribute ) {\r\n\r\n\tTHREE.BufferAttribute.call( this, array, itemSize );\r\n\r\n\tthis.meshPerAttribute = meshPerAttribute || 1;\r\n\r\n};\r\n\r\nTHREE.InstancedBufferAttribute.prototype = Object.create( THREE.BufferAttribute.prototype );\r\nTHREE.InstancedBufferAttribute.prototype.constructor = THREE.InstancedBufferAttribute;\r\n\r\nTHREE.InstancedBufferAttribute.prototype.copy = function ( source ) {\r\n\r\n\tTHREE.BufferAttribute.prototype.copy.call( this, source );\r\n\r\n\tthis.meshPerAttribute = source.meshPerAttribute;\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\n// File:src/core/InterleavedBuffer.js\r\n\r\n/**\r\n * @author benaadams / https://twitter.com/ben_a_adams\r\n */\r\n\r\nTHREE.InterleavedBuffer = function ( array, stride ) {\r\n\r\n\tthis.uuid = THREE.Math.generateUUID();\r\n\r\n\tthis.array = array;\r\n\tthis.stride = stride;\r\n\r\n\tthis.dynamic = false;\r\n\tthis.updateRange = { offset: 0, count: - 1 };\r\n\r\n\tthis.version = 0;\r\n\r\n};\r\n\r\nTHREE.InterleavedBuffer.prototype = {\r\n\r\n\tconstructor: THREE.InterleavedBuffer,\r\n\r\n\tget length () {\r\n\r\n\t\treturn this.array.length;\r\n\r\n\t},\r\n\r\n\tget count () {\r\n\r\n\t\treturn this.array.length / this.stride;\r\n\r\n\t},\r\n\r\n\tset needsUpdate( value ) {\r\n\r\n\t\tif ( value === true ) this.version ++;\r\n\r\n\t},\r\n\r\n\tsetDynamic: function ( value ) {\r\n\r\n\t\tthis.dynamic = value;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcopy: function ( source ) {\r\n\r\n\t\tthis.array = new source.array.constructor( source.array );\r\n\t\tthis.stride = source.stride;\r\n\t\tthis.dynamic = source.dynamic;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcopyAt: function ( index1, attribute, index2 ) {\r\n\r\n\t\tindex1 *= this.stride;\r\n\t\tindex2 *= attribute.stride;\r\n\r\n\t\tfor ( var i = 0, l = this.stride; i < l; i ++ ) {\r\n\r\n\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tset: function ( value, offset ) {\r\n\r\n\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\tthis.array.set( value, offset );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/core/InstancedInterleavedBuffer.js\r\n\r\n/**\r\n * @author benaadams / https://twitter.com/ben_a_adams\r\n */\r\n\r\nTHREE.InstancedInterleavedBuffer = function ( array, stride, meshPerAttribute ) {\r\n\r\n\tTHREE.InterleavedBuffer.call( this, array, stride );\r\n\r\n\tthis.meshPerAttribute = meshPerAttribute || 1;\r\n\r\n};\r\n\r\nTHREE.InstancedInterleavedBuffer.prototype = Object.create( THREE.InterleavedBuffer.prototype );\r\nTHREE.InstancedInterleavedBuffer.prototype.constructor = THREE.InstancedInterleavedBuffer;\r\n\r\nTHREE.InstancedInterleavedBuffer.prototype.copy = function ( source ) {\r\n\r\n\tTHREE.InterleavedBuffer.prototype.copy.call( this, source );\r\n\r\n\tthis.meshPerAttribute = source.meshPerAttribute;\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\n// File:src/core/InterleavedBufferAttribute.js\r\n\r\n/**\r\n * @author benaadams / https://twitter.com/ben_a_adams\r\n */\r\n\r\nTHREE.InterleavedBufferAttribute = function ( interleavedBuffer, itemSize, offset ) {\r\n\r\n\tthis.uuid = THREE.Math.generateUUID();\r\n\r\n\tthis.data = interleavedBuffer;\r\n\tthis.itemSize = itemSize;\r\n\tthis.offset = offset;\r\n\r\n};\r\n\r\n\r\nTHREE.InterleavedBufferAttribute.prototype = {\r\n\r\n\tconstructor: THREE.InterleavedBufferAttribute,\r\n\r\n\tget length() {\r\n\r\n\t\tconsole.warn( 'THREE.BufferAttribute: .length has been deprecated. Please use .count.' );\r\n\t\treturn this.array.length;\r\n\r\n\t},\r\n\r\n\tget count() {\r\n\r\n\t\treturn this.data.count;\r\n\r\n\t},\r\n\r\n\tsetX: function ( index, x ) {\r\n\r\n\t\tthis.data.array[ index * this.data.stride + this.offset ] = x;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetY: function ( index, y ) {\r\n\r\n\t\tthis.data.array[ index * this.data.stride + this.offset + 1 ] = y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetZ: function ( index, z ) {\r\n\r\n\t\tthis.data.array[ index * this.data.stride + this.offset + 2 ] = z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetW: function ( index, w ) {\r\n\r\n\t\tthis.data.array[ index * this.data.stride + this.offset + 3 ] = w;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tgetX: function ( index ) {\r\n\r\n\t\treturn this.data.array[ index * this.data.stride + this.offset ];\r\n\r\n\t},\r\n\r\n\tgetY: function ( index ) {\r\n\r\n\t\treturn this.data.array[ index * this.data.stride + this.offset + 1 ];\r\n\r\n\t},\r\n\r\n\tgetZ: function ( index ) {\r\n\r\n\t\treturn this.data.array[ index * this.data.stride + this.offset + 2 ];\r\n\r\n\t},\r\n\r\n\tgetW: function ( index ) {\r\n\r\n\t\treturn this.data.array[ index * this.data.stride + this.offset + 3 ];\r\n\r\n\t},\r\n\r\n\tsetXY: function ( index, x, y ) {\r\n\r\n\t\tindex = index * this.data.stride + this.offset;\r\n\r\n\t\tthis.data.array[ index + 0 ] = x;\r\n\t\tthis.data.array[ index + 1 ] = y;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetXYZ: function ( index, x, y, z ) {\r\n\r\n\t\tindex = index * this.data.stride + this.offset;\r\n\r\n\t\tthis.data.array[ index + 0 ] = x;\r\n\t\tthis.data.array[ index + 1 ] = y;\r\n\t\tthis.data.array[ index + 2 ] = z;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetXYZW: function ( index, x, y, z, w ) {\r\n\r\n\t\tindex = index * this.data.stride + this.offset;\r\n\r\n\t\tthis.data.array[ index + 0 ] = x;\r\n\t\tthis.data.array[ index + 1 ] = y;\r\n\t\tthis.data.array[ index + 2 ] = z;\r\n\t\tthis.data.array[ index + 3 ] = w;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/core/Geometry.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author kile / http://kile.stravaganza.org/\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author zz85 / http://www.lab4games.net/zz85/blog\r\n * @author bhouston / http://clara.io\r\n */\r\n\r\nTHREE.Geometry = function () {\r\n\r\n\tObject.defineProperty( this, 'id', { value: THREE.GeometryIdCount ++ } );\r\n\r\n\tthis.uuid = THREE.Math.generateUUID();\r\n\r\n\tthis.name = '';\r\n\tthis.type = 'Geometry';\r\n\r\n\tthis.vertices = [];\r\n\tthis.colors = [];\r\n\tthis.faces = [];\r\n\tthis.faceVertexUvs = [ [] ];\r\n\r\n\tthis.morphTargets = [];\r\n\tthis.morphNormals = [];\r\n\r\n\tthis.skinWeights = [];\r\n\tthis.skinIndices = [];\r\n\r\n\tthis.lineDistances = [];\r\n\r\n\tthis.boundingBox = null;\r\n\tthis.boundingSphere = null;\r\n\r\n\t// update flags\r\n\r\n\tthis.verticesNeedUpdate = false;\r\n\tthis.elementsNeedUpdate = false;\r\n\tthis.uvsNeedUpdate = false;\r\n\tthis.normalsNeedUpdate = false;\r\n\tthis.colorsNeedUpdate = false;\r\n\tthis.lineDistancesNeedUpdate = false;\r\n\tthis.groupsNeedUpdate = false;\r\n\r\n};\r\n\r\nObject.assign( THREE.Geometry.prototype, THREE.EventDispatcher.prototype, {\r\n\r\n\tapplyMatrix: function ( matrix ) {\r\n\r\n\t\tvar normalMatrix = new THREE.Matrix3().getNormalMatrix( matrix );\r\n\r\n\t\tfor ( var i = 0, il = this.vertices.length; i < il; i ++ ) {\r\n\r\n\t\t\tvar vertex = this.vertices[ i ];\r\n\t\t\tvertex.applyMatrix4( matrix );\r\n\r\n\t\t}\r\n\r\n\t\tfor ( var i = 0, il = this.faces.length; i < il; i ++ ) {\r\n\r\n\t\t\tvar face = this.faces[ i ];\r\n\t\t\tface.normal.applyMatrix3( normalMatrix ).normalize();\r\n\r\n\t\t\tfor ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\tface.vertexNormals[ j ].applyMatrix3( normalMatrix ).normalize();\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.boundingBox !== null ) {\r\n\r\n\t\t\tthis.computeBoundingBox();\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.boundingSphere !== null ) {\r\n\r\n\t\t\tthis.computeBoundingSphere();\r\n\r\n\t\t}\r\n\r\n\t\tthis.verticesNeedUpdate = true;\r\n\t\tthis.normalsNeedUpdate = true;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\trotateX: function () {\r\n\r\n\t\t// rotate geometry around world x-axis\r\n\r\n\t\tvar m1;\r\n\r\n\t\treturn function rotateX( angle ) {\r\n\r\n\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\r\n\r\n\t\t\tm1.makeRotationX( angle );\r\n\r\n\t\t\tthis.applyMatrix( m1 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\trotateY: function () {\r\n\r\n\t\t// rotate geometry around world y-axis\r\n\r\n\t\tvar m1;\r\n\r\n\t\treturn function rotateY( angle ) {\r\n\r\n\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\r\n\r\n\t\t\tm1.makeRotationY( angle );\r\n\r\n\t\t\tthis.applyMatrix( m1 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\trotateZ: function () {\r\n\r\n\t\t// rotate geometry around world z-axis\r\n\r\n\t\tvar m1;\r\n\r\n\t\treturn function rotateZ( angle ) {\r\n\r\n\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\r\n\r\n\t\t\tm1.makeRotationZ( angle );\r\n\r\n\t\t\tthis.applyMatrix( m1 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\ttranslate: function () {\r\n\r\n\t\t// translate geometry\r\n\r\n\t\tvar m1;\r\n\r\n\t\treturn function translate( x, y, z ) {\r\n\r\n\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\r\n\r\n\t\t\tm1.makeTranslation( x, y, z );\r\n\r\n\t\t\tthis.applyMatrix( m1 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tscale: function () {\r\n\r\n\t\t// scale geometry\r\n\r\n\t\tvar m1;\r\n\r\n\t\treturn function scale( x, y, z ) {\r\n\r\n\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\r\n\r\n\t\t\tm1.makeScale( x, y, z );\r\n\r\n\t\t\tthis.applyMatrix( m1 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tlookAt: function () {\r\n\r\n\t\tvar obj;\r\n\r\n\t\treturn function lookAt( vector ) {\r\n\r\n\t\t\tif ( obj === undefined ) obj = new THREE.Object3D();\r\n\r\n\t\t\tobj.lookAt( vector );\r\n\r\n\t\t\tobj.updateMatrix();\r\n\r\n\t\t\tthis.applyMatrix( obj.matrix );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tfromBufferGeometry: function ( geometry ) {\r\n\r\n\t\tvar scope = this;\r\n\r\n\t\tvar indices = geometry.index !== null ? geometry.index.array : undefined;\r\n\t\tvar attributes = geometry.attributes;\r\n\r\n\t\tvar positions = attributes.position.array;\r\n\t\tvar normals = attributes.normal !== undefined ? attributes.normal.array : undefined;\r\n\t\tvar colors = attributes.color !== undefined ? attributes.color.array : undefined;\r\n\t\tvar uvs = attributes.uv !== undefined ? attributes.uv.array : undefined;\r\n\t\tvar uvs2 = attributes.uv2 !== undefined ? attributes.uv2.array : undefined;\r\n\r\n\t\tif ( uvs2 !== undefined ) this.faceVertexUvs[ 1 ] = [];\r\n\r\n\t\tvar tempNormals = [];\r\n\t\tvar tempUVs = [];\r\n\t\tvar tempUVs2 = [];\r\n\r\n\t\tfor ( var i = 0, j = 0; i < positions.length; i += 3, j += 2 ) {\r\n\r\n\t\t\tscope.vertices.push( new THREE.Vector3( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] ) );\r\n\r\n\t\t\tif ( normals !== undefined ) {\r\n\r\n\t\t\t\ttempNormals.push( new THREE.Vector3( normals[ i ], normals[ i + 1 ], normals[ i + 2 ] ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( colors !== undefined ) {\r\n\r\n\t\t\t\tscope.colors.push( new THREE.Color( colors[ i ], colors[ i + 1 ], colors[ i + 2 ] ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( uvs !== undefined ) {\r\n\r\n\t\t\t\ttempUVs.push( new THREE.Vector2( uvs[ j ], uvs[ j + 1 ] ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( uvs2 !== undefined ) {\r\n\r\n\t\t\t\ttempUVs2.push( new THREE.Vector2( uvs2[ j ], uvs2[ j + 1 ] ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction addFace( a, b, c, materialIndex ) {\r\n\r\n\t\t\tvar vertexNormals = normals !== undefined ? [ tempNormals[ a ].clone(), tempNormals[ b ].clone(), tempNormals[ c ].clone() ] : [];\r\n\t\t\tvar vertexColors = colors !== undefined ? [ scope.colors[ a ].clone(), scope.colors[ b ].clone(), scope.colors[ c ].clone() ] : [];\r\n\r\n\t\t\tvar face = new THREE.Face3( a, b, c, vertexNormals, vertexColors, materialIndex );\r\n\r\n\t\t\tscope.faces.push( face );\r\n\r\n\t\t\tif ( uvs !== undefined ) {\r\n\r\n\t\t\t\tscope.faceVertexUvs[ 0 ].push( [ tempUVs[ a ].clone(), tempUVs[ b ].clone(), tempUVs[ c ].clone() ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( uvs2 !== undefined ) {\r\n\r\n\t\t\t\tscope.faceVertexUvs[ 1 ].push( [ tempUVs2[ a ].clone(), tempUVs2[ b ].clone(), tempUVs2[ c ].clone() ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( indices !== undefined ) {\r\n\r\n\t\t\tvar groups = geometry.groups;\r\n\r\n\t\t\tif ( groups.length > 0 ) {\r\n\r\n\t\t\t\tfor ( var i = 0; i < groups.length; i ++ ) {\r\n\r\n\t\t\t\t\tvar group = groups[ i ];\r\n\r\n\t\t\t\t\tvar start = group.start;\r\n\t\t\t\t\tvar count = group.count;\r\n\r\n\t\t\t\t\tfor ( var j = start, jl = start + count; j < jl; j += 3 ) {\r\n\r\n\t\t\t\t\t\taddFace( indices[ j ], indices[ j + 1 ], indices[ j + 2 ], group.materialIndex  );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tfor ( var i = 0; i < indices.length; i += 3 ) {\r\n\r\n\t\t\t\t\taddFace( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tfor ( var i = 0; i < positions.length / 3; i += 3 ) {\r\n\r\n\t\t\t\taddFace( i, i + 1, i + 2 );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis.computeFaceNormals();\r\n\r\n\t\tif ( geometry.boundingBox !== null ) {\r\n\r\n\t\t\tthis.boundingBox = geometry.boundingBox.clone();\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometry.boundingSphere !== null ) {\r\n\r\n\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcenter: function () {\r\n\r\n\t\tthis.computeBoundingBox();\r\n\r\n\t\tvar offset = this.boundingBox.center().negate();\r\n\r\n\t\tthis.translate( offset.x, offset.y, offset.z );\r\n\r\n\t\treturn offset;\r\n\r\n\t},\r\n\r\n\tnormalize: function () {\r\n\r\n\t\tthis.computeBoundingSphere();\r\n\r\n\t\tvar center = this.boundingSphere.center;\r\n\t\tvar radius = this.boundingSphere.radius;\r\n\r\n\t\tvar s = radius === 0 ? 1 : 1.0 / radius;\r\n\r\n\t\tvar matrix = new THREE.Matrix4();\r\n\t\tmatrix.set(\r\n\t\t\ts, 0, 0, - s * center.x,\r\n\t\t\t0, s, 0, - s * center.y,\r\n\t\t\t0, 0, s, - s * center.z,\r\n\t\t\t0, 0, 0, 1\r\n\t\t);\r\n\r\n\t\tthis.applyMatrix( matrix );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcomputeFaceNormals: function () {\r\n\r\n\t\tvar cb = new THREE.Vector3(), ab = new THREE.Vector3();\r\n\r\n\t\tfor ( var f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\tvar face = this.faces[ f ];\r\n\r\n\t\t\tvar vA = this.vertices[ face.a ];\r\n\t\t\tvar vB = this.vertices[ face.b ];\r\n\t\t\tvar vC = this.vertices[ face.c ];\r\n\r\n\t\t\tcb.subVectors( vC, vB );\r\n\t\t\tab.subVectors( vA, vB );\r\n\t\t\tcb.cross( ab );\r\n\r\n\t\t\tcb.normalize();\r\n\r\n\t\t\tface.normal.copy( cb );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tcomputeVertexNormals: function ( areaWeighted ) {\r\n\r\n\t\tif ( areaWeighted === undefined ) areaWeighted = true;\r\n\r\n\t\tvar v, vl, f, fl, face, vertices;\r\n\r\n\t\tvertices = new Array( this.vertices.length );\r\n\r\n\t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\r\n\r\n\t\t\tvertices[ v ] = new THREE.Vector3();\r\n\r\n\t\t}\r\n\r\n\t\tif ( areaWeighted ) {\r\n\r\n\t\t\t// vertex normals weighted by triangle areas\r\n\t\t\t// http://www.iquilezles.org/www/articles/normals/normals.htm\r\n\r\n\t\t\tvar vA, vB, vC;\r\n\t\t\tvar cb = new THREE.Vector3(), ab = new THREE.Vector3();\r\n\r\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\tface = this.faces[ f ];\r\n\r\n\t\t\t\tvA = this.vertices[ face.a ];\r\n\t\t\t\tvB = this.vertices[ face.b ];\r\n\t\t\t\tvC = this.vertices[ face.c ];\r\n\r\n\t\t\t\tcb.subVectors( vC, vB );\r\n\t\t\t\tab.subVectors( vA, vB );\r\n\t\t\t\tcb.cross( ab );\r\n\r\n\t\t\t\tvertices[ face.a ].add( cb );\r\n\t\t\t\tvertices[ face.b ].add( cb );\r\n\t\t\t\tvertices[ face.c ].add( cb );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\tface = this.faces[ f ];\r\n\r\n\t\t\t\tvertices[ face.a ].add( face.normal );\r\n\t\t\t\tvertices[ face.b ].add( face.normal );\r\n\t\t\t\tvertices[ face.c ].add( face.normal );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfor ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {\r\n\r\n\t\t\tvertices[ v ].normalize();\r\n\r\n\t\t}\r\n\r\n\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\tface = this.faces[ f ];\r\n\r\n\t\t\tvar vertexNormals = face.vertexNormals;\r\n\r\n\t\t\tif ( vertexNormals.length === 3 ) {\r\n\r\n\t\t\t\tvertexNormals[ 0 ].copy( vertices[ face.a ] );\r\n\t\t\t\tvertexNormals[ 1 ].copy( vertices[ face.b ] );\r\n\t\t\t\tvertexNormals[ 2 ].copy( vertices[ face.c ] );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tvertexNormals[ 0 ] = vertices[ face.a ].clone();\r\n\t\t\t\tvertexNormals[ 1 ] = vertices[ face.b ].clone();\r\n\t\t\t\tvertexNormals[ 2 ] = vertices[ face.c ].clone();\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.faces.length > 0 ) {\r\n\r\n\t\t\tthis.normalsNeedUpdate = true;\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tcomputeMorphNormals: function () {\r\n\r\n\t\tvar i, il, f, fl, face;\r\n\r\n\t\t// save original normals\r\n\t\t// - create temp variables on first access\r\n\t\t//   otherwise just copy (for faster repeated calls)\r\n\r\n\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\tface = this.faces[ f ];\r\n\r\n\t\t\tif ( ! face.__originalFaceNormal ) {\r\n\r\n\t\t\t\tface.__originalFaceNormal = face.normal.clone();\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tface.__originalFaceNormal.copy( face.normal );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( ! face.__originalVertexNormals ) face.__originalVertexNormals = [];\r\n\r\n\t\t\tfor ( i = 0, il = face.vertexNormals.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tif ( ! face.__originalVertexNormals[ i ] ) {\r\n\r\n\t\t\t\t\tface.__originalVertexNormals[ i ] = face.vertexNormals[ i ].clone();\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tface.__originalVertexNormals[ i ].copy( face.vertexNormals[ i ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// use temp geometry to compute face and vertex normals for each morph\r\n\r\n\t\tvar tmpGeo = new THREE.Geometry();\r\n\t\ttmpGeo.faces = this.faces;\r\n\r\n\t\tfor ( i = 0, il = this.morphTargets.length; i < il; i ++ ) {\r\n\r\n\t\t\t// create on first access\r\n\r\n\t\t\tif ( ! this.morphNormals[ i ] ) {\r\n\r\n\t\t\t\tthis.morphNormals[ i ] = {};\r\n\t\t\t\tthis.morphNormals[ i ].faceNormals = [];\r\n\t\t\t\tthis.morphNormals[ i ].vertexNormals = [];\r\n\r\n\t\t\t\tvar dstNormalsFace = this.morphNormals[ i ].faceNormals;\r\n\t\t\t\tvar dstNormalsVertex = this.morphNormals[ i ].vertexNormals;\r\n\r\n\t\t\t\tvar faceNormal, vertexNormals;\r\n\r\n\t\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\t\tfaceNormal = new THREE.Vector3();\r\n\t\t\t\t\tvertexNormals = { a: new THREE.Vector3(), b: new THREE.Vector3(), c: new THREE.Vector3() };\r\n\r\n\t\t\t\t\tdstNormalsFace.push( faceNormal );\r\n\t\t\t\t\tdstNormalsVertex.push( vertexNormals );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar morphNormals = this.morphNormals[ i ];\r\n\r\n\t\t\t// set vertices to morph target\r\n\r\n\t\t\ttmpGeo.vertices = this.morphTargets[ i ].vertices;\r\n\r\n\t\t\t// compute morph normals\r\n\r\n\t\t\ttmpGeo.computeFaceNormals();\r\n\t\t\ttmpGeo.computeVertexNormals();\r\n\r\n\t\t\t// store morph normals\r\n\r\n\t\t\tvar faceNormal, vertexNormals;\r\n\r\n\t\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\tface = this.faces[ f ];\r\n\r\n\t\t\t\tfaceNormal = morphNormals.faceNormals[ f ];\r\n\t\t\t\tvertexNormals = morphNormals.vertexNormals[ f ];\r\n\r\n\t\t\t\tfaceNormal.copy( face.normal );\r\n\r\n\t\t\t\tvertexNormals.a.copy( face.vertexNormals[ 0 ] );\r\n\t\t\t\tvertexNormals.b.copy( face.vertexNormals[ 1 ] );\r\n\t\t\t\tvertexNormals.c.copy( face.vertexNormals[ 2 ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// restore original normals\r\n\r\n\t\tfor ( f = 0, fl = this.faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\tface = this.faces[ f ];\r\n\r\n\t\t\tface.normal = face.__originalFaceNormal;\r\n\t\t\tface.vertexNormals = face.__originalVertexNormals;\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tcomputeTangents: function () {\r\n\r\n\t\tconsole.warn( 'THREE.Geometry: .computeTangents() has been removed.' );\r\n\r\n\t},\r\n\r\n\tcomputeLineDistances: function () {\r\n\r\n\t\tvar d = 0;\r\n\t\tvar vertices = this.vertices;\r\n\r\n\t\tfor ( var i = 0, il = vertices.length; i < il; i ++ ) {\r\n\r\n\t\t\tif ( i > 0 ) {\r\n\r\n\t\t\t\td += vertices[ i ].distanceTo( vertices[ i - 1 ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.lineDistances[ i ] = d;\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tcomputeBoundingBox: function () {\r\n\r\n\t\tif ( this.boundingBox === null ) {\r\n\r\n\t\t\tthis.boundingBox = new THREE.Box3();\r\n\r\n\t\t}\r\n\r\n\t\tthis.boundingBox.setFromPoints( this.vertices );\r\n\r\n\t},\r\n\r\n\tcomputeBoundingSphere: function () {\r\n\r\n\t\tif ( this.boundingSphere === null ) {\r\n\r\n\t\t\tthis.boundingSphere = new THREE.Sphere();\r\n\r\n\t\t}\r\n\r\n\t\tthis.boundingSphere.setFromPoints( this.vertices );\r\n\r\n\t},\r\n\r\n\tmerge: function ( geometry, matrix, materialIndexOffset ) {\r\n\r\n\t\tif ( geometry instanceof THREE.Geometry === false ) {\r\n\r\n\t\t\tconsole.error( 'THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.', geometry );\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tvar normalMatrix,\r\n\t\tvertexOffset = this.vertices.length,\r\n\t\tvertices1 = this.vertices,\r\n\t\tvertices2 = geometry.vertices,\r\n\t\tfaces1 = this.faces,\r\n\t\tfaces2 = geometry.faces,\r\n\t\tuvs1 = this.faceVertexUvs[ 0 ],\r\n\t\tuvs2 = geometry.faceVertexUvs[ 0 ];\r\n\r\n\t\tif ( materialIndexOffset === undefined ) materialIndexOffset = 0;\r\n\r\n\t\tif ( matrix !== undefined ) {\r\n\r\n\t\t\tnormalMatrix = new THREE.Matrix3().getNormalMatrix( matrix );\r\n\r\n\t\t}\r\n\r\n\t\t// vertices\r\n\r\n\t\tfor ( var i = 0, il = vertices2.length; i < il; i ++ ) {\r\n\r\n\t\t\tvar vertex = vertices2[ i ];\r\n\r\n\t\t\tvar vertexCopy = vertex.clone();\r\n\r\n\t\t\tif ( matrix !== undefined ) vertexCopy.applyMatrix4( matrix );\r\n\r\n\t\t\tvertices1.push( vertexCopy );\r\n\r\n\t\t}\r\n\r\n\t\t// faces\r\n\r\n\t\tfor ( i = 0, il = faces2.length; i < il; i ++ ) {\r\n\r\n\t\t\tvar face = faces2[ i ], faceCopy, normal, color,\r\n\t\t\tfaceVertexNormals = face.vertexNormals,\r\n\t\t\tfaceVertexColors = face.vertexColors;\r\n\r\n\t\t\tfaceCopy = new THREE.Face3( face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset );\r\n\t\t\tfaceCopy.normal.copy( face.normal );\r\n\r\n\t\t\tif ( normalMatrix !== undefined ) {\r\n\r\n\t\t\t\tfaceCopy.normal.applyMatrix3( normalMatrix ).normalize();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var j = 0, jl = faceVertexNormals.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\tnormal = faceVertexNormals[ j ].clone();\r\n\r\n\t\t\t\tif ( normalMatrix !== undefined ) {\r\n\r\n\t\t\t\t\tnormal.applyMatrix3( normalMatrix ).normalize();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfaceCopy.vertexNormals.push( normal );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfaceCopy.color.copy( face.color );\r\n\r\n\t\t\tfor ( var j = 0, jl = faceVertexColors.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\tcolor = faceVertexColors[ j ];\r\n\t\t\t\tfaceCopy.vertexColors.push( color.clone() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfaceCopy.materialIndex = face.materialIndex + materialIndexOffset;\r\n\r\n\t\t\tfaces1.push( faceCopy );\r\n\r\n\t\t}\r\n\r\n\t\t// uvs\r\n\r\n\t\tfor ( i = 0, il = uvs2.length; i < il; i ++ ) {\r\n\r\n\t\t\tvar uv = uvs2[ i ], uvCopy = [];\r\n\r\n\t\t\tif ( uv === undefined ) {\r\n\r\n\t\t\t\tcontinue;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var j = 0, jl = uv.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\tuvCopy.push( uv[ j ].clone() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tuvs1.push( uvCopy );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tmergeMesh: function ( mesh ) {\r\n\r\n\t\tif ( mesh instanceof THREE.Mesh === false ) {\r\n\r\n\t\t\tconsole.error( 'THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.', mesh );\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tmesh.matrixAutoUpdate && mesh.updateMatrix();\r\n\r\n\t\tthis.merge( mesh.geometry, mesh.matrix );\r\n\r\n\t},\r\n\r\n\t/*\r\n\t * Checks for duplicate vertices with hashmap.\r\n\t * Duplicated vertices are removed\r\n\t * and faces' vertices are updated.\r\n\t */\r\n\r\n\tmergeVertices: function () {\r\n\r\n\t\tvar verticesMap = {}; // Hashmap for looking up vertices by position coordinates (and making sure they are unique)\r\n\t\tvar unique = [], changes = [];\r\n\r\n\t\tvar v, key;\r\n\t\tvar precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001\r\n\t\tvar precision = Math.pow( 10, precisionPoints );\r\n\t\tvar i, il, face;\r\n\t\tvar indices, j, jl;\r\n\r\n\t\tfor ( i = 0, il = this.vertices.length; i < il; i ++ ) {\r\n\r\n\t\t\tv = this.vertices[ i ];\r\n\t\t\tkey = Math.round( v.x * precision ) + '_' + Math.round( v.y * precision ) + '_' + Math.round( v.z * precision );\r\n\r\n\t\t\tif ( verticesMap[ key ] === undefined ) {\r\n\r\n\t\t\t\tverticesMap[ key ] = i;\r\n\t\t\t\tunique.push( this.vertices[ i ] );\r\n\t\t\t\tchanges[ i ] = unique.length - 1;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t//console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);\r\n\t\t\t\tchanges[ i ] = changes[ verticesMap[ key ] ];\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\r\n\t\t// if faces are completely degenerate after merging vertices, we\r\n\t\t// have to remove them from the geometry.\r\n\t\tvar faceIndicesToRemove = [];\r\n\r\n\t\tfor ( i = 0, il = this.faces.length; i < il; i ++ ) {\r\n\r\n\t\t\tface = this.faces[ i ];\r\n\r\n\t\t\tface.a = changes[ face.a ];\r\n\t\t\tface.b = changes[ face.b ];\r\n\t\t\tface.c = changes[ face.c ];\r\n\r\n\t\t\tindices = [ face.a, face.b, face.c ];\r\n\r\n\t\t\tvar dupIndex = - 1;\r\n\r\n\t\t\t// if any duplicate vertices are found in a Face3\r\n\t\t\t// we have to remove the face as nothing can be saved\r\n\t\t\tfor ( var n = 0; n < 3; n ++ ) {\r\n\r\n\t\t\t\tif ( indices[ n ] === indices[ ( n + 1 ) % 3 ] ) {\r\n\r\n\t\t\t\t\tdupIndex = n;\r\n\t\t\t\t\tfaceIndicesToRemove.push( i );\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfor ( i = faceIndicesToRemove.length - 1; i >= 0; i -- ) {\r\n\r\n\t\t\tvar idx = faceIndicesToRemove[ i ];\r\n\r\n\t\t\tthis.faces.splice( idx, 1 );\r\n\r\n\t\t\tfor ( j = 0, jl = this.faceVertexUvs.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\tthis.faceVertexUvs[ j ].splice( idx, 1 );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// Use unique set of vertices\r\n\r\n\t\tvar diff = this.vertices.length - unique.length;\r\n\t\tthis.vertices = unique;\r\n\t\treturn diff;\r\n\r\n\t},\r\n\r\n\tsortFacesByMaterialIndex: function () {\r\n\r\n\t\tvar faces = this.faces;\r\n\t\tvar length = faces.length;\r\n\r\n\t\t// tag faces\r\n\r\n\t\tfor ( var i = 0; i < length; i ++ ) {\r\n\r\n\t\t\tfaces[ i ]._id = i;\r\n\r\n\t\t}\r\n\r\n\t\t// sort faces\r\n\r\n\t\tfunction materialIndexSort( a, b ) {\r\n\r\n\t\t\treturn a.materialIndex - b.materialIndex;\r\n\r\n\t\t}\r\n\r\n\t\tfaces.sort( materialIndexSort );\r\n\r\n\t\t// sort uvs\r\n\r\n\t\tvar uvs1 = this.faceVertexUvs[ 0 ];\r\n\t\tvar uvs2 = this.faceVertexUvs[ 1 ];\r\n\r\n\t\tvar newUvs1, newUvs2;\r\n\r\n\t\tif ( uvs1 && uvs1.length === length ) newUvs1 = [];\r\n\t\tif ( uvs2 && uvs2.length === length ) newUvs2 = [];\r\n\r\n\t\tfor ( var i = 0; i < length; i ++ ) {\r\n\r\n\t\t\tvar id = faces[ i ]._id;\r\n\r\n\t\t\tif ( newUvs1 ) newUvs1.push( uvs1[ id ] );\r\n\t\t\tif ( newUvs2 ) newUvs2.push( uvs2[ id ] );\r\n\r\n\t\t}\r\n\r\n\t\tif ( newUvs1 ) this.faceVertexUvs[ 0 ] = newUvs1;\r\n\t\tif ( newUvs2 ) this.faceVertexUvs[ 1 ] = newUvs2;\r\n\r\n\t},\r\n\r\n\ttoJSON: function () {\r\n\r\n\t\tvar data = {\r\n\t\t\tmetadata: {\r\n\t\t\t\tversion: 4.4,\r\n\t\t\t\ttype: 'Geometry',\r\n\t\t\t\tgenerator: 'Geometry.toJSON'\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// standard Geometry serialization\r\n\r\n\t\tdata.uuid = this.uuid;\r\n\t\tdata.type = this.type;\r\n\t\tif ( this.name !== '' ) data.name = this.name;\r\n\r\n\t\tif ( this.parameters !== undefined ) {\r\n\r\n\t\t\tvar parameters = this.parameters;\r\n\r\n\t\t\tfor ( var key in parameters ) {\r\n\r\n\t\t\t\tif ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn data;\r\n\r\n\t\t}\r\n\r\n\t\tvar vertices = [];\r\n\r\n\t\tfor ( var i = 0; i < this.vertices.length; i ++ ) {\r\n\r\n\t\t\tvar vertex = this.vertices[ i ];\r\n\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t}\r\n\r\n\t\tvar faces = [];\r\n\t\tvar normals = [];\r\n\t\tvar normalsHash = {};\r\n\t\tvar colors = [];\r\n\t\tvar colorsHash = {};\r\n\t\tvar uvs = [];\r\n\t\tvar uvsHash = {};\r\n\r\n\t\tfor ( var i = 0; i < this.faces.length; i ++ ) {\r\n\r\n\t\t\tvar face = this.faces[ i ];\r\n\r\n\t\t\tvar hasMaterial = true;\r\n\t\t\tvar hasFaceUv = false; // deprecated\r\n\t\t\tvar hasFaceVertexUv = this.faceVertexUvs[ 0 ][ i ] !== undefined;\r\n\t\t\tvar hasFaceNormal = face.normal.length() > 0;\r\n\t\t\tvar hasFaceVertexNormal = face.vertexNormals.length > 0;\r\n\t\t\tvar hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;\r\n\t\t\tvar hasFaceVertexColor = face.vertexColors.length > 0;\r\n\r\n\t\t\tvar faceType = 0;\r\n\r\n\t\t\tfaceType = setBit( faceType, 0, 0 ); // isQuad\r\n\t\t\tfaceType = setBit( faceType, 1, hasMaterial );\r\n\t\t\tfaceType = setBit( faceType, 2, hasFaceUv );\r\n\t\t\tfaceType = setBit( faceType, 3, hasFaceVertexUv );\r\n\t\t\tfaceType = setBit( faceType, 4, hasFaceNormal );\r\n\t\t\tfaceType = setBit( faceType, 5, hasFaceVertexNormal );\r\n\t\t\tfaceType = setBit( faceType, 6, hasFaceColor );\r\n\t\t\tfaceType = setBit( faceType, 7, hasFaceVertexColor );\r\n\r\n\t\t\tfaces.push( faceType );\r\n\t\t\tfaces.push( face.a, face.b, face.c );\r\n\t\t\tfaces.push( face.materialIndex );\r\n\r\n\t\t\tif ( hasFaceVertexUv ) {\r\n\r\n\t\t\t\tvar faceVertexUvs = this.faceVertexUvs[ 0 ][ i ];\r\n\r\n\t\t\t\tfaces.push(\r\n\t\t\t\t\tgetUvIndex( faceVertexUvs[ 0 ] ),\r\n\t\t\t\t\tgetUvIndex( faceVertexUvs[ 1 ] ),\r\n\t\t\t\t\tgetUvIndex( faceVertexUvs[ 2 ] )\r\n\t\t\t\t);\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( hasFaceNormal ) {\r\n\r\n\t\t\t\tfaces.push( getNormalIndex( face.normal ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( hasFaceVertexNormal ) {\r\n\r\n\t\t\t\tvar vertexNormals = face.vertexNormals;\r\n\r\n\t\t\t\tfaces.push(\r\n\t\t\t\t\tgetNormalIndex( vertexNormals[ 0 ] ),\r\n\t\t\t\t\tgetNormalIndex( vertexNormals[ 1 ] ),\r\n\t\t\t\t\tgetNormalIndex( vertexNormals[ 2 ] )\r\n\t\t\t\t);\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( hasFaceColor ) {\r\n\r\n\t\t\t\tfaces.push( getColorIndex( face.color ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( hasFaceVertexColor ) {\r\n\r\n\t\t\t\tvar vertexColors = face.vertexColors;\r\n\r\n\t\t\t\tfaces.push(\r\n\t\t\t\t\tgetColorIndex( vertexColors[ 0 ] ),\r\n\t\t\t\t\tgetColorIndex( vertexColors[ 1 ] ),\r\n\t\t\t\t\tgetColorIndex( vertexColors[ 2 ] )\r\n\t\t\t\t);\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction setBit( value, position, enabled ) {\r\n\r\n\t\t\treturn enabled ? value | ( 1 << position ) : value & ( ~ ( 1 << position ) );\r\n\r\n\t\t}\r\n\r\n\t\tfunction getNormalIndex( normal ) {\r\n\r\n\t\t\tvar hash = normal.x.toString() + normal.y.toString() + normal.z.toString();\r\n\r\n\t\t\tif ( normalsHash[ hash ] !== undefined ) {\r\n\r\n\t\t\t\treturn normalsHash[ hash ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tnormalsHash[ hash ] = normals.length / 3;\r\n\t\t\tnormals.push( normal.x, normal.y, normal.z );\r\n\r\n\t\t\treturn normalsHash[ hash ];\r\n\r\n\t\t}\r\n\r\n\t\tfunction getColorIndex( color ) {\r\n\r\n\t\t\tvar hash = color.r.toString() + color.g.toString() + color.b.toString();\r\n\r\n\t\t\tif ( colorsHash[ hash ] !== undefined ) {\r\n\r\n\t\t\t\treturn colorsHash[ hash ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tcolorsHash[ hash ] = colors.length;\r\n\t\t\tcolors.push( color.getHex() );\r\n\r\n\t\t\treturn colorsHash[ hash ];\r\n\r\n\t\t}\r\n\r\n\t\tfunction getUvIndex( uv ) {\r\n\r\n\t\t\tvar hash = uv.x.toString() + uv.y.toString();\r\n\r\n\t\t\tif ( uvsHash[ hash ] !== undefined ) {\r\n\r\n\t\t\t\treturn uvsHash[ hash ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tuvsHash[ hash ] = uvs.length / 2;\r\n\t\t\tuvs.push( uv.x, uv.y );\r\n\r\n\t\t\treturn uvsHash[ hash ];\r\n\r\n\t\t}\r\n\r\n\t\tdata.data = {};\r\n\r\n\t\tdata.data.vertices = vertices;\r\n\t\tdata.data.normals = normals;\r\n\t\tif ( colors.length > 0 ) data.data.colors = colors;\r\n\t\tif ( uvs.length > 0 ) data.data.uvs = [ uvs ]; // temporal backward compatibility\r\n\t\tdata.data.faces = faces;\r\n\r\n\t\treturn data;\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\t/*\r\n\t\t// Handle primitives\r\n\r\n\t\tvar parameters = this.parameters;\r\n\r\n\t\tif ( parameters !== undefined ) {\r\n\r\n\t\t\tvar values = [];\r\n\r\n\t\t\tfor ( var key in parameters ) {\r\n\r\n\t\t\t\tvalues.push( parameters[ key ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar geometry = Object.create( this.constructor.prototype );\r\n\t\t\tthis.constructor.apply( geometry, values );\r\n\t\t\treturn geometry;\r\n\r\n\t\t}\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\t\t*/\r\n\r\n\t\treturn new THREE.Geometry().copy( this );\r\n\r\n\t},\r\n\r\n\tcopy: function ( source ) {\r\n\r\n\t\tthis.vertices = [];\r\n\t\tthis.faces = [];\r\n\t\tthis.faceVertexUvs = [ [] ];\r\n\r\n\t\tvar vertices = source.vertices;\r\n\r\n\t\tfor ( var i = 0, il = vertices.length; i < il; i ++ ) {\r\n\r\n\t\t\tthis.vertices.push( vertices[ i ].clone() );\r\n\r\n\t\t}\r\n\r\n\t\tvar faces = source.faces;\r\n\r\n\t\tfor ( var i = 0, il = faces.length; i < il; i ++ ) {\r\n\r\n\t\t\tthis.faces.push( faces[ i ].clone() );\r\n\r\n\t\t}\r\n\r\n\t\tfor ( var i = 0, il = source.faceVertexUvs.length; i < il; i ++ ) {\r\n\r\n\t\t\tvar faceVertexUvs = source.faceVertexUvs[ i ];\r\n\r\n\t\t\tif ( this.faceVertexUvs[ i ] === undefined ) {\r\n\r\n\t\t\t\tthis.faceVertexUvs[ i ] = [];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var j = 0, jl = faceVertexUvs.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\tvar uvs = faceVertexUvs[ j ], uvsCopy = [];\r\n\r\n\t\t\t\tfor ( var k = 0, kl = uvs.length; k < kl; k ++ ) {\r\n\r\n\t\t\t\t\tvar uv = uvs[ k ];\r\n\r\n\t\t\t\t\tuvsCopy.push( uv.clone() );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.faceVertexUvs[ i ].push( uvsCopy );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdispose: function () {\r\n\r\n\t\tthis.dispatchEvent( { type: 'dispose' } );\r\n\r\n\t}\r\n\r\n} );\r\n\r\nTHREE.GeometryIdCount = 0;\r\n\r\n// File:src/core/DirectGeometry.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.DirectGeometry = function () {\r\n\r\n\tObject.defineProperty( this, 'id', { value: THREE.GeometryIdCount ++ } );\r\n\r\n\tthis.uuid = THREE.Math.generateUUID();\r\n\r\n\tthis.name = '';\r\n\tthis.type = 'DirectGeometry';\r\n\r\n\tthis.indices = [];\r\n\tthis.vertices = [];\r\n\tthis.normals = [];\r\n\tthis.colors = [];\r\n\tthis.uvs = [];\r\n\tthis.uvs2 = [];\r\n\r\n\tthis.groups = [];\r\n\r\n\tthis.morphTargets = {};\r\n\r\n\tthis.skinWeights = [];\r\n\tthis.skinIndices = [];\r\n\r\n\t// this.lineDistances = [];\r\n\r\n\tthis.boundingBox = null;\r\n\tthis.boundingSphere = null;\r\n\r\n\t// update flags\r\n\r\n\tthis.verticesNeedUpdate = false;\r\n\tthis.normalsNeedUpdate = false;\r\n\tthis.colorsNeedUpdate = false;\r\n\tthis.uvsNeedUpdate = false;\r\n\tthis.groupsNeedUpdate = false;\r\n\r\n};\r\n\r\nObject.assign( THREE.DirectGeometry.prototype, THREE.EventDispatcher.prototype, {\r\n\r\n\tcomputeBoundingBox: THREE.Geometry.prototype.computeBoundingBox,\r\n\tcomputeBoundingSphere: THREE.Geometry.prototype.computeBoundingSphere,\r\n\r\n\tcomputeFaceNormals: function () {\r\n\r\n\t\tconsole.warn( 'THREE.DirectGeometry: computeFaceNormals() is not a method of this type of geometry.' );\r\n\r\n\t},\r\n\r\n\tcomputeVertexNormals: function () {\r\n\r\n\t\tconsole.warn( 'THREE.DirectGeometry: computeVertexNormals() is not a method of this type of geometry.' );\r\n\r\n\t},\r\n\r\n\tcomputeGroups: function ( geometry ) {\r\n\r\n\t\tvar group;\r\n\t\tvar groups = [];\r\n\t\tvar materialIndex;\r\n\r\n\t\tvar faces = geometry.faces;\r\n\r\n\t\tfor ( var i = 0; i < faces.length; i ++ ) {\r\n\r\n\t\t\tvar face = faces[ i ];\r\n\r\n\t\t\t// materials\r\n\r\n\t\t\tif ( face.materialIndex !== materialIndex ) {\r\n\r\n\t\t\t\tmaterialIndex = face.materialIndex;\r\n\r\n\t\t\t\tif ( group !== undefined ) {\r\n\r\n\t\t\t\t\tgroup.count = ( i * 3 ) - group.start;\r\n\t\t\t\t\tgroups.push( group );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tgroup = {\r\n\t\t\t\t\tstart: i * 3,\r\n\t\t\t\t\tmaterialIndex: materialIndex\r\n\t\t\t\t};\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( group !== undefined ) {\r\n\r\n\t\t\tgroup.count = ( i * 3 ) - group.start;\r\n\t\t\tgroups.push( group );\r\n\r\n\t\t}\r\n\r\n\t\tthis.groups = groups;\r\n\r\n\t},\r\n\r\n\tfromGeometry: function ( geometry ) {\r\n\r\n\t\tvar faces = geometry.faces;\r\n\t\tvar vertices = geometry.vertices;\r\n\t\tvar faceVertexUvs = geometry.faceVertexUvs;\r\n\r\n\t\tvar hasFaceVertexUv = faceVertexUvs[ 0 ] && faceVertexUvs[ 0 ].length > 0;\r\n\t\tvar hasFaceVertexUv2 = faceVertexUvs[ 1 ] && faceVertexUvs[ 1 ].length > 0;\r\n\r\n\t\t// morphs\r\n\r\n\t\tvar morphTargets = geometry.morphTargets;\r\n\t\tvar morphTargetsLength = morphTargets.length;\r\n\r\n\t\tvar morphTargetsPosition;\r\n\r\n\t\tif ( morphTargetsLength > 0 ) {\r\n\r\n\t\t\tmorphTargetsPosition = [];\r\n\r\n\t\t\tfor ( var i = 0; i < morphTargetsLength; i ++ ) {\r\n\r\n\t\t\t\tmorphTargetsPosition[ i ] = [];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.morphTargets.position = morphTargetsPosition;\r\n\r\n\t\t}\r\n\r\n\t\tvar morphNormals = geometry.morphNormals;\r\n\t\tvar morphNormalsLength = morphNormals.length;\r\n\r\n\t\tvar morphTargetsNormal;\r\n\r\n\t\tif ( morphNormalsLength > 0 ) {\r\n\r\n\t\t\tmorphTargetsNormal = [];\r\n\r\n\t\t\tfor ( var i = 0; i < morphNormalsLength; i ++ ) {\r\n\r\n\t\t\t\tmorphTargetsNormal[ i ] = [];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.morphTargets.normal = morphTargetsNormal;\r\n\r\n\t\t}\r\n\r\n\t\t// skins\r\n\r\n\t\tvar skinIndices = geometry.skinIndices;\r\n\t\tvar skinWeights = geometry.skinWeights;\r\n\r\n\t\tvar hasSkinIndices = skinIndices.length === vertices.length;\r\n\t\tvar hasSkinWeights = skinWeights.length === vertices.length;\r\n\r\n\t\t//\r\n\r\n\t\tfor ( var i = 0; i < faces.length; i ++ ) {\r\n\r\n\t\t\tvar face = faces[ i ];\r\n\r\n\t\t\tthis.vertices.push( vertices[ face.a ], vertices[ face.b ], vertices[ face.c ] );\r\n\r\n\t\t\tvar vertexNormals = face.vertexNormals;\r\n\r\n\t\t\tif ( vertexNormals.length === 3 ) {\r\n\r\n\t\t\t\tthis.normals.push( vertexNormals[ 0 ], vertexNormals[ 1 ], vertexNormals[ 2 ] );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tvar normal = face.normal;\r\n\r\n\t\t\t\tthis.normals.push( normal, normal, normal );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar vertexColors = face.vertexColors;\r\n\r\n\t\t\tif ( vertexColors.length === 3 ) {\r\n\r\n\t\t\t\tthis.colors.push( vertexColors[ 0 ], vertexColors[ 1 ], vertexColors[ 2 ] );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tvar color = face.color;\r\n\r\n\t\t\t\tthis.colors.push( color, color, color );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( hasFaceVertexUv === true ) {\r\n\r\n\t\t\t\tvar vertexUvs = faceVertexUvs[ 0 ][ i ];\r\n\r\n\t\t\t\tif ( vertexUvs !== undefined ) {\r\n\r\n\t\t\t\t\tthis.uvs.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ', i );\r\n\r\n\t\t\t\t\tthis.uvs.push( new THREE.Vector2(), new THREE.Vector2(), new THREE.Vector2() );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( hasFaceVertexUv2 === true ) {\r\n\r\n\t\t\t\tvar vertexUvs = faceVertexUvs[ 1 ][ i ];\r\n\r\n\t\t\t\tif ( vertexUvs !== undefined ) {\r\n\r\n\t\t\t\t\tthis.uvs2.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ', i );\r\n\r\n\t\t\t\t\tthis.uvs2.push( new THREE.Vector2(), new THREE.Vector2(), new THREE.Vector2() );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// morphs\r\n\r\n\t\t\tfor ( var j = 0; j < morphTargetsLength; j ++ ) {\r\n\r\n\t\t\t\tvar morphTarget = morphTargets[ j ].vertices;\r\n\r\n\t\t\t\tmorphTargetsPosition[ j ].push( morphTarget[ face.a ], morphTarget[ face.b ], morphTarget[ face.c ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var j = 0; j < morphNormalsLength; j ++ ) {\r\n\r\n\t\t\t\tvar morphNormal = morphNormals[ j ].vertexNormals[ i ];\r\n\r\n\t\t\t\tmorphTargetsNormal[ j ].push( morphNormal.a, morphNormal.b, morphNormal.c );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// skins\r\n\r\n\t\t\tif ( hasSkinIndices ) {\r\n\r\n\t\t\t\tthis.skinIndices.push( skinIndices[ face.a ], skinIndices[ face.b ], skinIndices[ face.c ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( hasSkinWeights ) {\r\n\r\n\t\t\t\tthis.skinWeights.push( skinWeights[ face.a ], skinWeights[ face.b ], skinWeights[ face.c ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis.computeGroups( geometry );\r\n\r\n\t\tthis.verticesNeedUpdate = geometry.verticesNeedUpdate;\r\n\t\tthis.normalsNeedUpdate = geometry.normalsNeedUpdate;\r\n\t\tthis.colorsNeedUpdate = geometry.colorsNeedUpdate;\r\n\t\tthis.uvsNeedUpdate = geometry.uvsNeedUpdate;\r\n\t\tthis.groupsNeedUpdate = geometry.groupsNeedUpdate;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdispose: function () {\r\n\r\n\t\tthis.dispatchEvent( { type: 'dispose' } );\r\n\r\n\t}\r\n\r\n} );\r\n\r\n// File:src/core/BufferGeometry.js\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.BufferGeometry = function () {\r\n\r\n\tObject.defineProperty( this, 'id', { value: THREE.GeometryIdCount ++ } );\r\n\r\n\tthis.uuid = THREE.Math.generateUUID();\r\n\r\n\tthis.name = '';\r\n\tthis.type = 'BufferGeometry';\r\n\r\n\tthis.index = null;\r\n\tthis.attributes = {};\r\n\r\n\tthis.morphAttributes = {};\r\n\r\n\tthis.groups = [];\r\n\r\n\tthis.boundingBox = null;\r\n\tthis.boundingSphere = null;\r\n\r\n\tthis.drawRange = { start: 0, count: Infinity };\r\n\r\n};\r\n\r\nObject.assign( THREE.BufferGeometry.prototype, THREE.EventDispatcher.prototype, {\r\n\r\n\tgetIndex: function () {\r\n\r\n\t\treturn this.index;\r\n\r\n\t},\r\n\r\n\tsetIndex: function ( index ) {\r\n\r\n\t\tthis.index = index;\r\n\r\n\t},\r\n\r\n\taddAttribute: function ( name, attribute ) {\r\n\r\n\t\tif ( attribute instanceof THREE.BufferAttribute === false && attribute instanceof THREE.InterleavedBufferAttribute === false ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).' );\r\n\r\n\t\t\tthis.addAttribute( name, new THREE.BufferAttribute( arguments[ 1 ], arguments[ 2 ] ) );\r\n\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tif ( name === 'index' ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.' );\r\n\t\t\tthis.setIndex( attribute );\r\n\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tthis.attributes[ name ] = attribute;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tgetAttribute: function ( name ) {\r\n\r\n\t\treturn this.attributes[ name ];\r\n\r\n\t},\r\n\r\n\tremoveAttribute: function ( name ) {\r\n\r\n\t\tdelete this.attributes[ name ];\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\taddGroup: function ( start, count, materialIndex ) {\r\n\r\n\t\tthis.groups.push( {\r\n\r\n\t\t\tstart: start,\r\n\t\t\tcount: count,\r\n\t\t\tmaterialIndex: materialIndex !== undefined ? materialIndex : 0\r\n\r\n\t\t} );\r\n\r\n\t},\r\n\r\n\tclearGroups: function () {\r\n\r\n\t\tthis.groups = [];\r\n\r\n\t},\r\n\r\n\tsetDrawRange: function ( start, count ) {\r\n\r\n\t\tthis.drawRange.start = start;\r\n\t\tthis.drawRange.count = count;\r\n\r\n\t},\r\n\r\n\tapplyMatrix: function ( matrix ) {\r\n\r\n\t\tvar position = this.attributes.position;\r\n\r\n\t\tif ( position !== undefined ) {\r\n\r\n\t\t\tmatrix.applyToVector3Array( position.array );\r\n\t\t\tposition.needsUpdate = true;\r\n\r\n\t\t}\r\n\r\n\t\tvar normal = this.attributes.normal;\r\n\r\n\t\tif ( normal !== undefined ) {\r\n\r\n\t\t\tvar normalMatrix = new THREE.Matrix3().getNormalMatrix( matrix );\r\n\r\n\t\t\tnormalMatrix.applyToVector3Array( normal.array );\r\n\t\t\tnormal.needsUpdate = true;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.boundingBox !== null ) {\r\n\r\n\t\t\tthis.computeBoundingBox();\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.boundingSphere !== null ) {\r\n\r\n\t\t\tthis.computeBoundingSphere();\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\trotateX: function () {\r\n\r\n\t\t// rotate geometry around world x-axis\r\n\r\n\t\tvar m1;\r\n\r\n\t\treturn function rotateX( angle ) {\r\n\r\n\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\r\n\r\n\t\t\tm1.makeRotationX( angle );\r\n\r\n\t\t\tthis.applyMatrix( m1 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\trotateY: function () {\r\n\r\n\t\t// rotate geometry around world y-axis\r\n\r\n\t\tvar m1;\r\n\r\n\t\treturn function rotateY( angle ) {\r\n\r\n\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\r\n\r\n\t\t\tm1.makeRotationY( angle );\r\n\r\n\t\t\tthis.applyMatrix( m1 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\trotateZ: function () {\r\n\r\n\t\t// rotate geometry around world z-axis\r\n\r\n\t\tvar m1;\r\n\r\n\t\treturn function rotateZ( angle ) {\r\n\r\n\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\r\n\r\n\t\t\tm1.makeRotationZ( angle );\r\n\r\n\t\t\tthis.applyMatrix( m1 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\ttranslate: function () {\r\n\r\n\t\t// translate geometry\r\n\r\n\t\tvar m1;\r\n\r\n\t\treturn function translate( x, y, z ) {\r\n\r\n\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\r\n\r\n\t\t\tm1.makeTranslation( x, y, z );\r\n\r\n\t\t\tthis.applyMatrix( m1 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tscale: function () {\r\n\r\n\t\t// scale geometry\r\n\r\n\t\tvar m1;\r\n\r\n\t\treturn function scale( x, y, z ) {\r\n\r\n\t\t\tif ( m1 === undefined ) m1 = new THREE.Matrix4();\r\n\r\n\t\t\tm1.makeScale( x, y, z );\r\n\r\n\t\t\tthis.applyMatrix( m1 );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tlookAt: function () {\r\n\r\n\t\tvar obj;\r\n\r\n\t\treturn function lookAt( vector ) {\r\n\r\n\t\t\tif ( obj === undefined ) obj = new THREE.Object3D();\r\n\r\n\t\t\tobj.lookAt( vector );\r\n\r\n\t\t\tobj.updateMatrix();\r\n\r\n\t\t\tthis.applyMatrix( obj.matrix );\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tcenter: function () {\r\n\r\n\t\tthis.computeBoundingBox();\r\n\r\n\t\tvar offset = this.boundingBox.center().negate();\r\n\r\n\t\tthis.translate( offset.x, offset.y, offset.z );\r\n\r\n\t\treturn offset;\r\n\r\n\t},\r\n\r\n\tsetFromObject: function ( object ) {\r\n\r\n\t\t// console.log( 'THREE.BufferGeometry.setFromObject(). Converting', object, this );\r\n\r\n\t\tvar geometry = object.geometry;\r\n\r\n\t\tif ( object instanceof THREE.Points || object instanceof THREE.Line ) {\r\n\r\n\t\t\tvar positions = new THREE.Float32Attribute( geometry.vertices.length * 3, 3 );\r\n\t\t\tvar colors = new THREE.Float32Attribute( geometry.colors.length * 3, 3 );\r\n\r\n\t\t\tthis.addAttribute( 'position', positions.copyVector3sArray( geometry.vertices ) );\r\n\t\t\tthis.addAttribute( 'color', colors.copyColorsArray( geometry.colors ) );\r\n\r\n\t\t\tif ( geometry.lineDistances && geometry.lineDistances.length === geometry.vertices.length ) {\r\n\r\n\t\t\t\tvar lineDistances = new THREE.Float32Attribute( geometry.lineDistances.length, 1 );\r\n\r\n\t\t\t\tthis.addAttribute( 'lineDistance', lineDistances.copyArray( geometry.lineDistances ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( geometry.boundingSphere !== null ) {\r\n\r\n\t\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( geometry.boundingBox !== null ) {\r\n\r\n\t\t\t\tthis.boundingBox = geometry.boundingBox.clone();\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( object instanceof THREE.Mesh ) {\r\n\r\n\t\t\tif ( geometry instanceof THREE.Geometry ) {\r\n\r\n\t\t\t\tthis.fromGeometry( geometry );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tupdateFromObject: function ( object ) {\r\n\r\n\t\tvar geometry = object.geometry;\r\n\r\n\t\tif ( object instanceof THREE.Mesh ) {\r\n\r\n\t\t\tvar direct = geometry.__directGeometry;\r\n\r\n\t\t\tif ( direct === undefined ) {\r\n\r\n\t\t\t\treturn this.fromGeometry( geometry );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tdirect.verticesNeedUpdate = geometry.verticesNeedUpdate;\r\n\t\t\tdirect.normalsNeedUpdate = geometry.normalsNeedUpdate;\r\n\t\t\tdirect.colorsNeedUpdate = geometry.colorsNeedUpdate;\r\n\t\t\tdirect.uvsNeedUpdate = geometry.uvsNeedUpdate;\r\n\t\t\tdirect.groupsNeedUpdate = geometry.groupsNeedUpdate;\r\n\r\n\t\t\tgeometry.verticesNeedUpdate = false;\r\n\t\t\tgeometry.normalsNeedUpdate = false;\r\n\t\t\tgeometry.colorsNeedUpdate = false;\r\n\t\t\tgeometry.uvsNeedUpdate = false;\r\n\t\t\tgeometry.groupsNeedUpdate = false;\r\n\r\n\t\t\tgeometry = direct;\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometry.verticesNeedUpdate === true ) {\r\n\r\n\t\t\tvar attribute = this.attributes.position;\r\n\r\n\t\t\tif ( attribute !== undefined ) {\r\n\r\n\t\t\t\tattribute.copyVector3sArray( geometry.vertices );\r\n\t\t\t\tattribute.needsUpdate = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgeometry.verticesNeedUpdate = false;\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometry.normalsNeedUpdate === true ) {\r\n\r\n\t\t\tvar attribute = this.attributes.normal;\r\n\r\n\t\t\tif ( attribute !== undefined ) {\r\n\r\n\t\t\t\tattribute.copyVector3sArray( geometry.normals );\r\n\t\t\t\tattribute.needsUpdate = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgeometry.normalsNeedUpdate = false;\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometry.colorsNeedUpdate === true ) {\r\n\r\n\t\t\tvar attribute = this.attributes.color;\r\n\r\n\t\t\tif ( attribute !== undefined ) {\r\n\r\n\t\t\t\tattribute.copyColorsArray( geometry.colors );\r\n\t\t\t\tattribute.needsUpdate = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgeometry.colorsNeedUpdate = false;\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometry.uvsNeedUpdate ) {\r\n\r\n\t\t\tvar attribute = this.attributes.uv;\r\n\r\n\t\t\tif ( attribute !== undefined ) {\r\n\r\n\t\t\t\tattribute.copyVector2sArray( geometry.uvs );\r\n\t\t\t\tattribute.needsUpdate = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgeometry.uvsNeedUpdate = false;\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometry.lineDistancesNeedUpdate ) {\r\n\r\n\t\t\tvar attribute = this.attributes.lineDistance;\r\n\r\n\t\t\tif ( attribute !== undefined ) {\r\n\r\n\t\t\t\tattribute.copyArray( geometry.lineDistances );\r\n\t\t\t\tattribute.needsUpdate = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgeometry.lineDistancesNeedUpdate = false;\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometry.groupsNeedUpdate ) {\r\n\r\n\t\t\tgeometry.computeGroups( object.geometry );\r\n\t\t\tthis.groups = geometry.groups;\r\n\r\n\t\t\tgeometry.groupsNeedUpdate = false;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tfromGeometry: function ( geometry ) {\r\n\r\n\t\tgeometry.__directGeometry = new THREE.DirectGeometry().fromGeometry( geometry );\r\n\r\n\t\treturn this.fromDirectGeometry( geometry.__directGeometry );\r\n\r\n\t},\r\n\r\n\tfromDirectGeometry: function ( geometry ) {\r\n\r\n\t\tvar positions = new Float32Array( geometry.vertices.length * 3 );\r\n\t\tthis.addAttribute( 'position', new THREE.BufferAttribute( positions, 3 ).copyVector3sArray( geometry.vertices ) );\r\n\r\n\t\tif ( geometry.normals.length > 0 ) {\r\n\r\n\t\t\tvar normals = new Float32Array( geometry.normals.length * 3 );\r\n\t\t\tthis.addAttribute( 'normal', new THREE.BufferAttribute( normals, 3 ).copyVector3sArray( geometry.normals ) );\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometry.colors.length > 0 ) {\r\n\r\n\t\t\tvar colors = new Float32Array( geometry.colors.length * 3 );\r\n\t\t\tthis.addAttribute( 'color', new THREE.BufferAttribute( colors, 3 ).copyColorsArray( geometry.colors ) );\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometry.uvs.length > 0 ) {\r\n\r\n\t\t\tvar uvs = new Float32Array( geometry.uvs.length * 2 );\r\n\t\t\tthis.addAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ).copyVector2sArray( geometry.uvs ) );\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometry.uvs2.length > 0 ) {\r\n\r\n\t\t\tvar uvs2 = new Float32Array( geometry.uvs2.length * 2 );\r\n\t\t\tthis.addAttribute( 'uv2', new THREE.BufferAttribute( uvs2, 2 ).copyVector2sArray( geometry.uvs2 ) );\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometry.indices.length > 0 ) {\r\n\r\n\t\t\tvar TypeArray = geometry.vertices.length > 65535 ? Uint32Array : Uint16Array;\r\n\t\t\tvar indices = new TypeArray( geometry.indices.length * 3 );\r\n\t\t\tthis.setIndex( new THREE.BufferAttribute( indices, 1 ).copyIndicesArray( geometry.indices ) );\r\n\r\n\t\t}\r\n\r\n\t\t// groups\r\n\r\n\t\tthis.groups = geometry.groups;\r\n\r\n\t\t// morphs\r\n\r\n\t\tfor ( var name in geometry.morphTargets ) {\r\n\r\n\t\t\tvar array = [];\r\n\t\t\tvar morphTargets = geometry.morphTargets[ name ];\r\n\r\n\t\t\tfor ( var i = 0, l = morphTargets.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar morphTarget = morphTargets[ i ];\r\n\r\n\t\t\t\tvar attribute = new THREE.Float32Attribute( morphTarget.length * 3, 3 );\r\n\r\n\t\t\t\tarray.push( attribute.copyVector3sArray( morphTarget ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.morphAttributes[ name ] = array;\r\n\r\n\t\t}\r\n\r\n\t\t// skinning\r\n\r\n\t\tif ( geometry.skinIndices.length > 0 ) {\r\n\r\n\t\t\tvar skinIndices = new THREE.Float32Attribute( geometry.skinIndices.length * 4, 4 );\r\n\t\t\tthis.addAttribute( 'skinIndex', skinIndices.copyVector4sArray( geometry.skinIndices ) );\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometry.skinWeights.length > 0 ) {\r\n\r\n\t\t\tvar skinWeights = new THREE.Float32Attribute( geometry.skinWeights.length * 4, 4 );\r\n\t\t\tthis.addAttribute( 'skinWeight', skinWeights.copyVector4sArray( geometry.skinWeights ) );\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tif ( geometry.boundingSphere !== null ) {\r\n\r\n\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometry.boundingBox !== null ) {\r\n\r\n\t\t\tthis.boundingBox = geometry.boundingBox.clone();\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcomputeBoundingBox: function () {\r\n\r\n\t\tif ( this.boundingBox === null ) {\r\n\r\n\t\t\tthis.boundingBox = new THREE.Box3();\r\n\r\n\t\t}\r\n\r\n\t\tvar positions = this.attributes.position.array;\r\n\r\n\t\tif ( positions !== undefined ) {\r\n\r\n\t\t\tthis.boundingBox.setFromArray( positions );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.boundingBox.makeEmpty();\r\n\r\n\t\t}\r\n\r\n\t\tif ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {\r\n\r\n\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.', this );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tcomputeBoundingSphere: function () {\r\n\r\n\t\tvar box = new THREE.Box3();\r\n\t\tvar vector = new THREE.Vector3();\r\n\r\n\t\treturn function computeBoundingSphere() {\r\n\r\n\t\t\tif ( this.boundingSphere === null ) {\r\n\r\n\t\t\t\tthis.boundingSphere = new THREE.Sphere();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar positions = this.attributes.position.array;\r\n\r\n\t\t\tif ( positions ) {\r\n\r\n\t\t\t\tvar center = this.boundingSphere.center;\r\n\r\n\t\t\t\tbox.setFromArray( positions );\r\n\t\t\t\tbox.center( center );\r\n\r\n\t\t\t\t// hoping to find a boundingSphere with a radius smaller than the\r\n\t\t\t\t// boundingSphere of the boundingBox: sqrt(3) smaller in the best case\r\n\r\n\t\t\t\tvar maxRadiusSq = 0;\r\n\r\n\t\t\t\tfor ( var i = 0, il = positions.length; i < il; i += 3 ) {\r\n\r\n\t\t\t\t\tvector.fromArray( positions, i );\r\n\t\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( vector ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.boundingSphere.radius = Math.sqrt( maxRadiusSq );\r\n\r\n\t\t\t\tif ( isNaN( this.boundingSphere.radius ) ) {\r\n\r\n\t\t\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.', this );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\tcomputeFaceNormals: function () {\r\n\r\n\t\t// backwards compatibility\r\n\r\n\t},\r\n\r\n\tcomputeVertexNormals: function () {\r\n\r\n\t\tvar index = this.index;\r\n\t\tvar attributes = this.attributes;\r\n\t\tvar groups = this.groups;\r\n\r\n\t\tif ( attributes.position ) {\r\n\r\n\t\t\tvar positions = attributes.position.array;\r\n\r\n\t\t\tif ( attributes.normal === undefined ) {\r\n\r\n\t\t\t\tthis.addAttribute( 'normal', new THREE.BufferAttribute( new Float32Array( positions.length ), 3 ) );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// reset existing normals to zero\r\n\r\n\t\t\t\tvar array = attributes.normal.array;\r\n\r\n\t\t\t\tfor ( var i = 0, il = array.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tarray[ i ] = 0;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar normals = attributes.normal.array;\r\n\r\n\t\t\tvar vA, vB, vC,\r\n\r\n\t\t\tpA = new THREE.Vector3(),\r\n\t\t\tpB = new THREE.Vector3(),\r\n\t\t\tpC = new THREE.Vector3(),\r\n\r\n\t\t\tcb = new THREE.Vector3(),\r\n\t\t\tab = new THREE.Vector3();\r\n\r\n\t\t\t// indexed elements\r\n\r\n\t\t\tif ( index ) {\r\n\r\n\t\t\t\tvar indices = index.array;\r\n\r\n\t\t\t\tif ( groups.length === 0 ) {\r\n\r\n\t\t\t\t\tthis.addGroup( 0, indices.length );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor ( var j = 0, jl = groups.length; j < jl; ++ j ) {\r\n\r\n\t\t\t\t\tvar group = groups[ j ];\r\n\r\n\t\t\t\t\tvar start = group.start;\r\n\t\t\t\t\tvar count = group.count;\r\n\r\n\t\t\t\t\tfor ( var i = start, il = start + count; i < il; i += 3 ) {\r\n\r\n\t\t\t\t\t\tvA = indices[ i + 0 ] * 3;\r\n\t\t\t\t\t\tvB = indices[ i + 1 ] * 3;\r\n\t\t\t\t\t\tvC = indices[ i + 2 ] * 3;\r\n\r\n\t\t\t\t\t\tpA.fromArray( positions, vA );\r\n\t\t\t\t\t\tpB.fromArray( positions, vB );\r\n\t\t\t\t\t\tpC.fromArray( positions, vC );\r\n\r\n\t\t\t\t\t\tcb.subVectors( pC, pB );\r\n\t\t\t\t\t\tab.subVectors( pA, pB );\r\n\t\t\t\t\t\tcb.cross( ab );\r\n\r\n\t\t\t\t\t\tnormals[ vA ] += cb.x;\r\n\t\t\t\t\t\tnormals[ vA + 1 ] += cb.y;\r\n\t\t\t\t\t\tnormals[ vA + 2 ] += cb.z;\r\n\r\n\t\t\t\t\t\tnormals[ vB ] += cb.x;\r\n\t\t\t\t\t\tnormals[ vB + 1 ] += cb.y;\r\n\t\t\t\t\t\tnormals[ vB + 2 ] += cb.z;\r\n\r\n\t\t\t\t\t\tnormals[ vC ] += cb.x;\r\n\t\t\t\t\t\tnormals[ vC + 1 ] += cb.y;\r\n\t\t\t\t\t\tnormals[ vC + 2 ] += cb.z;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// non-indexed elements (unconnected triangle soup)\r\n\r\n\t\t\t\tfor ( var i = 0, il = positions.length; i < il; i += 9 ) {\r\n\r\n\t\t\t\t\tpA.fromArray( positions, i );\r\n\t\t\t\t\tpB.fromArray( positions, i + 3 );\r\n\t\t\t\t\tpC.fromArray( positions, i + 6 );\r\n\r\n\t\t\t\t\tcb.subVectors( pC, pB );\r\n\t\t\t\t\tab.subVectors( pA, pB );\r\n\t\t\t\t\tcb.cross( ab );\r\n\r\n\t\t\t\t\tnormals[ i ] = cb.x;\r\n\t\t\t\t\tnormals[ i + 1 ] = cb.y;\r\n\t\t\t\t\tnormals[ i + 2 ] = cb.z;\r\n\r\n\t\t\t\t\tnormals[ i + 3 ] = cb.x;\r\n\t\t\t\t\tnormals[ i + 4 ] = cb.y;\r\n\t\t\t\t\tnormals[ i + 5 ] = cb.z;\r\n\r\n\t\t\t\t\tnormals[ i + 6 ] = cb.x;\r\n\t\t\t\t\tnormals[ i + 7 ] = cb.y;\r\n\t\t\t\t\tnormals[ i + 8 ] = cb.z;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.normalizeNormals();\r\n\r\n\t\t\tattributes.normal.needsUpdate = true;\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tmerge: function ( geometry, offset ) {\r\n\r\n\t\tif ( geometry instanceof THREE.BufferGeometry === false ) {\r\n\r\n\t\t\tconsole.error( 'THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry );\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tif ( offset === undefined ) offset = 0;\r\n\r\n\t\tvar attributes = this.attributes;\r\n\r\n\t\tfor ( var key in attributes ) {\r\n\r\n\t\t\tif ( geometry.attributes[ key ] === undefined ) continue;\r\n\r\n\t\t\tvar attribute1 = attributes[ key ];\r\n\t\t\tvar attributeArray1 = attribute1.array;\r\n\r\n\t\t\tvar attribute2 = geometry.attributes[ key ];\r\n\t\t\tvar attributeArray2 = attribute2.array;\r\n\r\n\t\t\tvar attributeSize = attribute2.itemSize;\r\n\r\n\t\t\tfor ( var i = 0, j = attributeSize * offset; i < attributeArray2.length; i ++, j ++ ) {\r\n\r\n\t\t\t\tattributeArray1[ j ] = attributeArray2[ i ];\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tnormalizeNormals: function () {\r\n\r\n\t\tvar normals = this.attributes.normal.array;\r\n\r\n\t\tvar x, y, z, n;\r\n\r\n\t\tfor ( var i = 0, il = normals.length; i < il; i += 3 ) {\r\n\r\n\t\t\tx = normals[ i ];\r\n\t\t\ty = normals[ i + 1 ];\r\n\t\t\tz = normals[ i + 2 ];\r\n\r\n\t\t\tn = 1.0 / Math.sqrt( x * x + y * y + z * z );\r\n\r\n\t\t\tnormals[ i ] *= n;\r\n\t\t\tnormals[ i + 1 ] *= n;\r\n\t\t\tnormals[ i + 2 ] *= n;\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\ttoNonIndexed: function () {\r\n\r\n\t\tif ( this.index === null ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.' );\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t\tvar geometry2 = new THREE.BufferGeometry();\r\n\r\n\t\tvar indices = this.index.array;\r\n\t\tvar attributes = this.attributes;\r\n\r\n\t\tfor ( var name in attributes ) {\r\n\r\n\t\t\tvar attribute = attributes[ name ];\r\n\r\n\t\t\tvar array = attribute.array;\r\n\t\t\tvar itemSize = attribute.itemSize;\r\n\r\n\t\t\tvar array2 = new array.constructor( indices.length * itemSize );\r\n\r\n\t\t\tvar index = 0, index2 = 0;\r\n\r\n\t\t\tfor ( var i = 0, l = indices.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tindex = indices[ i ] * itemSize;\r\n\r\n\t\t\t\tfor ( var j = 0; j < itemSize; j ++ ) {\r\n\r\n\t\t\t\t\tarray2[ index2 ++ ] = array[ index ++ ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgeometry2.addAttribute( name, new THREE.BufferAttribute( array2, itemSize ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn geometry2;\r\n\r\n\t},\r\n\r\n\ttoJSON: function () {\r\n\r\n\t\tvar data = {\r\n\t\t\tmetadata: {\r\n\t\t\t\tversion: 4.4,\r\n\t\t\t\ttype: 'BufferGeometry',\r\n\t\t\t\tgenerator: 'BufferGeometry.toJSON'\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// standard BufferGeometry serialization\r\n\r\n\t\tdata.uuid = this.uuid;\r\n\t\tdata.type = this.type;\r\n\t\tif ( this.name !== '' ) data.name = this.name;\r\n\r\n\t\tif ( this.parameters !== undefined ) {\r\n\r\n\t\t\tvar parameters = this.parameters;\r\n\r\n\t\t\tfor ( var key in parameters ) {\r\n\r\n\t\t\t\tif ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn data;\r\n\r\n\t\t}\r\n\r\n\t\tdata.data = { attributes: {} };\r\n\r\n\t\tvar index = this.index;\r\n\r\n\t\tif ( index !== null ) {\r\n\r\n\t\t\tvar array = Array.prototype.slice.call( index.array );\r\n\r\n\t\t\tdata.data.index = {\r\n\t\t\t\ttype: index.array.constructor.name,\r\n\t\t\t\tarray: array\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\tvar attributes = this.attributes;\r\n\r\n\t\tfor ( var key in attributes ) {\r\n\r\n\t\t\tvar attribute = attributes[ key ];\r\n\r\n\t\t\tvar array = Array.prototype.slice.call( attribute.array );\r\n\r\n\t\t\tdata.data.attributes[ key ] = {\r\n\t\t\t\titemSize: attribute.itemSize,\r\n\t\t\t\ttype: attribute.array.constructor.name,\r\n\t\t\t\tarray: array,\r\n\t\t\t\tnormalized: attribute.normalized\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\tvar groups = this.groups;\r\n\r\n\t\tif ( groups.length > 0 ) {\r\n\r\n\t\t\tdata.data.groups = JSON.parse( JSON.stringify( groups ) );\r\n\r\n\t\t}\r\n\r\n\t\tvar boundingSphere = this.boundingSphere;\r\n\r\n\t\tif ( boundingSphere !== null ) {\r\n\r\n\t\t\tdata.data.boundingSphere = {\r\n\t\t\t\tcenter: boundingSphere.center.toArray(),\r\n\t\t\t\tradius: boundingSphere.radius\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\treturn data;\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\t/*\r\n\t\t// Handle primitives\r\n\r\n\t\tvar parameters = this.parameters;\r\n\r\n\t\tif ( parameters !== undefined ) {\r\n\r\n\t\t\tvar values = [];\r\n\r\n\t\t\tfor ( var key in parameters ) {\r\n\r\n\t\t\t\tvalues.push( parameters[ key ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar geometry = Object.create( this.constructor.prototype );\r\n\t\t\tthis.constructor.apply( geometry, values );\r\n\t\t\treturn geometry;\r\n\r\n\t\t}\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\t\t*/\r\n\r\n\t\treturn new THREE.BufferGeometry().copy( this );\r\n\r\n\t},\r\n\r\n\tcopy: function ( source ) {\r\n\r\n\t\tvar index = source.index;\r\n\r\n\t\tif ( index !== null ) {\r\n\r\n\t\t\tthis.setIndex( index.clone() );\r\n\r\n\t\t}\r\n\r\n\t\tvar attributes = source.attributes;\r\n\r\n\t\tfor ( var name in attributes ) {\r\n\r\n\t\t\tvar attribute = attributes[ name ];\r\n\t\t\tthis.addAttribute( name, attribute.clone() );\r\n\r\n\t\t}\r\n\r\n\t\tvar groups = source.groups;\r\n\r\n\t\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar group = groups[ i ];\r\n\t\t\tthis.addGroup( group.start, group.count, group.materialIndex );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdispose: function () {\r\n\r\n\t\tthis.dispatchEvent( { type: 'dispose' } );\r\n\r\n\t}\r\n\r\n} );\r\n\r\nTHREE.BufferGeometry.MaxIndex = 65535;\r\n\r\n// File:src/core/InstancedBufferGeometry.js\r\n\r\n/**\r\n * @author benaadams / https://twitter.com/ben_a_adams\r\n */\r\n\r\nTHREE.InstancedBufferGeometry = function () {\r\n\r\n\tTHREE.BufferGeometry.call( this );\r\n\r\n\tthis.type = 'InstancedBufferGeometry';\r\n\tthis.maxInstancedCount = undefined;\r\n\r\n};\r\n\r\nTHREE.InstancedBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\r\nTHREE.InstancedBufferGeometry.prototype.constructor = THREE.InstancedBufferGeometry;\r\n\r\nTHREE.InstancedBufferGeometry.prototype.addGroup = function ( start, count, instances ) {\r\n\r\n\tthis.groups.push( {\r\n\r\n\t\tstart: start,\r\n\t\tcount: count,\r\n\t\tinstances: instances\r\n\r\n\t} );\r\n\r\n};\r\n\r\nTHREE.InstancedBufferGeometry.prototype.copy = function ( source ) {\r\n\r\n\tvar index = source.index;\r\n\r\n\tif ( index !== null ) {\r\n\r\n\t\tthis.setIndex( index.clone() );\r\n\r\n\t}\r\n\r\n\tvar attributes = source.attributes;\r\n\r\n\tfor ( var name in attributes ) {\r\n\r\n\t\tvar attribute = attributes[ name ];\r\n\t\tthis.addAttribute( name, attribute.clone() );\r\n\r\n\t}\r\n\r\n\tvar groups = source.groups;\r\n\r\n\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\r\n\r\n\t\tvar group = groups[ i ];\r\n\t\tthis.addGroup( group.start, group.count, group.instances );\r\n\r\n\t}\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\n// File:src/core/Uniform.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.Uniform = function ( value ) {\r\n\r\n\tif ( typeof value === 'string' ) {\r\n\r\n\t\tconsole.warn( 'THREE.Uniform: Type parameter is no longer needed.' );\r\n\t\tvalue = arguments[ 1 ];\r\n\r\n\t}\r\n\r\n\tthis.value = value;\r\n\r\n\tthis.dynamic = false;\r\n\r\n};\r\n\r\nTHREE.Uniform.prototype = {\r\n\r\n\tconstructor: THREE.Uniform,\r\n\r\n\tonUpdate: function ( callback ) {\r\n\r\n\t\tthis.dynamic = true;\r\n\t\tthis.onUpdateCallback = callback;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/animation/AnimationAction.js\r\n\r\n/**\r\n *\r\n * Action provided by AnimationMixer for scheduling clip playback on specific\r\n * objects.\r\n *\r\n * @author Ben Houston / http://clara.io/\r\n * @author David Sarno / http://lighthaus.us/\r\n * @author tschw\r\n *\r\n */\r\n\r\nTHREE.AnimationAction = function() {\r\n\r\n\tthrow new Error( \"THREE.AnimationAction: \" +\r\n\t\t\t\"Use mixer.clipAction for construction.\" );\r\n\r\n};\r\n\r\nTHREE.AnimationAction._new =\r\n\t\tfunction AnimationAction( mixer, clip, localRoot ) {\r\n\r\n\tthis._mixer = mixer;\r\n\tthis._clip = clip;\r\n\tthis._localRoot = localRoot || null;\r\n\r\n\tvar tracks = clip.tracks,\r\n\t\tnTracks = tracks.length,\r\n\t\tinterpolants = new Array( nTracks );\r\n\r\n\tvar interpolantSettings = {\r\n\t\t\tendingStart: \tTHREE.ZeroCurvatureEnding,\r\n\t\t\tendingEnd:\t\tTHREE.ZeroCurvatureEnding\r\n\t};\r\n\r\n\tfor ( var i = 0; i !== nTracks; ++ i ) {\r\n\r\n\t\tvar interpolant = tracks[ i ].createInterpolant( null );\r\n\t\tinterpolants[ i ] = interpolant;\r\n\t\tinterpolant.settings = interpolantSettings;\r\n\r\n\t}\r\n\r\n\tthis._interpolantSettings = interpolantSettings;\r\n\r\n\tthis._interpolants = interpolants;\t// bound by the mixer\r\n\r\n\t// inside: PropertyMixer (managed by the mixer)\r\n\tthis._propertyBindings = new Array( nTracks );\r\n\r\n\tthis._cacheIndex = null;\t\t\t// for the memory manager\r\n\tthis._byClipCacheIndex = null;\t\t// for the memory manager\r\n\r\n\tthis._timeScaleInterpolant = null;\r\n\tthis._weightInterpolant = null;\r\n\r\n\tthis.loop = THREE.LoopRepeat;\r\n\tthis._loopCount = -1;\r\n\r\n\t// global mixer time when the action is to be started\r\n\t// it's set back to 'null' upon start of the action\r\n\tthis._startTime = null;\r\n\r\n\t// scaled local time of the action\r\n\t// gets clamped or wrapped to 0..clip.duration according to loop\r\n\tthis.time = 0;\r\n\r\n\tthis.timeScale = 1;\r\n\tthis._effectiveTimeScale = 1;\r\n\r\n\tthis.weight = 1;\r\n\tthis._effectiveWeight = 1;\r\n\r\n\tthis.repetitions = Infinity; \t\t// no. of repetitions when looping\r\n\r\n\tthis.paused = false;\t\t\t\t// false -> zero effective time scale\r\n\tthis.enabled = true;\t\t\t\t// true -> zero effective weight\r\n\r\n\tthis.clampWhenFinished \t= false;\t// keep feeding the last frame?\r\n\r\n\tthis.zeroSlopeAtStart \t= true;\t\t// for smooth interpolation w/o separate\r\n\tthis.zeroSlopeAtEnd\t\t= true;\t\t// clips for start, loop and end\r\n\r\n};\r\n\r\nTHREE.AnimationAction._new.prototype = {\r\n\r\n\tconstructor: THREE.AnimationAction._new,\r\n\r\n\t// State & Scheduling\r\n\r\n\tplay: function() {\r\n\r\n\t\tthis._mixer._activateAction( this );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tstop: function() {\r\n\r\n\t\tthis._mixer._deactivateAction( this );\r\n\r\n\t\treturn this.reset();\r\n\r\n\t},\r\n\r\n\treset: function() {\r\n\r\n\t\tthis.paused = false;\r\n\t\tthis.enabled = true;\r\n\r\n\t\tthis.time = 0;\t\t\t// restart clip\r\n\t\tthis._loopCount = -1;\t// forget previous loops\r\n\t\tthis._startTime = null;\t// forget scheduling\r\n\r\n\t\treturn this.stopFading().stopWarping();\r\n\r\n\t},\r\n\r\n\tisRunning: function() {\r\n\r\n\t\tvar start = this._startTime;\r\n\r\n\t\treturn this.enabled && ! this.paused && this.timeScale !== 0 &&\r\n\t\t\t\tthis._startTime === null && this._mixer._isActiveAction( this );\r\n\r\n\t},\r\n\r\n\t// return true when play has been called\r\n\tisScheduled: function() {\r\n\r\n\t\treturn this._mixer._isActiveAction( this );\r\n\r\n\t},\r\n\r\n\tstartAt: function( time ) {\r\n\r\n\t\tthis._startTime = time;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetLoop: function( mode, repetitions ) {\r\n\r\n\t\tthis.loop = mode;\r\n\t\tthis.repetitions = repetitions;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\t// Weight\r\n\r\n\t// set the weight stopping any scheduled fading\r\n\t// although .enabled = false yields an effective weight of zero, this\r\n\t// method does *not* change .enabled, because it would be confusing\r\n\tsetEffectiveWeight: function( weight ) {\r\n\r\n\t\tthis.weight = weight;\r\n\r\n\t\t// note: same logic as when updated at runtime\r\n\t\tthis._effectiveWeight = this.enabled ? weight : 0;\r\n\r\n\t\treturn this.stopFading();\r\n\r\n\t},\r\n\r\n\t// return the weight considering fading and .enabled\r\n\tgetEffectiveWeight: function() {\r\n\r\n\t\treturn this._effectiveWeight;\r\n\r\n\t},\r\n\r\n\tfadeIn: function( duration ) {\r\n\r\n\t\treturn this._scheduleFading( duration, 0, 1 );\r\n\r\n\t},\r\n\r\n\tfadeOut: function( duration ) {\r\n\r\n\t\treturn this._scheduleFading( duration, 1, 0 );\r\n\r\n\t},\r\n\r\n\tcrossFadeFrom: function( fadeOutAction, duration, warp ) {\r\n\r\n\t\tvar mixer = this._mixer;\r\n\r\n\t\tfadeOutAction.fadeOut( duration );\r\n\t\tthis.fadeIn( duration );\r\n\r\n\t\tif( warp ) {\r\n\r\n\t\t\tvar fadeInDuration = this._clip.duration,\r\n\t\t\t\tfadeOutDuration = fadeOutAction._clip.duration,\r\n\r\n\t\t\t\tstartEndRatio = fadeOutDuration / fadeInDuration,\r\n\t\t\t\tendStartRatio = fadeInDuration / fadeOutDuration;\r\n\r\n\t\t\tfadeOutAction.warp( 1.0, startEndRatio, duration );\r\n\t\t\tthis.warp( endStartRatio, 1.0, duration );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tcrossFadeTo: function( fadeInAction, duration, warp ) {\r\n\r\n\t\treturn fadeInAction.crossFadeFrom( this, duration, warp );\r\n\r\n\t},\r\n\r\n\tstopFading: function() {\r\n\r\n\t\tvar weightInterpolant = this._weightInterpolant;\r\n\r\n\t\tif ( weightInterpolant !== null ) {\r\n\r\n\t\t\tthis._weightInterpolant = null;\r\n\t\t\tthis._mixer._takeBackControlInterpolant( weightInterpolant );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\t// Time Scale Control\r\n\r\n\t// set the weight stopping any scheduled warping\r\n\t// although .paused = true yields an effective time scale of zero, this\r\n\t// method does *not* change .paused, because it would be confusing\r\n\tsetEffectiveTimeScale: function( timeScale ) {\r\n\r\n\t\tthis.timeScale = timeScale;\r\n\t\tthis._effectiveTimeScale = this.paused ? 0 :timeScale;\r\n\r\n\t\treturn this.stopWarping();\r\n\r\n\t},\r\n\r\n\t// return the time scale considering warping and .paused\r\n\tgetEffectiveTimeScale: function() {\r\n\r\n\t\treturn this._effectiveTimeScale;\r\n\r\n\t},\r\n\r\n\tsetDuration: function( duration ) {\r\n\r\n\t\tthis.timeScale = this._clip.duration / duration;\r\n\r\n\t\treturn this.stopWarping();\r\n\r\n\t},\r\n\r\n\tsyncWith: function( action ) {\r\n\r\n\t\tthis.time = action.time;\r\n\t\tthis.timeScale = action.timeScale;\r\n\r\n\t\treturn this.stopWarping();\r\n\r\n\t},\r\n\r\n\thalt: function( duration ) {\r\n\r\n\t\treturn this.warp( this._effectiveTimeScale, 0, duration );\r\n\r\n\t},\r\n\r\n\twarp: function( startTimeScale, endTimeScale, duration ) {\r\n\r\n\t\tvar mixer = this._mixer, now = mixer.time,\r\n\t\t\tinterpolant = this._timeScaleInterpolant,\r\n\r\n\t\t\ttimeScale = this.timeScale;\r\n\r\n\t\tif ( interpolant === null ) {\r\n\r\n\t\t\tinterpolant = mixer._lendControlInterpolant(),\r\n\t\t\tthis._timeScaleInterpolant = interpolant;\r\n\r\n\t\t}\r\n\r\n\t\tvar times = interpolant.parameterPositions,\r\n\t\t\tvalues = interpolant.sampleValues;\r\n\r\n\t\ttimes[ 0 ] = now;\r\n\t\ttimes[ 1 ] = now + duration;\r\n\r\n\t\tvalues[ 0 ] = startTimeScale / timeScale;\r\n\t\tvalues[ 1 ] = endTimeScale / timeScale;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tstopWarping: function() {\r\n\r\n\t\tvar timeScaleInterpolant = this._timeScaleInterpolant;\r\n\r\n\t\tif ( timeScaleInterpolant !== null ) {\r\n\r\n\t\t\tthis._timeScaleInterpolant = null;\r\n\t\t\tthis._mixer._takeBackControlInterpolant( timeScaleInterpolant );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\t// Object Accessors\r\n\r\n\tgetMixer: function() {\r\n\r\n\t\treturn this._mixer;\r\n\r\n\t},\r\n\r\n\tgetClip: function() {\r\n\r\n\t\treturn this._clip;\r\n\r\n\t},\r\n\r\n\tgetRoot: function() {\r\n\r\n\t\treturn this._localRoot || this._mixer._root;\r\n\r\n\t},\r\n\r\n\t// Interna\r\n\r\n\t_update: function( time, deltaTime, timeDirection, accuIndex ) {\r\n\t\t// called by the mixer\r\n\r\n\t\tvar startTime = this._startTime;\r\n\r\n\t\tif ( startTime !== null ) {\r\n\r\n\t\t\t// check for scheduled start of action\r\n\r\n\t\t\tvar timeRunning = ( time - startTime ) * timeDirection;\r\n\t\t\tif ( timeRunning < 0 || timeDirection === 0 ) {\r\n\r\n\t\t\t\treturn; // yet to come / don't decide when delta = 0\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// start\r\n\r\n\t\t\tthis._startTime = null; // unschedule\r\n\t\t\tdeltaTime = timeDirection * timeRunning;\r\n\r\n\t\t}\r\n\r\n\t\t// apply time scale and advance time\r\n\r\n\t\tdeltaTime *= this._updateTimeScale( time );\r\n\t\tvar clipTime = this._updateTime( deltaTime );\r\n\r\n\t\t// note: _updateTime may disable the action resulting in\r\n\t\t// an effective weight of 0\r\n\r\n\t\tvar weight = this._updateWeight( time );\r\n\r\n\t\tif ( weight > 0 ) {\r\n\r\n\t\t\tvar interpolants = this._interpolants;\r\n\t\t\tvar propertyMixers = this._propertyBindings;\r\n\r\n\t\t\tfor ( var j = 0, m = interpolants.length; j !== m; ++ j ) {\r\n\r\n\t\t\t\tinterpolants[ j ].evaluate( clipTime );\r\n\t\t\t\tpropertyMixers[ j ].accumulate( accuIndex, weight );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\t_updateWeight: function( time ) {\r\n\r\n\t\tvar weight = 0;\r\n\r\n\t\tif ( this.enabled ) {\r\n\r\n\t\t\tweight = this.weight;\r\n\t\t\tvar interpolant = this._weightInterpolant;\r\n\r\n\t\t\tif ( interpolant !== null ) {\r\n\r\n\t\t\t\tvar interpolantValue = interpolant.evaluate( time )[ 0 ];\r\n\r\n\t\t\t\tweight *= interpolantValue;\r\n\r\n\t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\r\n\r\n\t\t\t\t\tthis.stopFading();\r\n\r\n\t\t\t\t\tif ( interpolantValue === 0 ) {\r\n\r\n\t\t\t\t\t\t// faded out, disable\r\n\t\t\t\t\t\tthis.enabled = false;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis._effectiveWeight = weight;\r\n\t\treturn weight;\r\n\r\n\t},\r\n\r\n\t_updateTimeScale: function( time ) {\r\n\r\n\t\tvar timeScale = 0;\r\n\r\n\t\tif ( ! this.paused ) {\r\n\r\n\t\t\ttimeScale = this.timeScale;\r\n\r\n\t\t\tvar interpolant = this._timeScaleInterpolant;\r\n\r\n\t\t\tif ( interpolant !== null ) {\r\n\r\n\t\t\t\tvar interpolantValue = interpolant.evaluate( time )[ 0 ];\r\n\r\n\t\t\t\ttimeScale *= interpolantValue;\r\n\r\n\t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\r\n\r\n\t\t\t\t\tthis.stopWarping();\r\n\r\n\t\t\t\t\tif ( timeScale === 0 ) {\r\n\r\n\t\t\t\t\t\t// motion has halted, pause\r\n\t\t\t\t\t\tthis.paused = true;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t// warp done - apply final time scale\r\n\t\t\t\t\t\tthis.timeScale = timeScale;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis._effectiveTimeScale = timeScale;\r\n\t\treturn timeScale;\r\n\r\n\t},\r\n\r\n\t_updateTime: function( deltaTime ) {\r\n\r\n\t\tvar time = this.time + deltaTime;\r\n\r\n\t\tif ( deltaTime === 0 ) return time;\r\n\r\n\t\tvar duration = this._clip.duration,\r\n\r\n\t\t\tloop = this.loop,\r\n\t\t\tloopCount = this._loopCount;\r\n\r\n\t\tif ( loop === THREE.LoopOnce ) {\r\n\r\n\t\t\tif ( loopCount === -1 ) {\r\n\t\t\t\t// just started\r\n\r\n\t\t\t\tthis.loopCount = 0;\r\n\t\t\t\tthis._setEndings( true, true, false );\r\n\r\n\t\t\t}\r\n\r\n\t\t\thandle_stop: {\r\n\r\n\t\t\t\tif ( time >= duration ) {\r\n\r\n\t\t\t\t\ttime = duration;\r\n\r\n\t\t\t\t} else if ( time < 0 ) {\r\n\r\n\t\t\t\t\ttime = 0;\r\n\r\n\t\t\t\t} else break handle_stop;\r\n\r\n\t\t\t\tif ( this.clampWhenFinished ) this.paused = true;\r\n\t\t\t\telse this.enabled = false;\r\n\r\n\t\t\t\tthis._mixer.dispatchEvent( {\r\n\t\t\t\t\ttype: 'finished', action: this,\r\n\t\t\t\t\tdirection: deltaTime < 0 ? -1 : 1\r\n\t\t\t\t} );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else { // repetitive Repeat or PingPong\r\n\r\n\t\t\tvar pingPong = ( loop === THREE.LoopPingPong );\r\n\r\n\t\t\tif ( loopCount === -1 ) {\r\n\t\t\t\t// just started\r\n\r\n\t\t\t\tif ( deltaTime >= 0 ) {\r\n\r\n\t\t\t\t\tloopCount = 0;\r\n\r\n\t\t\t\t\tthis._setEndings(\r\n\t\t\t\t\t\t\ttrue, this.repetitions === 0, pingPong );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// when looping in reverse direction, the initial\r\n\t\t\t\t\t// transition through zero counts as a repetition,\r\n\t\t\t\t\t// so leave loopCount at -1\r\n\r\n\t\t\t\t\tthis._setEndings(\r\n\t\t\t\t\t\t\tthis.repetitions === 0, true, pingPong );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( time >= duration || time < 0 ) {\r\n\t\t\t\t// wrap around\r\n\r\n\t\t\t\tvar loopDelta = Math.floor( time / duration ); // signed\r\n\t\t\t\ttime -= duration * loopDelta;\r\n\r\n\t\t\t\tloopCount += Math.abs( loopDelta );\r\n\r\n\t\t\t\tvar pending = this.repetitions - loopCount;\r\n\r\n\t\t\t\tif ( pending < 0 ) {\r\n\t\t\t\t\t// have to stop (switch state, clamp time, fire event)\r\n\r\n\t\t\t\t\tif ( this.clampWhenFinished ) this.paused = true;\r\n\t\t\t\t\telse this.enabled = false;\r\n\r\n\t\t\t\t\ttime = deltaTime > 0 ? duration : 0;\r\n\r\n\t\t\t\t\tthis._mixer.dispatchEvent( {\r\n\t\t\t\t\t\ttype: 'finished', action: this,\r\n\t\t\t\t\t\tdirection: deltaTime > 0 ? 1 : -1\r\n\t\t\t\t\t} );\r\n\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// keep running\r\n\r\n\t\t\t\t\tif ( pending === 0 ) {\r\n\t\t\t\t\t\t// entering the last round\r\n\r\n\t\t\t\t\t\tvar atStart = deltaTime < 0;\r\n\t\t\t\t\t\tthis._setEndings( atStart, ! atStart, pingPong );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tthis._setEndings( false, false, pingPong );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis._loopCount = loopCount;\r\n\r\n\t\t\t\t\tthis._mixer.dispatchEvent( {\r\n\t\t\t\t\t\ttype: 'loop', action: this, loopDelta: loopDelta\r\n\t\t\t\t\t} );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( pingPong && ( loopCount & 1 ) === 1 ) {\r\n\t\t\t\t// invert time for the \"pong round\"\r\n\r\n\t\t\t\tthis.time = time;\r\n\t\t\t\treturn duration - time;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis.time = time;\r\n\t\treturn time;\r\n\r\n\t},\r\n\r\n\t_setEndings: function( atStart, atEnd, pingPong ) {\r\n\r\n\t\tvar settings = this._interpolantSettings;\r\n\r\n\t\tif ( pingPong ) {\r\n\r\n\t\t\tsettings.endingStart \t= THREE.ZeroSlopeEnding;\r\n\t\t\tsettings.endingEnd\t\t= THREE.ZeroSlopeEnding;\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// assuming for LoopOnce atStart == atEnd == true\r\n\r\n\t\t\tif ( atStart ) {\r\n\r\n\t\t\t\tsettings.endingStart = this.zeroSlopeAtStart ?\r\n\t\t\t\t\t\tTHREE.ZeroSlopeEnding : THREE.ZeroCurvatureEnding;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tsettings.endingStart = THREE.WrapAroundEnding;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( atEnd ) {\r\n\r\n\t\t\t\tsettings.endingEnd = this.zeroSlopeAtEnd ?\r\n\t\t\t\t\t\tTHREE.ZeroSlopeEnding : THREE.ZeroCurvatureEnding;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tsettings.endingEnd \t = THREE.WrapAroundEnding;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\t_scheduleFading: function( duration, weightNow, weightThen ) {\r\n\r\n\t\tvar mixer = this._mixer, now = mixer.time,\r\n\t\t\tinterpolant = this._weightInterpolant;\r\n\r\n\t\tif ( interpolant === null ) {\r\n\r\n\t\t\tinterpolant = mixer._lendControlInterpolant(),\r\n\t\t\tthis._weightInterpolant = interpolant;\r\n\r\n\t\t}\r\n\r\n\t\tvar times = interpolant.parameterPositions,\r\n\t\t\tvalues = interpolant.sampleValues;\r\n\r\n\t\ttimes[ 0 ] = now; \t\t\t\tvalues[ 0 ] = weightNow;\r\n\t\ttimes[ 1 ] = now + duration;\tvalues[ 1 ] = weightThen;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n};\r\n\r\n\r\n// File:src/animation/AnimationClip.js\r\n\r\n/**\r\n *\r\n * Reusable set of Tracks that represent an animation.\r\n *\r\n * @author Ben Houston / http://clara.io/\r\n * @author David Sarno / http://lighthaus.us/\r\n */\r\n\r\nTHREE.AnimationClip = function ( name, duration, tracks ) {\r\n\r\n\tthis.name = name;\r\n\tthis.tracks = tracks;\r\n\tthis.duration = ( duration !== undefined ) ? duration : -1;\r\n\r\n\tthis.uuid = THREE.Math.generateUUID();\r\n\r\n\t// this means it should figure out its duration by scanning the tracks\r\n\tif ( this.duration < 0 ) {\r\n\r\n\t\tthis.resetDuration();\r\n\r\n\t}\r\n\r\n\t// maybe only do these on demand, as doing them here could potentially slow down loading\r\n\t// but leaving these here during development as this ensures a lot of testing of these functions\r\n\tthis.trim();\r\n\tthis.optimize();\r\n\r\n};\r\n\r\nTHREE.AnimationClip.prototype = {\r\n\r\n\tconstructor: THREE.AnimationClip,\r\n\r\n\tresetDuration: function() {\r\n\r\n\t\tvar tracks = this.tracks,\r\n\t\t\tduration = 0;\r\n\r\n\t\tfor ( var i = 0, n = tracks.length; i !== n; ++ i ) {\r\n\r\n\t\t\tvar track = this.tracks[ i ];\r\n\r\n\t\t\tduration = Math.max(\r\n\t\t\t\t\tduration, track.times[ track.times.length - 1 ] );\r\n\r\n\t\t}\r\n\r\n\t\tthis.duration = duration;\r\n\r\n\t},\r\n\r\n\ttrim: function() {\r\n\r\n\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\r\n\r\n\t\t\tthis.tracks[ i ].trim( 0, this.duration );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\toptimize: function() {\r\n\r\n\t\tfor ( var i = 0; i < this.tracks.length; i ++ ) {\r\n\r\n\t\t\tthis.tracks[ i ].optimize();\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// Static methods:\r\n\r\nObject.assign( THREE.AnimationClip, {\r\n\r\n\tparse: function( json ) {\r\n\r\n\t\tvar tracks = [],\r\n\t\t\tjsonTracks = json.tracks,\r\n\t\t\tframeTime = 1.0 / ( json.fps || 1.0 );\r\n\r\n\t\tfor ( var i = 0, n = jsonTracks.length; i !== n; ++ i ) {\r\n\r\n\t\t\ttracks.push( THREE.KeyframeTrack.parse( jsonTracks[ i ] ).scale( frameTime ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn new THREE.AnimationClip( json.name, json.duration, tracks );\r\n\r\n\t},\r\n\r\n\r\n\ttoJSON: function( clip ) {\r\n\r\n\t\tvar tracks = [],\r\n\t\t\tclipTracks = clip.tracks;\r\n\r\n\t\tvar json = {\r\n\r\n\t\t\t'name': clip.name,\r\n\t\t\t'duration': clip.duration,\r\n\t\t\t'tracks': tracks\r\n\r\n\t\t};\r\n\r\n\t\tfor ( var i = 0, n = clipTracks.length; i !== n; ++ i ) {\r\n\r\n\t\t\ttracks.push( THREE.KeyframeTrack.toJSON( clipTracks[ i ] ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn json;\r\n\r\n\t},\r\n\r\n\r\n\tCreateFromMorphTargetSequence: function( name, morphTargetSequence, fps, noLoop ) {\r\n\r\n\t\tvar numMorphTargets = morphTargetSequence.length;\r\n\t\tvar tracks = [];\r\n\r\n\t\tfor ( var i = 0; i < numMorphTargets; i ++ ) {\r\n\r\n\t\t\tvar times = [];\r\n\t\t\tvar values = [];\r\n\r\n\t\t\ttimes.push(\r\n\t\t\t\t\t( i + numMorphTargets - 1 ) % numMorphTargets,\r\n\t\t\t\t\ti,\r\n\t\t\t\t\t( i + 1 ) % numMorphTargets );\r\n\r\n\t\t\tvalues.push( 0, 1, 0 );\r\n\r\n\t\t\tvar order = THREE.AnimationUtils.getKeyframeOrder( times );\r\n\t\t\ttimes = THREE.AnimationUtils.sortedArray( times, 1, order );\r\n\t\t\tvalues = THREE.AnimationUtils.sortedArray( values, 1, order );\r\n\r\n\t\t\t// if there is a key at the first frame, duplicate it as the\r\n\t\t\t// last frame as well for perfect loop.\r\n\t\t\tif ( ! noLoop && times[ 0 ] === 0 ) {\r\n\r\n\t\t\t\ttimes.push( numMorphTargets );\r\n\t\t\t\tvalues.push( values[ 0 ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\ttracks.push(\r\n\t\t\t\t\tnew THREE.NumberKeyframeTrack(\r\n\t\t\t\t\t\t'.morphTargetInfluences[' + morphTargetSequence[ i ].name + ']',\r\n\t\t\t\t\t\ttimes, values\r\n\t\t\t\t\t).scale( 1.0 / fps ) );\r\n\t\t}\r\n\r\n\t\treturn new THREE.AnimationClip( name, -1, tracks );\r\n\r\n\t},\r\n\r\n\tfindByName: function( objectOrClipArray, name ) {\r\n\r\n\t\tvar clipArray = objectOrClipArray;\r\n\r\n\t\tif ( ! Array.isArray( objectOrClipArray ) ) {\r\n\r\n\t\t\tvar o = objectOrClipArray;\r\n\t\t\tclipArray = o.geometry && o.geometry.animations || o.animations;\r\n\r\n\t\t}\r\n\r\n\t\tfor ( var i = 0; i < clipArray.length; i ++ ) {\r\n\r\n\t\t\tif ( clipArray[ i ].name === name ) {\r\n\r\n\t\t\t\treturn clipArray[ i ];\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\r\n\t},\r\n\r\n\tCreateClipsFromMorphTargetSequences: function( morphTargets, fps, noLoop ) {\r\n\r\n\t\tvar animationToMorphTargets = {};\r\n\r\n\t\t// tested with https://regex101.com/ on trick sequences\r\n\t\t// such flamingo_flyA_003, flamingo_run1_003, crdeath0059\r\n\t\tvar pattern = /^([\\w-]*?)([\\d]+)$/;\r\n\r\n\t\t// sort morph target names into animation groups based\r\n\t\t// patterns like Walk_001, Walk_002, Run_001, Run_002\r\n\t\tfor ( var i = 0, il = morphTargets.length; i < il; i ++ ) {\r\n\r\n\t\t\tvar morphTarget = morphTargets[ i ];\r\n\t\t\tvar parts = morphTarget.name.match( pattern );\r\n\r\n\t\t\tif ( parts && parts.length > 1 ) {\r\n\r\n\t\t\t\tvar name = parts[ 1 ];\r\n\r\n\t\t\t\tvar animationMorphTargets = animationToMorphTargets[ name ];\r\n\t\t\t\tif ( ! animationMorphTargets ) {\r\n\r\n\t\t\t\t\tanimationToMorphTargets[ name ] = animationMorphTargets = [];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tanimationMorphTargets.push( morphTarget );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tvar clips = [];\r\n\r\n\t\tfor ( var name in animationToMorphTargets ) {\r\n\r\n\t\t\tclips.push( THREE.AnimationClip.CreateFromMorphTargetSequence( name, animationToMorphTargets[ name ], fps, noLoop ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn clips;\r\n\r\n\t},\r\n\r\n\t// parse the animation.hierarchy format\r\n\tparseAnimation: function( animation, bones, nodeName ) {\r\n\r\n\t\tif ( ! animation ) {\r\n\r\n\t\t\tconsole.error( \"  no animation in JSONLoader data\" );\r\n\t\t\treturn null;\r\n\r\n\t\t}\r\n\r\n\t\tvar addNonemptyTrack = function(\r\n\t\t\t\ttrackType, trackName, animationKeys, propertyName, destTracks ) {\r\n\r\n\t\t\t// only return track if there are actually keys.\r\n\t\t\tif ( animationKeys.length !== 0 ) {\r\n\r\n\t\t\t\tvar times = [];\r\n\t\t\t\tvar values = [];\r\n\r\n\t\t\t\tTHREE.AnimationUtils.flattenJSON(\r\n\t\t\t\t\t\tanimationKeys, times, values, propertyName );\r\n\r\n\t\t\t\t// empty keys are filtered out, so check again\r\n\t\t\t\tif ( times.length !== 0 ) {\r\n\r\n\t\t\t\t\tdestTracks.push( new trackType( trackName, times, values ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\tvar tracks = [];\r\n\r\n\t\tvar clipName = animation.name || 'default';\r\n\t\t// automatic length determination in AnimationClip.\r\n\t\tvar duration = animation.length || -1;\r\n\t\tvar fps = animation.fps || 30;\r\n\r\n\t\tvar hierarchyTracks = animation.hierarchy || [];\r\n\r\n\t\tfor ( var h = 0; h < hierarchyTracks.length; h ++ ) {\r\n\r\n\t\t\tvar animationKeys = hierarchyTracks[ h ].keys;\r\n\r\n\t\t\t// skip empty tracks\r\n\t\t\tif ( ! animationKeys || animationKeys.length === 0 ) continue;\r\n\r\n\t\t\t// process morph targets in a way exactly compatible\r\n\t\t\t// with AnimationHandler.init( animation )\r\n\t\t\tif ( animationKeys[0].morphTargets ) {\r\n\r\n\t\t\t\t// figure out all morph targets used in this track\r\n\t\t\t\tvar morphTargetNames = {};\r\n\t\t\t\tfor ( var k = 0; k < animationKeys.length; k ++ ) {\r\n\r\n\t\t\t\t\tif ( animationKeys[k].morphTargets ) {\r\n\r\n\t\t\t\t\t\tfor ( var m = 0; m < animationKeys[k].morphTargets.length; m ++ ) {\r\n\r\n\t\t\t\t\t\t\tmorphTargetNames[ animationKeys[k].morphTargets[m] ] = -1;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// create a track for each morph target with all zero\r\n\t\t\t\t// morphTargetInfluences except for the keys in which\r\n\t\t\t\t// the morphTarget is named.\r\n\t\t\t\tfor ( var morphTargetName in morphTargetNames ) {\r\n\r\n\t\t\t\t\tvar times = [];\r\n\t\t\t\t\tvar values = [];\r\n\r\n\t\t\t\t\tfor ( var m = 0;\r\n\t\t\t\t\t\t\tm !== animationKeys[k].morphTargets.length; ++ m ) {\r\n\r\n\t\t\t\t\t\tvar animationKey = animationKeys[k];\r\n\r\n\t\t\t\t\t\ttimes.push( animationKey.time );\r\n\t\t\t\t\t\tvalues.push( ( animationKey.morphTarget === morphTargetName ) ? 1 : 0 );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttracks.push( new THREE.NumberKeyframeTrack(\r\n\t\t\t\t\t\t\t'.morphTargetInfluence[' + morphTargetName + ']', times, values ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tduration = morphTargetNames.length * ( fps || 1.0 );\r\n\r\n\t\t\t} else {\r\n\t\t\t\t// ...assume skeletal animation\r\n\r\n\t\t\t\tvar boneName = '.bones[' + bones[ h ].name + ']';\r\n\r\n\t\t\t\taddNonemptyTrack(\r\n\t\t\t\t\t\tTHREE.VectorKeyframeTrack, boneName + '.position',\r\n\t\t\t\t\t\tanimationKeys, 'pos', tracks );\r\n\r\n\t\t\t\taddNonemptyTrack(\r\n\t\t\t\t\t\tTHREE.QuaternionKeyframeTrack, boneName + '.quaternion',\r\n\t\t\t\t\t\tanimationKeys, 'rot', tracks );\r\n\r\n\t\t\t\taddNonemptyTrack(\r\n\t\t\t\t\t\tTHREE.VectorKeyframeTrack, boneName + '.scale',\r\n\t\t\t\t\t\tanimationKeys, 'scl', tracks );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( tracks.length === 0 ) {\r\n\r\n\t\t\treturn null;\r\n\r\n\t\t}\r\n\r\n\t\tvar clip = new THREE.AnimationClip( clipName, duration, tracks );\r\n\r\n\t\treturn clip;\r\n\r\n\t}\r\n\r\n} );\r\n\r\n// File:src/animation/AnimationMixer.js\r\n\r\n/**\r\n *\r\n * Player for AnimationClips.\r\n *\r\n *\r\n * @author Ben Houston / http://clara.io/\r\n * @author David Sarno / http://lighthaus.us/\r\n * @author tschw\r\n */\r\n\r\nTHREE.AnimationMixer = function( root ) {\r\n\r\n\tthis._root = root;\r\n\tthis._initMemoryManager();\r\n\tthis._accuIndex = 0;\r\n\r\n\tthis.time = 0;\r\n\r\n\tthis.timeScale = 1.0;\r\n\r\n};\r\n\r\nObject.assign( THREE.AnimationMixer.prototype, THREE.EventDispatcher.prototype, {\r\n\r\n\t// return an action for a clip optionally using a custom root target\r\n\t// object (this method allocates a lot of dynamic memory in case a\r\n\t// previously unknown clip/root combination is specified)\r\n\tclipAction: function( clip, optionalRoot ) {\r\n\r\n\t\tvar root = optionalRoot || this._root,\r\n\t\t\trootUuid = root.uuid,\r\n\r\n\t\t\tclipObject = typeof clip === 'string' ?\r\n\t\t\t\t\tTHREE.AnimationClip.findByName( root, clip ) : clip,\r\n\r\n\t\t\tclipUuid = clipObject !== null ? clipObject.uuid : clip,\r\n\r\n\t\t\tactionsForClip = this._actionsByClip[ clipUuid ],\r\n\t\t\tprototypeAction = null;\r\n\r\n\t\tif ( actionsForClip !== undefined ) {\r\n\r\n\t\t\tvar existingAction =\r\n\t\t\t\t\tactionsForClip.actionByRoot[ rootUuid ];\r\n\r\n\t\t\tif ( existingAction !== undefined ) {\r\n\r\n\t\t\t\treturn existingAction;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// we know the clip, so we don't have to parse all\r\n\t\t\t// the bindings again but can just copy\r\n\t\t\tprototypeAction = actionsForClip.knownActions[ 0 ];\r\n\r\n\t\t\t// also, take the clip from the prototype action\r\n\t\t\tif ( clipObject === null )\r\n\t\t\t\tclipObject = prototypeAction._clip;\r\n\r\n\t\t}\r\n\r\n\t\t// clip must be known when specified via string\r\n\t\tif ( clipObject === null ) return null;\r\n\r\n\t\t// allocate all resources required to run it\r\n\t\tvar newAction = new THREE.\r\n\t\t\t\tAnimationMixer._Action( this, clipObject, optionalRoot );\r\n\r\n\t\tthis._bindAction( newAction, prototypeAction );\r\n\r\n\t\t// and make the action known to the memory manager\r\n\t\tthis._addInactiveAction( newAction, clipUuid, rootUuid );\r\n\r\n\t\treturn newAction;\r\n\r\n\t},\r\n\r\n\t// get an existing action\r\n\texistingAction: function( clip, optionalRoot ) {\r\n\r\n\t\tvar root = optionalRoot || this._root,\r\n\t\t\trootUuid = root.uuid,\r\n\r\n\t\t\tclipObject = typeof clip === 'string' ?\r\n\t\t\t\t\tTHREE.AnimationClip.findByName( root, clip ) : clip,\r\n\r\n\t\t\tclipUuid = clipObject ? clipObject.uuid : clip,\r\n\r\n\t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\r\n\r\n\t\tif ( actionsForClip !== undefined ) {\r\n\r\n\t\t\treturn actionsForClip.actionByRoot[ rootUuid ] || null;\r\n\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\r\n\t},\r\n\r\n\t// deactivates all previously scheduled actions\r\n\tstopAllAction: function() {\r\n\r\n\t\tvar actions = this._actions,\r\n\t\t\tnActions = this._nActiveActions,\r\n\t\t\tbindings = this._bindings,\r\n\t\t\tnBindings = this._nActiveBindings;\r\n\r\n\t\tthis._nActiveActions = 0;\r\n\t\tthis._nActiveBindings = 0;\r\n\r\n\t\tfor ( var i = 0; i !== nActions; ++ i ) {\r\n\r\n\t\t\tactions[ i ].reset();\r\n\r\n\t\t}\r\n\r\n\t\tfor ( var i = 0; i !== nBindings; ++ i ) {\r\n\r\n\t\t\tbindings[ i ].useCount = 0;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\t// advance the time and update apply the animation\r\n\tupdate: function( deltaTime ) {\r\n\r\n\t\tdeltaTime *= this.timeScale;\r\n\r\n\t\tvar actions = this._actions,\r\n\t\t\tnActions = this._nActiveActions,\r\n\r\n\t\t\ttime = this.time += deltaTime,\r\n\t\t\ttimeDirection = Math.sign( deltaTime ),\r\n\r\n\t\t\taccuIndex = this._accuIndex ^= 1;\r\n\r\n\t\t// run active actions\r\n\r\n\t\tfor ( var i = 0; i !== nActions; ++ i ) {\r\n\r\n\t\t\tvar action = actions[ i ];\r\n\r\n\t\t\tif ( action.enabled ) {\r\n\r\n\t\t\t\taction._update( time, deltaTime, timeDirection, accuIndex );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// update scene graph\r\n\r\n\t\tvar bindings = this._bindings,\r\n\t\t\tnBindings = this._nActiveBindings;\r\n\r\n\t\tfor ( var i = 0; i !== nBindings; ++ i ) {\r\n\r\n\t\t\tbindings[ i ].apply( accuIndex );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\t// return this mixer's root target object\r\n\tgetRoot: function() {\r\n\r\n\t\treturn this._root;\r\n\r\n\t},\r\n\r\n\t// free all resources specific to a particular clip\r\n\tuncacheClip: function( clip ) {\r\n\r\n\t\tvar actions = this._actions,\r\n\t\t\tclipUuid = clip.uuid,\r\n\t\t\tactionsByClip = this._actionsByClip,\r\n\t\t\tactionsForClip = actionsByClip[ clipUuid ];\r\n\r\n\t\tif ( actionsForClip !== undefined ) {\r\n\r\n\t\t\t// note: just calling _removeInactiveAction would mess up the\r\n\t\t\t// iteration state and also require updating the state we can\r\n\t\t\t// just throw away\r\n\r\n\t\t\tvar actionsToRemove = actionsForClip.knownActions;\r\n\r\n\t\t\tfor ( var i = 0, n = actionsToRemove.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\tvar action = actionsToRemove[ i ];\r\n\r\n\t\t\t\tthis._deactivateAction( action );\r\n\r\n\t\t\t\tvar cacheIndex = action._cacheIndex,\r\n\t\t\t\t\tlastInactiveAction = actions[ actions.length - 1 ];\r\n\r\n\t\t\t\taction._cacheIndex = null;\r\n\t\t\t\taction._byClipCacheIndex = null;\r\n\r\n\t\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\r\n\t\t\t\tactions[ cacheIndex ] = lastInactiveAction;\r\n\t\t\t\tactions.pop();\r\n\r\n\t\t\t\tthis._removeInactiveBindingsForAction( action );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tdelete actionsByClip[ clipUuid ];\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\t// free all resources specific to a particular root target object\r\n\tuncacheRoot: function( root ) {\r\n\r\n\t\tvar rootUuid = root.uuid,\r\n\t\t\tactionsByClip = this._actionsByClip;\r\n\r\n\t\tfor ( var clipUuid in actionsByClip ) {\r\n\r\n\t\t\tvar actionByRoot = actionsByClip[ clipUuid ].actionByRoot,\r\n\t\t\t\taction = actionByRoot[ rootUuid ];\r\n\r\n\t\t\tif ( action !== undefined ) {\r\n\r\n\t\t\t\tthis._deactivateAction( action );\r\n\t\t\t\tthis._removeInactiveAction( action );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tvar bindingsByRoot = this._bindingsByRootAndName,\r\n\t\t\tbindingByName = bindingsByRoot[ rootUuid ];\r\n\r\n\t\tif ( bindingByName !== undefined ) {\r\n\r\n\t\t\tfor ( var trackName in bindingByName ) {\r\n\r\n\t\t\t\tvar binding = bindingByName[ trackName ];\r\n\t\t\t\tbinding.restoreOriginalState();\r\n\t\t\t\tthis._removeInactiveBinding( binding );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\t// remove a targeted clip from the cache\r\n\tuncacheAction: function( clip, optionalRoot ) {\r\n\r\n\t\tvar action = this.existingAction( clip, optionalRoot );\r\n\r\n\t\tif ( action !== null ) {\r\n\r\n\t\t\tthis._deactivateAction( action );\r\n\t\t\tthis._removeInactiveAction( action );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n} );\r\n\r\nTHREE.AnimationMixer._Action = THREE.AnimationAction._new;\r\n\r\n// Implementation details:\r\n\r\nObject.assign( THREE.AnimationMixer.prototype, {\r\n\r\n\t_bindAction: function( action, prototypeAction ) {\r\n\r\n\t\tvar root = action._localRoot || this._root,\r\n\t\t\ttracks = action._clip.tracks,\r\n\t\t\tnTracks = tracks.length,\r\n\t\t\tbindings = action._propertyBindings,\r\n\t\t\tinterpolants = action._interpolants,\r\n\t\t\trootUuid = root.uuid,\r\n\t\t\tbindingsByRoot = this._bindingsByRootAndName,\r\n\t\t\tbindingsByName = bindingsByRoot[ rootUuid ];\r\n\r\n\t\tif ( bindingsByName === undefined ) {\r\n\r\n\t\t\tbindingsByName = {};\r\n\t\t\tbindingsByRoot[ rootUuid ] = bindingsByName;\r\n\r\n\t\t}\r\n\r\n\t\tfor ( var i = 0; i !== nTracks; ++ i ) {\r\n\r\n\t\t\tvar track = tracks[ i ],\r\n\t\t\t\ttrackName = track.name,\r\n\t\t\t\tbinding = bindingsByName[ trackName ];\r\n\r\n\t\t\tif ( binding !== undefined ) {\r\n\r\n\t\t\t\tbindings[ i ] = binding;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tbinding = bindings[ i ];\r\n\r\n\t\t\t\tif ( binding !== undefined ) {\r\n\r\n\t\t\t\t\t// existing binding, make sure the cache knows\r\n\r\n\t\t\t\t\tif ( binding._cacheIndex === null ) {\r\n\r\n\t\t\t\t\t\t++ binding.referenceCount;\r\n\t\t\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar path = prototypeAction && prototypeAction.\r\n\t\t\t\t\t\t_propertyBindings[ i ].binding.parsedPath;\r\n\r\n\t\t\t\tbinding = new THREE.PropertyMixer(\r\n\t\t\t\t\t\tTHREE.PropertyBinding.create( root, trackName, path ),\r\n\t\t\t\t\t\ttrack.ValueTypeName, track.getValueSize() );\r\n\r\n\t\t\t\t++ binding.referenceCount;\r\n\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\r\n\r\n\t\t\t\tbindings[ i ] = binding;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tinterpolants[ i ].resultBuffer = binding.buffer;\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\t_activateAction: function( action ) {\r\n\r\n\t\tif ( ! this._isActiveAction( action ) ) {\r\n\r\n\t\t\tif ( action._cacheIndex === null ) {\r\n\r\n\t\t\t\t// this action has been forgotten by the cache, but the user\r\n\t\t\t\t// appears to be still using it -> rebind\r\n\r\n\t\t\t\tvar rootUuid = ( action._localRoot || this._root ).uuid,\r\n\t\t\t\t\tclipUuid = action._clip.uuid,\r\n\t\t\t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\r\n\r\n\t\t\t\tthis._bindAction( action,\r\n\t\t\t\t\t\tactionsForClip && actionsForClip.knownActions[ 0 ] );\r\n\r\n\t\t\t\tthis._addInactiveAction( action, clipUuid, rootUuid );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar bindings = action._propertyBindings;\r\n\r\n\t\t\t// increment reference counts / sort out state\r\n\t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\tvar binding = bindings[ i ];\r\n\r\n\t\t\t\tif ( binding.useCount ++ === 0 ) {\r\n\r\n\t\t\t\t\tthis._lendBinding( binding );\r\n\t\t\t\t\tbinding.saveOriginalState();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis._lendAction( action );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\t_deactivateAction: function( action ) {\r\n\r\n\t\tif ( this._isActiveAction( action ) ) {\r\n\r\n\t\t\tvar bindings = action._propertyBindings;\r\n\r\n\t\t\t// decrement reference counts / sort out state\r\n\t\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\tvar binding = bindings[ i ];\r\n\r\n\t\t\t\tif ( -- binding.useCount === 0 ) {\r\n\r\n\t\t\t\t\tbinding.restoreOriginalState();\r\n\t\t\t\t\tthis._takeBackBinding( binding );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis._takeBackAction( action );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\t// Memory manager\r\n\r\n\t_initMemoryManager: function() {\r\n\r\n\t\tthis._actions = []; // 'nActiveActions' followed by inactive ones\r\n\t\tthis._nActiveActions = 0;\r\n\r\n\t\tthis._actionsByClip = {};\r\n\t\t// inside:\r\n\t\t// {\r\n\t\t// \t\tknownActions: Array< _Action >\t- used as prototypes\r\n\t\t// \t\tactionByRoot: _Action\t\t\t- lookup\r\n\t\t// }\r\n\r\n\r\n\t\tthis._bindings = []; // 'nActiveBindings' followed by inactive ones\r\n\t\tthis._nActiveBindings = 0;\r\n\r\n\t\tthis._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >\r\n\r\n\r\n\t\tthis._controlInterpolants = []; // same game as above\r\n\t\tthis._nActiveControlInterpolants = 0;\r\n\r\n\t\tvar scope = this;\r\n\r\n\t\tthis.stats = {\r\n\r\n\t\t\tactions: {\r\n\t\t\t\tget total() { return scope._actions.length; },\r\n\t\t\t\tget inUse() { return scope._nActiveActions; }\r\n\t\t\t},\r\n\t\t\tbindings: {\r\n\t\t\t\tget total() { return scope._bindings.length; },\r\n\t\t\t\tget inUse() { return scope._nActiveBindings; }\r\n\t\t\t},\r\n\t\t\tcontrolInterpolants: {\r\n\t\t\t\tget total() { return scope._controlInterpolants.length; },\r\n\t\t\t\tget inUse() { return scope._nActiveControlInterpolants; }\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t},\r\n\r\n\t// Memory management for _Action objects\r\n\r\n\t_isActiveAction: function( action ) {\r\n\r\n\t\tvar index = action._cacheIndex;\r\n\t\treturn index !== null && index < this._nActiveActions;\r\n\r\n\t},\r\n\r\n\t_addInactiveAction: function( action, clipUuid, rootUuid ) {\r\n\r\n\t\tvar actions = this._actions,\r\n\t\t\tactionsByClip = this._actionsByClip,\r\n\t\t\tactionsForClip = actionsByClip[ clipUuid ];\r\n\r\n\t\tif ( actionsForClip === undefined ) {\r\n\r\n\t\t\tactionsForClip = {\r\n\r\n\t\t\t\tknownActions: [ action ],\r\n\t\t\t\tactionByRoot: {}\r\n\r\n\t\t\t};\r\n\r\n\t\t\taction._byClipCacheIndex = 0;\r\n\r\n\t\t\tactionsByClip[ clipUuid ] = actionsForClip;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tvar knownActions = actionsForClip.knownActions;\r\n\r\n\t\t\taction._byClipCacheIndex = knownActions.length;\r\n\t\t\tknownActions.push( action );\r\n\r\n\t\t}\r\n\r\n\t\taction._cacheIndex = actions.length;\r\n\t\tactions.push( action );\r\n\r\n\t\tactionsForClip.actionByRoot[ rootUuid ] = action;\r\n\r\n\t},\r\n\r\n\t_removeInactiveAction: function( action ) {\r\n\r\n\t\tvar actions = this._actions,\r\n\t\t\tlastInactiveAction = actions[ actions.length - 1 ],\r\n\t\t\tcacheIndex = action._cacheIndex;\r\n\r\n\t\tlastInactiveAction._cacheIndex = cacheIndex;\r\n\t\tactions[ cacheIndex ] = lastInactiveAction;\r\n\t\tactions.pop();\r\n\r\n\t\taction._cacheIndex = null;\r\n\r\n\r\n\t\tvar clipUuid = action._clip.uuid,\r\n\t\t\tactionsByClip = this._actionsByClip,\r\n\t\t\tactionsForClip = actionsByClip[ clipUuid ],\r\n\t\t\tknownActionsForClip = actionsForClip.knownActions,\r\n\r\n\t\t\tlastKnownAction =\r\n\t\t\t\tknownActionsForClip[ knownActionsForClip.length - 1 ],\r\n\r\n\t\t\tbyClipCacheIndex = action._byClipCacheIndex;\r\n\r\n\t\tlastKnownAction._byClipCacheIndex = byClipCacheIndex;\r\n\t\tknownActionsForClip[ byClipCacheIndex ] = lastKnownAction;\r\n\t\tknownActionsForClip.pop();\r\n\r\n\t\taction._byClipCacheIndex = null;\r\n\r\n\r\n\t\tvar actionByRoot = actionsForClip.actionByRoot,\r\n\t\t\trootUuid = ( actions._localRoot || this._root ).uuid;\r\n\r\n\t\tdelete actionByRoot[ rootUuid ];\r\n\r\n\t\tif ( knownActionsForClip.length === 0 ) {\r\n\r\n\t\t\tdelete actionsByClip[ clipUuid ];\r\n\r\n\t\t}\r\n\r\n\t\tthis._removeInactiveBindingsForAction( action );\r\n\r\n\t},\r\n\r\n\t_removeInactiveBindingsForAction: function( action ) {\r\n\r\n\t\tvar bindings = action._propertyBindings;\r\n\t\tfor ( var i = 0, n = bindings.length; i !== n; ++ i ) {\r\n\r\n\t\t\tvar binding = bindings[ i ];\r\n\r\n\t\t\tif ( -- binding.referenceCount === 0 ) {\r\n\r\n\t\t\t\tthis._removeInactiveBinding( binding );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\t_lendAction: function( action ) {\r\n\r\n\t\t// [ active actions |  inactive actions  ]\r\n\t\t// [  active actions >| inactive actions ]\r\n\t\t//                 s        a\r\n\t\t//                  <-swap->\r\n\t\t//                 a        s\r\n\r\n\t\tvar actions = this._actions,\r\n\t\t\tprevIndex = action._cacheIndex,\r\n\r\n\t\t\tlastActiveIndex = this._nActiveActions ++,\r\n\r\n\t\t\tfirstInactiveAction = actions[ lastActiveIndex ];\r\n\r\n\t\taction._cacheIndex = lastActiveIndex;\r\n\t\tactions[ lastActiveIndex ] = action;\r\n\r\n\t\tfirstInactiveAction._cacheIndex = prevIndex;\r\n\t\tactions[ prevIndex ] = firstInactiveAction;\r\n\r\n\t},\r\n\r\n\t_takeBackAction: function( action ) {\r\n\r\n\t\t// [  active actions  | inactive actions ]\r\n\t\t// [ active actions |< inactive actions  ]\r\n\t\t//        a        s\r\n\t\t//         <-swap->\r\n\t\t//        s        a\r\n\r\n\t\tvar actions = this._actions,\r\n\t\t\tprevIndex = action._cacheIndex,\r\n\r\n\t\t\tfirstInactiveIndex = -- this._nActiveActions,\r\n\r\n\t\t\tlastActiveAction = actions[ firstInactiveIndex ];\r\n\r\n\t\taction._cacheIndex = firstInactiveIndex;\r\n\t\tactions[ firstInactiveIndex ] = action;\r\n\r\n\t\tlastActiveAction._cacheIndex = prevIndex;\r\n\t\tactions[ prevIndex ] = lastActiveAction;\r\n\r\n\t},\r\n\r\n\t// Memory management for PropertyMixer objects\r\n\r\n\t_addInactiveBinding: function( binding, rootUuid, trackName ) {\r\n\r\n\t\tvar bindingsByRoot = this._bindingsByRootAndName,\r\n\t\t\tbindingByName = bindingsByRoot[ rootUuid ],\r\n\r\n\t\t\tbindings = this._bindings;\r\n\r\n\t\tif ( bindingByName === undefined ) {\r\n\r\n\t\t\tbindingByName = {};\r\n\t\t\tbindingsByRoot[ rootUuid ] = bindingByName;\r\n\r\n\t\t}\r\n\r\n\t\tbindingByName[ trackName ] = binding;\r\n\r\n\t\tbinding._cacheIndex = bindings.length;\r\n\t\tbindings.push( binding );\r\n\r\n\t},\r\n\r\n\t_removeInactiveBinding: function( binding ) {\r\n\r\n\t\tvar bindings = this._bindings,\r\n\t\t\tpropBinding = binding.binding,\r\n\t\t\trootUuid = propBinding.rootNode.uuid,\r\n\t\t\ttrackName = propBinding.path,\r\n\t\t\tbindingsByRoot = this._bindingsByRootAndName,\r\n\t\t\tbindingByName = bindingsByRoot[ rootUuid ],\r\n\r\n\t\t\tlastInactiveBinding = bindings[ bindings.length - 1 ],\r\n\t\t\tcacheIndex = binding._cacheIndex;\r\n\r\n\t\tlastInactiveBinding._cacheIndex = cacheIndex;\r\n\t\tbindings[ cacheIndex ] = lastInactiveBinding;\r\n\t\tbindings.pop();\r\n\r\n\t\tdelete bindingByName[ trackName ];\r\n\r\n\t\tremove_empty_map: {\r\n\r\n\t\t\tfor ( var _ in bindingByName ) break remove_empty_map;\r\n\r\n\t\t\tdelete bindingsByRoot[ rootUuid ];\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\t_lendBinding: function( binding ) {\r\n\r\n\t\tvar bindings = this._bindings,\r\n\t\t\tprevIndex = binding._cacheIndex,\r\n\r\n\t\t\tlastActiveIndex = this._nActiveBindings ++,\r\n\r\n\t\t\tfirstInactiveBinding = bindings[ lastActiveIndex ];\r\n\r\n\t\tbinding._cacheIndex = lastActiveIndex;\r\n\t\tbindings[ lastActiveIndex ] = binding;\r\n\r\n\t\tfirstInactiveBinding._cacheIndex = prevIndex;\r\n\t\tbindings[ prevIndex ] = firstInactiveBinding;\r\n\r\n\t},\r\n\r\n\t_takeBackBinding: function( binding ) {\r\n\r\n\t\tvar bindings = this._bindings,\r\n\t\t\tprevIndex = binding._cacheIndex,\r\n\r\n\t\t\tfirstInactiveIndex = -- this._nActiveBindings,\r\n\r\n\t\t\tlastActiveBinding = bindings[ firstInactiveIndex ];\r\n\r\n\t\tbinding._cacheIndex = firstInactiveIndex;\r\n\t\tbindings[ firstInactiveIndex ] = binding;\r\n\r\n\t\tlastActiveBinding._cacheIndex = prevIndex;\r\n\t\tbindings[ prevIndex ] = lastActiveBinding;\r\n\r\n\t},\r\n\r\n\r\n\t// Memory management of Interpolants for weight and time scale\r\n\r\n\t_lendControlInterpolant: function() {\r\n\r\n\t\tvar interpolants = this._controlInterpolants,\r\n\t\t\tlastActiveIndex = this._nActiveControlInterpolants ++,\r\n\t\t\tinterpolant = interpolants[ lastActiveIndex ];\r\n\r\n\t\tif ( interpolant === undefined ) {\r\n\r\n\t\t\tinterpolant = new THREE.LinearInterpolant(\r\n\t\t\t\t\tnew Float32Array( 2 ), new Float32Array( 2 ),\r\n\t\t\t\t\t\t1, this._controlInterpolantsResultBuffer );\r\n\r\n\t\t\tinterpolant.__cacheIndex = lastActiveIndex;\r\n\t\t\tinterpolants[ lastActiveIndex ] = interpolant;\r\n\r\n\t\t}\r\n\r\n\t\treturn interpolant;\r\n\r\n\t},\r\n\r\n\t_takeBackControlInterpolant: function( interpolant ) {\r\n\r\n\t\tvar interpolants = this._controlInterpolants,\r\n\t\t\tprevIndex = interpolant.__cacheIndex,\r\n\r\n\t\t\tfirstInactiveIndex = -- this._nActiveControlInterpolants,\r\n\r\n\t\t\tlastActiveInterpolant = interpolants[ firstInactiveIndex ];\r\n\r\n\t\tinterpolant.__cacheIndex = firstInactiveIndex;\r\n\t\tinterpolants[ firstInactiveIndex ] = interpolant;\r\n\r\n\t\tlastActiveInterpolant.__cacheIndex = prevIndex;\r\n\t\tinterpolants[ prevIndex ] = lastActiveInterpolant;\r\n\r\n\t},\r\n\r\n\t_controlInterpolantsResultBuffer: new Float32Array( 1 )\r\n\r\n} );\r\n\r\n// File:src/animation/AnimationObjectGroup.js\r\n\r\n/**\r\n *\r\n * A group of objects that receives a shared animation state.\r\n *\r\n * Usage:\r\n *\r\n * \t-\tAdd objects you would otherwise pass as 'root' to the\r\n * \t\tconstructor or the .clipAction method of AnimationMixer.\r\n *\r\n * \t-\tInstead pass this object as 'root'.\r\n *\r\n * \t-\tYou can also add and remove objects later when the mixer\r\n * \t\tis running.\r\n *\r\n * Note:\r\n *\r\n *  \tObjects of this class appear as one object to the mixer,\r\n *  \tso cache control of the individual objects must be done\r\n *  \ton the group.\r\n *\r\n * Limitation:\r\n *\r\n * \t- \tThe animated properties must be compatible among the\r\n * \t\tall objects in the group.\r\n *\r\n *  -\tA single property can either be controlled through a\r\n *  \ttarget group or directly, but not both.\r\n *\r\n * @author tschw\r\n */\r\n\r\nTHREE.AnimationObjectGroup = function( var_args ) {\r\n\r\n\tthis.uuid = THREE.Math.generateUUID();\r\n\r\n\t// cached objects followed by the active ones\r\n\tthis._objects = Array.prototype.slice.call( arguments );\r\n\r\n\tthis.nCachedObjects_ = 0;\t\t\t// threshold\r\n\t// note: read by PropertyBinding.Composite\r\n\r\n\tvar indices = {};\r\n\tthis._indicesByUUID = indices;\t\t// for bookkeeping\r\n\r\n\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\r\n\r\n\t\tindices[ arguments[ i ].uuid ] = i;\r\n\r\n\t}\r\n\r\n\tthis._paths = [];\t\t\t\t\t// inside: string\r\n\tthis._parsedPaths = [];\t\t\t\t// inside: { we don't care, here }\r\n\tthis._bindings = []; \t\t\t\t// inside: Array< PropertyBinding >\r\n\tthis._bindingsIndicesByPath = {}; \t// inside: indices in these arrays\r\n\r\n\tvar scope = this;\r\n\r\n\tthis.stats = {\r\n\r\n\t\tobjects: {\r\n\t\t\tget total() { return scope._objects.length; },\r\n\t\t\tget inUse() { return this.total - scope.nCachedObjects_;  }\r\n\t\t},\r\n\r\n\t\tget bindingsPerObject() { return scope._bindings.length; }\r\n\r\n\t};\r\n\r\n};\r\n\r\nTHREE.AnimationObjectGroup.prototype = {\r\n\r\n\tconstructor: THREE.AnimationObjectGroup,\r\n\r\n\tadd: function( var_args ) {\r\n\r\n\t\tvar objects = this._objects,\r\n\t\t\tnObjects = objects.length,\r\n\t\t\tnCachedObjects = this.nCachedObjects_,\r\n\t\t\tindicesByUUID = this._indicesByUUID,\r\n\t\t\tpaths = this._paths,\r\n\t\t\tparsedPaths = this._parsedPaths,\r\n\t\t\tbindings = this._bindings,\r\n\t\t\tnBindings = bindings.length;\r\n\r\n\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\r\n\r\n\t\t\tvar object = arguments[ i ],\r\n\t\t\t\tuuid = object.uuid,\r\n\t\t\t\tindex = indicesByUUID[ uuid ];\r\n\r\n\t\t\tif ( index === undefined ) {\r\n\r\n\t\t\t\t// unknown object -> add it to the ACTIVE region\r\n\r\n\t\t\t\tindex = nObjects ++;\r\n\t\t\t\tindicesByUUID[ uuid ] = index;\r\n\t\t\t\tobjects.push( object );\r\n\r\n\t\t\t\t// accounting is done, now do the same for all bindings\r\n\r\n\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\r\n\r\n\t\t\t\t\tbindings[ j ].push(\r\n\t\t\t\t\t\t\tnew THREE.PropertyBinding(\r\n\t\t\t\t\t\t\t\tobject, paths[ j ], parsedPaths[ j ] ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( index < nCachedObjects ) {\r\n\r\n\t\t\t\tvar knownObject = objects[ index ];\r\n\r\n\t\t\t\t// move existing object to the ACTIVE region\r\n\r\n\t\t\t\tvar firstActiveIndex = -- nCachedObjects,\r\n\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ];\r\n\r\n\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\r\n\t\t\t\tobjects[ index ] = lastCachedObject;\r\n\r\n\t\t\t\tindicesByUUID[ uuid ] = firstActiveIndex;\r\n\t\t\t\tobjects[ firstActiveIndex ] = object;\r\n\r\n\t\t\t\t// accounting is done, now do the same for all bindings\r\n\r\n\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\r\n\r\n\t\t\t\t\tvar bindingsForPath = bindings[ j ],\r\n\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ],\r\n\t\t\t\t\t\tbinding = bindingsForPath[ index ];\r\n\r\n\t\t\t\t\tbindingsForPath[ index ] = lastCached;\r\n\r\n\t\t\t\t\tif ( binding === undefined ) {\r\n\r\n\t\t\t\t\t\t// since we do not bother to create new bindings\r\n\t\t\t\t\t\t// for objects that are cached, the binding may\r\n\t\t\t\t\t\t// or may not exist\r\n\r\n\t\t\t\t\t\tbinding = new THREE.PropertyBinding(\r\n\t\t\t\t\t\t\t\tobject, paths[ j ], parsedPaths[ j ] );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = binding;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( objects[ index ] !== knownObject) {\r\n\r\n\t\t\t\tconsole.error( \"Different objects with the same UUID \" +\r\n\t\t\t\t\t\t\"detected. Clean the caches or recreate your \" +\r\n\t\t\t\t\t\t\"infrastructure when reloading scenes...\" );\r\n\r\n\t\t\t} // else the object is already where we want it to be\r\n\r\n\t\t} // for arguments\r\n\r\n\t\tthis.nCachedObjects_ = nCachedObjects;\r\n\r\n\t},\r\n\r\n\tremove: function( var_args ) {\r\n\r\n\t\tvar objects = this._objects,\r\n\t\t\tnObjects = objects.length,\r\n\t\t\tnCachedObjects = this.nCachedObjects_,\r\n\t\t\tindicesByUUID = this._indicesByUUID,\r\n\t\t\tbindings = this._bindings,\r\n\t\t\tnBindings = bindings.length;\r\n\r\n\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\r\n\r\n\t\t\tvar object = arguments[ i ],\r\n\t\t\t\tuuid = object.uuid,\r\n\t\t\t\tindex = indicesByUUID[ uuid ];\r\n\r\n\t\t\tif ( index !== undefined && index >= nCachedObjects ) {\r\n\r\n\t\t\t\t// move existing object into the CACHED region\r\n\r\n\t\t\t\tvar lastCachedIndex = nCachedObjects ++,\r\n\t\t\t\t\tfirstActiveObject = objects[ lastCachedIndex ];\r\n\r\n\t\t\t\tindicesByUUID[ firstActiveObject.uuid ] = index;\r\n\t\t\t\tobjects[ index ] = firstActiveObject;\r\n\r\n\t\t\t\tindicesByUUID[ uuid ] = lastCachedIndex;\r\n\t\t\t\tobjects[ lastCachedIndex ] = object;\r\n\r\n\t\t\t\t// accounting is done, now do the same for all bindings\r\n\r\n\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\r\n\r\n\t\t\t\t\tvar bindingsForPath = bindings[ j ],\r\n\t\t\t\t\t\tfirstActive = bindingsForPath[ lastCachedIndex ],\r\n\t\t\t\t\t\tbinding = bindingsForPath[ index ];\r\n\r\n\t\t\t\t\tbindingsForPath[ index ] = firstActive;\r\n\t\t\t\t\tbindingsForPath[ lastCachedIndex ] = binding;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} // for arguments\r\n\r\n\t\tthis.nCachedObjects_ = nCachedObjects;\r\n\r\n\t},\r\n\r\n\t// remove & forget\r\n\tuncache: function( var_args ) {\r\n\r\n\t\tvar objects = this._objects,\r\n\t\t\tnObjects = objects.length,\r\n\t\t\tnCachedObjects = this.nCachedObjects_,\r\n\t\t\tindicesByUUID = this._indicesByUUID,\r\n\t\t\tbindings = this._bindings,\r\n\t\t\tnBindings = bindings.length;\r\n\r\n\t\tfor ( var i = 0, n = arguments.length; i !== n; ++ i ) {\r\n\r\n\t\t\tvar object = arguments[ i ],\r\n\t\t\t\tuuid = object.uuid,\r\n\t\t\t\tindex = indicesByUUID[ uuid ];\r\n\r\n\t\t\tif ( index !== undefined ) {\r\n\r\n\t\t\t\tdelete indicesByUUID[ uuid ];\r\n\r\n\t\t\t\tif ( index < nCachedObjects ) {\r\n\r\n\t\t\t\t\t// object is cached, shrink the CACHED region\r\n\r\n\t\t\t\t\tvar firstActiveIndex = -- nCachedObjects,\r\n\t\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ],\r\n\t\t\t\t\t\tlastIndex = -- nObjects,\r\n\t\t\t\t\t\tlastObject = objects[ lastIndex ];\r\n\r\n\t\t\t\t\t// last cached object takes this object's place\r\n\t\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\r\n\t\t\t\t\tobjects[ index ] = lastCachedObject;\r\n\r\n\t\t\t\t\t// last object goes to the activated slot and pop\r\n\t\t\t\t\tindicesByUUID[ lastObject.uuid ] = firstActiveIndex;\r\n\t\t\t\t\tobjects[ firstActiveIndex ] = lastObject;\r\n\t\t\t\t\tobjects.pop();\r\n\r\n\t\t\t\t\t// accounting is done, now do the same for all bindings\r\n\r\n\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\r\n\r\n\t\t\t\t\t\tvar bindingsForPath = bindings[ j ],\r\n\t\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ],\r\n\t\t\t\t\t\t\tlast = bindingsForPath[ lastIndex ];\r\n\r\n\t\t\t\t\t\tbindingsForPath[ index ] = lastCached;\r\n\t\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = last;\r\n\t\t\t\t\t\tbindingsForPath.pop();\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// object is active, just swap with the last and pop\r\n\r\n\t\t\t\t\tvar lastIndex = -- nObjects,\r\n\t\t\t\t\t\tlastObject = objects[ lastIndex ];\r\n\r\n\t\t\t\t\tindicesByUUID[ lastObject.uuid ] = index;\r\n\t\t\t\t\tobjects[ index ] = lastObject;\r\n\t\t\t\t\tobjects.pop();\r\n\r\n\t\t\t\t\t// accounting is done, now do the same for all bindings\r\n\r\n\t\t\t\t\tfor ( var j = 0, m = nBindings; j !== m; ++ j ) {\r\n\r\n\t\t\t\t\t\tvar bindingsForPath = bindings[ j ];\r\n\r\n\t\t\t\t\t\tbindingsForPath[ index ] = bindingsForPath[ lastIndex ];\r\n\t\t\t\t\t\tbindingsForPath.pop();\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} // cached or active\r\n\r\n\t\t\t} // if object is known\r\n\r\n\t\t} // for arguments\r\n\r\n\t\tthis.nCachedObjects_ = nCachedObjects;\r\n\r\n\t},\r\n\r\n\t// Internal interface used by befriended PropertyBinding.Composite:\r\n\r\n\tsubscribe_: function( path, parsedPath ) {\r\n\t\t// returns an array of bindings for the given path that is changed\r\n\t\t// according to the contained objects in the group\r\n\r\n\t\tvar indicesByPath = this._bindingsIndicesByPath,\r\n\t\t\tindex = indicesByPath[ path ],\r\n\t\t\tbindings = this._bindings;\r\n\r\n\t\tif ( index !== undefined ) return bindings[ index ];\r\n\r\n\t\tvar paths = this._paths,\r\n\t\t\tparsedPaths = this._parsedPaths,\r\n\t\t\tobjects = this._objects,\r\n\t\t\tnObjects = objects.length,\r\n\t\t\tnCachedObjects = this.nCachedObjects_,\r\n\t\t\tbindingsForPath = new Array( nObjects );\r\n\r\n\t\tindex = bindings.length;\r\n\r\n\t\tindicesByPath[ path ] = index;\r\n\r\n\t\tpaths.push( path );\r\n\t\tparsedPaths.push( parsedPath );\r\n\t\tbindings.push( bindingsForPath );\r\n\r\n\t\tfor ( var i = nCachedObjects,\r\n\t\t\t\tn = objects.length; i !== n; ++ i ) {\r\n\r\n\t\t\tvar object = objects[ i ];\r\n\r\n\t\t\tbindingsForPath[ i ] =\r\n\t\t\t\t\tnew THREE.PropertyBinding( object, path, parsedPath );\r\n\r\n\t\t}\r\n\r\n\t\treturn bindingsForPath;\r\n\r\n\t},\r\n\r\n\tunsubscribe_: function( path ) {\r\n\t\t// tells the group to forget about a property path and no longer\r\n\t\t// update the array previously obtained with 'subscribe_'\r\n\r\n\t\tvar indicesByPath = this._bindingsIndicesByPath,\r\n\t\t\tindex = indicesByPath[ path ];\r\n\r\n\t\tif ( index !== undefined ) {\r\n\r\n\t\t\tvar paths = this._paths,\r\n\t\t\t\tparsedPaths = this._parsedPaths,\r\n\t\t\t\tbindings = this._bindings,\r\n\t\t\t\tlastBindingsIndex = bindings.length - 1,\r\n\t\t\t\tlastBindings = bindings[ lastBindingsIndex ],\r\n\t\t\t\tlastBindingsPath = path[ lastBindingsIndex ];\r\n\r\n\t\t\tindicesByPath[ lastBindingsPath ] = index;\r\n\r\n\t\t\tbindings[ index ] = lastBindings;\r\n\t\t\tbindings.pop();\r\n\r\n\t\t\tparsedPaths[ index ] = parsedPaths[ lastBindingsIndex ];\r\n\t\t\tparsedPaths.pop();\r\n\r\n\t\t\tpaths[ index ] = paths[ lastBindingsIndex ];\r\n\t\t\tpaths.pop();\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n\r\n\r\n// File:src/animation/AnimationUtils.js\r\n\r\n/**\r\n * @author tschw\r\n * @author Ben Houston / http://clara.io/\r\n * @author David Sarno / http://lighthaus.us/\r\n */\r\n\r\nTHREE.AnimationUtils = {\r\n\r\n\t// same as Array.prototype.slice, but also works on typed arrays\r\n\tarraySlice: function( array, from, to ) {\r\n\r\n\t\tif ( THREE.AnimationUtils.isTypedArray( array ) ) {\r\n\r\n\t\t\treturn new array.constructor( array.subarray( from, to ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn array.slice( from, to );\r\n\r\n\t},\r\n\r\n\t// converts an array to a specific type\r\n\tconvertArray: function( array, type, forceClone ) {\r\n\r\n\t\tif ( ! array || // let 'undefined' and 'null' pass\r\n\t\t\t\t! forceClone && array.constructor === type ) return array;\r\n\r\n\t\tif ( typeof type.BYTES_PER_ELEMENT === 'number' ) {\r\n\r\n\t\t\treturn new type( array ); // create typed array\r\n\r\n\t\t}\r\n\r\n\t\treturn Array.prototype.slice.call( array ); // create Array\r\n\r\n\t},\r\n\r\n\tisTypedArray: function( object ) {\r\n\r\n\t\treturn ArrayBuffer.isView( object ) &&\r\n\t\t\t\t! ( object instanceof DataView );\r\n\r\n\t},\r\n\r\n\t// returns an array by which times and values can be sorted\r\n\tgetKeyframeOrder: function( times ) {\r\n\r\n\t\tfunction compareTime( i, j ) {\r\n\r\n\t\t\treturn times[ i ] - times[ j ];\r\n\r\n\t\t}\r\n\r\n\t\tvar n = times.length;\r\n\t\tvar result = new Array( n );\r\n\t\tfor ( var i = 0; i !== n; ++ i ) result[ i ] = i;\r\n\r\n\t\tresult.sort( compareTime );\r\n\r\n\t\treturn result;\r\n\r\n\t},\r\n\r\n\t// uses the array previously returned by 'getKeyframeOrder' to sort data\r\n\tsortedArray: function( values, stride, order ) {\r\n\r\n\t\tvar nValues = values.length;\r\n\t\tvar result = new values.constructor( nValues );\r\n\r\n\t\tfor ( var i = 0, dstOffset = 0; dstOffset !== nValues; ++ i ) {\r\n\r\n\t\t\tvar srcOffset = order[ i ] * stride;\r\n\r\n\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\r\n\r\n\t\t\t\tresult[ dstOffset ++ ] = values[ srcOffset + j ];\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\r\n\t},\r\n\r\n\t// function for parsing AOS keyframe formats\r\n\tflattenJSON: function( jsonKeys, times, values, valuePropertyName ) {\r\n\r\n\t\tvar i = 1, key = jsonKeys[ 0 ];\r\n\r\n\t\twhile ( key !== undefined && key[ valuePropertyName ] === undefined ) {\r\n\r\n\t\t\tkey = jsonKeys[ i ++ ];\r\n\r\n\t\t}\r\n\r\n\t\tif ( key === undefined ) return; // no data\r\n\r\n\t\tvar value = key[ valuePropertyName ];\r\n\t\tif ( value === undefined ) return; // no data\r\n\r\n\t\tif ( Array.isArray( value ) ) {\r\n\r\n\t\t\tdo {\r\n\r\n\t\t\t\tvalue = key[ valuePropertyName ];\r\n\r\n\t\t\t\tif ( value !== undefined ) {\r\n\r\n\t\t\t\t\ttimes.push( key.time );\r\n\t\t\t\t\tvalues.push.apply( values, value ); // push all elements\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tkey = jsonKeys[ i ++ ];\r\n\r\n\t\t\t} while ( key !== undefined );\r\n\r\n\t\t} else if ( value.toArray !== undefined ) {\r\n\t\t\t// ...assume THREE.Math-ish\r\n\r\n\t\t\tdo {\r\n\r\n\t\t\t\tvalue = key[ valuePropertyName ];\r\n\r\n\t\t\t\tif ( value !== undefined ) {\r\n\r\n\t\t\t\t\ttimes.push( key.time );\r\n\t\t\t\t\tvalue.toArray( values, values.length );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tkey = jsonKeys[ i ++ ];\r\n\r\n\t\t\t} while ( key !== undefined );\r\n\r\n\t\t} else {\r\n\t\t\t// otherwise push as-is\r\n\r\n\t\t\tdo {\r\n\r\n\t\t\t\tvalue = key[ valuePropertyName ];\r\n\r\n\t\t\t\tif ( value !== undefined ) {\r\n\r\n\t\t\t\t\ttimes.push( key.time );\r\n\t\t\t\t\tvalues.push( value );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tkey = jsonKeys[ i ++ ];\r\n\r\n\t\t\t} while ( key !== undefined );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/animation/KeyframeTrack.js\r\n\r\n/**\r\n *\r\n * A timed sequence of keyframes for a specific property.\r\n *\r\n *\r\n * @author Ben Houston / http://clara.io/\r\n * @author David Sarno / http://lighthaus.us/\r\n * @author tschw\r\n */\r\n\r\nTHREE.KeyframeTrack = function ( name, times, values, interpolation ) {\r\n\r\n\tif( name === undefined ) throw new Error( \"track name is undefined\" );\r\n\r\n\tif( times === undefined || times.length === 0 ) {\r\n\r\n\t\tthrow new Error( \"no keyframes in track named \" + name );\r\n\r\n\t}\r\n\r\n\tthis.name = name;\r\n\r\n\tthis.times = THREE.AnimationUtils.convertArray( times, this.TimeBufferType );\r\n\tthis.values = THREE.AnimationUtils.convertArray( values, this.ValueBufferType );\r\n\r\n\tthis.setInterpolation( interpolation || this.DefaultInterpolation );\r\n\r\n\tthis.validate();\r\n\tthis.optimize();\r\n\r\n};\r\n\r\nTHREE.KeyframeTrack.prototype = {\r\n\r\n\tconstructor: THREE.KeyframeTrack,\r\n\r\n\tTimeBufferType: Float32Array,\r\n\tValueBufferType: Float32Array,\r\n\r\n\tDefaultInterpolation: THREE.InterpolateLinear,\r\n\r\n\tInterpolantFactoryMethodDiscrete: function( result ) {\r\n\r\n\t\treturn new THREE.DiscreteInterpolant(\r\n\t\t\t\tthis.times, this.values, this.getValueSize(), result );\r\n\r\n\t},\r\n\r\n\tInterpolantFactoryMethodLinear: function( result ) {\r\n\r\n\t\treturn new THREE.LinearInterpolant(\r\n\t\t\t\tthis.times, this.values, this.getValueSize(), result );\r\n\r\n\t},\r\n\r\n\tInterpolantFactoryMethodSmooth: function( result ) {\r\n\r\n\t\treturn new THREE.CubicInterpolant(\r\n\t\t\t\tthis.times, this.values, this.getValueSize(), result );\r\n\r\n\t},\r\n\r\n\tsetInterpolation: function( interpolation ) {\r\n\r\n\t\tvar factoryMethod;\r\n\r\n\t\tswitch ( interpolation ) {\r\n\r\n\t\t\tcase THREE.InterpolateDiscrete:\r\n\r\n\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodDiscrete;\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase THREE.InterpolateLinear:\r\n\r\n\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodLinear;\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase THREE.InterpolateSmooth:\r\n\r\n\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodSmooth;\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t}\r\n\r\n\t\tif ( factoryMethod === undefined ) {\r\n\r\n\t\t\tvar message = \"unsupported interpolation for \" +\r\n\t\t\t\t\tthis.ValueTypeName + \" keyframe track named \" + this.name;\r\n\r\n\t\t\tif ( this.createInterpolant === undefined ) {\r\n\r\n\t\t\t\t// fall back to default, unless the default itself is messed up\r\n\t\t\t\tif ( interpolation !== this.DefaultInterpolation ) {\r\n\r\n\t\t\t\t\tthis.setInterpolation( this.DefaultInterpolation );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tthrow new Error( message ); // fatal, in this case\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconsole.warn( message );\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tthis.createInterpolant = factoryMethod;\r\n\r\n\t},\r\n\r\n\tgetInterpolation: function() {\r\n\r\n\t\tswitch ( this.createInterpolant ) {\r\n\r\n\t\t\tcase this.InterpolantFactoryMethodDiscrete:\r\n\r\n\t\t\t\treturn THREE.InterpolateDiscrete;\r\n\r\n\t\t\tcase this.InterpolantFactoryMethodLinear:\r\n\r\n\t\t\t\treturn THREE.InterpolateLinear;\r\n\r\n\t\t\tcase this.InterpolantFactoryMethodSmooth:\r\n\r\n\t\t\t\treturn THREE.InterpolateSmooth;\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tgetValueSize: function() {\r\n\r\n\t\treturn this.values.length / this.times.length;\r\n\r\n\t},\r\n\r\n\t// move all keyframes either forwards or backwards in time\r\n\tshift: function( timeOffset ) {\r\n\r\n\t\tif( timeOffset !== 0.0 ) {\r\n\r\n\t\t\tvar times = this.times;\r\n\r\n\t\t\tfor( var i = 0, n = times.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\ttimes[ i ] += timeOffset;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\t// scale all keyframe times by a factor (useful for frame <-> seconds conversions)\r\n\tscale: function( timeScale ) {\r\n\r\n\t\tif( timeScale !== 1.0 ) {\r\n\r\n\t\t\tvar times = this.times;\r\n\r\n\t\t\tfor( var i = 0, n = times.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\ttimes[ i ] *= timeScale;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\t// removes keyframes before and after animation without changing any values within the range [startTime, endTime].\r\n\t// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values\r\n\ttrim: function( startTime, endTime ) {\r\n\r\n\t\tvar times = this.times,\r\n\t\t\tnKeys = times.length,\r\n\t\t\tfrom = 0,\r\n\t\t\tto = nKeys - 1;\r\n\r\n\t\twhile ( from !== nKeys && times[ from ] < startTime ) ++ from;\r\n\t\twhile ( to !== -1 && times[ to ] > endTime ) -- to;\r\n\r\n\t\t++ to; // inclusive -> exclusive bound\r\n\r\n\t\tif( from !== 0 || to !== nKeys ) {\r\n\r\n\t\t\t// empty tracks are forbidden, so keep at least one keyframe\r\n\t\t\tif ( from >= to ) to = Math.max( to , 1 ), from = to - 1;\r\n\r\n\t\t\tvar stride = this.getValueSize();\r\n\t\t\tthis.times = THREE.AnimationUtils.arraySlice( times, from, to );\r\n\t\t\tthis.values = THREE.AnimationUtils.\r\n\t\t\t\t\tarraySlice( this.values, from * stride, to * stride );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\t// ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable\r\n\tvalidate: function() {\r\n\r\n\t\tvar valid = true;\r\n\r\n\t\tvar valueSize = this.getValueSize();\r\n\t\tif ( valueSize - Math.floor( valueSize ) !== 0 ) {\r\n\r\n\t\t\tconsole.error( \"invalid value size in track\", this );\r\n\t\t\tvalid = false;\r\n\r\n\t\t}\r\n\r\n\t\tvar times = this.times,\r\n\t\t\tvalues = this.values,\r\n\r\n\t\t\tnKeys = times.length;\r\n\r\n\t\tif( nKeys === 0 ) {\r\n\r\n\t\t\tconsole.error( \"track is empty\", this );\r\n\t\t\tvalid = false;\r\n\r\n\t\t}\r\n\r\n\t\tvar prevTime = null;\r\n\r\n\t\tfor( var i = 0; i !== nKeys; i ++ ) {\r\n\r\n\t\t\tvar currTime = times[ i ];\r\n\r\n\t\t\tif ( typeof currTime === 'number' && isNaN( currTime ) ) {\r\n\r\n\t\t\t\tconsole.error( \"time is not a valid number\", this, i, currTime );\r\n\t\t\t\tvalid = false;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif( prevTime !== null && prevTime > currTime ) {\r\n\r\n\t\t\t\tconsole.error( \"out of order keys\", this, i, currTime, prevTime );\r\n\t\t\t\tvalid = false;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tprevTime = currTime;\r\n\r\n\t\t}\r\n\r\n\t\tif ( values !== undefined ) {\r\n\r\n\t\t\tif ( THREE.AnimationUtils.isTypedArray( values ) ) {\r\n\r\n\t\t\t\tfor ( var i = 0, n = values.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\t\tvar value = values[ i ];\r\n\r\n\t\t\t\t\tif ( isNaN( value ) ) {\r\n\r\n\t\t\t\t\t\tconsole.error( \"value is not a valid number\", this, i, value );\r\n\t\t\t\t\t\tvalid = false;\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn valid;\r\n\r\n\t},\r\n\r\n\t// removes equivalent sequential keys as common in morph target sequences\r\n\t// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)\r\n\toptimize: function() {\r\n\r\n\t\tvar times = this.times,\r\n\t\t\tvalues = this.values,\r\n\t\t\tstride = this.getValueSize(),\r\n\r\n\t\t\twriteIndex = 1;\r\n\r\n\t\tfor( var i = 1, n = times.length - 1; i <= n; ++ i ) {\r\n\r\n\t\t\tvar keep = false;\r\n\r\n\t\t\tvar time = times[ i ];\r\n\t\t\tvar timeNext = times[ i + 1 ];\r\n\r\n\t\t\t// remove adjacent keyframes scheduled at the same time\r\n\r\n\t\t\tif ( time !== timeNext && ( i !== 1 || time !== time[ 0 ] ) ) {\r\n\r\n\t\t\t\t// remove unnecessary keyframes same as their neighbors\r\n\t\t\t\tvar offset = i * stride,\r\n\t\t\t\t\toffsetP = offset - stride,\r\n\t\t\t\t\toffsetN = offset + stride;\r\n\r\n\t\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\r\n\r\n\t\t\t\t\tvar value = values[ offset + j ];\r\n\r\n\t\t\t\t\tif ( value !== values[ offsetP + j ] ||\r\n\t\t\t\t\t\t\tvalue !== values[ offsetN + j ] ) {\r\n\r\n\t\t\t\t\t\tkeep = true;\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// in-place compaction\r\n\r\n\t\t\tif ( keep ) {\r\n\r\n\t\t\t\tif ( i !== writeIndex ) {\r\n\r\n\t\t\t\t\ttimes[ writeIndex ] = times[ i ];\r\n\r\n\t\t\t\t\tvar readOffset = i * stride,\r\n\t\t\t\t\t\twriteOffset = writeIndex * stride;\r\n\r\n\t\t\t\t\tfor ( var j = 0; j !== stride; ++ j ) {\r\n\r\n\t\t\t\t\t\tvalues[ writeOffset + j ] = values[ readOffset + j ];\r\n\r\n\t\t\t\t\t}\r\n\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t++ writeIndex;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( writeIndex !== times.length ) {\r\n\r\n\t\t\tthis.times = THREE.AnimationUtils.arraySlice( times, 0, writeIndex );\r\n\t\t\tthis.values = THREE.AnimationUtils.arraySlice( values, 0, writeIndex * stride );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// Static methods:\r\n\r\nObject.assign( THREE.KeyframeTrack, {\r\n\r\n\t// Serialization (in static context, because of constructor invocation\r\n\t// and automatic invocation of .toJSON):\r\n\r\n\tparse: function( json ) {\r\n\r\n\t\tif( json.type === undefined ) {\r\n\r\n\t\t\tthrow new Error( \"track type undefined, can not parse\" );\r\n\r\n\t\t}\r\n\r\n\t\tvar trackType = THREE.KeyframeTrack._getTrackTypeForValueTypeName( json.type );\r\n\r\n\t\tif ( json.times === undefined ) {\r\n\r\n\t\t\tvar times = [], values = [];\r\n\r\n\t\t\tTHREE.AnimationUtils.flattenJSON( json.keys, times, values, 'value' );\r\n\r\n\t\t\tjson.times = times;\r\n\t\t\tjson.values = values;\r\n\r\n\t\t}\r\n\r\n\t\t// derived classes can define a static parse method\r\n\t\tif ( trackType.parse !== undefined ) {\r\n\r\n\t\t\treturn trackType.parse( json );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// by default, we asssume a constructor compatible with the base\r\n\t\t\treturn new trackType(\r\n\t\t\t\t\tjson.name, json.times, json.values, json.interpolation );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\ttoJSON: function( track ) {\r\n\r\n\t\tvar trackType = track.constructor;\r\n\r\n\t\tvar json;\r\n\r\n\t\t// derived classes can define a static toJSON method\r\n\t\tif ( trackType.toJSON !== undefined ) {\r\n\r\n\t\t\tjson = trackType.toJSON( track );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// by default, we assume the data can be serialized as-is\r\n\t\t\tjson = {\r\n\r\n\t\t\t\t'name': track.name,\r\n\t\t\t\t'times': THREE.AnimationUtils.convertArray( track.times, Array ),\r\n\t\t\t\t'values': THREE.AnimationUtils.convertArray( track.values, Array )\r\n\r\n\t\t\t};\r\n\r\n\t\t\tvar interpolation = track.getInterpolation();\r\n\r\n\t\t\tif ( interpolation !== track.DefaultInterpolation ) {\r\n\r\n\t\t\t\tjson.interpolation = interpolation;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tjson.type = track.ValueTypeName; // mandatory\r\n\r\n\t\treturn json;\r\n\r\n\t},\r\n\r\n\t_getTrackTypeForValueTypeName: function( typeName ) {\r\n\r\n\t\tswitch( typeName.toLowerCase() ) {\r\n\r\n\t\t\tcase \"scalar\":\r\n\t\t\tcase \"double\":\r\n\t\t\tcase \"float\":\r\n\t\t\tcase \"number\":\r\n\t\t\tcase \"integer\":\r\n\r\n\t\t\t\treturn THREE.NumberKeyframeTrack;\r\n\r\n\t\t\tcase \"vector\":\r\n\t\t\tcase \"vector2\":\r\n\t\t\tcase \"vector3\":\r\n\t\t\tcase \"vector4\":\r\n\r\n\t\t\t\treturn THREE.VectorKeyframeTrack;\r\n\r\n\t\t\tcase \"color\":\r\n\r\n\t\t\t\treturn THREE.ColorKeyframeTrack;\r\n\r\n\t\t\tcase \"quaternion\":\r\n\r\n\t\t\t\treturn THREE.QuaternionKeyframeTrack;\r\n\r\n\t\t\tcase \"bool\":\r\n\t\t\tcase \"boolean\":\r\n\r\n\t\t\t\treturn THREE.BooleanKeyframeTrack;\r\n\r\n\t\t\tcase \"string\":\r\n\r\n\t\t\t\treturn THREE.StringKeyframeTrack;\r\n\r\n\t\t}\r\n\r\n\t\tthrow new Error( \"Unsupported typeName: \" + typeName );\r\n\r\n\t}\r\n\r\n} );\r\n\r\n// File:src/animation/PropertyBinding.js\r\n\r\n/**\r\n *\r\n * A reference to a real property in the scene graph.\r\n *\r\n *\r\n * @author Ben Houston / http://clara.io/\r\n * @author David Sarno / http://lighthaus.us/\r\n * @author tschw\r\n */\r\n\r\nTHREE.PropertyBinding = function ( rootNode, path, parsedPath ) {\r\n\r\n\tthis.path = path;\r\n\tthis.parsedPath = parsedPath ||\r\n\t\t\tTHREE.PropertyBinding.parseTrackName( path );\r\n\r\n\tthis.node = THREE.PropertyBinding.findNode(\r\n\t\t\trootNode, this.parsedPath.nodeName ) || rootNode;\r\n\r\n\tthis.rootNode = rootNode;\r\n\r\n};\r\n\r\nTHREE.PropertyBinding.prototype = {\r\n\r\n\tconstructor: THREE.PropertyBinding,\r\n\r\n\tgetValue: function getValue_unbound( targetArray, offset ) {\r\n\r\n\t\tthis.bind();\r\n\t\tthis.getValue( targetArray, offset );\r\n\r\n\t\t// Note: This class uses a State pattern on a per-method basis:\r\n\t\t// 'bind' sets 'this.getValue' / 'setValue' and shadows the\r\n\t\t// prototype version of these methods with one that represents\r\n\t\t// the bound state. When the property is not found, the methods\r\n\t\t// become no-ops.\r\n\r\n\t},\r\n\r\n\tsetValue: function getValue_unbound( sourceArray, offset ) {\r\n\r\n\t\tthis.bind();\r\n\t\tthis.setValue( sourceArray, offset );\r\n\r\n\t},\r\n\r\n\t// create getter / setter pair for a property in the scene graph\r\n\tbind: function() {\r\n\r\n\t\tvar targetObject = this.node,\r\n\t\t\tparsedPath = this.parsedPath,\r\n\r\n\t\t\tobjectName = parsedPath.objectName,\r\n\t\t\tpropertyName = parsedPath.propertyName,\r\n\t\t\tpropertyIndex = parsedPath.propertyIndex;\r\n\r\n\t\tif ( ! targetObject ) {\r\n\r\n\t\t\ttargetObject = THREE.PropertyBinding.findNode(\r\n\t\t\t\t\tthis.rootNode, parsedPath.nodeName ) || this.rootNode;\r\n\r\n\t\t\tthis.node = targetObject;\r\n\r\n\t\t}\r\n\r\n\t\t// set fail state so we can just 'return' on error\r\n\t\tthis.getValue = this._getValue_unavailable;\r\n\t\tthis.setValue = this._setValue_unavailable;\r\n\r\n \t\t// ensure there is a value node\r\n\t\tif ( ! targetObject ) {\r\n\r\n\t\t\tconsole.error( \"  trying to update node for track: \" + this.path + \" but it wasn't found.\" );\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tif( objectName ) {\r\n\r\n\t\t\tvar objectIndex = parsedPath.objectIndex;\r\n\r\n\t\t\t// special cases were we need to reach deeper into the hierarchy to get the face materials....\r\n\t\t\tswitch ( objectName ) {\r\n\r\n\t\t\t\tcase 'materials':\r\n\r\n\t\t\t\t\tif( ! targetObject.material ) {\r\n\r\n\t\t\t\t\t\tconsole.error( '  can not bind to material as node does not have a material', this );\r\n\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif( ! targetObject.material.materials ) {\r\n\r\n\t\t\t\t\t\tconsole.error( '  can not bind to material.materials as node.material does not have a materials array', this );\r\n\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttargetObject = targetObject.material.materials;\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'bones':\r\n\r\n\t\t\t\t\tif( ! targetObject.skeleton ) {\r\n\r\n\t\t\t\t\t\tconsole.error( '  can not bind to bones as node does not have a skeleton', this );\r\n\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// potential future optimization: skip this if propertyIndex is already an integer\r\n\t\t\t\t\t// and convert the integer string to a true integer.\r\n\r\n\t\t\t\t\ttargetObject = targetObject.skeleton.bones;\r\n\r\n\t\t\t\t\t// support resolving morphTarget names into indices.\r\n\t\t\t\t\tfor ( var i = 0; i < targetObject.length; i ++ ) {\r\n\r\n\t\t\t\t\t\tif ( targetObject[i].name === objectIndex ) {\r\n\r\n\t\t\t\t\t\t\tobjectIndex = i;\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tdefault:\r\n\r\n\t\t\t\t\tif ( targetObject[ objectName ] === undefined ) {\r\n\r\n\t\t\t\t\t\tconsole.error( '  can not bind to objectName of node, undefined', this );\r\n\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\ttargetObject = targetObject[ objectName ];\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\tif ( objectIndex !== undefined ) {\r\n\r\n\t\t\t\tif( targetObject[ objectIndex ] === undefined ) {\r\n\r\n\t\t\t\t\tconsole.error( \"  trying to bind to objectIndex of objectName, but is undefined:\", this, targetObject );\r\n\t\t\t\t\treturn;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttargetObject = targetObject[ objectIndex ];\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// resolve property\r\n\t\tvar nodeProperty = targetObject[ propertyName ];\r\n\r\n\t\tif ( ! nodeProperty ) {\r\n\r\n\t\t\tvar nodeName = parsedPath.nodeName;\r\n\r\n\t\t\tconsole.error( \"  trying to update property for track: \" + nodeName +\r\n\t\t\t\t\t'.' + propertyName + \" but it wasn't found.\", targetObject );\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\t// determine versioning scheme\r\n\t\tvar versioning = this.Versioning.None;\r\n\r\n\t\tif ( targetObject.needsUpdate !== undefined ) { // material\r\n\r\n\t\t\tversioning = this.Versioning.NeedsUpdate;\r\n\t\t\tthis.targetObject = targetObject;\r\n\r\n\t\t} else if ( targetObject.matrixWorldNeedsUpdate !== undefined ) { // node transform\r\n\r\n\t\t\tversioning = this.Versioning.MatrixWorldNeedsUpdate;\r\n\t\t\tthis.targetObject = targetObject;\r\n\r\n\t\t}\r\n\r\n\t\t// determine how the property gets bound\r\n\t\tvar bindingType = this.BindingType.Direct;\r\n\r\n\t\tif ( propertyIndex !== undefined ) {\r\n\t\t\t// access a sub element of the property array (only primitives are supported right now)\r\n\r\n\t\t\tif ( propertyName === \"morphTargetInfluences\" ) {\r\n\t\t\t\t// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.\r\n\r\n\t\t\t\t// support resolving morphTarget names into indices.\r\n\t\t\t\tif ( ! targetObject.geometry ) {\r\n\r\n\t\t\t\t\tconsole.error( '  can not bind to morphTargetInfluences becasuse node does not have a geometry', this );\r\n\t\t\t\t\treturn;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( ! targetObject.geometry.morphTargets ) {\r\n\r\n\t\t\t\t\tconsole.error( '  can not bind to morphTargetInfluences becasuse node does not have a geometry.morphTargets', this );\r\n\t\t\t\t\treturn;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor ( var i = 0; i < this.node.geometry.morphTargets.length; i ++ ) {\r\n\r\n\t\t\t\t\tif ( targetObject.geometry.morphTargets[i].name === propertyIndex ) {\r\n\r\n\t\t\t\t\t\tpropertyIndex = i;\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tbindingType = this.BindingType.ArrayElement;\r\n\r\n\t\t\tthis.resolvedProperty = nodeProperty;\r\n\t\t\tthis.propertyIndex = propertyIndex;\r\n\r\n\t\t} else if ( nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined ) {\r\n\t\t\t// must use copy for Object3D.Euler/Quaternion\r\n\r\n\t\t\tbindingType = this.BindingType.HasFromToArray;\r\n\r\n\t\t\tthis.resolvedProperty = nodeProperty;\r\n\r\n\t\t} else if ( nodeProperty.length !== undefined ) {\r\n\r\n\t\t\tbindingType = this.BindingType.EntireArray;\r\n\r\n\t\t\tthis.resolvedProperty = nodeProperty;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.propertyName = propertyName;\r\n\r\n\t\t}\r\n\r\n\t\t// select getter / setter\r\n\t\tthis.getValue = this.GetterByBindingType[ bindingType ];\r\n\t\tthis.setValue = this.SetterByBindingTypeAndVersioning[ bindingType ][ versioning ];\r\n\r\n\t},\r\n\r\n\tunbind: function() {\r\n\r\n\t\tthis.node = null;\r\n\r\n\t\t// back to the prototype version of getValue / setValue\r\n\t\t// note: avoiding to mutate the shape of 'this' via 'delete'\r\n\t\tthis.getValue = this._getValue_unbound;\r\n\t\tthis.setValue = this._setValue_unbound;\r\n\r\n\t}\r\n\r\n};\r\n\r\nObject.assign( THREE.PropertyBinding.prototype, { // prototype, continued\r\n\r\n\t// these are used to \"bind\" a nonexistent property\r\n\t_getValue_unavailable: function() {},\r\n\t_setValue_unavailable: function() {},\r\n\r\n\t// initial state of these methods that calls 'bind'\r\n\t_getValue_unbound: THREE.PropertyBinding.prototype.getValue,\r\n\t_setValue_unbound: THREE.PropertyBinding.prototype.setValue,\r\n\r\n\tBindingType: {\r\n\t\tDirect: 0,\r\n\t\tEntireArray: 1,\r\n\t\tArrayElement: 2,\r\n\t\tHasFromToArray: 3\r\n\t},\r\n\r\n\tVersioning: {\r\n\t\tNone: 0,\r\n\t\tNeedsUpdate: 1,\r\n\t\tMatrixWorldNeedsUpdate: 2\r\n\t},\r\n\r\n\tGetterByBindingType: [\r\n\r\n\t\tfunction getValue_direct( buffer, offset ) {\r\n\r\n\t\t\tbuffer[ offset ] = this.node[ this.propertyName ];\r\n\r\n\t\t},\r\n\r\n\t\tfunction getValue_array( buffer, offset ) {\r\n\r\n\t\t\tvar source = this.resolvedProperty;\r\n\r\n\t\t\tfor ( var i = 0, n = source.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\tbuffer[ offset ++ ] = source[ i ];\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tfunction getValue_arrayElement( buffer, offset ) {\r\n\r\n\t\t\tbuffer[ offset ] = this.resolvedProperty[ this.propertyIndex ];\r\n\r\n\t\t},\r\n\r\n\t\tfunction getValue_toArray( buffer, offset ) {\r\n\r\n\t\t\tthis.resolvedProperty.toArray( buffer, offset );\r\n\r\n\t\t}\r\n\r\n\t],\r\n\r\n\tSetterByBindingTypeAndVersioning: [\r\n\r\n\t\t[\r\n\t\t\t// Direct\r\n\r\n\t\t\tfunction setValue_direct( buffer, offset ) {\r\n\r\n\t\t\t\tthis.node[ this.propertyName ] = buffer[ offset ];\r\n\r\n\t\t\t},\r\n\r\n\t\t\tfunction setValue_direct_setNeedsUpdate( buffer, offset ) {\r\n\r\n\t\t\t\tthis.node[ this.propertyName ] = buffer[ offset ];\r\n\t\t\t\tthis.targetObject.needsUpdate = true;\r\n\r\n\t\t\t},\r\n\r\n\t\t\tfunction setValue_direct_setMatrixWorldNeedsUpdate( buffer, offset ) {\r\n\r\n\t\t\t\tthis.node[ this.propertyName ] = buffer[ offset ];\r\n\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t], [\r\n\r\n\t\t\t// EntireArray\r\n\r\n\t\t\tfunction setValue_array( buffer, offset ) {\r\n\r\n\t\t\t\tvar dest = this.resolvedProperty;\r\n\r\n\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t},\r\n\r\n\t\t\tfunction setValue_array_setNeedsUpdate( buffer, offset ) {\r\n\r\n\t\t\t\tvar dest = this.resolvedProperty;\r\n\r\n\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.targetObject.needsUpdate = true;\r\n\r\n\t\t\t},\r\n\r\n\t\t\tfunction setValue_array_setMatrixWorldNeedsUpdate( buffer, offset ) {\r\n\r\n\t\t\t\tvar dest = this.resolvedProperty;\r\n\r\n\t\t\t\tfor ( var i = 0, n = dest.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\t\tdest[ i ] = buffer[ offset ++ ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t], [\r\n\r\n\t\t\t// ArrayElement\r\n\r\n\t\t\tfunction setValue_arrayElement( buffer, offset ) {\r\n\r\n\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\r\n\r\n\t\t\t},\r\n\r\n\t\t\tfunction setValue_arrayElement_setNeedsUpdate( buffer, offset ) {\r\n\r\n\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\r\n\t\t\t\tthis.targetObject.needsUpdate = true;\r\n\r\n\t\t\t},\r\n\r\n\t\t\tfunction setValue_arrayElement_setMatrixWorldNeedsUpdate( buffer, offset ) {\r\n\r\n\t\t\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\r\n\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t], [\r\n\r\n\t\t\t// HasToFromArray\r\n\r\n\t\t\tfunction setValue_fromArray( buffer, offset ) {\r\n\r\n\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\r\n\r\n\t\t\t},\r\n\r\n\t\t\tfunction setValue_fromArray_setNeedsUpdate( buffer, offset ) {\r\n\r\n\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\r\n\t\t\t\tthis.targetObject.needsUpdate = true;\r\n\r\n\t\t\t},\r\n\r\n\t\t\tfunction setValue_fromArray_setMatrixWorldNeedsUpdate( buffer, offset ) {\r\n\r\n\t\t\t\tthis.resolvedProperty.fromArray( buffer, offset );\r\n\t\t\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t]\r\n\r\n\t]\r\n\r\n} );\r\n\r\nTHREE.PropertyBinding.Composite =\r\n\t\tfunction( targetGroup, path, optionalParsedPath ) {\r\n\r\n\tvar parsedPath = optionalParsedPath ||\r\n\t\t\tTHREE.PropertyBinding.parseTrackName( path );\r\n\r\n\tthis._targetGroup = targetGroup;\r\n\tthis._bindings = targetGroup.subscribe_( path, parsedPath );\r\n\r\n};\r\n\r\nTHREE.PropertyBinding.Composite.prototype = {\r\n\r\n\tconstructor: THREE.PropertyBinding.Composite,\r\n\r\n\tgetValue: function( array, offset ) {\r\n\r\n\t\tthis.bind(); // bind all binding\r\n\r\n\t\tvar firstValidIndex = this._targetGroup.nCachedObjects_,\r\n\t\t\tbinding = this._bindings[ firstValidIndex ];\r\n\r\n\t\t// and only call .getValue on the first\r\n\t\tif ( binding !== undefined ) binding.getValue( array, offset );\r\n\r\n\t},\r\n\r\n\tsetValue: function( array, offset ) {\r\n\r\n\t\tvar bindings = this._bindings;\r\n\r\n\t\tfor ( var i = this._targetGroup.nCachedObjects_,\r\n\t\t\t\tn = bindings.length; i !== n; ++ i ) {\r\n\r\n\t\t\tbindings[ i ].setValue( array, offset );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tbind: function() {\r\n\r\n\t\tvar bindings = this._bindings;\r\n\r\n\t\tfor ( var i = this._targetGroup.nCachedObjects_,\r\n\t\t\t\tn = bindings.length; i !== n; ++ i ) {\r\n\r\n\t\t\tbindings[ i ].bind();\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tunbind: function() {\r\n\r\n\t\tvar bindings = this._bindings;\r\n\r\n\t\tfor ( var i = this._targetGroup.nCachedObjects_,\r\n\t\t\t\tn = bindings.length; i !== n; ++ i ) {\r\n\r\n\t\t\tbindings[ i ].unbind();\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.PropertyBinding.create = function( root, path, parsedPath ) {\r\n\r\n\tif ( ! ( root instanceof THREE.AnimationObjectGroup ) ) {\r\n\r\n\t\treturn new THREE.PropertyBinding( root, path, parsedPath );\r\n\r\n\t} else {\r\n\r\n\t\treturn new THREE.PropertyBinding.Composite( root, path, parsedPath );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.PropertyBinding.parseTrackName = function( trackName ) {\r\n\r\n\t// matches strings in the form of:\r\n\t//    nodeName.property\r\n\t//    nodeName.property[accessor]\r\n\t//    nodeName.material.property[accessor]\r\n\t//    uuid.property[accessor]\r\n\t//    uuid.objectName[objectIndex].propertyName[propertyIndex]\r\n\t//    parentName/nodeName.property\r\n\t//    parentName/parentName/nodeName.property[index]\r\n\t//\t  .bone[Armature.DEF_cog].position\r\n\t// created and tested via https://regex101.com/#javascript\r\n\r\n\tvar re = /^(([\\w]+\\/)*)([\\w-\\d]+)?(\\.([\\w]+)(\\[([\\w\\d\\[\\]\\_.:\\- ]+)\\])?)?(\\.([\\w.]+)(\\[([\\w\\d\\[\\]\\_. ]+)\\])?)$/;\r\n\tvar matches = re.exec(trackName);\r\n\r\n\tif( ! matches ) {\r\n\t\tthrow new Error( \"cannot parse trackName at all: \" + trackName );\r\n\t}\r\n\r\n    if (matches.index === re.lastIndex) {\r\n        re.lastIndex++;\r\n    }\r\n\r\n\tvar results = {\r\n\t\t// directoryName: matches[1], // (tschw) currently unused\r\n\t\tnodeName: matches[3], \t// allowed to be null, specified root node.\r\n\t\tobjectName: matches[5],\r\n\t\tobjectIndex: matches[7],\r\n\t\tpropertyName: matches[9],\r\n\t\tpropertyIndex: matches[11]\t// allowed to be null, specifies that the whole property is set.\r\n\t};\r\n\r\n\tif( results.propertyName === null || results.propertyName.length === 0 ) {\r\n\t\tthrow new Error( \"can not parse propertyName from trackName: \" + trackName );\r\n\t}\r\n\r\n\treturn results;\r\n\r\n};\r\n\r\nTHREE.PropertyBinding.findNode = function( root, nodeName ) {\r\n\r\n\tif( ! nodeName || nodeName === \"\" || nodeName === \"root\" || nodeName === \".\" || nodeName === -1 || nodeName === root.name || nodeName === root.uuid ) {\r\n\r\n\t\treturn root;\r\n\r\n\t}\r\n\r\n\t// search into skeleton bones.\r\n\tif( root.skeleton ) {\r\n\r\n\t\tvar searchSkeleton = function( skeleton ) {\r\n\r\n\t\t\tfor( var i = 0; i < skeleton.bones.length; i ++ ) {\r\n\r\n\t\t\t\tvar bone = skeleton.bones[i];\r\n\r\n\t\t\t\tif( bone.name === nodeName ) {\r\n\r\n\t\t\t\t\treturn bone;\r\n\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn null;\r\n\r\n\t\t};\r\n\r\n\t\tvar bone = searchSkeleton( root.skeleton );\r\n\r\n\t\tif( bone ) {\r\n\r\n\t\t\treturn bone;\r\n\r\n\t\t}\r\n\t}\r\n\r\n\t// search into node subtree.\r\n\tif( root.children ) {\r\n\r\n\t\tvar searchNodeSubtree = function( children ) {\r\n\r\n\t\t\tfor( var i = 0; i < children.length; i ++ ) {\r\n\r\n\t\t\t\tvar childNode = children[i];\r\n\r\n\t\t\t\tif( childNode.name === nodeName || childNode.uuid === nodeName ) {\r\n\r\n\t\t\t\t\treturn childNode;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar result = searchNodeSubtree( childNode.children );\r\n\r\n\t\t\t\tif( result ) return result;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn null;\r\n\r\n\t\t};\r\n\r\n\t\tvar subTreeNode = searchNodeSubtree( root.children );\r\n\r\n\t\tif( subTreeNode ) {\r\n\r\n\t\t\treturn subTreeNode;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn null;\r\n\r\n};\r\n\r\n// File:src/animation/PropertyMixer.js\r\n\r\n/**\r\n *\r\n * Buffered scene graph property that allows weighted accumulation.\r\n *\r\n *\r\n * @author Ben Houston / http://clara.io/\r\n * @author David Sarno / http://lighthaus.us/\r\n * @author tschw\r\n */\r\n\r\nTHREE.PropertyMixer = function ( binding, typeName, valueSize ) {\r\n\r\n\tthis.binding = binding;\r\n\tthis.valueSize = valueSize;\r\n\r\n\tvar bufferType = Float64Array,\r\n\t\tmixFunction;\r\n\r\n\tswitch ( typeName ) {\r\n\r\n\t\tcase 'quaternion':\t\t\tmixFunction = this._slerp;\t\tbreak;\r\n\r\n\t\tcase 'string':\r\n\t\tcase 'bool':\r\n\r\n\t\t\tbufferType = Array,\t\tmixFunction = this._select;\t\tbreak;\r\n\r\n\t\tdefault:\t\t\t\t\tmixFunction = this._lerp;\r\n\r\n\t}\r\n\r\n\tthis.buffer = new bufferType( valueSize * 4 );\r\n\t// layout: [ incoming | accu0 | accu1 | orig ]\r\n\t//\r\n\t// interpolators can use .buffer as their .result\r\n\t// the data then goes to 'incoming'\r\n\t//\r\n\t// 'accu0' and 'accu1' are used frame-interleaved for\r\n\t// the cumulative result and are compared to detect\r\n\t// changes\r\n\t//\r\n\t// 'orig' stores the original state of the property\r\n\r\n\tthis._mixBufferRegion = mixFunction;\r\n\r\n\tthis.cumulativeWeight = 0;\r\n\r\n\tthis.useCount = 0;\r\n\tthis.referenceCount = 0;\r\n\r\n};\r\n\r\nTHREE.PropertyMixer.prototype = {\r\n\r\n\tconstructor: THREE.PropertyMixer,\r\n\r\n\t// accumulate data in the 'incoming' region into 'accu<i>'\r\n\taccumulate: function( accuIndex, weight ) {\r\n\r\n\t\t// note: happily accumulating nothing when weight = 0, the caller knows\r\n\t\t// the weight and shouldn't have made the call in the first place\r\n\r\n\t\tvar buffer = this.buffer,\r\n\t\t\tstride = this.valueSize,\r\n\t\t\toffset = accuIndex * stride + stride,\r\n\r\n\t\t\tcurrentWeight = this.cumulativeWeight;\r\n\r\n\t\tif ( currentWeight === 0 ) {\r\n\r\n\t\t\t// accuN := incoming * weight\r\n\r\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\r\n\r\n\t\t\t\tbuffer[ offset + i ] = buffer[ i ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tcurrentWeight = weight;\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// accuN := accuN + incoming * weight\r\n\r\n\t\t\tcurrentWeight += weight;\r\n\t\t\tvar mix = weight / currentWeight;\r\n\t\t\tthis._mixBufferRegion( buffer, offset, 0, mix, stride );\r\n\r\n\t\t}\r\n\r\n\t\tthis.cumulativeWeight = currentWeight;\r\n\r\n\t},\r\n\r\n\t// apply the state of 'accu<i>' to the binding when accus differ\r\n\tapply: function( accuIndex ) {\r\n\r\n\t\tvar stride = this.valueSize,\r\n\t\t\tbuffer = this.buffer,\r\n\t\t\toffset = accuIndex * stride + stride,\r\n\r\n\t\t\tweight = this.cumulativeWeight,\r\n\r\n\t\t\tbinding = this.binding;\r\n\r\n\t\tthis.cumulativeWeight = 0;\r\n\r\n\t\tif ( weight < 1 ) {\r\n\r\n\t\t\t// accuN := accuN + original * ( 1 - cumulativeWeight )\r\n\r\n\t\t\tvar originalValueOffset = stride * 3;\r\n\r\n\t\t\tthis._mixBufferRegion(\r\n\t\t\t\t\tbuffer, offset, originalValueOffset, 1 - weight, stride );\r\n\r\n\t\t}\r\n\r\n\t\tfor ( var i = stride, e = stride + stride; i !== e; ++ i ) {\r\n\r\n\t\t\tif ( buffer[ i ] !== buffer[ i + stride ] ) {\r\n\r\n\t\t\t\t// value has changed -> update scene graph\r\n\r\n\t\t\t\tbinding.setValue( buffer, offset );\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\t// remember the state of the bound property and copy it to both accus\r\n\tsaveOriginalState: function() {\r\n\r\n\t\tvar binding = this.binding;\r\n\r\n\t\tvar buffer = this.buffer,\r\n\t\t\tstride = this.valueSize,\r\n\r\n\t\t\toriginalValueOffset = stride * 3;\r\n\r\n\t\tbinding.getValue( buffer, originalValueOffset );\r\n\r\n\t\t// accu[0..1] := orig -- initially detect changes against the original\r\n\t\tfor ( var i = stride, e = originalValueOffset; i !== e; ++ i ) {\r\n\r\n\t\t\tbuffer[ i ] = buffer[ originalValueOffset + ( i % stride ) ];\r\n\r\n\t\t}\r\n\r\n\t\tthis.cumulativeWeight = 0;\r\n\r\n\t},\r\n\r\n\t// apply the state previously taken via 'saveOriginalState' to the binding\r\n\trestoreOriginalState: function() {\r\n\r\n\t\tvar originalValueOffset = this.valueSize * 3;\r\n\t\tthis.binding.setValue( this.buffer, originalValueOffset );\r\n\r\n\t},\r\n\r\n\r\n\t// mix functions\r\n\r\n\t_select: function( buffer, dstOffset, srcOffset, t, stride ) {\r\n\r\n\t\tif ( t >= 0.5 ) {\r\n\r\n\t\t\tfor ( var i = 0; i !== stride; ++ i ) {\r\n\r\n\t\t\t\tbuffer[ dstOffset + i ] = buffer[ srcOffset + i ];\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\t_slerp: function( buffer, dstOffset, srcOffset, t, stride ) {\r\n\r\n\t\tTHREE.Quaternion.slerpFlat( buffer, dstOffset,\r\n\t\t\t\tbuffer, dstOffset, buffer, srcOffset, t );\r\n\r\n\t},\r\n\r\n\t_lerp: function( buffer, dstOffset, srcOffset, t, stride ) {\r\n\r\n\t\tvar s = 1 - t;\r\n\r\n\t\tfor ( var i = 0; i !== stride; ++ i ) {\r\n\r\n\t\t\tvar j = dstOffset + i;\r\n\r\n\t\t\tbuffer[ j ] = buffer[ j ] * s + buffer[ srcOffset + i ] * t;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/animation/tracks/BooleanKeyframeTrack.js\r\n\r\n/**\r\n *\r\n * A Track of Boolean keyframe values.\r\n *\r\n *\r\n * @author Ben Houston / http://clara.io/\r\n * @author David Sarno / http://lighthaus.us/\r\n * @author tschw\r\n */\r\n\r\nTHREE.BooleanKeyframeTrack = function ( name, times, values ) {\r\n\r\n\tTHREE.KeyframeTrack.call( this, name, times, values );\r\n\r\n};\r\n\r\nTHREE.BooleanKeyframeTrack.prototype =\r\n\t\tObject.assign( Object.create( THREE.KeyframeTrack.prototype ), {\r\n\r\n\tconstructor: THREE.BooleanKeyframeTrack,\r\n\r\n\tValueTypeName: 'bool',\r\n\tValueBufferType: Array,\r\n\r\n\tDefaultInterpolation: THREE.InterpolateDiscrete,\r\n\r\n\tInterpolantFactoryMethodLinear: undefined,\r\n\tInterpolantFactoryMethodSmooth: undefined\r\n\r\n\t// Note: Actually this track could have a optimized / compressed\r\n\t// representation of a single value and a custom interpolant that\r\n\t// computes \"firstValue ^ isOdd( index )\".\r\n\r\n} );\r\n\r\n// File:src/animation/tracks/ColorKeyframeTrack.js\r\n\r\n/**\r\n *\r\n * A Track of keyframe values that represent color.\r\n *\r\n *\r\n * @author Ben Houston / http://clara.io/\r\n * @author David Sarno / http://lighthaus.us/\r\n * @author tschw\r\n */\r\n\r\nTHREE.ColorKeyframeTrack = function ( name, times, values, interpolation ) {\r\n\r\n\tTHREE.KeyframeTrack.call( this, name, times, values, interpolation );\r\n\r\n};\r\n\r\nTHREE.ColorKeyframeTrack.prototype =\r\n\t\tObject.assign( Object.create( THREE.KeyframeTrack.prototype ), {\r\n\r\n\tconstructor: THREE.ColorKeyframeTrack,\r\n\r\n\tValueTypeName: 'color'\r\n\r\n\t// ValueBufferType is inherited\r\n\r\n\t// DefaultInterpolation is inherited\r\n\r\n\r\n\t// Note: Very basic implementation and nothing special yet.\r\n\t// However, this is the place for color space parameterization.\r\n\r\n} );\r\n\r\n// File:src/animation/tracks/NumberKeyframeTrack.js\r\n\r\n/**\r\n *\r\n * A Track of numeric keyframe values.\r\n *\r\n * @author Ben Houston / http://clara.io/\r\n * @author David Sarno / http://lighthaus.us/\r\n * @author tschw\r\n */\r\n\r\nTHREE.NumberKeyframeTrack = function ( name, times, values, interpolation ) {\r\n\r\n\tTHREE.KeyframeTrack.call( this, name, times, values, interpolation );\r\n\r\n};\r\n\r\nTHREE.NumberKeyframeTrack.prototype =\r\n\t\tObject.assign( Object.create( THREE.KeyframeTrack.prototype ), {\r\n\r\n\tconstructor: THREE.NumberKeyframeTrack,\r\n\r\n\tValueTypeName: 'number',\r\n\r\n\t// ValueBufferType is inherited\r\n\r\n\t// DefaultInterpolation is inherited\r\n\r\n} );\r\n\r\n// File:src/animation/tracks/QuaternionKeyframeTrack.js\r\n\r\n/**\r\n *\r\n * A Track of quaternion keyframe values.\r\n *\r\n * @author Ben Houston / http://clara.io/\r\n * @author David Sarno / http://lighthaus.us/\r\n * @author tschw\r\n */\r\n\r\nTHREE.QuaternionKeyframeTrack = function ( name, times, values, interpolation ) {\r\n\r\n\tTHREE.KeyframeTrack.call( this, name, times, values, interpolation );\r\n\r\n};\r\n\r\nTHREE.QuaternionKeyframeTrack.prototype =\r\n\t\tObject.assign( Object.create( THREE.KeyframeTrack.prototype ), {\r\n\r\n\tconstructor: THREE.QuaternionKeyframeTrack,\r\n\r\n\tValueTypeName: 'quaternion',\r\n\r\n\t// ValueBufferType is inherited\r\n\r\n\tDefaultInterpolation: THREE.InterpolateLinear,\r\n\r\n\tInterpolantFactoryMethodLinear: function( result ) {\r\n\r\n\t\treturn new THREE.QuaternionLinearInterpolant(\r\n\t\t\t\tthis.times, this.values, this.getValueSize(), result );\r\n\r\n\t},\r\n\r\n\tInterpolantFactoryMethodSmooth: undefined // not yet implemented\r\n\r\n} );\r\n\r\n// File:src/animation/tracks/StringKeyframeTrack.js\r\n\r\n/**\r\n *\r\n * A Track that interpolates Strings\r\n *\r\n *\r\n * @author Ben Houston / http://clara.io/\r\n * @author David Sarno / http://lighthaus.us/\r\n * @author tschw\r\n */\r\n\r\nTHREE.StringKeyframeTrack = function ( name, times, values, interpolation ) {\r\n\r\n\tTHREE.KeyframeTrack.call( this, name, times, values, interpolation );\r\n\r\n};\r\n\r\nTHREE.StringKeyframeTrack.prototype =\r\n\t\tObject.assign( Object.create( THREE.KeyframeTrack.prototype ), {\r\n\r\n\tconstructor: THREE.StringKeyframeTrack,\r\n\r\n\tValueTypeName: 'string',\r\n\tValueBufferType: Array,\r\n\r\n\tDefaultInterpolation: THREE.InterpolateDiscrete,\r\n\r\n\tInterpolantFactoryMethodLinear: undefined,\r\n\r\n\tInterpolantFactoryMethodSmooth: undefined\r\n\r\n} );\r\n\r\n// File:src/animation/tracks/VectorKeyframeTrack.js\r\n\r\n/**\r\n *\r\n * A Track of vectored keyframe values.\r\n *\r\n *\r\n * @author Ben Houston / http://clara.io/\r\n * @author David Sarno / http://lighthaus.us/\r\n * @author tschw\r\n */\r\n\r\nTHREE.VectorKeyframeTrack = function ( name, times, values, interpolation ) {\r\n\r\n\tTHREE.KeyframeTrack.call( this, name, times, values, interpolation );\r\n\r\n};\r\n\r\nTHREE.VectorKeyframeTrack.prototype =\r\n\t\tObject.assign( Object.create( THREE.KeyframeTrack.prototype ), {\r\n\r\n\tconstructor: THREE.VectorKeyframeTrack,\r\n\r\n\tValueTypeName: 'vector'\r\n\r\n\t// ValueBufferType is inherited\r\n\r\n\t// DefaultInterpolation is inherited\r\n\r\n} );\r\n\r\n// File:src/audio/Audio.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author Reece Aaron Lecrivain / http://reecenotes.com/\r\n */\r\n\r\nTHREE.Audio = function ( listener ) {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.type = 'Audio';\r\n\r\n\tthis.context = listener.context;\r\n\tthis.source = this.context.createBufferSource();\r\n\tthis.source.onended = this.onEnded.bind( this );\r\n\r\n\tthis.gain = this.context.createGain();\r\n\tthis.gain.connect( listener.getInput() );\r\n\r\n\tthis.autoplay = false;\r\n\r\n\tthis.startTime = 0;\r\n\tthis.playbackRate = 1;\r\n\tthis.isPlaying = false;\r\n\tthis.hasPlaybackControl = true;\r\n\tthis.sourceType = 'empty';\r\n\r\n\tthis.filters = [];\r\n\r\n};\r\n\r\nTHREE.Audio.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {\r\n\r\n\tconstructor: THREE.Audio,\r\n\r\n\tgetOutput: function () {\r\n\r\n\t\treturn this.gain;\r\n\r\n\t},\r\n\r\n\tsetNodeSource: function ( audioNode ) {\r\n\r\n\t\tthis.hasPlaybackControl = false;\r\n\t\tthis.sourceType = 'audioNode';\r\n\t\tthis.source = audioNode;\r\n\t\tthis.connect();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tsetBuffer: function ( audioBuffer ) {\r\n\r\n\t\tthis.source.buffer = audioBuffer;\r\n\t\tthis.sourceType = 'buffer';\r\n\r\n\t\tif ( this.autoplay ) this.play();\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tplay: function () {\r\n\r\n\t\tif ( this.isPlaying === true ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Audio: Audio is already playing.' );\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.hasPlaybackControl === false ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tvar source = this.context.createBufferSource();\r\n\r\n\t\tsource.buffer = this.source.buffer;\r\n\t\tsource.loop = this.source.loop;\r\n\t\tsource.onended = this.source.onended;\r\n\t\tsource.start( 0, this.startTime );\r\n\t\tsource.playbackRate.value = this.playbackRate;\r\n\r\n\t\tthis.isPlaying = true;\r\n\r\n\t\tthis.source = source;\r\n\r\n\t\treturn this.connect();\r\n\r\n\t},\r\n\r\n\tpause: function () {\r\n\r\n\t\tif ( this.hasPlaybackControl === false ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tthis.source.stop();\r\n\t\tthis.startTime = this.context.currentTime;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tstop: function () {\r\n\r\n\t\tif ( this.hasPlaybackControl === false ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tthis.source.stop();\r\n\t\tthis.startTime = 0;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tconnect: function () {\r\n\r\n\t\tif ( this.filters.length > 0 ) {\r\n\r\n\t\t\tthis.source.connect( this.filters[ 0 ] );\r\n\r\n\t\t\tfor ( var i = 1, l = this.filters.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tthis.filters[ i - 1 ].connect( this.filters[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.filters[ this.filters.length - 1 ].connect( this.getOutput() );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.source.connect( this.getOutput() );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdisconnect: function () {\r\n\r\n\t\tif ( this.filters.length > 0 ) {\r\n\r\n\t\t\tthis.source.disconnect( this.filters[ 0 ] );\r\n\r\n\t\t\tfor ( var i = 1, l = this.filters.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tthis.filters[ i - 1 ].disconnect( this.filters[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.filters[ this.filters.length - 1 ].disconnect( this.getOutput() );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.source.disconnect( this.getOutput() );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tgetFilters: function () {\r\n\r\n\t\treturn this.filters;\r\n\r\n\t},\r\n\r\n\tsetFilters: function ( value ) {\r\n\r\n\t\tif ( ! value ) value = [];\r\n\r\n\t\tif ( this.isPlaying === true ) {\r\n\r\n\t\t\tthis.disconnect();\r\n\t\t\tthis.filters = value;\r\n\t\t\tthis.connect();\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.filters = value;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tgetFilter: function () {\r\n\r\n\t\treturn this.getFilters()[ 0 ];\r\n\r\n\t},\r\n\r\n\tsetFilter: function ( filter ) {\r\n\r\n\t\treturn this.setFilters( filter ? [ filter ] : [] );\r\n\r\n\t},\r\n\r\n\tsetPlaybackRate: function ( value ) {\r\n\r\n\t\tif ( this.hasPlaybackControl === false ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tthis.playbackRate = value;\r\n\r\n\t\tif ( this.isPlaying === true ) {\r\n\r\n\t\t\tthis.source.playbackRate.value = this.playbackRate;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tgetPlaybackRate: function () {\r\n\r\n\t\treturn this.playbackRate;\r\n\r\n\t},\r\n\r\n\tonEnded: function () {\r\n\r\n\t\tthis.isPlaying = false;\r\n\r\n\t},\r\n\r\n\tgetLoop: function () {\r\n\r\n\t\tif ( this.hasPlaybackControl === false ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\r\n\t\t\treturn false;\r\n\r\n\t\t}\r\n\r\n\t\treturn this.source.loop;\r\n\r\n\t},\r\n\r\n\tsetLoop: function ( value ) {\r\n\r\n\t\tif ( this.hasPlaybackControl === false ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tthis.source.loop = value;\r\n\r\n\t},\r\n\r\n\tgetVolume: function () {\r\n\r\n\t\treturn this.gain.gain.value;\r\n\r\n\t},\r\n\r\n\r\n\tsetVolume: function ( value ) {\r\n\r\n\t\tthis.gain.gain.value = value;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n} );\r\n\r\n// File:src/audio/AudioAnalyser.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.AudioAnalyser = function ( audio, fftSize ) {\r\n\r\n\tthis.analyser = audio.context.createAnalyser();\r\n\tthis.analyser.fftSize = fftSize !== undefined ? fftSize : 2048;\r\n\r\n\tthis.data = new Uint8Array( this.analyser.frequencyBinCount );\r\n\r\n\taudio.getOutput().connect( this.analyser );\r\n\r\n};\r\n\r\nObject.assign( THREE.AudioAnalyser.prototype, {\r\n\r\n\tgetFrequencyData: function () {\r\n\r\n\t\tthis.analyser.getByteFrequencyData( this.data );\r\n\r\n\t\treturn this.data;\r\n\r\n\t},\r\n\r\n\tgetAverageFrequency: function () {\r\n\r\n\t\tvar value = 0, data = this.getFrequencyData();\r\n\r\n\t\tfor ( var i = 0; i < data.length; i ++ ) {\r\n\r\n\t\t\tvalue += data[ i ];\r\n\r\n\t\t}\r\n\r\n\t\treturn value / data.length;\r\n\r\n\t}\r\n\r\n} );\r\n\r\n// File:src/audio/AudioContext.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nObject.defineProperty( THREE, 'AudioContext', {\r\n\r\n\tget: ( function () {\r\n\r\n\t\tvar context;\r\n\r\n\t\treturn function () {\r\n\r\n\t\t\tif ( context === undefined ) {\r\n\r\n\t\t\t\tcontext = new ( window.AudioContext || window.webkitAudioContext )();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn context;\r\n\r\n\t\t};\r\n\r\n\t} )()\r\n\r\n} );\r\n\r\n// File:src/audio/PositionalAudio.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.PositionalAudio = function ( listener ) {\r\n\r\n\tTHREE.Audio.call( this, listener );\r\n\r\n\tthis.panner = this.context.createPanner();\r\n\tthis.panner.connect( this.gain );\r\n\r\n};\r\n\r\nTHREE.PositionalAudio.prototype = Object.assign( Object.create( THREE.Audio.prototype ), {\r\n\r\n\tconstructor: THREE.PositionalAudio,\r\n\r\n\tgetOutput: function () {\r\n\r\n\t\treturn this.panner;\r\n\r\n\t},\r\n\r\n\tgetRefDistance: function () {\r\n\r\n\t\treturn this.panner.refDistance;\r\n\r\n\t},\r\n\r\n\tsetRefDistance: function ( value ) {\r\n\r\n\t\tthis.panner.refDistance = value;\r\n\r\n\t},\r\n\r\n\tgetRolloffFactor: function () {\r\n\r\n\t\treturn this.panner.rolloffFactor;\r\n\r\n\t},\r\n\r\n\tsetRolloffFactor: function ( value ) {\r\n\r\n\t\tthis.panner.rolloffFactor = value;\r\n\r\n\t},\r\n\r\n\tgetDistanceModel: function () {\r\n\r\n\t\treturn this.panner.distanceModel;\r\n\r\n\t},\r\n\r\n\tsetDistanceModel: function ( value ) {\r\n\r\n\t\tthis.panner.distanceModel = value;\r\n\r\n\t},\r\n\r\n\tgetMaxDistance: function () {\r\n\r\n\t\treturn this.panner.maxDistance;\r\n\r\n\t},\r\n\r\n\tsetMaxDistance: function ( value ) {\r\n\r\n\t\tthis.panner.maxDistance = value;\r\n\r\n\t},\r\n\r\n\tupdateMatrixWorld: ( function () {\r\n\r\n\t\tvar position = new THREE.Vector3();\r\n\r\n\t\treturn function updateMatrixWorld( force ) {\r\n\r\n\t\t\tTHREE.Object3D.prototype.updateMatrixWorld.call( this, force );\r\n\r\n\t\t\tposition.setFromMatrixPosition( this.matrixWorld );\r\n\r\n\t\t\tthis.panner.setPosition( position.x, position.y, position.z );\r\n\r\n\t\t};\r\n\r\n\t} )()\r\n\r\n\r\n} );\r\n\r\n// File:src/audio/AudioListener.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.AudioListener = function () {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.type = 'AudioListener';\r\n\r\n\tthis.context = THREE.AudioContext;\r\n\r\n\tthis.gain = this.context.createGain();\r\n\tthis.gain.connect( this.context.destination );\r\n\r\n\tthis.filter = null;\r\n\r\n};\r\n\r\nTHREE.AudioListener.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {\r\n\r\n\tconstructor: THREE.AudioListener,\r\n\r\n\tgetInput: function () {\r\n\r\n\t\treturn this.gain;\r\n\r\n\t},\r\n\r\n\tremoveFilter: function ( ) {\r\n\r\n\t\tif ( this.filter !== null ) {\r\n\r\n\t\t\tthis.gain.disconnect( this.filter );\r\n\t\t\tthis.filter.disconnect( this.context.destination );\r\n\t\t\tthis.gain.connect( this.context.destination );\r\n\t\t\tthis.filter = null;\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tgetFilter: function () {\r\n\r\n\t\treturn this.filter;\r\n\r\n\t},\r\n\r\n\tsetFilter: function ( value ) {\r\n\r\n\t\tif ( this.filter !== null ) {\r\n\r\n\t\t\tthis.gain.disconnect( this.filter );\r\n\t\t\tthis.filter.disconnect( this.context.destination );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.gain.disconnect( this.context.destination );\r\n\r\n\t\t}\r\n\r\n\t\tthis.filter = value;\r\n\t\tthis.gain.connect( this.filter );\r\n\t\tthis.filter.connect( this.context.destination );\r\n\r\n\t},\r\n\r\n\tgetMasterVolume: function () {\r\n\r\n\t\treturn this.gain.gain.value;\r\n\r\n\t},\r\n\r\n\tsetMasterVolume: function ( value ) {\r\n\r\n\t\tthis.gain.gain.value = value;\r\n\r\n\t},\r\n\r\n\tupdateMatrixWorld: ( function () {\r\n\r\n\t\tvar position = new THREE.Vector3();\r\n\t\tvar quaternion = new THREE.Quaternion();\r\n\t\tvar scale = new THREE.Vector3();\r\n\r\n\t\tvar orientation = new THREE.Vector3();\r\n\r\n\t\treturn function updateMatrixWorld( force ) {\r\n\r\n\t\t\tTHREE.Object3D.prototype.updateMatrixWorld.call( this, force );\r\n\r\n\t\t\tvar listener = this.context.listener;\r\n\t\t\tvar up = this.up;\r\n\r\n\t\t\tthis.matrixWorld.decompose( position, quaternion, scale );\r\n\r\n\t\t\torientation.set( 0, 0, - 1 ).applyQuaternion( quaternion );\r\n\r\n\t\t\tlistener.setPosition( position.x, position.y, position.z );\r\n\t\t\tlistener.setOrientation( orientation.x, orientation.y, orientation.z, up.x, up.y, up.z );\r\n\r\n\t\t};\r\n\r\n\t} )()\r\n\r\n} );\r\n\r\n// File:src/cameras/Camera.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author WestLangley / http://github.com/WestLangley\r\n*/\r\n\r\nTHREE.Camera = function () {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.type = 'Camera';\r\n\r\n\tthis.matrixWorldInverse = new THREE.Matrix4();\r\n\tthis.projectionMatrix = new THREE.Matrix4();\r\n\r\n};\r\n\r\nTHREE.Camera.prototype = Object.create( THREE.Object3D.prototype );\r\nTHREE.Camera.prototype.constructor = THREE.Camera;\r\n\r\nTHREE.Camera.prototype.getWorldDirection = function () {\r\n\r\n\tvar quaternion = new THREE.Quaternion();\r\n\r\n\treturn function ( optionalTarget ) {\r\n\r\n\t\tvar result = optionalTarget || new THREE.Vector3();\r\n\r\n\t\tthis.getWorldQuaternion( quaternion );\r\n\r\n\t\treturn result.set( 0, 0, - 1 ).applyQuaternion( quaternion );\r\n\r\n\t};\r\n\r\n}();\r\n\r\nTHREE.Camera.prototype.lookAt = function () {\r\n\r\n\t// This routine does not support cameras with rotated and/or translated parent(s)\r\n\r\n\tvar m1 = new THREE.Matrix4();\r\n\r\n\treturn function ( vector ) {\r\n\r\n\t\tm1.lookAt( this.position, vector, this.up );\r\n\r\n\t\tthis.quaternion.setFromRotationMatrix( m1 );\r\n\r\n\t};\r\n\r\n}();\r\n\r\nTHREE.Camera.prototype.clone = function () {\r\n\r\n\treturn new this.constructor().copy( this );\r\n\r\n};\r\n\r\nTHREE.Camera.prototype.copy = function ( source ) {\r\n\r\n\tTHREE.Object3D.prototype.copy.call( this, source );\r\n\r\n\tthis.matrixWorldInverse.copy( source.matrixWorldInverse );\r\n\tthis.projectionMatrix.copy( source.projectionMatrix );\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\n// File:src/cameras/CubeCamera.js\r\n\r\n/**\r\n * Camera for rendering cube maps\r\n *\t- renders scene into axis-aligned cube\r\n *\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.CubeCamera = function ( near, far, cubeResolution ) {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.type = 'CubeCamera';\r\n\r\n\tvar fov = 90, aspect = 1;\r\n\r\n\tvar cameraPX = new THREE.PerspectiveCamera( fov, aspect, near, far );\r\n\tcameraPX.up.set( 0, - 1, 0 );\r\n\tcameraPX.lookAt( new THREE.Vector3( 1, 0, 0 ) );\r\n\tthis.add( cameraPX );\r\n\r\n\tvar cameraNX = new THREE.PerspectiveCamera( fov, aspect, near, far );\r\n\tcameraNX.up.set( 0, - 1, 0 );\r\n\tcameraNX.lookAt( new THREE.Vector3( - 1, 0, 0 ) );\r\n\tthis.add( cameraNX );\r\n\r\n\tvar cameraPY = new THREE.PerspectiveCamera( fov, aspect, near, far );\r\n\tcameraPY.up.set( 0, 0, 1 );\r\n\tcameraPY.lookAt( new THREE.Vector3( 0, 1, 0 ) );\r\n\tthis.add( cameraPY );\r\n\r\n\tvar cameraNY = new THREE.PerspectiveCamera( fov, aspect, near, far );\r\n\tcameraNY.up.set( 0, 0, - 1 );\r\n\tcameraNY.lookAt( new THREE.Vector3( 0, - 1, 0 ) );\r\n\tthis.add( cameraNY );\r\n\r\n\tvar cameraPZ = new THREE.PerspectiveCamera( fov, aspect, near, far );\r\n\tcameraPZ.up.set( 0, - 1, 0 );\r\n\tcameraPZ.lookAt( new THREE.Vector3( 0, 0, 1 ) );\r\n\tthis.add( cameraPZ );\r\n\r\n\tvar cameraNZ = new THREE.PerspectiveCamera( fov, aspect, near, far );\r\n\tcameraNZ.up.set( 0, - 1, 0 );\r\n\tcameraNZ.lookAt( new THREE.Vector3( 0, 0, - 1 ) );\r\n\tthis.add( cameraNZ );\r\n\r\n\tvar options = { format: THREE.RGBFormat, magFilter: THREE.LinearFilter, minFilter: THREE.LinearFilter };\r\n\r\n\tthis.renderTarget = new THREE.WebGLRenderTargetCube( cubeResolution, cubeResolution, options );\r\n\r\n\tthis.updateCubeMap = function ( renderer, scene ) {\r\n\r\n\t\tif ( this.parent === null ) this.updateMatrixWorld();\r\n\r\n\t\tvar renderTarget = this.renderTarget;\r\n\t\tvar generateMipmaps = renderTarget.texture.generateMipmaps;\r\n\r\n\t\trenderTarget.texture.generateMipmaps = false;\r\n\r\n\t\trenderTarget.activeCubeFace = 0;\r\n\t\trenderer.render( scene, cameraPX, renderTarget );\r\n\r\n\t\trenderTarget.activeCubeFace = 1;\r\n\t\trenderer.render( scene, cameraNX, renderTarget );\r\n\r\n\t\trenderTarget.activeCubeFace = 2;\r\n\t\trenderer.render( scene, cameraPY, renderTarget );\r\n\r\n\t\trenderTarget.activeCubeFace = 3;\r\n\t\trenderer.render( scene, cameraNY, renderTarget );\r\n\r\n\t\trenderTarget.activeCubeFace = 4;\r\n\t\trenderer.render( scene, cameraPZ, renderTarget );\r\n\r\n\t\trenderTarget.texture.generateMipmaps = generateMipmaps;\r\n\r\n\t\trenderTarget.activeCubeFace = 5;\r\n\t\trenderer.render( scene, cameraNZ, renderTarget );\r\n\r\n\t\trenderer.setRenderTarget( null );\r\n\r\n\t};\r\n\r\n};\r\n\r\nTHREE.CubeCamera.prototype = Object.create( THREE.Object3D.prototype );\r\nTHREE.CubeCamera.prototype.constructor = THREE.CubeCamera;\r\n\r\n// File:src/cameras/OrthographicCamera.js\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.OrthographicCamera = function ( left, right, top, bottom, near, far ) {\r\n\r\n\tTHREE.Camera.call( this );\r\n\r\n\tthis.type = 'OrthographicCamera';\r\n\r\n\tthis.zoom = 1;\r\n\r\n\tthis.left = left;\r\n\tthis.right = right;\r\n\tthis.top = top;\r\n\tthis.bottom = bottom;\r\n\r\n\tthis.near = ( near !== undefined ) ? near : 0.1;\r\n\tthis.far = ( far !== undefined ) ? far : 2000;\r\n\r\n\tthis.updateProjectionMatrix();\r\n\r\n};\r\n\r\nTHREE.OrthographicCamera.prototype = Object.assign( Object.create( THREE.Camera.prototype ), {\r\n\r\n\tconstructor: THREE.OrthographicCamera,\r\n\r\n\tcopy: function ( source ) {\r\n\r\n\t\tTHREE.Camera.prototype.copy.call( this, source );\r\n\r\n\t\tthis.left = source.left;\r\n\t\tthis.right = source.right;\r\n\t\tthis.top = source.top;\r\n\t\tthis.bottom = source.bottom;\r\n\t\tthis.near = source.near;\r\n\t\tthis.far = source.far;\r\n\r\n\t\tthis.zoom = source.zoom;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tupdateProjectionMatrix: function () {\r\n\r\n\t\tvar dx = ( this.right - this.left ) / ( 2 * this.zoom );\r\n\t\tvar dy = ( this.top - this.bottom ) / ( 2 * this.zoom );\r\n\t\tvar cx = ( this.right + this.left ) / 2;\r\n\t\tvar cy = ( this.top + this.bottom ) / 2;\r\n\r\n\t\tthis.projectionMatrix.makeOrthographic( cx - dx, cx + dx, cy + dy, cy - dy, this.near, this.far );\r\n\r\n\t},\r\n\r\n\ttoJSON: function ( meta ) {\r\n\r\n\t\tvar data = THREE.Object3D.prototype.toJSON.call( this, meta );\r\n\r\n\t\tdata.object.zoom = this.zoom;\r\n\t\tdata.object.left = this.left;\r\n\t\tdata.object.right = this.right;\r\n\t\tdata.object.top = this.top;\r\n\t\tdata.object.bottom = this.bottom;\r\n\t\tdata.object.near = this.near;\r\n\t\tdata.object.far = this.far;\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n} );\r\n\r\n// File:src/cameras/PerspectiveCamera.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author greggman / http://games.greggman.com/\r\n * @author zz85 / http://www.lab4games.net/zz85/blog\r\n * @author tschw\r\n */\r\n\r\nTHREE.PerspectiveCamera = function( fov, aspect, near, far ) {\r\n\r\n\tTHREE.Camera.call( this );\r\n\r\n\tthis.type = 'PerspectiveCamera';\r\n\r\n\tthis.fov = fov !== undefined ? fov : 50;\r\n\tthis.zoom = 1;\r\n\r\n\tthis.near = near !== undefined ? near : 0.1;\r\n\tthis.far = far !== undefined ? far : 2000;\r\n\tthis.focus = 10;\r\n\r\n\tthis.aspect = aspect !== undefined ? aspect : 1;\r\n\tthis.view = null;\r\n\r\n\tthis.filmGauge = 35;\t// width of the film (default in millimeters)\r\n\tthis.filmOffset = 0;\t// horizontal film offset (same unit as gauge)\r\n\r\n\tthis.updateProjectionMatrix();\r\n\r\n};\r\n\r\nTHREE.PerspectiveCamera.prototype = Object.assign( Object.create( THREE.Camera.prototype ), {\r\n\r\n\tconstructor: THREE.PerspectiveCamera,\r\n\r\n\tcopy: function ( source ) {\r\n\r\n\t\tTHREE.Camera.prototype.copy.call( this, source );\r\n\r\n\t\tthis.fov = source.fov;\r\n\t\tthis.zoom = source.zoom;\r\n\r\n\t\tthis.near = source.near;\r\n\t\tthis.far = source.far;\r\n\t\tthis.focus = source.focus;\r\n\r\n\t\tthis.aspect = source.aspect;\r\n\t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\r\n\r\n\t\tthis.filmGauge = source.filmGauge;\r\n\t\tthis.filmOffset = source.filmOffset;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\t/**\r\n\t * Sets the FOV by focal length in respect to the current .filmGauge.\r\n\t *\r\n\t * The default film gauge is 35, so that the focal length can be specified for\r\n\t * a 35mm (full frame) camera.\r\n\t *\r\n\t * Values for focal length and film gauge must have the same unit.\r\n\t */\r\n\tsetFocalLength: function ( focalLength ) {\r\n\r\n\t\t// see http://www.bobatkins.com/photography/technical/field_of_view.html\r\n\t\tvar vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;\r\n\r\n\t\tthis.fov = THREE.Math.RAD2DEG * 2 * Math.atan( vExtentSlope );\r\n\t\tthis.updateProjectionMatrix();\r\n\r\n\t},\r\n\r\n\t/**\r\n\t * Calculates the focal length from the current .fov and .filmGauge.\r\n\t */\r\n\tgetFocalLength: function () {\r\n\r\n\t\tvar vExtentSlope = Math.tan( THREE.Math.DEG2RAD * 0.5 * this.fov );\r\n\r\n\t\treturn 0.5 * this.getFilmHeight() / vExtentSlope;\r\n\r\n\t},\r\n\r\n\tgetEffectiveFOV: function () {\r\n\r\n\t\treturn THREE.Math.RAD2DEG * 2 * Math.atan(\r\n\t\t\t\tMath.tan( THREE.Math.DEG2RAD * 0.5 * this.fov ) / this.zoom );\r\n\r\n\t},\r\n\r\n\tgetFilmWidth: function () {\r\n\r\n\t\t// film not completely covered in portrait format (aspect < 1)\r\n\t\treturn this.filmGauge * Math.min( this.aspect, 1 );\r\n\r\n\t},\r\n\r\n\tgetFilmHeight: function () {\r\n\r\n\t\t// film not completely covered in landscape format (aspect > 1)\r\n\t\treturn this.filmGauge / Math.max( this.aspect, 1 );\r\n\r\n\t},\r\n\r\n\t/**\r\n\t * Sets an offset in a larger frustum. This is useful for multi-window or\r\n\t * multi-monitor/multi-machine setups.\r\n\t *\r\n\t * For example, if you have 3x2 monitors and each monitor is 1920x1080 and\r\n\t * the monitors are in grid like this\r\n\t *\r\n\t *   +---+---+---+\r\n\t *   | A | B | C |\r\n\t *   +---+---+---+\r\n\t *   | D | E | F |\r\n\t *   +---+---+---+\r\n\t *\r\n\t * then for each monitor you would call it like this\r\n\t *\r\n\t *   var w = 1920;\r\n\t *   var h = 1080;\r\n\t *   var fullWidth = w * 3;\r\n\t *   var fullHeight = h * 2;\r\n\t *\r\n\t *   --A--\r\n\t *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\r\n\t *   --B--\r\n\t *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\r\n\t *   --C--\r\n\t *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\r\n\t *   --D--\r\n\t *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\r\n\t *   --E--\r\n\t *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\r\n\t *   --F--\r\n\t *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\r\n\t *\r\n\t *   Note there is no reason monitors have to be the same size or in a grid.\r\n\t */\r\n\tsetViewOffset: function ( fullWidth, fullHeight, x, y, width, height ) {\r\n\r\n\t\tthis.aspect = fullWidth / fullHeight;\r\n\r\n\t\tthis.view = {\r\n\t\t\tfullWidth: fullWidth,\r\n\t\t\tfullHeight: fullHeight,\r\n\t\t\toffsetX: x,\r\n\t\t\toffsetY: y,\r\n\t\t\twidth: width,\r\n\t\t\theight: height\r\n\t\t};\r\n\r\n\t\tthis.updateProjectionMatrix();\r\n\r\n\t},\r\n\r\n\tclearViewOffset: function() {\r\n\r\n\t\tthis.view = null;\r\n\t\tthis.updateProjectionMatrix();\r\n\r\n\t},\r\n\r\n\tupdateProjectionMatrix: function () {\r\n\r\n\t\tvar near = this.near,\r\n\t\t\ttop = near * Math.tan(\r\n\t\t\t\t\tTHREE.Math.DEG2RAD * 0.5 * this.fov ) / this.zoom,\r\n\t\t\theight = 2 * top,\r\n\t\t\twidth = this.aspect * height,\r\n\t\t\tleft = - 0.5 * width,\r\n\t\t\tview = this.view;\r\n\r\n\t\tif ( view !== null ) {\r\n\r\n\t\t\tvar fullWidth = view.fullWidth,\r\n\t\t\t\tfullHeight = view.fullHeight;\r\n\r\n\t\t\tleft += view.offsetX * width / fullWidth;\r\n\t\t\ttop -= view.offsetY * height / fullHeight;\r\n\t\t\twidth *= view.width / fullWidth;\r\n\t\t\theight *= view.height / fullHeight;\r\n\r\n\t\t}\r\n\r\n\t\tvar skew = this.filmOffset;\r\n\t\tif ( skew !== 0 ) left += near * skew / this.getFilmWidth();\r\n\r\n\t\tthis.projectionMatrix.makeFrustum(\r\n\t\t\t\tleft, left + width, top - height, top, near, this.far );\r\n\r\n\t},\r\n\r\n\ttoJSON: function ( meta ) {\r\n\r\n\t\tvar data = THREE.Object3D.prototype.toJSON.call( this, meta );\r\n\r\n\t\tdata.object.fov = this.fov;\r\n\t\tdata.object.zoom = this.zoom;\r\n\r\n\t\tdata.object.near = this.near;\r\n\t\tdata.object.far = this.far;\r\n\t\tdata.object.focus = this.focus;\r\n\r\n\t\tdata.object.aspect = this.aspect;\r\n\r\n\t\tif ( this.view !== null ) data.object.view = Object.assign( {}, this.view );\r\n\r\n\t\tdata.object.filmGauge = this.filmGauge;\r\n\t\tdata.object.filmOffset = this.filmOffset;\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n} );\r\n\r\n// File:src/cameras/StereoCamera.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.StereoCamera = function () {\r\n\r\n\tthis.type = 'StereoCamera';\r\n\r\n\tthis.aspect = 1;\r\n\r\n\tthis.cameraL = new THREE.PerspectiveCamera();\r\n\tthis.cameraL.layers.enable( 1 );\r\n\tthis.cameraL.matrixAutoUpdate = false;\r\n\r\n\tthis.cameraR = new THREE.PerspectiveCamera();\r\n\tthis.cameraR.layers.enable( 2 );\r\n\tthis.cameraR.matrixAutoUpdate = false;\r\n\r\n};\r\n\r\nObject.assign( THREE.StereoCamera.prototype, {\r\n\r\n\tupdate: ( function () {\r\n\r\n\t\tvar focus, fov, aspect, near, far;\r\n\r\n\t\tvar eyeRight = new THREE.Matrix4();\r\n\t\tvar eyeLeft = new THREE.Matrix4();\r\n\r\n\t\treturn function update ( camera ) {\r\n\r\n\t\t\tvar needsUpdate = focus !== camera.focus || fov !== camera.fov ||\r\n\t\t\t\t\t\t\t\t\t\t\t\taspect !== camera.aspect * this.aspect || near !== camera.near ||\r\n\t\t\t\t\t\t\t\t\t\t\t\tfar !== camera.far;\r\n\r\n\t\t\tif ( needsUpdate ) {\r\n\r\n\t\t\t\tfocus = camera.focus;\r\n\t\t\t\tfov = camera.fov;\r\n\t\t\t\taspect = camera.aspect * this.aspect;\r\n\t\t\t\tnear = camera.near;\r\n\t\t\t\tfar = camera.far;\r\n\r\n\t\t\t\t// Off-axis stereoscopic effect based on\r\n\t\t\t\t// http://paulbourke.net/stereographics/stereorender/\r\n\r\n\t\t\t\tvar projectionMatrix = camera.projectionMatrix.clone();\r\n\t\t\t\tvar eyeSep = 0.064 / 2;\r\n\t\t\t\tvar eyeSepOnProjection = eyeSep * near / focus;\r\n\t\t\t\tvar ymax = near * Math.tan( THREE.Math.DEG2RAD * fov * 0.5 );\r\n\t\t\t\tvar xmin, xmax;\r\n\r\n\t\t\t\t// translate xOffset\r\n\r\n\t\t\t\teyeLeft.elements[ 12 ] = - eyeSep;\r\n\t\t\t\teyeRight.elements[ 12 ] = eyeSep;\r\n\r\n\t\t\t\t// for left eye\r\n\r\n\t\t\t\txmin = - ymax * aspect + eyeSepOnProjection;\r\n\t\t\t\txmax = ymax * aspect + eyeSepOnProjection;\r\n\r\n\t\t\t\tprojectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );\r\n\t\t\t\tprojectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\r\n\r\n\t\t\t\tthis.cameraL.projectionMatrix.copy( projectionMatrix );\r\n\r\n\t\t\t\t// for right eye\r\n\r\n\t\t\t\txmin = - ymax * aspect - eyeSepOnProjection;\r\n\t\t\t\txmax = ymax * aspect - eyeSepOnProjection;\r\n\r\n\t\t\t\tprojectionMatrix.elements[ 0 ] = 2 * near / ( xmax - xmin );\r\n\t\t\t\tprojectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\r\n\r\n\t\t\t\tthis.cameraR.projectionMatrix.copy( projectionMatrix );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.cameraL.matrixWorld.copy( camera.matrixWorld ).multiply( eyeLeft );\r\n\t\t\tthis.cameraR.matrixWorld.copy( camera.matrixWorld ).multiply( eyeRight );\r\n\r\n\t\t};\r\n\r\n\t} )()\r\n\r\n} );\r\n\r\n// File:src/lights/Light.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.Light = function ( color, intensity ) {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.type = 'Light';\r\n\r\n\tthis.color = new THREE.Color( color );\r\n\tthis.intensity = intensity !== undefined ? intensity : 1;\r\n\r\n\tthis.receiveShadow = undefined;\r\n\r\n};\r\n\r\nTHREE.Light.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {\r\n\r\n\tconstructor: THREE.Light,\r\n\r\n\tcopy: function ( source ) {\r\n\r\n\t\tTHREE.Object3D.prototype.copy.call( this, source );\r\n\r\n\t\tthis.color.copy( source.color );\r\n\t\tthis.intensity = source.intensity;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\ttoJSON: function ( meta ) {\r\n\r\n\t\tvar data = THREE.Object3D.prototype.toJSON.call( this, meta );\r\n\r\n\t\tdata.object.color = this.color.getHex();\r\n\t\tdata.object.intensity = this.intensity;\r\n\r\n\t\tif ( this.groundColor !== undefined ) data.object.groundColor = this.groundColor.getHex();\r\n\r\n\t\tif ( this.distance !== undefined ) data.object.distance = this.distance;\r\n\t\tif ( this.angle !== undefined ) data.object.angle = this.angle;\r\n\t\tif ( this.decay !== undefined ) data.object.decay = this.decay;\r\n\t\tif ( this.penumbra !== undefined ) data.object.penumbra = this.penumbra;\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n} );\r\n\r\n// File:src/lights/LightShadow.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.LightShadow = function ( camera ) {\r\n\r\n\tthis.camera = camera;\r\n\r\n\tthis.bias = 0;\r\n\tthis.radius = 1;\r\n\r\n\tthis.mapSize = new THREE.Vector2( 512, 512 );\r\n\r\n\tthis.map = null;\r\n\tthis.matrix = new THREE.Matrix4();\r\n\r\n};\r\n\r\nObject.assign( THREE.LightShadow.prototype, {\r\n\r\n\tcopy: function ( source ) {\r\n\r\n\t\tthis.camera = source.camera.clone();\r\n\r\n\t\tthis.bias = source.bias;\r\n\t\tthis.radius = source.radius;\r\n\r\n\t\tthis.mapSize.copy( source.mapSize );\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t}\r\n\r\n} );\r\n\r\n// File:src/lights/AmbientLight.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.AmbientLight = function ( color, intensity ) {\r\n\r\n\tTHREE.Light.call( this, color, intensity );\r\n\r\n\tthis.type = 'AmbientLight';\r\n\r\n\tthis.castShadow = undefined;\r\n\r\n};\r\n\r\nTHREE.AmbientLight.prototype = Object.assign( Object.create( THREE.Light.prototype ), {\r\n\r\n\tconstructor: THREE.AmbientLight\r\n\r\n} );\r\n\r\n// File:src/lights/DirectionalLight.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.DirectionalLight = function ( color, intensity ) {\r\n\r\n\tTHREE.Light.call( this, color, intensity );\r\n\r\n\tthis.type = 'DirectionalLight';\r\n\r\n\tthis.position.set( 0, 1, 0 );\r\n\tthis.updateMatrix();\r\n\r\n\tthis.target = new THREE.Object3D();\r\n\r\n\tthis.shadow = new THREE.DirectionalLightShadow();\r\n\r\n};\r\n\r\nTHREE.DirectionalLight.prototype = Object.assign( Object.create( THREE.Light.prototype ), {\r\n\r\n\tconstructor: THREE.DirectionalLight,\r\n\r\n\tcopy: function ( source ) {\r\n\r\n\t\tTHREE.Light.prototype.copy.call( this, source );\r\n\r\n\t\tthis.target = source.target.clone();\r\n\r\n\t\tthis.shadow = source.shadow.clone();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n} );\r\n\r\n// File:src/lights/DirectionalLightShadow.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.DirectionalLightShadow = function ( light ) {\r\n\r\n\tTHREE.LightShadow.call( this, new THREE.OrthographicCamera( - 5, 5, 5, - 5, 0.5, 500 ) );\r\n\r\n};\r\n\r\nTHREE.DirectionalLightShadow.prototype = Object.assign( Object.create( THREE.LightShadow.prototype ), {\r\n\r\n\tconstructor: THREE.DirectionalLightShadow\r\n\r\n} );\r\n\r\n// File:src/lights/HemisphereLight.js\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.HemisphereLight = function ( skyColor, groundColor, intensity ) {\r\n\r\n\tTHREE.Light.call( this, skyColor, intensity );\r\n\r\n\tthis.type = 'HemisphereLight';\r\n\r\n\tthis.castShadow = undefined;\r\n\r\n\tthis.position.set( 0, 1, 0 );\r\n\tthis.updateMatrix();\r\n\r\n\tthis.groundColor = new THREE.Color( groundColor );\r\n\r\n};\r\n\r\nTHREE.HemisphereLight.prototype = Object.assign( Object.create( THREE.Light.prototype ), {\r\n\r\n\tconstructor: THREE.HemisphereLight,\r\n\r\n\tcopy: function ( source ) {\r\n\r\n\t\tTHREE.Light.prototype.copy.call( this, source );\r\n\r\n\t\tthis.groundColor.copy( source.groundColor );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n} );\r\n\r\n// File:src/lights/PointLight.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\n\r\nTHREE.PointLight = function ( color, intensity, distance, decay ) {\r\n\r\n\tTHREE.Light.call( this, color, intensity );\r\n\r\n\tthis.type = 'PointLight';\r\n\r\n\tObject.defineProperty( this, 'power', {\r\n\t\tget: function () {\r\n\t\t\t// intensity = power per solid angle.\r\n\t\t\t// ref: equation (15) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\r\n\t\t\treturn this.intensity * 4 * Math.PI;\r\n\r\n\t\t},\r\n\t\tset: function ( power ) {\r\n\t\t\t// intensity = power per solid angle.\r\n\t\t\t// ref: equation (15) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\r\n\t\t\tthis.intensity = power / ( 4 * Math.PI );\r\n\t\t}\r\n\t} );\r\n\r\n\tthis.distance = ( distance !== undefined ) ? distance : 0;\r\n\tthis.decay = ( decay !== undefined ) ? decay : 1;\t// for physically correct lights, should be 2.\r\n\r\n\tthis.shadow = new THREE.LightShadow( new THREE.PerspectiveCamera( 90, 1, 0.5, 500 ) );\r\n\r\n};\r\n\r\nTHREE.PointLight.prototype = Object.assign( Object.create( THREE.Light.prototype ), {\r\n\r\n\tconstructor: THREE.PointLight,\r\n\r\n\tcopy: function ( source ) {\r\n\r\n\t\tTHREE.Light.prototype.copy.call( this, source );\r\n\r\n\t\tthis.distance = source.distance;\r\n\t\tthis.decay = source.decay;\r\n\r\n\t\tthis.shadow = source.shadow.clone();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n} );\r\n\r\n// File:src/lights/SpotLight.js\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.SpotLight = function ( color, intensity, distance, angle, penumbra, decay ) {\r\n\r\n\tTHREE.Light.call( this, color, intensity );\r\n\r\n\tthis.type = 'SpotLight';\r\n\r\n\tthis.position.set( 0, 1, 0 );\r\n\tthis.updateMatrix();\r\n\r\n\tthis.target = new THREE.Object3D();\r\n\r\n\tObject.defineProperty( this, 'power', {\r\n\t\tget: function () {\r\n\t\t\t// intensity = power per solid angle.\r\n\t\t\t// ref: equation (17) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\r\n\t\t\treturn this.intensity * Math.PI;\r\n\t\t},\r\n\t\tset: function ( power ) {\r\n\t\t\t// intensity = power per solid angle.\r\n\t\t\t// ref: equation (17) from http://www.frostbite.com/wp-content/uploads/2014/11/course_notes_moving_frostbite_to_pbr.pdf\r\n\t\t\tthis.intensity = power / Math.PI;\r\n\t\t}\r\n\t} );\r\n\r\n\tthis.distance = ( distance !== undefined ) ? distance : 0;\r\n\tthis.angle = ( angle !== undefined ) ? angle : Math.PI / 3;\r\n\tthis.penumbra = ( penumbra !== undefined ) ? penumbra : 0;\r\n\tthis.decay = ( decay !== undefined ) ? decay : 1;\t// for physically correct lights, should be 2.\r\n\r\n\tthis.shadow = new THREE.SpotLightShadow();\r\n\r\n};\r\n\r\nTHREE.SpotLight.prototype = Object.assign( Object.create( THREE.Light.prototype ), {\r\n\r\n\tconstructor: THREE.SpotLight,\r\n\r\n\tcopy: function ( source ) {\r\n\r\n\t\tTHREE.Light.prototype.copy.call( this, source );\r\n\r\n\t\tthis.distance = source.distance;\r\n\t\tthis.angle = source.angle;\r\n\t\tthis.penumbra = source.penumbra;\r\n\t\tthis.decay = source.decay;\r\n\r\n\t\tthis.target = source.target.clone();\r\n\r\n\t\tthis.shadow = source.shadow.clone();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n} );\r\n\r\n// File:src/lights/SpotLightShadow.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.SpotLightShadow = function () {\r\n\r\n\tTHREE.LightShadow.call( this, new THREE.PerspectiveCamera( 50, 1, 0.5, 500 ) );\r\n\r\n};\r\n\r\nTHREE.SpotLightShadow.prototype = Object.assign( Object.create( THREE.LightShadow.prototype ), {\r\n\r\n\tconstructor: THREE.SpotLightShadow,\r\n\r\n\tupdate: function ( light ) {\r\n\r\n\t\tvar fov = THREE.Math.RAD2DEG * 2 * light.angle;\r\n\t\tvar aspect = this.mapSize.width / this.mapSize.height;\r\n\t\tvar far = light.distance || 500;\r\n\r\n\t\tvar camera = this.camera;\r\n\r\n\t\tif ( fov !== camera.fov || aspect !== camera.aspect || far !== camera.far ) {\r\n\r\n\t\t\tcamera.fov = fov;\r\n\t\t\tcamera.aspect = aspect;\r\n\t\t\tcamera.far = far;\r\n\t\t\tcamera.updateProjectionMatrix();\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n} );\r\n\r\n// File:src/loaders/AudioLoader.js\r\n\r\n/**\r\n * @author Reece Aaron Lecrivain / http://reecenotes.com/\r\n */\r\n\r\nTHREE.AudioLoader = function ( manager ) {\r\n\r\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\r\n\r\n};\r\n\r\nTHREE.AudioLoader.prototype = {\r\n\r\n\tconstructor: THREE.AudioLoader,\r\n\r\n\tload: function ( url, onLoad, onProgress, onError ) {\r\n\r\n\t\tvar loader = new THREE.XHRLoader( this.manager );\r\n\t\tloader.setResponseType( 'arraybuffer' );\r\n\t\tloader.load( url, function ( buffer ) {\r\n\r\n\t\t\tvar context = THREE.AudioContext;\r\n\r\n\t\t\tcontext.decodeAudioData( buffer, function ( audioBuffer ) {\r\n\r\n\t\t\t\tonLoad( audioBuffer );\r\n\r\n\t\t\t} );\r\n\r\n\t\t}, onProgress, onError );\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/loaders/Cache.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.Cache = {\r\n\r\n\tenabled: false,\r\n\r\n\tfiles: {},\r\n\r\n\tadd: function ( key, file ) {\r\n\r\n\t\tif ( this.enabled === false ) return;\r\n\r\n\t\t// console.log( 'THREE.Cache', 'Adding key:', key );\r\n\r\n\t\tthis.files[ key ] = file;\r\n\r\n\t},\r\n\r\n\tget: function ( key ) {\r\n\r\n\t\tif ( this.enabled === false ) return;\r\n\r\n\t\t// console.log( 'THREE.Cache', 'Checking key:', key );\r\n\r\n\t\treturn this.files[ key ];\r\n\r\n\t},\r\n\r\n\tremove: function ( key ) {\r\n\r\n\t\tdelete this.files[ key ];\r\n\r\n\t},\r\n\r\n\tclear: function () {\r\n\r\n\t\tthis.files = {};\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/loaders/Loader.js\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.Loader = function () {\r\n\r\n\tthis.onLoadStart = function () {};\r\n\tthis.onLoadProgress = function () {};\r\n\tthis.onLoadComplete = function () {};\r\n\r\n};\r\n\r\nTHREE.Loader.prototype = {\r\n\r\n\tconstructor: THREE.Loader,\r\n\r\n\tcrossOrigin: undefined,\r\n\r\n\textractUrlBase: function ( url ) {\r\n\r\n\t\tvar parts = url.split( '/' );\r\n\r\n\t\tif ( parts.length === 1 ) return './';\r\n\r\n\t\tparts.pop();\r\n\r\n\t\treturn parts.join( '/' ) + '/';\r\n\r\n\t},\r\n\r\n\tinitMaterials: function ( materials, texturePath, crossOrigin ) {\r\n\r\n\t\tvar array = [];\r\n\r\n\t\tfor ( var i = 0; i < materials.length; ++ i ) {\r\n\r\n\t\t\tarray[ i ] = this.createMaterial( materials[ i ], texturePath, crossOrigin );\r\n\r\n\t\t}\r\n\r\n\t\treturn array;\r\n\r\n\t},\r\n\r\n\tcreateMaterial: ( function () {\r\n\r\n\t\tvar color, textureLoader, materialLoader;\r\n\r\n\t\treturn function ( m, texturePath, crossOrigin ) {\r\n\r\n\t\t\tif ( color === undefined ) color = new THREE.Color();\r\n\t\t\tif ( textureLoader === undefined ) textureLoader = new THREE.TextureLoader();\r\n\t\t\tif ( materialLoader === undefined ) materialLoader = new THREE.MaterialLoader();\r\n\r\n\t\t\t// convert from old material format\r\n\r\n\t\t\tvar textures = {};\r\n\r\n\t\t\tfunction loadTexture( path, repeat, offset, wrap, anisotropy ) {\r\n\r\n\t\t\t\tvar fullPath = texturePath + path;\r\n\t\t\t\tvar loader = THREE.Loader.Handlers.get( fullPath );\r\n\r\n\t\t\t\tvar texture;\r\n\r\n\t\t\t\tif ( loader !== null ) {\r\n\r\n\t\t\t\t\ttexture = loader.load( fullPath );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\ttextureLoader.setCrossOrigin( crossOrigin );\r\n\t\t\t\t\ttexture = textureLoader.load( fullPath );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( repeat !== undefined ) {\r\n\r\n\t\t\t\t\ttexture.repeat.fromArray( repeat );\r\n\r\n\t\t\t\t\tif ( repeat[ 0 ] !== 1 ) texture.wrapS = THREE.RepeatWrapping;\r\n\t\t\t\t\tif ( repeat[ 1 ] !== 1 ) texture.wrapT = THREE.RepeatWrapping;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( offset !== undefined ) {\r\n\r\n\t\t\t\t\ttexture.offset.fromArray( offset );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( wrap !== undefined ) {\r\n\r\n\t\t\t\t\tif ( wrap[ 0 ] === 'repeat' ) texture.wrapS = THREE.RepeatWrapping;\r\n\t\t\t\t\tif ( wrap[ 0 ] === 'mirror' ) texture.wrapS = THREE.MirroredRepeatWrapping;\r\n\r\n\t\t\t\t\tif ( wrap[ 1 ] === 'repeat' ) texture.wrapT = THREE.RepeatWrapping;\r\n\t\t\t\t\tif ( wrap[ 1 ] === 'mirror' ) texture.wrapT = THREE.MirroredRepeatWrapping;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( anisotropy !== undefined ) {\r\n\r\n\t\t\t\t\ttexture.anisotropy = anisotropy;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar uuid = THREE.Math.generateUUID();\r\n\r\n\t\t\t\ttextures[ uuid ] = texture;\r\n\r\n\t\t\t\treturn uuid;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//\r\n\r\n\t\t\tvar json = {\r\n\t\t\t\tuuid: THREE.Math.generateUUID(),\r\n\t\t\t\ttype: 'MeshLambertMaterial'\r\n\t\t\t};\r\n\r\n\t\t\tfor ( var name in m ) {\r\n\r\n\t\t\t\tvar value = m[ name ];\r\n\r\n\t\t\t\tswitch ( name ) {\r\n\t\t\t\t\tcase 'DbgColor':\r\n\t\t\t\t\tcase 'DbgIndex':\r\n\t\t\t\t\tcase 'opticalDensity':\r\n\t\t\t\t\tcase 'illumination':\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'DbgName':\r\n\t\t\t\t\t\tjson.name = value;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'blending':\r\n\t\t\t\t\t\tjson.blending = THREE[ value ];\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'colorAmbient':\r\n\t\t\t\t\tcase 'mapAmbient':\r\n\t\t\t\t\t\tconsole.warn( 'THREE.Loader.createMaterial:', name, 'is no longer supported.' );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'colorDiffuse':\r\n\t\t\t\t\t\tjson.color = color.fromArray( value ).getHex();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'colorSpecular':\r\n\t\t\t\t\t\tjson.specular = color.fromArray( value ).getHex();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'colorEmissive':\r\n\t\t\t\t\t\tjson.emissive = color.fromArray( value ).getHex();\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'specularCoef':\r\n\t\t\t\t\t\tjson.shininess = value;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'shading':\r\n\t\t\t\t\t\tif ( value.toLowerCase() === 'basic' ) json.type = 'MeshBasicMaterial';\r\n\t\t\t\t\t\tif ( value.toLowerCase() === 'phong' ) json.type = 'MeshPhongMaterial';\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'mapDiffuse':\r\n\t\t\t\t\t\tjson.map = loadTexture( value, m.mapDiffuseRepeat, m.mapDiffuseOffset, m.mapDiffuseWrap, m.mapDiffuseAnisotropy );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'mapDiffuseRepeat':\r\n\t\t\t\t\tcase 'mapDiffuseOffset':\r\n\t\t\t\t\tcase 'mapDiffuseWrap':\r\n\t\t\t\t\tcase 'mapDiffuseAnisotropy':\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'mapLight':\r\n\t\t\t\t\t\tjson.lightMap = loadTexture( value, m.mapLightRepeat, m.mapLightOffset, m.mapLightWrap, m.mapLightAnisotropy );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'mapLightRepeat':\r\n\t\t\t\t\tcase 'mapLightOffset':\r\n\t\t\t\t\tcase 'mapLightWrap':\r\n\t\t\t\t\tcase 'mapLightAnisotropy':\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'mapAO':\r\n\t\t\t\t\t\tjson.aoMap = loadTexture( value, m.mapAORepeat, m.mapAOOffset, m.mapAOWrap, m.mapAOAnisotropy );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'mapAORepeat':\r\n\t\t\t\t\tcase 'mapAOOffset':\r\n\t\t\t\t\tcase 'mapAOWrap':\r\n\t\t\t\t\tcase 'mapAOAnisotropy':\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'mapBump':\r\n\t\t\t\t\t\tjson.bumpMap = loadTexture( value, m.mapBumpRepeat, m.mapBumpOffset, m.mapBumpWrap, m.mapBumpAnisotropy );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'mapBumpScale':\r\n\t\t\t\t\t\tjson.bumpScale = value;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'mapBumpRepeat':\r\n\t\t\t\t\tcase 'mapBumpOffset':\r\n\t\t\t\t\tcase 'mapBumpWrap':\r\n\t\t\t\t\tcase 'mapBumpAnisotropy':\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'mapNormal':\r\n\t\t\t\t\t\tjson.normalMap = loadTexture( value, m.mapNormalRepeat, m.mapNormalOffset, m.mapNormalWrap, m.mapNormalAnisotropy );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'mapNormalFactor':\r\n\t\t\t\t\t\tjson.normalScale = [ value, value ];\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'mapNormalRepeat':\r\n\t\t\t\t\tcase 'mapNormalOffset':\r\n\t\t\t\t\tcase 'mapNormalWrap':\r\n\t\t\t\t\tcase 'mapNormalAnisotropy':\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'mapSpecular':\r\n\t\t\t\t\t\tjson.specularMap = loadTexture( value, m.mapSpecularRepeat, m.mapSpecularOffset, m.mapSpecularWrap, m.mapSpecularAnisotropy );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'mapSpecularRepeat':\r\n\t\t\t\t\tcase 'mapSpecularOffset':\r\n\t\t\t\t\tcase 'mapSpecularWrap':\r\n\t\t\t\t\tcase 'mapSpecularAnisotropy':\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'mapAlpha':\r\n\t\t\t\t\t\tjson.alphaMap = loadTexture( value, m.mapAlphaRepeat, m.mapAlphaOffset, m.mapAlphaWrap, m.mapAlphaAnisotropy );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'mapAlphaRepeat':\r\n\t\t\t\t\tcase 'mapAlphaOffset':\r\n\t\t\t\t\tcase 'mapAlphaWrap':\r\n\t\t\t\t\tcase 'mapAlphaAnisotropy':\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'flipSided':\r\n\t\t\t\t\t\tjson.side = THREE.BackSide;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'doubleSided':\r\n\t\t\t\t\t\tjson.side = THREE.DoubleSide;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'transparency':\r\n\t\t\t\t\t\tconsole.warn( 'THREE.Loader.createMaterial: transparency has been renamed to opacity' );\r\n\t\t\t\t\t\tjson.opacity = value;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'depthTest':\r\n\t\t\t\t\tcase 'depthWrite':\r\n\t\t\t\t\tcase 'colorWrite':\r\n\t\t\t\t\tcase 'opacity':\r\n\t\t\t\t\tcase 'reflectivity':\r\n\t\t\t\t\tcase 'transparent':\r\n\t\t\t\t\tcase 'visible':\r\n\t\t\t\t\tcase 'wireframe':\r\n\t\t\t\t\t\tjson[ name ] = value;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'vertexColors':\r\n\t\t\t\t\t\tif ( value === true ) json.vertexColors = THREE.VertexColors;\r\n\t\t\t\t\t\tif ( value === 'face' ) json.vertexColors = THREE.FaceColors;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tconsole.error( 'THREE.Loader.createMaterial: Unsupported', name, value );\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( json.type === 'MeshBasicMaterial' ) delete json.emissive;\r\n\t\t\tif ( json.type !== 'MeshPhongMaterial' ) delete json.specular;\r\n\r\n\t\t\tif ( json.opacity < 1 ) json.transparent = true;\r\n\r\n\t\t\tmaterialLoader.setTextures( textures );\r\n\r\n\t\t\treturn materialLoader.parse( json );\r\n\r\n\t\t};\r\n\r\n\t} )()\r\n\r\n};\r\n\r\nTHREE.Loader.Handlers = {\r\n\r\n\thandlers: [],\r\n\r\n\tadd: function ( regex, loader ) {\r\n\r\n\t\tthis.handlers.push( regex, loader );\r\n\r\n\t},\r\n\r\n\tget: function ( file ) {\r\n\r\n\t\tvar handlers = this.handlers;\r\n\r\n\t\tfor ( var i = 0, l = handlers.length; i < l; i += 2 ) {\r\n\r\n\t\t\tvar regex = handlers[ i ];\r\n\t\t\tvar loader  = handlers[ i + 1 ];\r\n\r\n\t\t\tif ( regex.test( file ) ) {\r\n\r\n\t\t\t\treturn loader;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/loaders/XHRLoader.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.XHRLoader = function ( manager ) {\r\n\r\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\r\n\r\n};\r\n\r\nTHREE.XHRLoader.prototype = {\r\n\r\n\tconstructor: THREE.XHRLoader,\r\n\r\n\tload: function ( url, onLoad, onProgress, onError ) {\r\n\r\n\t\tif ( this.path !== undefined ) url = this.path + url;\r\n\r\n\t\tvar scope = this;\r\n\r\n\t\tvar cached = THREE.Cache.get( url );\r\n\r\n\t\tif ( cached !== undefined ) {\r\n\r\n\t\t\tif ( onLoad ) {\r\n\r\n\t\t\t\tsetTimeout( function () {\r\n\r\n\t\t\t\t\tonLoad( cached );\r\n\r\n\t\t\t\t}, 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn cached;\r\n\r\n\t\t}\r\n\r\n\t\tvar request = new XMLHttpRequest();\r\n\t\trequest.overrideMimeType( 'text/plain' );\r\n\t\trequest.open( 'GET', url, true );\r\n\r\n\t\trequest.addEventListener( 'load', function ( event ) {\r\n\r\n\t\t\tvar response = event.target.response;\r\n\r\n\t\t\tTHREE.Cache.add( url, response );\r\n\r\n\t\t\tif ( this.status === 200 ) {\r\n\r\n\t\t\t\tif ( onLoad ) onLoad( response );\r\n\r\n\t\t\t\tscope.manager.itemEnd( url );\r\n\r\n\t\t\t} else if ( this.status === 0 ) {\r\n\r\n\t\t\t\t// Some browsers return HTTP Status 0 when using non-http protocol\r\n\t\t\t\t// e.g. 'file://' or 'data://'. Handle as success.\r\n\r\n\t\t\t\tconsole.warn( 'THREE.XHRLoader: HTTP Status 0 received.' );\r\n\r\n\t\t\t\tif ( onLoad ) onLoad( response );\r\n\r\n\t\t\t\tscope.manager.itemEnd( url );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tif ( onError ) onError( event );\r\n\r\n\t\t\t\tscope.manager.itemError( url );\r\n\r\n\t\t\t}\r\n\r\n\t\t}, false );\r\n\r\n\t\tif ( onProgress !== undefined ) {\r\n\r\n\t\t\trequest.addEventListener( 'progress', function ( event ) {\r\n\r\n\t\t\t\tonProgress( event );\r\n\r\n\t\t\t}, false );\r\n\r\n\t\t}\r\n\r\n\t\trequest.addEventListener( 'error', function ( event ) {\r\n\r\n\t\t\tif ( onError ) onError( event );\r\n\r\n\t\t\tscope.manager.itemError( url );\r\n\r\n\t\t}, false );\r\n\r\n\t\tif ( this.responseType !== undefined ) request.responseType = this.responseType;\r\n\t\tif ( this.withCredentials !== undefined ) request.withCredentials = this.withCredentials;\r\n\r\n\t\trequest.send( null );\r\n\r\n\t\tscope.manager.itemStart( url );\r\n\r\n\t\treturn request;\r\n\r\n\t},\r\n\r\n\tsetPath: function ( value ) {\r\n\r\n\t\tthis.path = value;\r\n\r\n\t},\r\n\r\n\tsetResponseType: function ( value ) {\r\n\r\n\t\tthis.responseType = value;\r\n\r\n\t},\r\n\r\n\tsetWithCredentials: function ( value ) {\r\n\r\n\t\tthis.withCredentials = value;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/loaders/FontLoader.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.FontLoader = function ( manager ) {\r\n\r\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\r\n\r\n};\r\n\r\nTHREE.FontLoader.prototype = {\r\n\r\n\tconstructor: THREE.FontLoader,\r\n\r\n\tload: function ( url, onLoad, onProgress, onError ) {\r\n\r\n\t\tvar scope = this;\r\n\r\n\t\tvar loader = new THREE.XHRLoader( this.manager );\r\n\t\tloader.load( url, function ( text ) {\r\n\r\n\t\t\tvar json;\r\n\r\n\t\t\ttry {\r\n\r\n\t\t\t\tjson = JSON.parse( text );\r\n\r\n\t\t\t} catch ( e ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.' );\r\n\t\t\t\tjson = JSON.parse( text.substring( 65, text.length - 2 ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar font = scope.parse( json );\r\n\r\n\t\t\tif ( onLoad ) onLoad( font );\r\n\r\n\t\t}, onProgress, onError );\r\n\r\n\t},\r\n\r\n\tparse: function ( json ) {\r\n\r\n\t\treturn new THREE.Font( json );\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/loaders/ImageLoader.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.ImageLoader = function ( manager ) {\r\n\r\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\r\n\r\n};\r\n\r\nTHREE.ImageLoader.prototype = {\r\n\r\n\tconstructor: THREE.ImageLoader,\r\n\r\n\tload: function ( url, onLoad, onProgress, onError ) {\r\n\r\n\t\tif ( this.path !== undefined ) url = this.path + url;\r\n\r\n\t\tvar scope = this;\r\n\r\n\t\tvar cached = THREE.Cache.get( url );\r\n\r\n\t\tif ( cached !== undefined ) {\r\n\r\n\t\t\tscope.manager.itemStart( url );\r\n\r\n\t\t\tif ( onLoad ) {\r\n\r\n\t\t\t\tsetTimeout( function () {\r\n\r\n\t\t\t\t\tonLoad( cached );\r\n\r\n\t\t\t\t\tscope.manager.itemEnd( url );\r\n\r\n\t\t\t\t}, 0 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tscope.manager.itemEnd( url );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn cached;\r\n\r\n\t\t}\r\n\r\n\t\tvar image = document.createElement( 'img' );\r\n\r\n\t\timage.addEventListener( 'load', function ( event ) {\r\n\r\n\t\t\tTHREE.Cache.add( url, this );\r\n\r\n\t\t\tif ( onLoad ) onLoad( this );\r\n\r\n\t\t\tscope.manager.itemEnd( url );\r\n\r\n\t\t}, false );\r\n\r\n\t\tif ( onProgress !== undefined ) {\r\n\r\n\t\t\timage.addEventListener( 'progress', function ( event ) {\r\n\r\n\t\t\t\tonProgress( event );\r\n\r\n\t\t\t}, false );\r\n\r\n\t\t}\r\n\r\n\t\timage.addEventListener( 'error', function ( event ) {\r\n\r\n\t\t\tif ( onError ) onError( event );\r\n\r\n\t\t\tscope.manager.itemError( url );\r\n\r\n\t\t}, false );\r\n\r\n\t\tif ( this.crossOrigin !== undefined ) image.crossOrigin = this.crossOrigin;\r\n\r\n\t\tscope.manager.itemStart( url );\r\n\r\n\t\timage.src = url;\r\n\r\n\t\treturn image;\r\n\r\n\t},\r\n\r\n\tsetCrossOrigin: function ( value ) {\r\n\r\n\t\tthis.crossOrigin = value;\r\n\r\n\t},\r\n\r\n\tsetPath: function ( value ) {\r\n\r\n\t\tthis.path = value;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/loaders/JSONLoader.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.JSONLoader = function ( manager ) {\r\n\r\n\tif ( typeof manager === 'boolean' ) {\r\n\r\n\t\tconsole.warn( 'THREE.JSONLoader: showStatus parameter has been removed from constructor.' );\r\n\t\tmanager = undefined;\r\n\r\n\t}\r\n\r\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\r\n\r\n\tthis.withCredentials = false;\r\n\r\n};\r\n\r\nTHREE.JSONLoader.prototype = {\r\n\r\n\tconstructor: THREE.JSONLoader,\r\n\r\n\t// Deprecated\r\n\r\n\tget statusDomElement () {\r\n\r\n\t\tif ( this._statusDomElement === undefined ) {\r\n\r\n\t\t\tthis._statusDomElement = document.createElement( 'div' );\r\n\r\n\t\t}\r\n\r\n\t\tconsole.warn( 'THREE.JSONLoader: .statusDomElement has been removed.' );\r\n\t\treturn this._statusDomElement;\r\n\r\n\t},\r\n\r\n\tload: function( url, onLoad, onProgress, onError ) {\r\n\r\n\t\tvar scope = this;\r\n\r\n\t\tvar texturePath = this.texturePath && ( typeof this.texturePath === \"string\" ) ? this.texturePath : THREE.Loader.prototype.extractUrlBase( url );\r\n\r\n\t\tvar loader = new THREE.XHRLoader( this.manager );\r\n\t\tloader.setWithCredentials( this.withCredentials );\r\n\t\tloader.load( url, function ( text ) {\r\n\r\n\t\t\tvar json = JSON.parse( text );\r\n\t\t\tvar metadata = json.metadata;\r\n\r\n\t\t\tif ( metadata !== undefined ) {\r\n\r\n\t\t\t\tvar type = metadata.type;\r\n\r\n\t\t\t\tif ( type !== undefined ) {\r\n\r\n\t\t\t\t\tif ( type.toLowerCase() === 'object' ) {\r\n\r\n\t\t\t\t\t\tconsole.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.ObjectLoader instead.' );\r\n\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( type.toLowerCase() === 'scene' ) {\r\n\r\n\t\t\t\t\t\tconsole.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.SceneLoader instead.' );\r\n\t\t\t\t\t\treturn;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar object = scope.parse( json, texturePath );\r\n\t\t\tonLoad( object.geometry, object.materials );\r\n\r\n\t\t}, onProgress, onError );\r\n\r\n\t},\r\n\r\n\tsetTexturePath: function ( value ) {\r\n\r\n\t\tthis.texturePath = value;\r\n\r\n\t},\r\n\r\n\tparse: function ( json, texturePath ) {\r\n\r\n\t\tvar geometry = new THREE.Geometry(),\r\n\t\tscale = ( json.scale !== undefined ) ? 1.0 / json.scale : 1.0;\r\n\r\n\t\tparseModel( scale );\r\n\r\n\t\tparseSkin();\r\n\t\tparseMorphing( scale );\r\n\t\tparseAnimations();\r\n\r\n\t\tgeometry.computeFaceNormals();\r\n\t\tgeometry.computeBoundingSphere();\r\n\r\n\t\tfunction parseModel( scale ) {\r\n\r\n\t\t\tfunction isBitSet( value, position ) {\r\n\r\n\t\t\t\treturn value & ( 1 << position );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar i, j, fi,\r\n\r\n\t\t\toffset, zLength,\r\n\r\n\t\tcolorIndex, normalIndex, uvIndex, materialIndex,\r\n\r\n\t\t\ttype,\r\n\t\t\tisQuad,\r\n\t\t\thasMaterial,\r\n\t\t\thasFaceVertexUv,\r\n\t\t\thasFaceNormal, hasFaceVertexNormal,\r\n\t\t\thasFaceColor, hasFaceVertexColor,\r\n\r\n\t\tvertex, face, faceA, faceB, hex, normal,\r\n\r\n\t\t\tuvLayer, uv, u, v,\r\n\r\n\t\t\tfaces = json.faces,\r\n\t\t\tvertices = json.vertices,\r\n\t\t\tnormals = json.normals,\r\n\t\t\tcolors = json.colors,\r\n\r\n\t\t\tnUvLayers = 0;\r\n\r\n\t\t\tif ( json.uvs !== undefined ) {\r\n\r\n\t\t\t\t// disregard empty arrays\r\n\r\n\t\t\t\tfor ( i = 0; i < json.uvs.length; i ++ ) {\r\n\r\n\t\t\t\t\tif ( json.uvs[ i ].length ) nUvLayers ++;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\r\n\r\n\t\t\t\t\tgeometry.faceVertexUvs[ i ] = [];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\toffset = 0;\r\n\t\t\tzLength = vertices.length;\r\n\r\n\t\t\twhile ( offset < zLength ) {\r\n\r\n\t\t\t\tvertex = new THREE.Vector3();\r\n\r\n\t\t\t\tvertex.x = vertices[ offset ++ ] * scale;\r\n\t\t\t\tvertex.y = vertices[ offset ++ ] * scale;\r\n\t\t\t\tvertex.z = vertices[ offset ++ ] * scale;\r\n\r\n\t\t\t\tgeometry.vertices.push( vertex );\r\n\r\n\t\t\t}\r\n\r\n\t\t\toffset = 0;\r\n\t\t\tzLength = faces.length;\r\n\r\n\t\t\twhile ( offset < zLength ) {\r\n\r\n\t\t\t\ttype = faces[ offset ++ ];\r\n\r\n\r\n\t\t\t\tisQuad              = isBitSet( type, 0 );\r\n\t\t\t\thasMaterial         = isBitSet( type, 1 );\r\n\t\t\t\thasFaceVertexUv     = isBitSet( type, 3 );\r\n\t\t\t\thasFaceNormal       = isBitSet( type, 4 );\r\n\t\t\t\thasFaceVertexNormal = isBitSet( type, 5 );\r\n\t\t\t\thasFaceColor\t     = isBitSet( type, 6 );\r\n\t\t\t\thasFaceVertexColor  = isBitSet( type, 7 );\r\n\r\n\t\t\t\t// console.log(\"type\", type, \"bits\", isQuad, hasMaterial, hasFaceVertexUv, hasFaceNormal, hasFaceVertexNormal, hasFaceColor, hasFaceVertexColor);\r\n\r\n\t\t\t\tif ( isQuad ) {\r\n\r\n\t\t\t\t\tfaceA = new THREE.Face3();\r\n\t\t\t\t\tfaceA.a = faces[ offset ];\r\n\t\t\t\t\tfaceA.b = faces[ offset + 1 ];\r\n\t\t\t\t\tfaceA.c = faces[ offset + 3 ];\r\n\r\n\t\t\t\t\tfaceB = new THREE.Face3();\r\n\t\t\t\t\tfaceB.a = faces[ offset + 1 ];\r\n\t\t\t\t\tfaceB.b = faces[ offset + 2 ];\r\n\t\t\t\t\tfaceB.c = faces[ offset + 3 ];\r\n\r\n\t\t\t\t\toffset += 4;\r\n\r\n\t\t\t\t\tif ( hasMaterial ) {\r\n\r\n\t\t\t\t\t\tmaterialIndex = faces[ offset ++ ];\r\n\t\t\t\t\t\tfaceA.materialIndex = materialIndex;\r\n\t\t\t\t\t\tfaceB.materialIndex = materialIndex;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// to get face <=> uv index correspondence\r\n\r\n\t\t\t\t\tfi = geometry.faces.length;\r\n\r\n\t\t\t\t\tif ( hasFaceVertexUv ) {\r\n\r\n\t\t\t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\r\n\r\n\t\t\t\t\t\t\tuvLayer = json.uvs[ i ];\r\n\r\n\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ] = [];\r\n\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi + 1 ] = [];\r\n\r\n\t\t\t\t\t\t\tfor ( j = 0; j < 4; j ++ ) {\r\n\r\n\t\t\t\t\t\t\t\tuvIndex = faces[ offset ++ ];\r\n\r\n\t\t\t\t\t\t\t\tu = uvLayer[ uvIndex * 2 ];\r\n\t\t\t\t\t\t\t\tv = uvLayer[ uvIndex * 2 + 1 ];\r\n\r\n\t\t\t\t\t\t\t\tuv = new THREE.Vector2( u, v );\r\n\r\n\t\t\t\t\t\t\t\tif ( j !== 2 ) geometry.faceVertexUvs[ i ][ fi ].push( uv );\r\n\t\t\t\t\t\t\t\tif ( j !== 0 ) geometry.faceVertexUvs[ i ][ fi + 1 ].push( uv );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( hasFaceNormal ) {\r\n\r\n\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\r\n\r\n\t\t\t\t\t\tfaceA.normal.set(\r\n\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\r\n\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\r\n\t\t\t\t\t\t\tnormals[ normalIndex ]\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\tfaceB.normal.copy( faceA.normal );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( hasFaceVertexNormal ) {\r\n\r\n\t\t\t\t\t\tfor ( i = 0; i < 4; i ++ ) {\r\n\r\n\t\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\r\n\r\n\t\t\t\t\t\t\tnormal = new THREE.Vector3(\r\n\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\r\n\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\r\n\t\t\t\t\t\t\t\tnormals[ normalIndex ]\r\n\t\t\t\t\t\t\t);\r\n\r\n\r\n\t\t\t\t\t\t\tif ( i !== 2 ) faceA.vertexNormals.push( normal );\r\n\t\t\t\t\t\t\tif ( i !== 0 ) faceB.vertexNormals.push( normal );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\r\n\t\t\t\t\tif ( hasFaceColor ) {\r\n\r\n\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\r\n\t\t\t\t\t\thex = colors[ colorIndex ];\r\n\r\n\t\t\t\t\t\tfaceA.color.setHex( hex );\r\n\t\t\t\t\t\tfaceB.color.setHex( hex );\r\n\r\n\t\t\t\t\t}\r\n\r\n\r\n\t\t\t\t\tif ( hasFaceVertexColor ) {\r\n\r\n\t\t\t\t\t\tfor ( i = 0; i < 4; i ++ ) {\r\n\r\n\t\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\r\n\t\t\t\t\t\t\thex = colors[ colorIndex ];\r\n\r\n\t\t\t\t\t\t\tif ( i !== 2 ) faceA.vertexColors.push( new THREE.Color( hex ) );\r\n\t\t\t\t\t\t\tif ( i !== 0 ) faceB.vertexColors.push( new THREE.Color( hex ) );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tgeometry.faces.push( faceA );\r\n\t\t\t\t\tgeometry.faces.push( faceB );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tface = new THREE.Face3();\r\n\t\t\t\t\tface.a = faces[ offset ++ ];\r\n\t\t\t\t\tface.b = faces[ offset ++ ];\r\n\t\t\t\t\tface.c = faces[ offset ++ ];\r\n\r\n\t\t\t\t\tif ( hasMaterial ) {\r\n\r\n\t\t\t\t\t\tmaterialIndex = faces[ offset ++ ];\r\n\t\t\t\t\t\tface.materialIndex = materialIndex;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// to get face <=> uv index correspondence\r\n\r\n\t\t\t\t\tfi = geometry.faces.length;\r\n\r\n\t\t\t\t\tif ( hasFaceVertexUv ) {\r\n\r\n\t\t\t\t\t\tfor ( i = 0; i < nUvLayers; i ++ ) {\r\n\r\n\t\t\t\t\t\t\tuvLayer = json.uvs[ i ];\r\n\r\n\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ] = [];\r\n\r\n\t\t\t\t\t\t\tfor ( j = 0; j < 3; j ++ ) {\r\n\r\n\t\t\t\t\t\t\t\tuvIndex = faces[ offset ++ ];\r\n\r\n\t\t\t\t\t\t\t\tu = uvLayer[ uvIndex * 2 ];\r\n\t\t\t\t\t\t\t\tv = uvLayer[ uvIndex * 2 + 1 ];\r\n\r\n\t\t\t\t\t\t\t\tuv = new THREE.Vector2( u, v );\r\n\r\n\t\t\t\t\t\t\t\tgeometry.faceVertexUvs[ i ][ fi ].push( uv );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( hasFaceNormal ) {\r\n\r\n\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\r\n\r\n\t\t\t\t\t\tface.normal.set(\r\n\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\r\n\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\r\n\t\t\t\t\t\t\tnormals[ normalIndex ]\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( hasFaceVertexNormal ) {\r\n\r\n\t\t\t\t\t\tfor ( i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\t\t\t\t\tnormalIndex = faces[ offset ++ ] * 3;\r\n\r\n\t\t\t\t\t\t\tnormal = new THREE.Vector3(\r\n\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\r\n\t\t\t\t\t\t\t\tnormals[ normalIndex ++ ],\r\n\t\t\t\t\t\t\t\tnormals[ normalIndex ]\r\n\t\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\t\tface.vertexNormals.push( normal );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\r\n\t\t\t\t\tif ( hasFaceColor ) {\r\n\r\n\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\r\n\t\t\t\t\t\tface.color.setHex( colors[ colorIndex ] );\r\n\r\n\t\t\t\t\t}\r\n\r\n\r\n\t\t\t\t\tif ( hasFaceVertexColor ) {\r\n\r\n\t\t\t\t\t\tfor ( i = 0; i < 3; i ++ ) {\r\n\r\n\t\t\t\t\t\t\tcolorIndex = faces[ offset ++ ];\r\n\t\t\t\t\t\t\tface.vertexColors.push( new THREE.Color( colors[ colorIndex ] ) );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tgeometry.faces.push( face );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction parseSkin() {\r\n\r\n\t\t\tvar influencesPerVertex = ( json.influencesPerVertex !== undefined ) ? json.influencesPerVertex : 2;\r\n\r\n\t\t\tif ( json.skinWeights ) {\r\n\r\n\t\t\t\tfor ( var i = 0, l = json.skinWeights.length; i < l; i += influencesPerVertex ) {\r\n\r\n\t\t\t\t\tvar x =                               json.skinWeights[ i ];\r\n\t\t\t\t\tvar y = ( influencesPerVertex > 1 ) ? json.skinWeights[ i + 1 ] : 0;\r\n\t\t\t\t\tvar z = ( influencesPerVertex > 2 ) ? json.skinWeights[ i + 2 ] : 0;\r\n\t\t\t\t\tvar w = ( influencesPerVertex > 3 ) ? json.skinWeights[ i + 3 ] : 0;\r\n\r\n\t\t\t\t\tgeometry.skinWeights.push( new THREE.Vector4( x, y, z, w ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( json.skinIndices ) {\r\n\r\n\t\t\t\tfor ( var i = 0, l = json.skinIndices.length; i < l; i += influencesPerVertex ) {\r\n\r\n\t\t\t\t\tvar a =                               json.skinIndices[ i ];\r\n\t\t\t\t\tvar b = ( influencesPerVertex > 1 ) ? json.skinIndices[ i + 1 ] : 0;\r\n\t\t\t\t\tvar c = ( influencesPerVertex > 2 ) ? json.skinIndices[ i + 2 ] : 0;\r\n\t\t\t\t\tvar d = ( influencesPerVertex > 3 ) ? json.skinIndices[ i + 3 ] : 0;\r\n\r\n\t\t\t\t\tgeometry.skinIndices.push( new THREE.Vector4( a, b, c, d ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgeometry.bones = json.bones;\r\n\r\n\t\t\tif ( geometry.bones && geometry.bones.length > 0 && ( geometry.skinWeights.length !== geometry.skinIndices.length || geometry.skinIndices.length !== geometry.vertices.length ) ) {\r\n\r\n\t\t\t\tconsole.warn( 'When skinning, number of vertices (' + geometry.vertices.length + '), skinIndices (' +\r\n\t\t\t\t\tgeometry.skinIndices.length + '), and skinWeights (' + geometry.skinWeights.length + ') should match.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction parseMorphing( scale ) {\r\n\r\n\t\t\tif ( json.morphTargets !== undefined ) {\r\n\r\n\t\t\t\tfor ( var i = 0, l = json.morphTargets.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tgeometry.morphTargets[ i ] = {};\r\n\t\t\t\t\tgeometry.morphTargets[ i ].name = json.morphTargets[ i ].name;\r\n\t\t\t\t\tgeometry.morphTargets[ i ].vertices = [];\r\n\r\n\t\t\t\t\tvar dstVertices = geometry.morphTargets[ i ].vertices;\r\n\t\t\t\t\tvar srcVertices = json.morphTargets[ i ].vertices;\r\n\r\n\t\t\t\t\tfor ( var v = 0, vl = srcVertices.length; v < vl; v += 3 ) {\r\n\r\n\t\t\t\t\t\tvar vertex = new THREE.Vector3();\r\n\t\t\t\t\t\tvertex.x = srcVertices[ v ] * scale;\r\n\t\t\t\t\t\tvertex.y = srcVertices[ v + 1 ] * scale;\r\n\t\t\t\t\t\tvertex.z = srcVertices[ v + 2 ] * scale;\r\n\r\n\t\t\t\t\t\tdstVertices.push( vertex );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( json.morphColors !== undefined && json.morphColors.length > 0 ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.JSONLoader: \"morphColors\" no longer supported. Using them as face colors.' );\r\n\r\n\t\t\t\tvar faces = geometry.faces;\r\n\t\t\t\tvar morphColors = json.morphColors[ 0 ].colors;\r\n\r\n\t\t\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tfaces[ i ].color.fromArray( morphColors, i * 3 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction parseAnimations() {\r\n\r\n\t\t\tvar outputAnimations = [];\r\n\r\n\t\t\t// parse old style Bone/Hierarchy animations\r\n\t\t\tvar animations = [];\r\n\r\n\t\t\tif ( json.animation !== undefined ) {\r\n\r\n\t\t\t\tanimations.push( json.animation );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( json.animations !== undefined ) {\r\n\r\n\t\t\t\tif ( json.animations.length ) {\r\n\r\n\t\t\t\t\tanimations = animations.concat( json.animations );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tanimations.push( json.animations );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var i = 0; i < animations.length; i ++ ) {\r\n\r\n\t\t\t\tvar clip = THREE.AnimationClip.parseAnimation( animations[ i ], geometry.bones );\r\n\t\t\t\tif ( clip ) outputAnimations.push( clip );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// parse implicit morph animations\r\n\t\t\tif ( geometry.morphTargets ) {\r\n\r\n\t\t\t\t// TODO: Figure out what an appropraite FPS is for morph target animations -- defaulting to 10, but really it is completely arbitrary.\r\n\t\t\t\tvar morphAnimationClips = THREE.AnimationClip.CreateClipsFromMorphTargetSequences( geometry.morphTargets, 10 );\r\n\t\t\t\toutputAnimations = outputAnimations.concat( morphAnimationClips );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( outputAnimations.length > 0 ) geometry.animations = outputAnimations;\r\n\r\n\t\t}\r\n\r\n\t\tif ( json.materials === undefined || json.materials.length === 0 ) {\r\n\r\n\t\t\treturn { geometry: geometry };\r\n\r\n\t\t} else {\r\n\r\n\t\t\tvar materials = THREE.Loader.prototype.initMaterials( json.materials, texturePath, this.crossOrigin );\r\n\r\n\t\t\treturn { geometry: geometry, materials: materials };\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/loaders/LoadingManager.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.LoadingManager = function ( onLoad, onProgress, onError ) {\r\n\r\n\tvar scope = this;\r\n\r\n\tvar isLoading = false, itemsLoaded = 0, itemsTotal = 0;\r\n\r\n\tthis.onStart = undefined;\r\n\tthis.onLoad = onLoad;\r\n\tthis.onProgress = onProgress;\r\n\tthis.onError = onError;\r\n\r\n\tthis.itemStart = function ( url ) {\r\n\r\n\t\titemsTotal ++;\r\n\r\n\t\tif ( isLoading === false ) {\r\n\r\n\t\t\tif ( scope.onStart !== undefined ) {\r\n\r\n\t\t\t\tscope.onStart( url, itemsLoaded, itemsTotal );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tisLoading = true;\r\n\r\n\t};\r\n\r\n\tthis.itemEnd = function ( url ) {\r\n\r\n\t\titemsLoaded ++;\r\n\r\n\t\tif ( scope.onProgress !== undefined ) {\r\n\r\n\t\t\tscope.onProgress( url, itemsLoaded, itemsTotal );\r\n\r\n\t\t}\r\n\r\n\t\tif ( itemsLoaded === itemsTotal ) {\r\n\r\n\t\t\tisLoading = false;\r\n\r\n\t\t\tif ( scope.onLoad !== undefined ) {\r\n\r\n\t\t\t\tscope.onLoad();\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.itemError = function ( url ) {\r\n\r\n\t\tif ( scope.onError !== undefined ) {\r\n\r\n\t\t\tscope.onError( url );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n};\r\n\r\nTHREE.DefaultLoadingManager = new THREE.LoadingManager();\r\n\r\n// File:src/loaders/BufferGeometryLoader.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.BufferGeometryLoader = function ( manager ) {\r\n\r\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\r\n\r\n};\r\n\r\nTHREE.BufferGeometryLoader.prototype = {\r\n\r\n\tconstructor: THREE.BufferGeometryLoader,\r\n\r\n\tload: function ( url, onLoad, onProgress, onError ) {\r\n\r\n\t\tvar scope = this;\r\n\r\n\t\tvar loader = new THREE.XHRLoader( scope.manager );\r\n\t\tloader.load( url, function ( text ) {\r\n\r\n\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\r\n\r\n\t\t}, onProgress, onError );\r\n\r\n\t},\r\n\r\n\tparse: function ( json ) {\r\n\r\n\t\tvar geometry = new THREE.BufferGeometry();\r\n\r\n\t\tvar index = json.data.index;\r\n\r\n\t\tvar TYPED_ARRAYS = {\r\n\t\t\t'Int8Array': Int8Array,\r\n\t\t\t'Uint8Array': Uint8Array,\r\n\t\t\t'Uint8ClampedArray': Uint8ClampedArray,\r\n\t\t\t'Int16Array': Int16Array,\r\n\t\t\t'Uint16Array': Uint16Array,\r\n\t\t\t'Int32Array': Int32Array,\r\n\t\t\t'Uint32Array': Uint32Array,\r\n\t\t\t'Float32Array': Float32Array,\r\n\t\t\t'Float64Array': Float64Array\r\n\t\t};\r\n\r\n\t\tif ( index !== undefined ) {\r\n\r\n\t\t\tvar typedArray = new TYPED_ARRAYS[ index.type ]( index.array );\r\n\t\t\tgeometry.setIndex( new THREE.BufferAttribute( typedArray, 1 ) );\r\n\r\n\t\t}\r\n\r\n\t\tvar attributes = json.data.attributes;\r\n\r\n\t\tfor ( var key in attributes ) {\r\n\r\n\t\t\tvar attribute = attributes[ key ];\r\n\t\t\tvar typedArray = new TYPED_ARRAYS[ attribute.type ]( attribute.array );\r\n\r\n\t\t\tgeometry.addAttribute( key, new THREE.BufferAttribute( typedArray, attribute.itemSize, attribute.normalized ) );\r\n\r\n\t\t}\r\n\r\n\t\tvar groups = json.data.groups || json.data.drawcalls || json.data.offsets;\r\n\r\n\t\tif ( groups !== undefined ) {\r\n\r\n\t\t\tfor ( var i = 0, n = groups.length; i !== n; ++ i ) {\r\n\r\n\t\t\t\tvar group = groups[ i ];\r\n\r\n\t\t\t\tgeometry.addGroup( group.start, group.count, group.materialIndex );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tvar boundingSphere = json.data.boundingSphere;\r\n\r\n\t\tif ( boundingSphere !== undefined ) {\r\n\r\n\t\t\tvar center = new THREE.Vector3();\r\n\r\n\t\t\tif ( boundingSphere.center !== undefined ) {\r\n\r\n\t\t\t\tcenter.fromArray( boundingSphere.center );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgeometry.boundingSphere = new THREE.Sphere( center, boundingSphere.radius );\r\n\r\n\t\t}\r\n\r\n\t\treturn geometry;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/loaders/MaterialLoader.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.MaterialLoader = function ( manager ) {\r\n\r\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\r\n\tthis.textures = {};\r\n\r\n};\r\n\r\nTHREE.MaterialLoader.prototype = {\r\n\r\n\tconstructor: THREE.MaterialLoader,\r\n\r\n\tload: function ( url, onLoad, onProgress, onError ) {\r\n\r\n\t\tvar scope = this;\r\n\r\n\t\tvar loader = new THREE.XHRLoader( scope.manager );\r\n\t\tloader.load( url, function ( text ) {\r\n\r\n\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\r\n\r\n\t\t}, onProgress, onError );\r\n\r\n\t},\r\n\r\n\tsetTextures: function ( value ) {\r\n\r\n\t\tthis.textures = value;\r\n\r\n\t},\r\n\r\n\tgetTexture: function ( name ) {\r\n\r\n\t\tvar textures = this.textures;\r\n\r\n\t\tif ( textures[ name ] === undefined ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.MaterialLoader: Undefined texture', name );\r\n\r\n\t\t}\r\n\r\n\t\treturn textures[ name ];\r\n\r\n\t},\r\n\r\n\tparse: function ( json ) {\r\n\r\n\t\tvar material = new THREE[ json.type ];\r\n\r\n\t\tif ( json.uuid !== undefined ) material.uuid = json.uuid;\r\n\t\tif ( json.name !== undefined ) material.name = json.name;\r\n\t\tif ( json.color !== undefined ) material.color.setHex( json.color );\r\n\t\tif ( json.roughness !== undefined ) material.roughness = json.roughness;\r\n\t\tif ( json.metalness !== undefined ) material.metalness = json.metalness;\r\n\t\tif ( json.emissive !== undefined ) material.emissive.setHex( json.emissive );\r\n\t\tif ( json.specular !== undefined ) material.specular.setHex( json.specular );\r\n\t\tif ( json.shininess !== undefined ) material.shininess = json.shininess;\r\n\t\tif ( json.uniforms !== undefined ) material.uniforms = json.uniforms;\r\n\t\tif ( json.vertexShader !== undefined ) material.vertexShader = json.vertexShader;\r\n\t\tif ( json.fragmentShader !== undefined ) material.fragmentShader = json.fragmentShader;\r\n\t\tif ( json.vertexColors !== undefined ) material.vertexColors = json.vertexColors;\r\n\t\tif ( json.shading !== undefined ) material.shading = json.shading;\r\n\t\tif ( json.blending !== undefined ) material.blending = json.blending;\r\n\t\tif ( json.side !== undefined ) material.side = json.side;\r\n\t\tif ( json.opacity !== undefined ) material.opacity = json.opacity;\r\n\t\tif ( json.transparent !== undefined ) material.transparent = json.transparent;\r\n\t\tif ( json.alphaTest !== undefined ) material.alphaTest = json.alphaTest;\r\n\t\tif ( json.depthTest !== undefined ) material.depthTest = json.depthTest;\r\n\t\tif ( json.depthWrite !== undefined ) material.depthWrite = json.depthWrite;\r\n\t\tif ( json.colorWrite !== undefined ) material.colorWrite = json.colorWrite;\r\n\t\tif ( json.wireframe !== undefined ) material.wireframe = json.wireframe;\r\n\t\tif ( json.wireframeLinewidth !== undefined ) material.wireframeLinewidth = json.wireframeLinewidth;\r\n\r\n\t\t// for PointsMaterial\r\n\t\tif ( json.size !== undefined ) material.size = json.size;\r\n\t\tif ( json.sizeAttenuation !== undefined ) material.sizeAttenuation = json.sizeAttenuation;\r\n\r\n\t\t// maps\r\n\r\n\t\tif ( json.map !== undefined ) material.map = this.getTexture( json.map );\r\n\r\n\t\tif ( json.alphaMap !== undefined ) {\r\n\r\n\t\t\tmaterial.alphaMap = this.getTexture( json.alphaMap );\r\n\t\t\tmaterial.transparent = true;\r\n\r\n\t\t}\r\n\r\n\t\tif ( json.bumpMap !== undefined ) material.bumpMap = this.getTexture( json.bumpMap );\r\n\t\tif ( json.bumpScale !== undefined ) material.bumpScale = json.bumpScale;\r\n\r\n\t\tif ( json.normalMap !== undefined ) material.normalMap = this.getTexture( json.normalMap );\r\n\t\tif ( json.normalScale !== undefined ) {\r\n\r\n\t\t\tvar normalScale = json.normalScale;\r\n\r\n\t\t\tif ( Array.isArray( normalScale ) === false ) {\r\n\r\n\t\t\t\t// Blender exporter used to export a scalar. See #7459\r\n\r\n\t\t\t\tnormalScale = [ normalScale, normalScale ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tmaterial.normalScale = new THREE.Vector2().fromArray( normalScale );\r\n\r\n\t\t}\r\n\r\n\t\tif ( json.displacementMap !== undefined ) material.displacementMap = this.getTexture( json.displacementMap );\r\n\t\tif ( json.displacementScale !== undefined ) material.displacementScale = json.displacementScale;\r\n\t\tif ( json.displacementBias !== undefined ) material.displacementBias = json.displacementBias;\r\n\r\n\t\tif ( json.roughnessMap !== undefined ) material.roughnessMap = this.getTexture( json.roughnessMap );\r\n\t\tif ( json.metalnessMap !== undefined ) material.metalnessMap = this.getTexture( json.metalnessMap );\r\n\r\n\t\tif ( json.emissiveMap !== undefined ) material.emissiveMap = this.getTexture( json.emissiveMap );\r\n\t\tif ( json.emissiveIntensity !== undefined ) material.emissiveIntensity = json.emissiveIntensity;\r\n\r\n\t\tif ( json.specularMap !== undefined ) material.specularMap = this.getTexture( json.specularMap );\r\n\r\n\t\tif ( json.envMap !== undefined ) {\r\n\r\n\t\t\tmaterial.envMap = this.getTexture( json.envMap );\r\n\t\t\tmaterial.combine = THREE.MultiplyOperation;\r\n\r\n\t\t}\r\n\r\n\t\tif ( json.reflectivity ) material.reflectivity = json.reflectivity;\r\n\r\n\t\tif ( json.lightMap !== undefined ) material.lightMap = this.getTexture( json.lightMap );\r\n\t\tif ( json.lightMapIntensity !== undefined ) material.lightMapIntensity = json.lightMapIntensity;\r\n\r\n\t\tif ( json.aoMap !== undefined ) material.aoMap = this.getTexture( json.aoMap );\r\n\t\tif ( json.aoMapIntensity !== undefined ) material.aoMapIntensity = json.aoMapIntensity;\r\n\r\n\t\t// MultiMaterial\r\n\r\n\t\tif ( json.materials !== undefined ) {\r\n\r\n\t\t\tfor ( var i = 0, l = json.materials.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tmaterial.materials.push( this.parse( json.materials[ i ] ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn material;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/loaders/ObjectLoader.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.ObjectLoader = function ( manager ) {\r\n\r\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\r\n\tthis.texturePath = '';\r\n\r\n};\r\n\r\nTHREE.ObjectLoader.prototype = {\r\n\r\n\tconstructor: THREE.ObjectLoader,\r\n\r\n\tload: function ( url, onLoad, onProgress, onError ) {\r\n\r\n\t\tif ( this.texturePath === '' ) {\r\n\r\n\t\t\tthis.texturePath = url.substring( 0, url.lastIndexOf( '/' ) + 1 );\r\n\r\n\t\t}\r\n\r\n\t\tvar scope = this;\r\n\r\n\t\tvar loader = new THREE.XHRLoader( scope.manager );\r\n\t\tloader.load( url, function ( text ) {\r\n\r\n\t\t\tscope.parse( JSON.parse( text ), onLoad );\r\n\r\n\t\t}, onProgress, onError );\r\n\r\n\t},\r\n\r\n\tsetTexturePath: function ( value ) {\r\n\r\n\t\tthis.texturePath = value;\r\n\r\n\t},\r\n\r\n\tsetCrossOrigin: function ( value ) {\r\n\r\n\t\tthis.crossOrigin = value;\r\n\r\n\t},\r\n\r\n\tparse: function ( json, onLoad ) {\r\n\r\n\t\tvar geometries = this.parseGeometries( json.geometries );\r\n\r\n\t\tvar images = this.parseImages( json.images, function () {\r\n\r\n\t\t\tif ( onLoad !== undefined ) onLoad( object );\r\n\r\n\t\t} );\r\n\r\n\t\tvar textures  = this.parseTextures( json.textures, images );\r\n\t\tvar materials = this.parseMaterials( json.materials, textures );\r\n\r\n\t\tvar object = this.parseObject( json.object, geometries, materials );\r\n\r\n\t\tif ( json.animations ) {\r\n\r\n\t\t\tobject.animations = this.parseAnimations( json.animations );\r\n\r\n\t\t}\r\n\r\n\t\tif ( json.images === undefined || json.images.length === 0 ) {\r\n\r\n\t\t\tif ( onLoad !== undefined ) onLoad( object );\r\n\r\n\t\t}\r\n\r\n\t\treturn object;\r\n\r\n\t},\r\n\r\n\tparseGeometries: function ( json ) {\r\n\r\n\t\tvar geometries = {};\r\n\r\n\t\tif ( json !== undefined ) {\r\n\r\n\t\t\tvar geometryLoader = new THREE.JSONLoader();\r\n\t\t\tvar bufferGeometryLoader = new THREE.BufferGeometryLoader();\r\n\r\n\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar geometry;\r\n\t\t\t\tvar data = json[ i ];\r\n\r\n\t\t\t\tswitch ( data.type ) {\r\n\r\n\t\t\t\t\tcase 'PlaneGeometry':\r\n\t\t\t\t\tcase 'PlaneBufferGeometry':\r\n\r\n\t\t\t\t\t\tgeometry = new THREE[ data.type ](\r\n\t\t\t\t\t\t\tdata.width,\r\n\t\t\t\t\t\t\tdata.height,\r\n\t\t\t\t\t\t\tdata.widthSegments,\r\n\t\t\t\t\t\t\tdata.heightSegments\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'BoxGeometry':\r\n\t\t\t\t\tcase 'BoxBufferGeometry':\r\n\t\t\t\t\tcase 'CubeGeometry': // backwards compatible\r\n\r\n\t\t\t\t\t\tgeometry = new THREE[ data.type ](\r\n\t\t\t\t\t\t\tdata.width,\r\n\t\t\t\t\t\t\tdata.height,\r\n\t\t\t\t\t\t\tdata.depth,\r\n\t\t\t\t\t\t\tdata.widthSegments,\r\n\t\t\t\t\t\t\tdata.heightSegments,\r\n\t\t\t\t\t\t\tdata.depthSegments\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'CircleGeometry':\r\n\t\t\t\t\tcase 'CircleBufferGeometry':\r\n\r\n\t\t\t\t\t\tgeometry = new THREE[ data.type ](\r\n\t\t\t\t\t\t\tdata.radius,\r\n\t\t\t\t\t\t\tdata.segments,\r\n\t\t\t\t\t\t\tdata.thetaStart,\r\n\t\t\t\t\t\t\tdata.thetaLength\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'CylinderGeometry':\r\n\t\t\t\t\tcase 'CylinderBufferGeometry':\r\n\r\n\t\t\t\t\t\tgeometry = new THREE[ data.type ](\r\n\t\t\t\t\t\t\tdata.radiusTop,\r\n\t\t\t\t\t\t\tdata.radiusBottom,\r\n\t\t\t\t\t\t\tdata.height,\r\n\t\t\t\t\t\t\tdata.radialSegments,\r\n\t\t\t\t\t\t\tdata.heightSegments,\r\n\t\t\t\t\t\t\tdata.openEnded,\r\n\t\t\t\t\t\t\tdata.thetaStart,\r\n\t\t\t\t\t\t\tdata.thetaLength\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'ConeGeometry':\r\n\t\t\t\t\tcase 'ConeBufferGeometry':\r\n\r\n\t\t\t\t\t\tgeometry = new THREE [ data.type ](\r\n\t\t\t\t\t\t\tdata.radius,\r\n\t\t\t\t\t\t\tdata.height,\r\n\t\t\t\t\t\t\tdata.radialSegments,\r\n\t\t\t\t\t\t\tdata.heightSegments,\r\n\t\t\t\t\t\t\tdata.openEnded,\r\n\t\t\t\t\t\t\tdata.thetaStart,\r\n\t\t\t\t\t\t\tdata.thetaLength\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'SphereGeometry':\r\n\t\t\t\t\tcase 'SphereBufferGeometry':\r\n\r\n\t\t\t\t\t\tgeometry = new THREE[ data.type ](\r\n\t\t\t\t\t\t\tdata.radius,\r\n\t\t\t\t\t\t\tdata.widthSegments,\r\n\t\t\t\t\t\t\tdata.heightSegments,\r\n\t\t\t\t\t\t\tdata.phiStart,\r\n\t\t\t\t\t\t\tdata.phiLength,\r\n\t\t\t\t\t\t\tdata.thetaStart,\r\n\t\t\t\t\t\t\tdata.thetaLength\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'DodecahedronGeometry':\r\n\t\t\t\t\tcase 'IcosahedronGeometry':\r\n\t\t\t\t\tcase 'OctahedronGeometry':\r\n\t\t\t\t\tcase 'TetrahedronGeometry':\r\n\r\n\t\t\t\t\t\tgeometry = new THREE[ data.type ](\r\n\t\t\t\t\t\t\tdata.radius,\r\n\t\t\t\t\t\t\tdata.detail\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'RingGeometry':\r\n\t\t\t\t\tcase 'RingBufferGeometry':\r\n\r\n\t\t\t\t\t\tgeometry = new THREE[ data.type ](\r\n\t\t\t\t\t\t\tdata.innerRadius,\r\n\t\t\t\t\t\t\tdata.outerRadius,\r\n\t\t\t\t\t\t\tdata.thetaSegments,\r\n\t\t\t\t\t\t\tdata.phiSegments,\r\n\t\t\t\t\t\t\tdata.thetaStart,\r\n\t\t\t\t\t\t\tdata.thetaLength\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'TorusGeometry':\r\n\t\t\t\t\tcase 'TorusBufferGeometry':\r\n\r\n\t\t\t\t\t\tgeometry = new THREE[ data.type ](\r\n\t\t\t\t\t\t\tdata.radius,\r\n\t\t\t\t\t\t\tdata.tube,\r\n\t\t\t\t\t\t\tdata.radialSegments,\r\n\t\t\t\t\t\t\tdata.tubularSegments,\r\n\t\t\t\t\t\t\tdata.arc\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'TorusKnotGeometry':\r\n\t\t\t\t\tcase 'TorusKnotBufferGeometry':\r\n\r\n\t\t\t\t\t\tgeometry = new THREE[ data.type ](\r\n\t\t\t\t\t\t\tdata.radius,\r\n\t\t\t\t\t\t\tdata.tube,\r\n\t\t\t\t\t\t\tdata.tubularSegments,\r\n\t\t\t\t\t\t\tdata.radialSegments,\r\n\t\t\t\t\t\t\tdata.p,\r\n\t\t\t\t\t\t\tdata.q\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'LatheGeometry':\r\n\t\t\t\t\tcase 'LatheBufferGeometry':\r\n\r\n\t\t\t\t\t\tgeometry = new THREE[ data.type ](\r\n\t\t\t\t\t\t\tdata.points,\r\n\t\t\t\t\t\t\tdata.segments,\r\n\t\t\t\t\t\t\tdata.phiStart,\r\n\t\t\t\t\t\t\tdata.phiLength\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'BufferGeometry':\r\n\r\n\t\t\t\t\t\tgeometry = bufferGeometryLoader.parse( data );\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase 'Geometry':\r\n\r\n\t\t\t\t\t\tgeometry = geometryLoader.parse( data.data, this.texturePath ).geometry;\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tdefault:\r\n\r\n\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Unsupported geometry type \"' + data.type + '\"' );\r\n\r\n\t\t\t\t\t\tcontinue;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tgeometry.uuid = data.uuid;\r\n\r\n\t\t\t\tif ( data.name !== undefined ) geometry.name = data.name;\r\n\r\n\t\t\t\tgeometries[ data.uuid ] = geometry;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn geometries;\r\n\r\n\t},\r\n\r\n\tparseMaterials: function ( json, textures ) {\r\n\r\n\t\tvar materials = {};\r\n\r\n\t\tif ( json !== undefined ) {\r\n\r\n\t\t\tvar loader = new THREE.MaterialLoader();\r\n\t\t\tloader.setTextures( textures );\r\n\r\n\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar material = loader.parse( json[ i ] );\r\n\t\t\t\tmaterials[ material.uuid ] = material;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn materials;\r\n\r\n\t},\r\n\r\n\tparseAnimations: function ( json ) {\r\n\r\n\t\tvar animations = [];\r\n\r\n\t\tfor ( var i = 0; i < json.length; i ++ ) {\r\n\r\n\t\t\tvar clip = THREE.AnimationClip.parse( json[ i ] );\r\n\r\n\t\t\tanimations.push( clip );\r\n\r\n\t\t}\r\n\r\n\t\treturn animations;\r\n\r\n\t},\r\n\r\n\tparseImages: function ( json, onLoad ) {\r\n\r\n\t\tvar scope = this;\r\n\t\tvar images = {};\r\n\r\n\t\tfunction loadImage( url ) {\r\n\r\n\t\t\tscope.manager.itemStart( url );\r\n\r\n\t\t\treturn loader.load( url, function () {\r\n\r\n\t\t\t\tscope.manager.itemEnd( url );\r\n\r\n\t\t\t} );\r\n\r\n\t\t}\r\n\r\n\t\tif ( json !== undefined && json.length > 0 ) {\r\n\r\n\t\t\tvar manager = new THREE.LoadingManager( onLoad );\r\n\r\n\t\t\tvar loader = new THREE.ImageLoader( manager );\r\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\r\n\r\n\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar image = json[ i ];\r\n\t\t\t\tvar path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test( image.url ) ? image.url : scope.texturePath + image.url;\r\n\r\n\t\t\t\timages[ image.uuid ] = loadImage( path );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn images;\r\n\r\n\t},\r\n\r\n\tparseTextures: function ( json, images ) {\r\n\r\n\t\tfunction parseConstant( value ) {\r\n\r\n\t\t\tif ( typeof( value ) === 'number' ) return value;\r\n\r\n\t\t\tconsole.warn( 'THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value );\r\n\r\n\t\t\treturn THREE[ value ];\r\n\r\n\t\t}\r\n\r\n\t\tvar textures = {};\r\n\r\n\t\tif ( json !== undefined ) {\r\n\r\n\t\t\tfor ( var i = 0, l = json.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar data = json[ i ];\r\n\r\n\t\t\t\tif ( data.image === undefined ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: No \"image\" specified for', data.uuid );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( images[ data.image ] === undefined ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined image', data.image );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar texture = new THREE.Texture( images[ data.image ] );\r\n\t\t\t\ttexture.needsUpdate = true;\r\n\r\n\t\t\t\ttexture.uuid = data.uuid;\r\n\r\n\t\t\t\tif ( data.name !== undefined ) texture.name = data.name;\r\n\t\t\t\tif ( data.mapping !== undefined ) texture.mapping = parseConstant( data.mapping );\r\n\t\t\t\tif ( data.offset !== undefined ) texture.offset = new THREE.Vector2( data.offset[ 0 ], data.offset[ 1 ] );\r\n\t\t\t\tif ( data.repeat !== undefined ) texture.repeat = new THREE.Vector2( data.repeat[ 0 ], data.repeat[ 1 ] );\r\n\t\t\t\tif ( data.minFilter !== undefined ) texture.minFilter = parseConstant( data.minFilter );\r\n\t\t\t\tif ( data.magFilter !== undefined ) texture.magFilter = parseConstant( data.magFilter );\r\n\t\t\t\tif ( data.anisotropy !== undefined ) texture.anisotropy = data.anisotropy;\r\n\t\t\t\tif ( Array.isArray( data.wrap ) ) {\r\n\r\n\t\t\t\t\ttexture.wrapS = parseConstant( data.wrap[ 0 ] );\r\n\t\t\t\t\ttexture.wrapT = parseConstant( data.wrap[ 1 ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttextures[ data.uuid ] = texture;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn textures;\r\n\r\n\t},\r\n\r\n\tparseObject: function () {\r\n\r\n\t\tvar matrix = new THREE.Matrix4();\r\n\r\n\t\treturn function ( data, geometries, materials ) {\r\n\r\n\t\t\tvar object;\r\n\r\n\t\t\tfunction getGeometry( name ) {\r\n\r\n\t\t\t\tif ( geometries[ name ] === undefined ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined geometry', name );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn geometries[ name ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfunction getMaterial( name ) {\r\n\r\n\t\t\t\tif ( name === undefined ) return undefined;\r\n\r\n\t\t\t\tif ( materials[ name ] === undefined ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined material', name );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn materials[ name ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tswitch ( data.type ) {\r\n\r\n\t\t\t\tcase 'Scene':\r\n\r\n\t\t\t\t\tobject = new THREE.Scene();\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'PerspectiveCamera':\r\n\r\n\t\t\t\t\tobject = new THREE.PerspectiveCamera( data.fov, data.aspect, data.near, data.far );\r\n\r\n\t\t\t\t\tif ( data.focus !== undefined ) object.focus = data.focus;\r\n\t\t\t\t\tif ( data.zoom !== undefined ) object.zoom = data.zoom;\r\n\t\t\t\t\tif ( data.filmGauge !== undefined ) object.filmGauge = data.filmGauge;\r\n\t\t\t\t\tif ( data.filmOffset !== undefined ) object.filmOffset = data.filmOffset;\r\n\t\t\t\t\tif ( data.view !== undefined ) object.view = Object.assign( {}, data.view );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'OrthographicCamera':\r\n\r\n\t\t\t\t\tobject = new THREE.OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'AmbientLight':\r\n\r\n\t\t\t\t\tobject = new THREE.AmbientLight( data.color, data.intensity );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'DirectionalLight':\r\n\r\n\t\t\t\t\tobject = new THREE.DirectionalLight( data.color, data.intensity );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'PointLight':\r\n\r\n\t\t\t\t\tobject = new THREE.PointLight( data.color, data.intensity, data.distance, data.decay );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'SpotLight':\r\n\r\n\t\t\t\t\tobject = new THREE.SpotLight( data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'HemisphereLight':\r\n\r\n\t\t\t\t\tobject = new THREE.HemisphereLight( data.color, data.groundColor, data.intensity );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'Mesh':\r\n\r\n\t\t\t\t\tvar geometry = getGeometry( data.geometry );\r\n\t\t\t\t\tvar material = getMaterial( data.material );\r\n\r\n\t\t\t\t\tif ( geometry.bones && geometry.bones.length > 0 ) {\r\n\r\n\t\t\t\t\t\tobject = new THREE.SkinnedMesh( geometry, material );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tobject = new THREE.Mesh( geometry, material );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'LOD':\r\n\r\n\t\t\t\t\tobject = new THREE.LOD();\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'Line':\r\n\r\n\t\t\t\t\tobject = new THREE.Line( getGeometry( data.geometry ), getMaterial( data.material ), data.mode );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'PointCloud':\r\n\t\t\t\tcase 'Points':\r\n\r\n\t\t\t\t\tobject = new THREE.Points( getGeometry( data.geometry ), getMaterial( data.material ) );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'Sprite':\r\n\r\n\t\t\t\t\tobject = new THREE.Sprite( getMaterial( data.material ) );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'Group':\r\n\r\n\t\t\t\t\tobject = new THREE.Group();\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tdefault:\r\n\r\n\t\t\t\t\tobject = new THREE.Object3D();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tobject.uuid = data.uuid;\r\n\r\n\t\t\tif ( data.name !== undefined ) object.name = data.name;\r\n\t\t\tif ( data.matrix !== undefined ) {\r\n\r\n\t\t\t\tmatrix.fromArray( data.matrix );\r\n\t\t\t\tmatrix.decompose( object.position, object.quaternion, object.scale );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tif ( data.position !== undefined ) object.position.fromArray( data.position );\r\n\t\t\t\tif ( data.rotation !== undefined ) object.rotation.fromArray( data.rotation );\r\n\t\t\t\tif ( data.scale !== undefined ) object.scale.fromArray( data.scale );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( data.castShadow !== undefined ) object.castShadow = data.castShadow;\r\n\t\t\tif ( data.receiveShadow !== undefined ) object.receiveShadow = data.receiveShadow;\r\n\r\n\t\t\tif ( data.visible !== undefined ) object.visible = data.visible;\r\n\t\t\tif ( data.userData !== undefined ) object.userData = data.userData;\r\n\r\n\t\t\tif ( data.children !== undefined ) {\r\n\r\n\t\t\t\tfor ( var child in data.children ) {\r\n\r\n\t\t\t\t\tobject.add( this.parseObject( data.children[ child ], geometries, materials ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( data.type === 'LOD' ) {\r\n\r\n\t\t\t\tvar levels = data.levels;\r\n\r\n\t\t\t\tfor ( var l = 0; l < levels.length; l ++ ) {\r\n\r\n\t\t\t\t\tvar level = levels[ l ];\r\n\t\t\t\t\tvar child = object.getObjectByProperty( 'uuid', level.object );\r\n\r\n\t\t\t\t\tif ( child !== undefined ) {\r\n\r\n\t\t\t\t\t\tobject.addLevel( child, level.distance );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn object;\r\n\r\n\t\t};\r\n\r\n\t}()\r\n\r\n};\r\n\r\n// File:src/loaders/TextureLoader.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.TextureLoader = function ( manager ) {\r\n\r\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\r\n\r\n};\r\n\r\nTHREE.TextureLoader.prototype = {\r\n\r\n\tconstructor: THREE.TextureLoader,\r\n\r\n\tload: function ( url, onLoad, onProgress, onError ) {\r\n\r\n\t\tvar texture = new THREE.Texture();\r\n\r\n\t\tvar loader = new THREE.ImageLoader( this.manager );\r\n\t\tloader.setCrossOrigin( this.crossOrigin );\r\n\t\tloader.setPath( this.path );\r\n\t\tloader.load( url, function ( image ) {\r\n\r\n\t\t\ttexture.image = image;\r\n\t\t\ttexture.needsUpdate = true;\r\n\r\n\t\t\tif ( onLoad !== undefined ) {\r\n\r\n\t\t\t\tonLoad( texture );\r\n\r\n\t\t\t}\r\n\r\n\t\t}, onProgress, onError );\r\n\r\n\t\treturn texture;\r\n\r\n\t},\r\n\r\n\tsetCrossOrigin: function ( value ) {\r\n\r\n\t\tthis.crossOrigin = value;\r\n\r\n\t},\r\n\r\n\tsetPath: function ( value ) {\r\n\r\n\t\tthis.path = value;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/loaders/CubeTextureLoader.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.CubeTextureLoader = function ( manager ) {\r\n\r\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\r\n\r\n};\r\n\r\nTHREE.CubeTextureLoader.prototype = {\r\n\r\n\tconstructor: THREE.CubeTextureLoader,\r\n\r\n\tload: function ( urls, onLoad, onProgress, onError ) {\r\n\r\n\t\tvar texture = new THREE.CubeTexture();\r\n\r\n\t\tvar loader = new THREE.ImageLoader( this.manager );\r\n\t\tloader.setCrossOrigin( this.crossOrigin );\r\n\t\tloader.setPath( this.path );\r\n\r\n\t\tvar loaded = 0;\r\n\r\n\t\tfunction loadTexture( i ) {\r\n\r\n\t\t\tloader.load( urls[ i ], function ( image ) {\r\n\r\n\t\t\t\ttexture.images[ i ] = image;\r\n\r\n\t\t\t\tloaded ++;\r\n\r\n\t\t\t\tif ( loaded === 6 ) {\r\n\r\n\t\t\t\t\ttexture.needsUpdate = true;\r\n\r\n\t\t\t\t\tif ( onLoad ) onLoad( texture );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}, undefined, onError );\r\n\r\n\t\t}\r\n\r\n\t\tfor ( var i = 0; i < urls.length; ++ i ) {\r\n\r\n\t\t\tloadTexture( i );\r\n\r\n\t\t}\r\n\r\n\t\treturn texture;\r\n\r\n\t},\r\n\r\n\tsetCrossOrigin: function ( value ) {\r\n\r\n\t\tthis.crossOrigin = value;\r\n\r\n\t},\r\n\r\n\tsetPath: function ( value ) {\r\n\r\n\t\tthis.path = value;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/loaders/BinaryTextureLoader.js\r\n\r\n/**\r\n * @author Nikos M. / https://github.com/foo123/\r\n *\r\n * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)\r\n */\r\n\r\nTHREE.DataTextureLoader = THREE.BinaryTextureLoader = function ( manager ) {\r\n\r\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\r\n\r\n\t// override in sub classes\r\n\tthis._parser = null;\r\n\r\n};\r\n\r\nTHREE.BinaryTextureLoader.prototype = {\r\n\r\n\tconstructor: THREE.BinaryTextureLoader,\r\n\r\n\tload: function ( url, onLoad, onProgress, onError ) {\r\n\r\n\t\tvar scope = this;\r\n\r\n\t\tvar texture = new THREE.DataTexture();\r\n\r\n\t\tvar loader = new THREE.XHRLoader( this.manager );\r\n\t\tloader.setResponseType( 'arraybuffer' );\r\n\r\n\t\tloader.load( url, function ( buffer ) {\r\n\r\n\t\t\tvar texData = scope._parser( buffer );\r\n\r\n\t\t\tif ( ! texData ) return;\r\n\r\n\t\t\tif ( undefined !== texData.image ) {\r\n\r\n\t\t\t\ttexture.image = texData.image;\r\n\r\n\t\t\t} else if ( undefined !== texData.data ) {\r\n\r\n\t\t\t\ttexture.image.width = texData.width;\r\n\t\t\t\ttexture.image.height = texData.height;\r\n\t\t\t\ttexture.image.data = texData.data;\r\n\r\n\t\t\t}\r\n\r\n\t\t\ttexture.wrapS = undefined !== texData.wrapS ? texData.wrapS : THREE.ClampToEdgeWrapping;\r\n\t\t\ttexture.wrapT = undefined !== texData.wrapT ? texData.wrapT : THREE.ClampToEdgeWrapping;\r\n\r\n\t\t\ttexture.magFilter = undefined !== texData.magFilter ? texData.magFilter : THREE.LinearFilter;\r\n\t\t\ttexture.minFilter = undefined !== texData.minFilter ? texData.minFilter : THREE.LinearMipMapLinearFilter;\r\n\r\n\t\t\ttexture.anisotropy = undefined !== texData.anisotropy ? texData.anisotropy : 1;\r\n\r\n\t\t\tif ( undefined !== texData.format ) {\r\n\r\n\t\t\t\ttexture.format = texData.format;\r\n\r\n\t\t\t}\r\n\t\t\tif ( undefined !== texData.type ) {\r\n\r\n\t\t\t\ttexture.type = texData.type;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( undefined !== texData.mipmaps ) {\r\n\r\n\t\t\t\ttexture.mipmaps = texData.mipmaps;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( 1 === texData.mipmapCount ) {\r\n\r\n\t\t\t\ttexture.minFilter = THREE.LinearFilter;\r\n\r\n\t\t\t}\r\n\r\n\t\t\ttexture.needsUpdate = true;\r\n\r\n\t\t\tif ( onLoad ) onLoad( texture, texData );\r\n\r\n\t\t}, onProgress, onError );\r\n\r\n\r\n\t\treturn texture;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/loaders/CompressedTextureLoader.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n *\r\n * Abstract Base class to block based textures loader (dds, pvr, ...)\r\n */\r\n\r\nTHREE.CompressedTextureLoader = function ( manager ) {\r\n\r\n\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\r\n\r\n\t// override in sub classes\r\n\tthis._parser = null;\r\n\r\n};\r\n\r\n\r\nTHREE.CompressedTextureLoader.prototype = {\r\n\r\n\tconstructor: THREE.CompressedTextureLoader,\r\n\r\n\tload: function ( url, onLoad, onProgress, onError ) {\r\n\r\n\t\tvar scope = this;\r\n\r\n\t\tvar images = [];\r\n\r\n\t\tvar texture = new THREE.CompressedTexture();\r\n\t\ttexture.image = images;\r\n\r\n\t\tvar loader = new THREE.XHRLoader( this.manager );\r\n\t\tloader.setPath( this.path );\r\n\t\tloader.setResponseType( 'arraybuffer' );\r\n\r\n\t\tfunction loadTexture( i ) {\r\n\r\n\t\t\tloader.load( url[ i ], function ( buffer ) {\r\n\r\n\t\t\t\tvar texDatas = scope._parser( buffer, true );\r\n\r\n\t\t\t\timages[ i ] = {\r\n\t\t\t\t\twidth: texDatas.width,\r\n\t\t\t\t\theight: texDatas.height,\r\n\t\t\t\t\tformat: texDatas.format,\r\n\t\t\t\t\tmipmaps: texDatas.mipmaps\r\n\t\t\t\t};\r\n\r\n\t\t\t\tloaded += 1;\r\n\r\n\t\t\t\tif ( loaded === 6 ) {\r\n\r\n\t\t\t\t\tif ( texDatas.mipmapCount === 1 )\r\n\t\t\t\t\t\ttexture.minFilter = THREE.LinearFilter;\r\n\r\n\t\t\t\t\ttexture.format = texDatas.format;\r\n\t\t\t\t\ttexture.needsUpdate = true;\r\n\r\n\t\t\t\t\tif ( onLoad ) onLoad( texture );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}, onProgress, onError );\r\n\r\n\t\t}\r\n\r\n\t\tif ( Array.isArray( url ) ) {\r\n\r\n\t\t\tvar loaded = 0;\r\n\r\n\t\t\tfor ( var i = 0, il = url.length; i < il; ++ i ) {\r\n\r\n\t\t\t\tloadTexture( i );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// compressed cubemap texture stored in a single DDS file\r\n\r\n\t\t\tloader.load( url, function ( buffer ) {\r\n\r\n\t\t\t\tvar texDatas = scope._parser( buffer, true );\r\n\r\n\t\t\t\tif ( texDatas.isCubemap ) {\r\n\r\n\t\t\t\t\tvar faces = texDatas.mipmaps.length / texDatas.mipmapCount;\r\n\r\n\t\t\t\t\tfor ( var f = 0; f < faces; f ++ ) {\r\n\r\n\t\t\t\t\t\timages[ f ] = { mipmaps : [] };\r\n\r\n\t\t\t\t\t\tfor ( var i = 0; i < texDatas.mipmapCount; i ++ ) {\r\n\r\n\t\t\t\t\t\t\timages[ f ].mipmaps.push( texDatas.mipmaps[ f * texDatas.mipmapCount + i ] );\r\n\t\t\t\t\t\t\timages[ f ].format = texDatas.format;\r\n\t\t\t\t\t\t\timages[ f ].width = texDatas.width;\r\n\t\t\t\t\t\t\timages[ f ].height = texDatas.height;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\ttexture.image.width = texDatas.width;\r\n\t\t\t\t\ttexture.image.height = texDatas.height;\r\n\t\t\t\t\ttexture.mipmaps = texDatas.mipmaps;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( texDatas.mipmapCount === 1 ) {\r\n\r\n\t\t\t\t\ttexture.minFilter = THREE.LinearFilter;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttexture.format = texDatas.format;\r\n\t\t\t\ttexture.needsUpdate = true;\r\n\r\n\t\t\t\tif ( onLoad ) onLoad( texture );\r\n\r\n\t\t\t}, onProgress, onError );\r\n\r\n\t\t}\r\n\r\n\t\treturn texture;\r\n\r\n\t},\r\n\r\n\tsetPath: function ( value ) {\r\n\r\n\t\tthis.path = value;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/materials/Material.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.Material = function () {\r\n\r\n\tObject.defineProperty( this, 'id', { value: THREE.MaterialIdCount ++ } );\r\n\r\n\tthis.uuid = THREE.Math.generateUUID();\r\n\r\n\tthis.name = '';\r\n\tthis.type = 'Material';\r\n\r\n\tthis.fog = true;\r\n\tthis.lights = true;\r\n\r\n\tthis.blending = THREE.NormalBlending;\r\n\tthis.side = THREE.FrontSide;\r\n\tthis.shading = THREE.SmoothShading; // THREE.FlatShading, THREE.SmoothShading\r\n\tthis.vertexColors = THREE.NoColors; // THREE.NoColors, THREE.VertexColors, THREE.FaceColors\r\n\r\n\tthis.opacity = 1;\r\n\tthis.transparent = false;\r\n\r\n\tthis.blendSrc = THREE.SrcAlphaFactor;\r\n\tthis.blendDst = THREE.OneMinusSrcAlphaFactor;\r\n\tthis.blendEquation = THREE.AddEquation;\r\n\tthis.blendSrcAlpha = null;\r\n\tthis.blendDstAlpha = null;\r\n\tthis.blendEquationAlpha = null;\r\n\r\n\tthis.depthFunc = THREE.LessEqualDepth;\r\n\tthis.depthTest = true;\r\n\tthis.depthWrite = true;\r\n\r\n\tthis.clippingPlanes = null;\r\n\tthis.clipShadows = false;\r\n\r\n\tthis.colorWrite = true;\r\n\r\n\tthis.precision = null; // override the renderer's default precision for this material\r\n\r\n\tthis.polygonOffset = false;\r\n\tthis.polygonOffsetFactor = 0;\r\n\tthis.polygonOffsetUnits = 0;\r\n\r\n\tthis.alphaTest = 0;\r\n\tthis.premultipliedAlpha = false;\r\n\r\n\tthis.overdraw = 0; // Overdrawn pixels (typically between 0 and 1) for fixing antialiasing gaps in CanvasRenderer\r\n\r\n\tthis.visible = true;\r\n\r\n\tthis._needsUpdate = true;\r\n\r\n};\r\n\r\nTHREE.Material.prototype = {\r\n\r\n\tconstructor: THREE.Material,\r\n\r\n\tget needsUpdate() {\r\n\r\n\t\treturn this._needsUpdate;\r\n\r\n\t},\r\n\r\n\tset needsUpdate( value ) {\r\n\r\n\t\tif ( value === true ) this.update();\r\n\t\tthis._needsUpdate = value;\r\n\r\n\t},\r\n\r\n\tsetValues: function ( values ) {\r\n\r\n\t\tif ( values === undefined ) return;\r\n\r\n\t\tfor ( var key in values ) {\r\n\r\n\t\t\tvar newValue = values[ key ];\r\n\r\n\t\t\tif ( newValue === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( \"THREE.Material: '\" + key + \"' parameter is undefined.\" );\r\n\t\t\t\tcontinue;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar currentValue = this[ key ];\r\n\r\n\t\t\tif ( currentValue === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( \"THREE.\" + this.type + \": '\" + key + \"' is not a property of this material.\" );\r\n\t\t\t\tcontinue;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( currentValue instanceof THREE.Color ) {\r\n\r\n\t\t\t\tcurrentValue.set( newValue );\r\n\r\n\t\t\t} else if ( currentValue instanceof THREE.Vector3 && newValue instanceof THREE.Vector3 ) {\r\n\r\n\t\t\t\tcurrentValue.copy( newValue );\r\n\r\n\t\t\t} else if ( key === 'overdraw' ) {\r\n\r\n\t\t\t\t// ensure overdraw is backwards-compatible with legacy boolean type\r\n\t\t\t\tthis[ key ] = Number( newValue );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis[ key ] = newValue;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\ttoJSON: function ( meta ) {\r\n\r\n\t\tvar isRoot = meta === undefined;\r\n\r\n\t\tif ( isRoot ) {\r\n\r\n\t\t\tmeta = {\r\n\t\t\t\ttextures: {},\r\n\t\t\t\timages: {}\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\tvar data = {\r\n\t\t\tmetadata: {\r\n\t\t\t\tversion: 4.4,\r\n\t\t\t\ttype: 'Material',\r\n\t\t\t\tgenerator: 'Material.toJSON'\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// standard Material serialization\r\n\t\tdata.uuid = this.uuid;\r\n\t\tdata.type = this.type;\r\n\r\n\t\tif ( this.name !== '' ) data.name = this.name;\r\n\r\n\t\tif ( this.color instanceof THREE.Color ) data.color = this.color.getHex();\r\n\r\n\t\tif ( this.roughness !== 0.5 ) data.roughness = this.roughness;\r\n\t\tif ( this.metalness !== 0.5 ) data.metalness = this.metalness;\r\n\r\n\t\tif ( this.emissive instanceof THREE.Color ) data.emissive = this.emissive.getHex();\r\n\t\tif ( this.specular instanceof THREE.Color ) data.specular = this.specular.getHex();\r\n\t\tif ( this.shininess !== undefined ) data.shininess = this.shininess;\r\n\r\n\t\tif ( this.map instanceof THREE.Texture ) data.map = this.map.toJSON( meta ).uuid;\r\n\t\tif ( this.alphaMap instanceof THREE.Texture ) data.alphaMap = this.alphaMap.toJSON( meta ).uuid;\r\n\t\tif ( this.lightMap instanceof THREE.Texture ) data.lightMap = this.lightMap.toJSON( meta ).uuid;\r\n\t\tif ( this.bumpMap instanceof THREE.Texture ) {\r\n\r\n\t\t\tdata.bumpMap = this.bumpMap.toJSON( meta ).uuid;\r\n\t\t\tdata.bumpScale = this.bumpScale;\r\n\r\n\t\t}\r\n\t\tif ( this.normalMap instanceof THREE.Texture ) {\r\n\r\n\t\t\tdata.normalMap = this.normalMap.toJSON( meta ).uuid;\r\n\t\t\tdata.normalScale = this.normalScale.toArray();\r\n\r\n\t\t}\r\n\t\tif ( this.displacementMap instanceof THREE.Texture ) {\r\n\r\n\t\t\tdata.displacementMap = this.displacementMap.toJSON( meta ).uuid;\r\n\t\t\tdata.displacementScale = this.displacementScale;\r\n\t\t\tdata.displacementBias = this.displacementBias;\r\n\r\n\t\t}\r\n\t\tif ( this.roughnessMap instanceof THREE.Texture ) data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid;\r\n\t\tif ( this.metalnessMap instanceof THREE.Texture ) data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid;\r\n\r\n\t\tif ( this.emissiveMap instanceof THREE.Texture ) data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid;\r\n\t\tif ( this.specularMap instanceof THREE.Texture ) data.specularMap = this.specularMap.toJSON( meta ).uuid;\r\n\r\n\t\tif ( this.envMap instanceof THREE.Texture ) {\r\n\r\n\t\t\tdata.envMap = this.envMap.toJSON( meta ).uuid;\r\n\t\t\tdata.reflectivity = this.reflectivity; // Scale behind envMap\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.size !== undefined ) data.size = this.size;\r\n\t\tif ( this.sizeAttenuation !== undefined ) data.sizeAttenuation = this.sizeAttenuation;\r\n\r\n\t\tif ( this.blending !== THREE.NormalBlending ) data.blending = this.blending;\r\n\t\tif ( this.shading !== THREE.SmoothShading ) data.shading = this.shading;\r\n\t\tif ( this.side !== THREE.FrontSide ) data.side = this.side;\r\n\t\tif ( this.vertexColors !== THREE.NoColors ) data.vertexColors = this.vertexColors;\r\n\r\n\t\tif ( this.opacity < 1 ) data.opacity = this.opacity;\r\n\t\tif ( this.transparent === true ) data.transparent = this.transparent;\r\n\t\tif ( this.alphaTest > 0 ) data.alphaTest = this.alphaTest;\r\n\t\tif ( this.premultipliedAlpha === true ) data.premultipliedAlpha = this.premultipliedAlpha;\r\n\t\tif ( this.wireframe === true ) data.wireframe = this.wireframe;\r\n\t\tif ( this.wireframeLinewidth > 1 ) data.wireframeLinewidth = this.wireframeLinewidth;\r\n\r\n\t\t// TODO: Copied from Object3D.toJSON\r\n\r\n\t\tfunction extractFromCache ( cache ) {\r\n\r\n\t\t\tvar values = [];\r\n\r\n\t\t\tfor ( var key in cache ) {\r\n\r\n\t\t\t\tvar data = cache[ key ];\r\n\t\t\t\tdelete data.metadata;\r\n\t\t\t\tvalues.push( data );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn values;\r\n\r\n\t\t}\r\n\r\n\t\tif ( isRoot ) {\r\n\r\n\t\t\tvar textures = extractFromCache( meta.textures );\r\n\t\t\tvar images = extractFromCache( meta.images );\r\n\r\n\t\t\tif ( textures.length > 0 ) data.textures = textures;\r\n\t\t\tif ( images.length > 0 ) data.images = images;\r\n\r\n\t\t}\r\n\r\n\t\treturn data;\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t},\r\n\r\n\tcopy: function ( source ) {\r\n\r\n\t\tthis.name = source.name;\r\n\r\n\t\tthis.fog = source.fog;\r\n\t\tthis.lights = source.lights;\r\n\r\n\t\tthis.blending = source.blending;\r\n\t\tthis.side = source.side;\r\n\t\tthis.vertexColors = source.vertexColors;\r\n\r\n\t\tthis.opacity = source.opacity;\r\n\t\tthis.transparent = source.transparent;\r\n\r\n\t\tthis.blendSrc = source.blendSrc;\r\n\t\tthis.blendDst = source.blendDst;\r\n\t\tthis.blendEquation = source.blendEquation;\r\n\t\tthis.blendSrcAlpha = source.blendSrcAlpha;\r\n\t\tthis.blendDstAlpha = source.blendDstAlpha;\r\n\t\tthis.blendEquationAlpha = source.blendEquationAlpha;\r\n\r\n\t\tthis.depthFunc = source.depthFunc;\r\n\t\tthis.depthTest = source.depthTest;\r\n\t\tthis.depthWrite = source.depthWrite;\r\n\r\n\t\tthis.colorWrite = source.colorWrite;\r\n\r\n\t\tthis.precision = source.precision;\r\n\r\n\t\tthis.polygonOffset = source.polygonOffset;\r\n\t\tthis.polygonOffsetFactor = source.polygonOffsetFactor;\r\n\t\tthis.polygonOffsetUnits = source.polygonOffsetUnits;\r\n\r\n\t\tthis.alphaTest = source.alphaTest;\r\n\r\n\t\tthis.premultipliedAlpha = source.premultipliedAlpha;\r\n\r\n\t\tthis.overdraw = source.overdraw;\r\n\r\n\t\tthis.visible = source.visible;\r\n\t\tthis.clipShadows = source.clipShadows;\r\n\r\n\t\tvar srcPlanes = source.clippingPlanes,\r\n\t\t\tdstPlanes = null;\r\n\r\n\t\tif ( srcPlanes !== null ) {\r\n\r\n\t\t\tvar n = srcPlanes.length;\r\n\t\t\tdstPlanes = new Array( n );\r\n\r\n\t\t\tfor ( var i = 0; i !== n; ++ i )\r\n\t\t\t\tdstPlanes[ i ] = srcPlanes[ i ].clone();\r\n\r\n\t\t}\r\n\r\n\t\tthis.clippingPlanes = dstPlanes;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tupdate: function () {\r\n\r\n\t\tthis.dispatchEvent( { type: 'update' } );\r\n\r\n\t},\r\n\r\n\tdispose: function () {\r\n\r\n\t\tthis.dispatchEvent( { type: 'dispose' } );\r\n\r\n\t}\r\n\r\n};\r\n\r\nObject.assign( THREE.Material.prototype, THREE.EventDispatcher.prototype );\r\n\r\nTHREE.MaterialIdCount = 0;\r\n\r\n// File:src/materials/LineBasicMaterial.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n * parameters = {\r\n *  color: <hex>,\r\n *  opacity: <float>,\r\n *\r\n *  linewidth: <float>,\r\n *  linecap: \"round\",\r\n *  linejoin: \"round\"\r\n * }\r\n */\r\n\r\nTHREE.LineBasicMaterial = function ( parameters ) {\r\n\r\n\tTHREE.Material.call( this );\r\n\r\n\tthis.type = 'LineBasicMaterial';\r\n\r\n\tthis.color = new THREE.Color( 0xffffff );\r\n\r\n\tthis.linewidth = 1;\r\n\tthis.linecap = 'round';\r\n\tthis.linejoin = 'round';\r\n\r\n\tthis.lights = false;\r\n\r\n\tthis.setValues( parameters );\r\n\r\n};\r\n\r\nTHREE.LineBasicMaterial.prototype = Object.create( THREE.Material.prototype );\r\nTHREE.LineBasicMaterial.prototype.constructor = THREE.LineBasicMaterial;\r\n\r\nTHREE.LineBasicMaterial.prototype.copy = function ( source ) {\r\n\r\n\tTHREE.Material.prototype.copy.call( this, source );\r\n\r\n\tthis.color.copy( source.color );\r\n\r\n\tthis.linewidth = source.linewidth;\r\n\tthis.linecap = source.linecap;\r\n\tthis.linejoin = source.linejoin;\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\n// File:src/materials/LineDashedMaterial.js\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n * parameters = {\r\n *  color: <hex>,\r\n *  opacity: <float>,\r\n *\r\n *  linewidth: <float>,\r\n *\r\n *  scale: <float>,\r\n *  dashSize: <float>,\r\n *  gapSize: <float>\r\n * }\r\n */\r\n\r\nTHREE.LineDashedMaterial = function ( parameters ) {\r\n\r\n\tTHREE.Material.call( this );\r\n\r\n\tthis.type = 'LineDashedMaterial';\r\n\r\n\tthis.color = new THREE.Color( 0xffffff );\r\n\r\n\tthis.linewidth = 1;\r\n\r\n\tthis.scale = 1;\r\n\tthis.dashSize = 3;\r\n\tthis.gapSize = 1;\r\n\r\n\tthis.lights = false;\r\n\r\n\tthis.setValues( parameters );\r\n\r\n};\r\n\r\nTHREE.LineDashedMaterial.prototype = Object.create( THREE.Material.prototype );\r\nTHREE.LineDashedMaterial.prototype.constructor = THREE.LineDashedMaterial;\r\n\r\nTHREE.LineDashedMaterial.prototype.copy = function ( source ) {\r\n\r\n\tTHREE.Material.prototype.copy.call( this, source );\r\n\r\n\tthis.color.copy( source.color );\r\n\r\n\tthis.linewidth = source.linewidth;\r\n\r\n\tthis.scale = source.scale;\r\n\tthis.dashSize = source.dashSize;\r\n\tthis.gapSize = source.gapSize;\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\n// File:src/materials/MeshBasicMaterial.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n * parameters = {\r\n *  color: <hex>,\r\n *  opacity: <float>,\r\n *  map: new THREE.Texture( <Image> ),\r\n *\r\n *  aoMap: new THREE.Texture( <Image> ),\r\n *  aoMapIntensity: <float>\r\n *\r\n *  specularMap: new THREE.Texture( <Image> ),\r\n *\r\n *  alphaMap: new THREE.Texture( <Image> ),\r\n *\r\n *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\r\n *  combine: THREE.Multiply,\r\n *  reflectivity: <float>,\r\n *  refractionRatio: <float>,\r\n *\r\n *  shading: THREE.SmoothShading,\r\n *  depthTest: <bool>,\r\n *  depthWrite: <bool>,\r\n *\r\n *  wireframe: <boolean>,\r\n *  wireframeLinewidth: <float>,\r\n *\r\n *  skinning: <bool>,\r\n *  morphTargets: <bool>\r\n * }\r\n */\r\n\r\nTHREE.MeshBasicMaterial = function ( parameters ) {\r\n\r\n\tTHREE.Material.call( this );\r\n\r\n\tthis.type = 'MeshBasicMaterial';\r\n\r\n\tthis.color = new THREE.Color( 0xffffff ); // emissive\r\n\r\n\tthis.map = null;\r\n\r\n\tthis.aoMap = null;\r\n\tthis.aoMapIntensity = 1.0;\r\n\r\n\tthis.specularMap = null;\r\n\r\n\tthis.alphaMap = null;\r\n\r\n\tthis.envMap = null;\r\n\tthis.combine = THREE.MultiplyOperation;\r\n\tthis.reflectivity = 1;\r\n\tthis.refractionRatio = 0.98;\r\n\r\n\tthis.wireframe = false;\r\n\tthis.wireframeLinewidth = 1;\r\n\tthis.wireframeLinecap = 'round';\r\n\tthis.wireframeLinejoin = 'round';\r\n\r\n\tthis.skinning = false;\r\n\tthis.morphTargets = false;\r\n\r\n\tthis.lights = false;\r\n\r\n\tthis.setValues( parameters );\r\n\r\n};\r\n\r\nTHREE.MeshBasicMaterial.prototype = Object.create( THREE.Material.prototype );\r\nTHREE.MeshBasicMaterial.prototype.constructor = THREE.MeshBasicMaterial;\r\n\r\nTHREE.MeshBasicMaterial.prototype.copy = function ( source ) {\r\n\r\n\tTHREE.Material.prototype.copy.call( this, source );\r\n\r\n\tthis.color.copy( source.color );\r\n\r\n\tthis.map = source.map;\r\n\r\n\tthis.aoMap = source.aoMap;\r\n\tthis.aoMapIntensity = source.aoMapIntensity;\r\n\r\n\tthis.specularMap = source.specularMap;\r\n\r\n\tthis.alphaMap = source.alphaMap;\r\n\r\n\tthis.envMap = source.envMap;\r\n\tthis.combine = source.combine;\r\n\tthis.reflectivity = source.reflectivity;\r\n\tthis.refractionRatio = source.refractionRatio;\r\n\r\n\tthis.wireframe = source.wireframe;\r\n\tthis.wireframeLinewidth = source.wireframeLinewidth;\r\n\tthis.wireframeLinecap = source.wireframeLinecap;\r\n\tthis.wireframeLinejoin = source.wireframeLinejoin;\r\n\r\n\tthis.skinning = source.skinning;\r\n\tthis.morphTargets = source.morphTargets;\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\n// File:src/materials/MeshDepthMaterial.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author bhouston / https://clara.io\r\n * @author WestLangley / http://github.com/WestLangley\r\n *\r\n * parameters = {\r\n *\r\n *  opacity: <float>,\r\n *\r\n *  map: new THREE.Texture( <Image> ),\r\n *\r\n *  alphaMap: new THREE.Texture( <Image> ),\r\n *\r\n *  displacementMap: new THREE.Texture( <Image> ),\r\n *  displacementScale: <float>,\r\n *  displacementBias: <float>,\r\n *\r\n *  wireframe: <boolean>,\r\n *  wireframeLinewidth: <float>\r\n * }\r\n */\r\n\r\nTHREE.MeshDepthMaterial = function ( parameters ) {\r\n\r\n\tTHREE.Material.call( this );\r\n\r\n\tthis.type = 'MeshDepthMaterial';\r\n\r\n\tthis.depthPacking = THREE.BasicDepthPacking;\r\n\r\n\tthis.skinning = false;\r\n\tthis.morphTargets = false;\r\n\r\n\tthis.map = null;\r\n\r\n\tthis.alphaMap = null;\r\n\r\n\tthis.displacementMap = null;\r\n\tthis.displacementScale = 1;\r\n\tthis.displacementBias = 0;\r\n\r\n\tthis.wireframe = false;\r\n\tthis.wireframeLinewidth = 1;\r\n\r\n\tthis.fog = false;\r\n\tthis.lights = false;\r\n\r\n\tthis.setValues( parameters );\r\n\r\n};\r\n\r\nTHREE.MeshDepthMaterial.prototype = Object.create( THREE.Material.prototype );\r\nTHREE.MeshDepthMaterial.prototype.constructor = THREE.MeshDepthMaterial;\r\n\r\nTHREE.MeshDepthMaterial.prototype.copy = function ( source ) {\r\n\r\n\tTHREE.Material.prototype.copy.call( this, source );\r\n\r\n\tthis.depthPacking = source.depthPacking;\r\n\r\n\tthis.skinning = source.skinning;\r\n\tthis.morphTargets = source.morphTargets;\r\n\r\n\tthis.map = source.map;\r\n\r\n\tthis.alphaMap = source.alphaMap;\r\n\r\n\tthis.displacementMap = source.displacementMap;\r\n\tthis.displacementScale = source.displacementScale;\r\n\tthis.displacementBias = source.displacementBias;\r\n\r\n\tthis.wireframe = source.wireframe;\r\n\tthis.wireframeLinewidth = source.wireframeLinewidth;\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\n// File:src/materials/MeshLambertMaterial.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n * parameters = {\r\n *  color: <hex>,\r\n *  opacity: <float>,\r\n *\r\n *  map: new THREE.Texture( <Image> ),\r\n *\r\n *  lightMap: new THREE.Texture( <Image> ),\r\n *  lightMapIntensity: <float>\r\n *\r\n *  aoMap: new THREE.Texture( <Image> ),\r\n *  aoMapIntensity: <float>\r\n *\r\n *  emissive: <hex>,\r\n *  emissiveIntensity: <float>\r\n *  emissiveMap: new THREE.Texture( <Image> ),\r\n *\r\n *  specularMap: new THREE.Texture( <Image> ),\r\n *\r\n *  alphaMap: new THREE.Texture( <Image> ),\r\n *\r\n *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\r\n *  combine: THREE.Multiply,\r\n *  reflectivity: <float>,\r\n *  refractionRatio: <float>,\r\n *\r\n *  wireframe: <boolean>,\r\n *  wireframeLinewidth: <float>,\r\n *\r\n *  skinning: <bool>,\r\n *  morphTargets: <bool>,\r\n *  morphNormals: <bool>\r\n * }\r\n */\r\n\r\nTHREE.MeshLambertMaterial = function ( parameters ) {\r\n\r\n\tTHREE.Material.call( this );\r\n\r\n\tthis.type = 'MeshLambertMaterial';\r\n\r\n\tthis.color = new THREE.Color( 0xffffff ); // diffuse\r\n\r\n\tthis.map = null;\r\n\r\n\tthis.lightMap = null;\r\n\tthis.lightMapIntensity = 1.0;\r\n\r\n\tthis.aoMap = null;\r\n\tthis.aoMapIntensity = 1.0;\r\n\r\n\tthis.emissive = new THREE.Color( 0x000000 );\r\n\tthis.emissiveIntensity = 1.0;\r\n\tthis.emissiveMap = null;\r\n\r\n\tthis.specularMap = null;\r\n\r\n\tthis.alphaMap = null;\r\n\r\n\tthis.envMap = null;\r\n\tthis.combine = THREE.MultiplyOperation;\r\n\tthis.reflectivity = 1;\r\n\tthis.refractionRatio = 0.98;\r\n\r\n\tthis.wireframe = false;\r\n\tthis.wireframeLinewidth = 1;\r\n\tthis.wireframeLinecap = 'round';\r\n\tthis.wireframeLinejoin = 'round';\r\n\r\n\tthis.skinning = false;\r\n\tthis.morphTargets = false;\r\n\tthis.morphNormals = false;\r\n\r\n\tthis.setValues( parameters );\r\n\r\n};\r\n\r\nTHREE.MeshLambertMaterial.prototype = Object.create( THREE.Material.prototype );\r\nTHREE.MeshLambertMaterial.prototype.constructor = THREE.MeshLambertMaterial;\r\n\r\nTHREE.MeshLambertMaterial.prototype.copy = function ( source ) {\r\n\r\n\tTHREE.Material.prototype.copy.call( this, source );\r\n\r\n\tthis.color.copy( source.color );\r\n\r\n\tthis.map = source.map;\r\n\r\n\tthis.lightMap = source.lightMap;\r\n\tthis.lightMapIntensity = source.lightMapIntensity;\r\n\r\n\tthis.aoMap = source.aoMap;\r\n\tthis.aoMapIntensity = source.aoMapIntensity;\r\n\r\n\tthis.emissive.copy( source.emissive );\r\n\tthis.emissiveMap = source.emissiveMap;\r\n\tthis.emissiveIntensity = source.emissiveIntensity;\r\n\r\n\tthis.specularMap = source.specularMap;\r\n\r\n\tthis.alphaMap = source.alphaMap;\r\n\r\n\tthis.envMap = source.envMap;\r\n\tthis.combine = source.combine;\r\n\tthis.reflectivity = source.reflectivity;\r\n\tthis.refractionRatio = source.refractionRatio;\r\n\r\n\tthis.wireframe = source.wireframe;\r\n\tthis.wireframeLinewidth = source.wireframeLinewidth;\r\n\tthis.wireframeLinecap = source.wireframeLinecap;\r\n\tthis.wireframeLinejoin = source.wireframeLinejoin;\r\n\r\n\tthis.skinning = source.skinning;\r\n\tthis.morphTargets = source.morphTargets;\r\n\tthis.morphNormals = source.morphNormals;\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\n// File:src/materials/MeshNormalMaterial.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n *\r\n * parameters = {\r\n *  opacity: <float>,\r\n *\r\n *  wireframe: <boolean>,\r\n *  wireframeLinewidth: <float>\r\n * }\r\n */\r\n\r\nTHREE.MeshNormalMaterial = function ( parameters ) {\r\n\r\n\tTHREE.Material.call( this, parameters );\r\n\r\n\tthis.type = 'MeshNormalMaterial';\r\n\r\n\tthis.wireframe = false;\r\n\tthis.wireframeLinewidth = 1;\r\n\r\n\tthis.fog = false;\r\n\tthis.lights = false;\r\n\tthis.morphTargets = false;\r\n\r\n\tthis.setValues( parameters );\r\n\r\n};\r\n\r\nTHREE.MeshNormalMaterial.prototype = Object.create( THREE.Material.prototype );\r\nTHREE.MeshNormalMaterial.prototype.constructor = THREE.MeshNormalMaterial;\r\n\r\nTHREE.MeshNormalMaterial.prototype.copy = function ( source ) {\r\n\r\n\tTHREE.Material.prototype.copy.call( this, source );\r\n\r\n\tthis.wireframe = source.wireframe;\r\n\tthis.wireframeLinewidth = source.wireframeLinewidth;\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\n// File:src/materials/MeshPhongMaterial.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n * parameters = {\r\n *  color: <hex>,\r\n *  specular: <hex>,\r\n *  shininess: <float>,\r\n *  opacity: <float>,\r\n *\r\n *  map: new THREE.Texture( <Image> ),\r\n *\r\n *  lightMap: new THREE.Texture( <Image> ),\r\n *  lightMapIntensity: <float>\r\n *\r\n *  aoMap: new THREE.Texture( <Image> ),\r\n *  aoMapIntensity: <float>\r\n *\r\n *  emissive: <hex>,\r\n *  emissiveIntensity: <float>\r\n *  emissiveMap: new THREE.Texture( <Image> ),\r\n *\r\n *  bumpMap: new THREE.Texture( <Image> ),\r\n *  bumpScale: <float>,\r\n *\r\n *  normalMap: new THREE.Texture( <Image> ),\r\n *  normalScale: <Vector2>,\r\n *\r\n *  displacementMap: new THREE.Texture( <Image> ),\r\n *  displacementScale: <float>,\r\n *  displacementBias: <float>,\r\n *\r\n *  specularMap: new THREE.Texture( <Image> ),\r\n *\r\n *  alphaMap: new THREE.Texture( <Image> ),\r\n *\r\n *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),\r\n *  combine: THREE.Multiply,\r\n *  reflectivity: <float>,\r\n *  refractionRatio: <float>,\r\n *\r\n *  wireframe: <boolean>,\r\n *  wireframeLinewidth: <float>,\r\n *\r\n *  skinning: <bool>,\r\n *  morphTargets: <bool>,\r\n *  morphNormals: <bool>\r\n * }\r\n */\r\n\r\nTHREE.MeshPhongMaterial = function ( parameters ) {\r\n\r\n\tTHREE.Material.call( this );\r\n\r\n\tthis.type = 'MeshPhongMaterial';\r\n\r\n\tthis.color = new THREE.Color( 0xffffff ); // diffuse\r\n\tthis.specular = new THREE.Color( 0x111111 );\r\n\tthis.shininess = 30;\r\n\r\n\tthis.map = null;\r\n\r\n\tthis.lightMap = null;\r\n\tthis.lightMapIntensity = 1.0;\r\n\r\n\tthis.aoMap = null;\r\n\tthis.aoMapIntensity = 1.0;\r\n\r\n\tthis.emissive = new THREE.Color( 0x000000 );\r\n\tthis.emissiveIntensity = 1.0;\r\n\tthis.emissiveMap = null;\r\n\r\n\tthis.bumpMap = null;\r\n\tthis.bumpScale = 1;\r\n\r\n\tthis.normalMap = null;\r\n\tthis.normalScale = new THREE.Vector2( 1, 1 );\r\n\r\n\tthis.displacementMap = null;\r\n\tthis.displacementScale = 1;\r\n\tthis.displacementBias = 0;\r\n\r\n\tthis.specularMap = null;\r\n\r\n\tthis.alphaMap = null;\r\n\r\n\tthis.envMap = null;\r\n\tthis.combine = THREE.MultiplyOperation;\r\n\tthis.reflectivity = 1;\r\n\tthis.refractionRatio = 0.98;\r\n\r\n\tthis.wireframe = false;\r\n\tthis.wireframeLinewidth = 1;\r\n\tthis.wireframeLinecap = 'round';\r\n\tthis.wireframeLinejoin = 'round';\r\n\r\n\tthis.skinning = false;\r\n\tthis.morphTargets = false;\r\n\tthis.morphNormals = false;\r\n\r\n\tthis.setValues( parameters );\r\n\r\n};\r\n\r\nTHREE.MeshPhongMaterial.prototype = Object.create( THREE.Material.prototype );\r\nTHREE.MeshPhongMaterial.prototype.constructor = THREE.MeshPhongMaterial;\r\n\r\nTHREE.MeshPhongMaterial.prototype.copy = function ( source ) {\r\n\r\n\tTHREE.Material.prototype.copy.call( this, source );\r\n\r\n\tthis.color.copy( source.color );\r\n\tthis.specular.copy( source.specular );\r\n\tthis.shininess = source.shininess;\r\n\r\n\tthis.map = source.map;\r\n\r\n\tthis.lightMap = source.lightMap;\r\n\tthis.lightMapIntensity = source.lightMapIntensity;\r\n\r\n\tthis.aoMap = source.aoMap;\r\n\tthis.aoMapIntensity = source.aoMapIntensity;\r\n\r\n\tthis.emissive.copy( source.emissive );\r\n\tthis.emissiveMap = source.emissiveMap;\r\n\tthis.emissiveIntensity = source.emissiveIntensity;\r\n\r\n\tthis.bumpMap = source.bumpMap;\r\n\tthis.bumpScale = source.bumpScale;\r\n\r\n\tthis.normalMap = source.normalMap;\r\n\tthis.normalScale.copy( source.normalScale );\r\n\r\n\tthis.displacementMap = source.displacementMap;\r\n\tthis.displacementScale = source.displacementScale;\r\n\tthis.displacementBias = source.displacementBias;\r\n\r\n\tthis.specularMap = source.specularMap;\r\n\r\n\tthis.alphaMap = source.alphaMap;\r\n\r\n\tthis.envMap = source.envMap;\r\n\tthis.combine = source.combine;\r\n\tthis.reflectivity = source.reflectivity;\r\n\tthis.refractionRatio = source.refractionRatio;\r\n\r\n\tthis.wireframe = source.wireframe;\r\n\tthis.wireframeLinewidth = source.wireframeLinewidth;\r\n\tthis.wireframeLinecap = source.wireframeLinecap;\r\n\tthis.wireframeLinejoin = source.wireframeLinejoin;\r\n\r\n\tthis.skinning = source.skinning;\r\n\tthis.morphTargets = source.morphTargets;\r\n\tthis.morphNormals = source.morphNormals;\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\n// File:src/materials/MeshStandardMaterial.js\r\n\r\n/**\r\n * @author WestLangley / http://github.com/WestLangley\r\n *\r\n * parameters = {\r\n *  color: <hex>,\r\n *  roughness: <float>,\r\n *  metalness: <float>,\r\n *  opacity: <float>,\r\n *\r\n *  map: new THREE.Texture( <Image> ),\r\n *\r\n *  lightMap: new THREE.Texture( <Image> ),\r\n *  lightMapIntensity: <float>\r\n *\r\n *  aoMap: new THREE.Texture( <Image> ),\r\n *  aoMapIntensity: <float>\r\n *\r\n *  emissive: <hex>,\r\n *  emissiveIntensity: <float>\r\n *  emissiveMap: new THREE.Texture( <Image> ),\r\n *\r\n *  bumpMap: new THREE.Texture( <Image> ),\r\n *  bumpScale: <float>,\r\n *\r\n *  normalMap: new THREE.Texture( <Image> ),\r\n *  normalScale: <Vector2>,\r\n *\r\n *  displacementMap: new THREE.Texture( <Image> ),\r\n *  displacementScale: <float>,\r\n *  displacementBias: <float>,\r\n *\r\n *  roughnessMap: new THREE.Texture( <Image> ),\r\n *\r\n *  metalnessMap: new THREE.Texture( <Image> ),\r\n *\r\n *  alphaMap: new THREE.Texture( <Image> ),\r\n *\r\n *  envMap: new THREE.CubeTexture( [posx, negx, posy, negy, posz, negz] ),\r\n *  envMapIntensity: <float>\r\n *\r\n *  refractionRatio: <float>,\r\n *\r\n *  wireframe: <boolean>,\r\n *  wireframeLinewidth: <float>,\r\n *\r\n *  skinning: <bool>,\r\n *  morphTargets: <bool>,\r\n *  morphNormals: <bool>\r\n * }\r\n */\r\n\r\nTHREE.MeshStandardMaterial = function ( parameters ) {\r\n\r\n\tTHREE.Material.call( this );\r\n\r\n\tthis.defines = { 'STANDARD': '' };\r\n\r\n\tthis.type = 'MeshStandardMaterial';\r\n\r\n\tthis.color = new THREE.Color( 0xffffff ); // diffuse\r\n\tthis.roughness = 0.5;\r\n\tthis.metalness = 0.5;\r\n\r\n\tthis.map = null;\r\n\r\n\tthis.lightMap = null;\r\n\tthis.lightMapIntensity = 1.0;\r\n\r\n\tthis.aoMap = null;\r\n\tthis.aoMapIntensity = 1.0;\r\n\r\n\tthis.emissive = new THREE.Color( 0x000000 );\r\n\tthis.emissiveIntensity = 1.0;\r\n\tthis.emissiveMap = null;\r\n\r\n\tthis.bumpMap = null;\r\n\tthis.bumpScale = 1;\r\n\r\n\tthis.normalMap = null;\r\n\tthis.normalScale = new THREE.Vector2( 1, 1 );\r\n\r\n\tthis.displacementMap = null;\r\n\tthis.displacementScale = 1;\r\n\tthis.displacementBias = 0;\r\n\r\n\tthis.roughnessMap = null;\r\n\r\n\tthis.metalnessMap = null;\r\n\r\n\tthis.alphaMap = null;\r\n\r\n\tthis.envMap = null;\r\n\tthis.envMapIntensity = 1.0;\r\n\r\n\tthis.refractionRatio = 0.98;\r\n\r\n\tthis.wireframe = false;\r\n\tthis.wireframeLinewidth = 1;\r\n\tthis.wireframeLinecap = 'round';\r\n\tthis.wireframeLinejoin = 'round';\r\n\r\n\tthis.skinning = false;\r\n\tthis.morphTargets = false;\r\n\tthis.morphNormals = false;\r\n\r\n\tthis.setValues( parameters );\r\n\r\n};\r\n\r\nTHREE.MeshStandardMaterial.prototype = Object.create( THREE.Material.prototype );\r\nTHREE.MeshStandardMaterial.prototype.constructor = THREE.MeshStandardMaterial;\r\n\r\nTHREE.MeshStandardMaterial.prototype.copy = function ( source ) {\r\n\r\n\tTHREE.Material.prototype.copy.call( this, source );\r\n\r\n\tthis.defines = { 'STANDARD': '' };\r\n\r\n\tthis.color.copy( source.color );\r\n\tthis.roughness = source.roughness;\r\n\tthis.metalness = source.metalness;\r\n\r\n\tthis.map = source.map;\r\n\r\n\tthis.lightMap = source.lightMap;\r\n\tthis.lightMapIntensity = source.lightMapIntensity;\r\n\r\n\tthis.aoMap = source.aoMap;\r\n\tthis.aoMapIntensity = source.aoMapIntensity;\r\n\r\n\tthis.emissive.copy( source.emissive );\r\n\tthis.emissiveMap = source.emissiveMap;\r\n\tthis.emissiveIntensity = source.emissiveIntensity;\r\n\r\n\tthis.bumpMap = source.bumpMap;\r\n\tthis.bumpScale = source.bumpScale;\r\n\r\n\tthis.normalMap = source.normalMap;\r\n\tthis.normalScale.copy( source.normalScale );\r\n\r\n\tthis.displacementMap = source.displacementMap;\r\n\tthis.displacementScale = source.displacementScale;\r\n\tthis.displacementBias = source.displacementBias;\r\n\r\n\tthis.roughnessMap = source.roughnessMap;\r\n\r\n\tthis.metalnessMap = source.metalnessMap;\r\n\r\n\tthis.alphaMap = source.alphaMap;\r\n\r\n\tthis.envMap = source.envMap;\r\n\tthis.envMapIntensity = source.envMapIntensity;\r\n\r\n\tthis.refractionRatio = source.refractionRatio;\r\n\r\n\tthis.wireframe = source.wireframe;\r\n\tthis.wireframeLinewidth = source.wireframeLinewidth;\r\n\tthis.wireframeLinecap = source.wireframeLinecap;\r\n\tthis.wireframeLinejoin = source.wireframeLinejoin;\r\n\r\n\tthis.skinning = source.skinning;\r\n\tthis.morphTargets = source.morphTargets;\r\n\tthis.morphNormals = source.morphNormals;\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\n// File:src/materials/MeshPhysicalMaterial.js\r\n\r\n/**\r\n * @author WestLangley / http://github.com/WestLangley\r\n *\r\n * parameters = {\r\n *  reflectivity: <float>\r\n * }\r\n */\r\n\r\nTHREE.MeshPhysicalMaterial = function ( parameters ) {\r\n\r\n\tTHREE.MeshStandardMaterial.call( this );\r\n\r\n\tthis.defines = { 'PHYSICAL': '' };\r\n\r\n\tthis.type = 'MeshPhysicalMaterial';\r\n\r\n\tthis.reflectivity = 0.5; // maps to F0 = 0.04\r\n\r\n\tthis.setValues( parameters );\r\n\r\n};\r\n\r\nTHREE.MeshPhysicalMaterial.prototype = Object.create( THREE.MeshStandardMaterial.prototype );\r\nTHREE.MeshPhysicalMaterial.prototype.constructor = THREE.MeshPhysicalMaterial;\r\n\r\nTHREE.MeshPhysicalMaterial.prototype.copy = function ( source ) {\r\n\r\n\tTHREE.MeshStandardMaterial.prototype.copy.call( this, source );\r\n\r\n\tthis.defines = { 'PHYSICAL': '' };\r\n\r\n\tthis.reflectivity = source.reflectivity;\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\n// File:src/materials/MultiMaterial.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.MultiMaterial = function ( materials ) {\r\n\r\n\tthis.uuid = THREE.Math.generateUUID();\r\n\r\n\tthis.type = 'MultiMaterial';\r\n\r\n\tthis.materials = materials instanceof Array ? materials : [];\r\n\r\n\tthis.visible = true;\r\n\r\n};\r\n\r\nTHREE.MultiMaterial.prototype = {\r\n\r\n\tconstructor: THREE.MultiMaterial,\r\n\r\n\ttoJSON: function ( meta ) {\r\n\r\n\t\tvar output = {\r\n\t\t\tmetadata: {\r\n\t\t\t\tversion: 4.2,\r\n\t\t\t\ttype: 'material',\r\n\t\t\t\tgenerator: 'MaterialExporter'\r\n\t\t\t},\r\n\t\t\tuuid: this.uuid,\r\n\t\t\ttype: this.type,\r\n\t\t\tmaterials: []\r\n\t\t};\r\n\r\n\t\tvar materials = this.materials;\r\n\r\n\t\tfor ( var i = 0, l = materials.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar material = materials[ i ].toJSON( meta );\r\n\t\t\tdelete material.metadata;\r\n\r\n\t\t\toutput.materials.push( material );\r\n\r\n\t\t}\r\n\r\n\t\toutput.visible = this.visible;\r\n\r\n\t\treturn output;\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\tvar material = new this.constructor();\r\n\r\n\t\tfor ( var i = 0; i < this.materials.length; i ++ ) {\r\n\r\n\t\t\tmaterial.materials.push( this.materials[ i ].clone() );\r\n\r\n\t\t}\r\n\r\n\t\tmaterial.visible = this.visible;\r\n\r\n\t\treturn material;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/materials/PointsMaterial.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n * parameters = {\r\n *  color: <hex>,\r\n *  opacity: <float>,\r\n *  map: new THREE.Texture( <Image> ),\r\n *\r\n *  size: <float>,\r\n *  sizeAttenuation: <bool>\r\n * }\r\n */\r\n\r\nTHREE.PointsMaterial = function ( parameters ) {\r\n\r\n\tTHREE.Material.call( this );\r\n\r\n\tthis.type = 'PointsMaterial';\r\n\r\n\tthis.color = new THREE.Color( 0xffffff );\r\n\r\n\tthis.map = null;\r\n\r\n\tthis.size = 1;\r\n\tthis.sizeAttenuation = true;\r\n\r\n\tthis.lights = false;\r\n\r\n\tthis.setValues( parameters );\r\n\r\n};\r\n\r\nTHREE.PointsMaterial.prototype = Object.create( THREE.Material.prototype );\r\nTHREE.PointsMaterial.prototype.constructor = THREE.PointsMaterial;\r\n\r\nTHREE.PointsMaterial.prototype.copy = function ( source ) {\r\n\r\n\tTHREE.Material.prototype.copy.call( this, source );\r\n\r\n\tthis.color.copy( source.color );\r\n\r\n\tthis.map = source.map;\r\n\r\n\tthis.size = source.size;\r\n\tthis.sizeAttenuation = source.sizeAttenuation;\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\n// File:src/materials/ShaderMaterial.js\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n * parameters = {\r\n *  defines: { \"label\" : \"value\" },\r\n *  uniforms: { \"parameter1\": { type: \"1f\", value: 1.0 }, \"parameter2\": { type: \"1i\" value2: 2 } },\r\n *\r\n *  fragmentShader: <string>,\r\n *  vertexShader: <string>,\r\n *\r\n *  wireframe: <boolean>,\r\n *  wireframeLinewidth: <float>,\r\n *\r\n *  lights: <bool>,\r\n *\r\n *  skinning: <bool>,\r\n *  morphTargets: <bool>,\r\n *  morphNormals: <bool>\r\n * }\r\n */\r\n\r\nTHREE.ShaderMaterial = function ( parameters ) {\r\n\r\n\tTHREE.Material.call( this );\r\n\r\n\tthis.type = 'ShaderMaterial';\r\n\r\n\tthis.defines = {};\r\n\tthis.uniforms = {};\r\n\r\n\tthis.vertexShader = 'void main() {\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}';\r\n\tthis.fragmentShader = 'void main() {\\n\\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\\n}';\r\n\r\n\tthis.linewidth = 1;\r\n\r\n\tthis.wireframe = false;\r\n\tthis.wireframeLinewidth = 1;\r\n\r\n\tthis.fog = false; // set to use scene fog\r\n\tthis.lights = false; // set to use scene lights\r\n\tthis.clipping = false; // set to use user-defined clipping planes\r\n\r\n\tthis.skinning = false; // set to use skinning attribute streams\r\n\tthis.morphTargets = false; // set to use morph targets\r\n\tthis.morphNormals = false; // set to use morph normals\r\n\r\n\tthis.extensions = {\r\n\t\tderivatives: false, // set to use derivatives\r\n\t\tfragDepth: false, // set to use fragment depth values\r\n\t\tdrawBuffers: false, // set to use draw buffers\r\n\t\tshaderTextureLOD: false // set to use shader texture LOD\r\n\t};\r\n\r\n\t// When rendered geometry doesn't include these attributes but the material does,\r\n\t// use these default values in WebGL. This avoids errors when buffer data is missing.\r\n\tthis.defaultAttributeValues = {\r\n\t\t'color': [ 1, 1, 1 ],\r\n\t\t'uv': [ 0, 0 ],\r\n\t\t'uv2': [ 0, 0 ]\r\n\t};\r\n\r\n\tthis.index0AttributeName = undefined;\r\n\r\n\tif ( parameters !== undefined ) {\r\n\r\n\t\tif ( parameters.attributes !== undefined ) {\r\n\r\n\t\t\tconsole.error( 'THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.' );\r\n\r\n\t\t}\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.ShaderMaterial.prototype = Object.create( THREE.Material.prototype );\r\nTHREE.ShaderMaterial.prototype.constructor = THREE.ShaderMaterial;\r\n\r\nTHREE.ShaderMaterial.prototype.copy = function ( source ) {\r\n\r\n\tTHREE.Material.prototype.copy.call( this, source );\r\n\r\n\tthis.fragmentShader = source.fragmentShader;\r\n\tthis.vertexShader = source.vertexShader;\r\n\r\n\tthis.uniforms = THREE.UniformsUtils.clone( source.uniforms );\r\n\r\n\tthis.defines = source.defines;\r\n\r\n\tthis.wireframe = source.wireframe;\r\n\tthis.wireframeLinewidth = source.wireframeLinewidth;\r\n\r\n\tthis.lights = source.lights;\r\n\tthis.clipping = source.clipping;\r\n\r\n\tthis.skinning = source.skinning;\r\n\r\n\tthis.morphTargets = source.morphTargets;\r\n\tthis.morphNormals = source.morphNormals;\r\n\r\n\tthis.extensions = source.extensions;\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\nTHREE.ShaderMaterial.prototype.toJSON = function ( meta ) {\r\n\r\n\tvar data = THREE.Material.prototype.toJSON.call( this, meta );\r\n\r\n\tdata.uniforms = this.uniforms;\r\n\tdata.vertexShader = this.vertexShader;\r\n\tdata.fragmentShader = this.fragmentShader;\r\n\r\n\treturn data;\r\n\r\n};\r\n\r\n// File:src/materials/RawShaderMaterial.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.RawShaderMaterial = function ( parameters ) {\r\n\r\n\tTHREE.ShaderMaterial.call( this, parameters );\r\n\r\n\tthis.type = 'RawShaderMaterial';\r\n\r\n};\r\n\r\nTHREE.RawShaderMaterial.prototype = Object.create( THREE.ShaderMaterial.prototype );\r\nTHREE.RawShaderMaterial.prototype.constructor = THREE.RawShaderMaterial;\r\n\r\n// File:src/materials/SpriteMaterial.js\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n * parameters = {\r\n *  color: <hex>,\r\n *  opacity: <float>,\r\n *  map: new THREE.Texture( <Image> ),\r\n *\r\n *\tuvOffset: new THREE.Vector2(),\r\n *\tuvScale: new THREE.Vector2()\r\n * }\r\n */\r\n\r\nTHREE.SpriteMaterial = function ( parameters ) {\r\n\r\n\tTHREE.Material.call( this );\r\n\r\n\tthis.type = 'SpriteMaterial';\r\n\r\n\tthis.color = new THREE.Color( 0xffffff );\r\n\tthis.map = null;\r\n\r\n\tthis.rotation = 0;\r\n\r\n\tthis.fog = false;\r\n\tthis.lights = false;\r\n\r\n\tthis.setValues( parameters );\r\n\r\n};\r\n\r\nTHREE.SpriteMaterial.prototype = Object.create( THREE.Material.prototype );\r\nTHREE.SpriteMaterial.prototype.constructor = THREE.SpriteMaterial;\r\n\r\nTHREE.SpriteMaterial.prototype.copy = function ( source ) {\r\n\r\n\tTHREE.Material.prototype.copy.call( this, source );\r\n\r\n\tthis.color.copy( source.color );\r\n\tthis.map = source.map;\r\n\r\n\tthis.rotation = source.rotation;\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\n// File:src/materials/ShadowMaterial.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.ShadowMaterial = function () {\r\n\r\n\tTHREE.ShaderMaterial.call( this, {\r\n\t\tuniforms: THREE.UniformsUtils.merge( [\r\n\t\t\tTHREE.UniformsLib[ \"lights\" ],\r\n\t\t\t{\r\n\t\t\t\topacity: { value: 1.0 }\r\n\t\t\t}\r\n\t\t] ),\r\n\t\tvertexShader: THREE.ShaderChunk[ 'shadow_vert' ],\r\n\t\tfragmentShader: THREE.ShaderChunk[ 'shadow_frag' ]\r\n\t} );\r\n\r\n\tthis.lights = true;\r\n\tthis.transparent = true;\r\n\r\n\tObject.defineProperties( this, {\r\n\t\topacity: {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function () {\r\n\t\t\t\treturn this.uniforms.opacity.value;\r\n\t\t\t},\r\n\t\t\tset: function ( value ) {\r\n\t\t\t\tthis.uniforms.opacity.value = value;\r\n\t\t\t}\r\n\t\t}\r\n\t} );\r\n\r\n};\r\n\r\nTHREE.ShadowMaterial.prototype = Object.create( THREE.ShaderMaterial.prototype );\r\nTHREE.ShadowMaterial.prototype.constructor = THREE.ShadowMaterial;\r\n\r\n// File:src/textures/Texture.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author szimek / https://github.com/szimek/\r\n */\r\n\r\nTHREE.Texture = function ( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {\r\n\r\n\tObject.defineProperty( this, 'id', { value: THREE.TextureIdCount ++ } );\r\n\r\n\tthis.uuid = THREE.Math.generateUUID();\r\n\r\n\tthis.name = '';\r\n\tthis.sourceFile = '';\r\n\r\n\tthis.image = image !== undefined ? image : THREE.Texture.DEFAULT_IMAGE;\r\n\tthis.mipmaps = [];\r\n\r\n\tthis.mapping = mapping !== undefined ? mapping : THREE.Texture.DEFAULT_MAPPING;\r\n\r\n\tthis.wrapS = wrapS !== undefined ? wrapS : THREE.ClampToEdgeWrapping;\r\n\tthis.wrapT = wrapT !== undefined ? wrapT : THREE.ClampToEdgeWrapping;\r\n\r\n\tthis.magFilter = magFilter !== undefined ? magFilter : THREE.LinearFilter;\r\n\tthis.minFilter = minFilter !== undefined ? minFilter : THREE.LinearMipMapLinearFilter;\r\n\r\n\tthis.anisotropy = anisotropy !== undefined ? anisotropy : 1;\r\n\r\n\tthis.format = format !== undefined ? format : THREE.RGBAFormat;\r\n\tthis.type = type !== undefined ? type : THREE.UnsignedByteType;\r\n\r\n\tthis.offset = new THREE.Vector2( 0, 0 );\r\n\tthis.repeat = new THREE.Vector2( 1, 1 );\r\n\r\n\tthis.generateMipmaps = true;\r\n\tthis.premultiplyAlpha = false;\r\n\tthis.flipY = true;\r\n\tthis.unpackAlignment = 4;\t// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)\r\n\r\n\r\n\t// Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.\r\n\t//\r\n\t// Also changing the encoding after already used by a Material will not automatically make the Material\r\n\t// update.  You need to explicitly call Material.needsUpdate to trigger it to recompile.\r\n\tthis.encoding = encoding !== undefined ? encoding :  THREE.LinearEncoding;\r\n\r\n\tthis.version = 0;\r\n\tthis.onUpdate = null;\r\n\r\n};\r\n\r\nTHREE.Texture.DEFAULT_IMAGE = undefined;\r\nTHREE.Texture.DEFAULT_MAPPING = THREE.UVMapping;\r\n\r\nTHREE.Texture.prototype = {\r\n\r\n\tconstructor: THREE.Texture,\r\n\r\n\tset needsUpdate( value ) {\r\n\r\n\t\tif ( value === true ) this.version ++;\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t},\r\n\r\n\tcopy: function ( source ) {\r\n\r\n\t\tthis.image = source.image;\r\n\t\tthis.mipmaps = source.mipmaps.slice( 0 );\r\n\r\n\t\tthis.mapping = source.mapping;\r\n\r\n\t\tthis.wrapS = source.wrapS;\r\n\t\tthis.wrapT = source.wrapT;\r\n\r\n\t\tthis.magFilter = source.magFilter;\r\n\t\tthis.minFilter = source.minFilter;\r\n\r\n\t\tthis.anisotropy = source.anisotropy;\r\n\r\n\t\tthis.format = source.format;\r\n\t\tthis.type = source.type;\r\n\r\n\t\tthis.offset.copy( source.offset );\r\n\t\tthis.repeat.copy( source.repeat );\r\n\r\n\t\tthis.generateMipmaps = source.generateMipmaps;\r\n\t\tthis.premultiplyAlpha = source.premultiplyAlpha;\r\n\t\tthis.flipY = source.flipY;\r\n\t\tthis.unpackAlignment = source.unpackAlignment;\r\n\t\tthis.encoding = source.encoding;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\ttoJSON: function ( meta ) {\r\n\r\n\t\tif ( meta.textures[ this.uuid ] !== undefined ) {\r\n\r\n\t\t\treturn meta.textures[ this.uuid ];\r\n\r\n\t\t}\r\n\r\n\t\tfunction getDataURL( image ) {\r\n\r\n\t\t\tvar canvas;\r\n\r\n\t\t\tif ( image.toDataURL !== undefined ) {\r\n\r\n\t\t\t\tcanvas = image;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tcanvas = document.createElement( 'canvas' );\r\n\t\t\t\tcanvas.width = image.width;\r\n\t\t\t\tcanvas.height = image.height;\r\n\r\n\t\t\t\tcanvas.getContext( '2d' ).drawImage( image, 0, 0, image.width, image.height );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( canvas.width > 2048 || canvas.height > 2048 ) {\r\n\r\n\t\t\t\treturn canvas.toDataURL( 'image/jpeg', 0.6 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\treturn canvas.toDataURL( 'image/png' );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tvar output = {\r\n\t\t\tmetadata: {\r\n\t\t\t\tversion: 4.4,\r\n\t\t\t\ttype: 'Texture',\r\n\t\t\t\tgenerator: 'Texture.toJSON'\r\n\t\t\t},\r\n\r\n\t\t\tuuid: this.uuid,\r\n\t\t\tname: this.name,\r\n\r\n\t\t\tmapping: this.mapping,\r\n\r\n\t\t\trepeat: [ this.repeat.x, this.repeat.y ],\r\n\t\t\toffset: [ this.offset.x, this.offset.y ],\r\n\t\t\twrap: [ this.wrapS, this.wrapT ],\r\n\r\n\t\t\tminFilter: this.minFilter,\r\n\t\t\tmagFilter: this.magFilter,\r\n\t\t\tanisotropy: this.anisotropy\r\n\t\t};\r\n\r\n\t\tif ( this.image !== undefined ) {\r\n\r\n\t\t\t// TODO: Move to THREE.Image\r\n\r\n\t\t\tvar image = this.image;\r\n\r\n\t\t\tif ( image.uuid === undefined ) {\r\n\r\n\t\t\t\timage.uuid = THREE.Math.generateUUID(); // UGH\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( meta.images[ image.uuid ] === undefined ) {\r\n\r\n\t\t\t\tmeta.images[ image.uuid ] = {\r\n\t\t\t\t\tuuid: image.uuid,\r\n\t\t\t\t\turl: getDataURL( image )\r\n\t\t\t\t};\r\n\r\n\t\t\t}\r\n\r\n\t\t\toutput.image = image.uuid;\r\n\r\n\t\t}\r\n\r\n\t\tmeta.textures[ this.uuid ] = output;\r\n\r\n\t\treturn output;\r\n\r\n\t},\r\n\r\n\tdispose: function () {\r\n\r\n\t\tthis.dispatchEvent( { type: 'dispose' } );\r\n\r\n\t},\r\n\r\n\ttransformUv: function ( uv ) {\r\n\r\n\t\tif ( this.mapping !== THREE.UVMapping )  return;\r\n\r\n\t\tuv.multiply( this.repeat );\r\n\t\tuv.add( this.offset );\r\n\r\n\t\tif ( uv.x < 0 || uv.x > 1 ) {\r\n\r\n\t\t\tswitch ( this.wrapS ) {\r\n\r\n\t\t\t\tcase THREE.RepeatWrapping:\r\n\r\n\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase THREE.ClampToEdgeWrapping:\r\n\r\n\t\t\t\t\tuv.x = uv.x < 0 ? 0 : 1;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase THREE.MirroredRepeatWrapping:\r\n\r\n\t\t\t\t\tif ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {\r\n\r\n\t\t\t\t\t\tuv.x = Math.ceil( uv.x ) - uv.x;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( uv.y < 0 || uv.y > 1 ) {\r\n\r\n\t\t\tswitch ( this.wrapT ) {\r\n\r\n\t\t\t\tcase THREE.RepeatWrapping:\r\n\r\n\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase THREE.ClampToEdgeWrapping:\r\n\r\n\t\t\t\t\tuv.y = uv.y < 0 ? 0 : 1;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase THREE.MirroredRepeatWrapping:\r\n\r\n\t\t\t\t\tif ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {\r\n\r\n\t\t\t\t\t\tuv.y = Math.ceil( uv.y ) - uv.y;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.flipY ) {\r\n\r\n\t\t\tuv.y = 1 - uv.y;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n\r\nObject.assign( THREE.Texture.prototype, THREE.EventDispatcher.prototype );\r\n\r\nTHREE.TextureIdCount = 0;\r\n\r\n// File:src/textures/DepthTexture.js\r\n\r\n/**\r\n * @author Matt DesLauriers / @mattdesl\r\n */\r\n\r\nTHREE.DepthTexture = function ( width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy ) {\r\n\r\n  THREE.Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, THREE.DepthFormat, type, anisotropy );\r\n\r\n  this.image = { width: width, height: height };\r\n\r\n  this.type = type !== undefined ? type : THREE.UnsignedShortType;\r\n\r\n  this.magFilter = magFilter !== undefined ? magFilter : THREE.NearestFilter;\r\n  this.minFilter = minFilter !== undefined ? minFilter : THREE.NearestFilter;\r\n\r\n  this.flipY = false;\r\n  this.generateMipmaps  = false;\r\n\r\n};\r\n\r\nTHREE.DepthTexture.prototype = Object.create( THREE.Texture.prototype );\r\nTHREE.DepthTexture.prototype.constructor = THREE.DepthTexture;\r\n\r\n// File:src/textures/CanvasTexture.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.CanvasTexture = function ( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\r\n\r\n\tTHREE.Texture.call( this, canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\r\n\r\n\tthis.needsUpdate = true;\r\n\r\n};\r\n\r\nTHREE.CanvasTexture.prototype = Object.create( THREE.Texture.prototype );\r\nTHREE.CanvasTexture.prototype.constructor = THREE.CanvasTexture;\r\n\r\n// File:src/textures/CubeTexture.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.CubeTexture = function ( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding ) {\r\n\r\n\timages = images !== undefined ? images : [];\r\n\tmapping = mapping !== undefined ? mapping : THREE.CubeReflectionMapping;\r\n\r\n\tTHREE.Texture.call( this, images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\r\n\r\n\tthis.flipY = false;\r\n\r\n};\r\n\r\nTHREE.CubeTexture.prototype = Object.create( THREE.Texture.prototype );\r\nTHREE.CubeTexture.prototype.constructor = THREE.CubeTexture;\r\n\r\nObject.defineProperty( THREE.CubeTexture.prototype, 'images', {\r\n\r\n\tget: function () {\r\n\r\n\t\treturn this.image;\r\n\r\n\t},\r\n\r\n\tset: function ( value ) {\r\n\r\n\t\tthis.image = value;\r\n\r\n\t}\r\n\r\n} );\r\n\r\n// File:src/textures/CompressedTexture.js\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.CompressedTexture = function ( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {\r\n\r\n\tTHREE.Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\r\n\r\n\tthis.image = { width: width, height: height };\r\n\tthis.mipmaps = mipmaps;\r\n\r\n\t// no flipping for cube textures\r\n\t// (also flipping doesn't work for compressed textures )\r\n\r\n\tthis.flipY = false;\r\n\r\n\t// can't generate mipmaps for compressed textures\r\n\t// mips must be embedded in DDS files\r\n\r\n\tthis.generateMipmaps = false;\r\n\r\n};\r\n\r\nTHREE.CompressedTexture.prototype = Object.create( THREE.Texture.prototype );\r\nTHREE.CompressedTexture.prototype.constructor = THREE.CompressedTexture;\r\n\r\n// File:src/textures/DataTexture.js\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.DataTexture = function ( data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {\r\n\r\n\tTHREE.Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\r\n\r\n\tthis.image = { data: data, width: width, height: height };\r\n\r\n\tthis.magFilter = magFilter !== undefined ? magFilter : THREE.NearestFilter;\r\n\tthis.minFilter = minFilter !== undefined ? minFilter : THREE.NearestFilter;\r\n\r\n\tthis.flipY = false;\r\n\tthis.generateMipmaps  = false;\r\n\r\n};\r\n\r\nTHREE.DataTexture.prototype = Object.create( THREE.Texture.prototype );\r\nTHREE.DataTexture.prototype.constructor = THREE.DataTexture;\r\n\r\n// File:src/textures/VideoTexture.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.VideoTexture = function ( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\r\n\r\n\tTHREE.Texture.call( this, video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\r\n\r\n\tthis.generateMipmaps = false;\r\n\r\n\tvar scope = this;\r\n\r\n\tfunction update() {\r\n\r\n\t\trequestAnimationFrame( update );\r\n\r\n\t\tif ( video.readyState >= video.HAVE_CURRENT_DATA ) {\r\n\r\n\t\t\tscope.needsUpdate = true;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tupdate();\r\n\r\n};\r\n\r\nTHREE.VideoTexture.prototype = Object.create( THREE.Texture.prototype );\r\nTHREE.VideoTexture.prototype.constructor = THREE.VideoTexture;\r\n\r\n// File:src/objects/Group.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.Group = function () {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.type = 'Group';\r\n\r\n};\r\n\r\nTHREE.Group.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {\r\n\r\n\tconstructor: THREE.Group\r\n\r\n} );\r\n\r\n// File:src/objects/Points.js\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.Points = function ( geometry, material ) {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.type = 'Points';\r\n\r\n\tthis.geometry = geometry !== undefined ? geometry : new THREE.BufferGeometry();\r\n\tthis.material = material !== undefined ? material : new THREE.PointsMaterial( { color: Math.random() * 0xffffff } );\r\n\r\n};\r\n\r\nTHREE.Points.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {\r\n\r\n\tconstructor: THREE.Points,\r\n\r\n\traycast: ( function () {\r\n\r\n\t\tvar inverseMatrix = new THREE.Matrix4();\r\n\t\tvar ray = new THREE.Ray();\r\n\t\tvar sphere = new THREE.Sphere();\r\n\r\n\t\treturn function raycast( raycaster, intersects ) {\r\n\r\n\t\t\tvar object = this;\r\n\t\t\tvar geometry = this.geometry;\r\n\t\t\tvar matrixWorld = this.matrixWorld;\r\n\t\t\tvar threshold = raycaster.params.Points.threshold;\r\n\r\n\t\t\t// Checking boundingSphere distance to ray\r\n\r\n\t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\r\n\r\n\t\t\tsphere.copy( geometry.boundingSphere );\r\n\t\t\tsphere.applyMatrix4( matrixWorld );\r\n\r\n\t\t\tif ( raycaster.ray.intersectsSphere( sphere ) === false ) return;\r\n\r\n\t\t\t//\r\n\r\n\t\t\tinverseMatrix.getInverse( matrixWorld );\r\n\t\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\r\n\r\n\t\t\tvar localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );\r\n\t\t\tvar localThresholdSq = localThreshold * localThreshold;\r\n\t\t\tvar position = new THREE.Vector3();\r\n\r\n\t\t\tfunction testPoint( point, index ) {\r\n\r\n\t\t\t\tvar rayPointDistanceSq = ray.distanceSqToPoint( point );\r\n\r\n\t\t\t\tif ( rayPointDistanceSq < localThresholdSq ) {\r\n\r\n\t\t\t\t\tvar intersectPoint = ray.closestPointToPoint( point );\r\n\t\t\t\t\tintersectPoint.applyMatrix4( matrixWorld );\r\n\r\n\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( intersectPoint );\r\n\r\n\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) return;\r\n\r\n\t\t\t\t\tintersects.push( {\r\n\r\n\t\t\t\t\t\tdistance: distance,\r\n\t\t\t\t\t\tdistanceToRay: Math.sqrt( rayPointDistanceSq ),\r\n\t\t\t\t\t\tpoint: intersectPoint.clone(),\r\n\t\t\t\t\t\tindex: index,\r\n\t\t\t\t\t\tface: null,\r\n\t\t\t\t\t\tobject: object\r\n\r\n\t\t\t\t\t} );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( geometry instanceof THREE.BufferGeometry ) {\r\n\r\n\t\t\t\tvar index = geometry.index;\r\n\t\t\t\tvar attributes = geometry.attributes;\r\n\t\t\t\tvar positions = attributes.position.array;\r\n\r\n\t\t\t\tif ( index !== null ) {\r\n\r\n\t\t\t\t\tvar indices = index.array;\r\n\r\n\t\t\t\t\tfor ( var i = 0, il = indices.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\t\tvar a = indices[ i ];\r\n\r\n\t\t\t\t\t\tposition.fromArray( positions, a * 3 );\r\n\r\n\t\t\t\t\t\ttestPoint( position, a );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tfor ( var i = 0, l = positions.length / 3; i < l; i ++ ) {\r\n\r\n\t\t\t\t\t\tposition.fromArray( positions, i * 3 );\r\n\r\n\t\t\t\t\t\ttestPoint( position, i );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tvar vertices = geometry.vertices;\r\n\r\n\t\t\t\tfor ( var i = 0, l = vertices.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\ttestPoint( vertices[ i ], i );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t}() ),\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\r\n\r\n\t}\r\n\r\n} );\r\n\r\n// File:src/objects/Line.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.Line = function ( geometry, material, mode ) {\r\n\r\n\tif ( mode === 1 ) {\r\n\r\n\t\tconsole.warn( 'THREE.Line: parameter THREE.LinePieces no longer supported. Created THREE.LineSegments instead.' );\r\n\t\treturn new THREE.LineSegments( geometry, material );\r\n\r\n\t}\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.type = 'Line';\r\n\r\n\tthis.geometry = geometry !== undefined ? geometry : new THREE.BufferGeometry();\r\n\tthis.material = material !== undefined ? material : new THREE.LineBasicMaterial( { color: Math.random() * 0xffffff } );\r\n\r\n};\r\n\r\nTHREE.Line.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {\r\n\r\n\tconstructor: THREE.Line,\r\n\r\n\traycast: ( function () {\r\n\r\n\t\tvar inverseMatrix = new THREE.Matrix4();\r\n\t\tvar ray = new THREE.Ray();\r\n\t\tvar sphere = new THREE.Sphere();\r\n\r\n\t\treturn function raycast( raycaster, intersects ) {\r\n\r\n\t\t\tvar precision = raycaster.linePrecision;\r\n\t\t\tvar precisionSq = precision * precision;\r\n\r\n\t\t\tvar geometry = this.geometry;\r\n\t\t\tvar matrixWorld = this.matrixWorld;\r\n\r\n\t\t\t// Checking boundingSphere distance to ray\r\n\r\n\t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\r\n\r\n\t\t\tsphere.copy( geometry.boundingSphere );\r\n\t\t\tsphere.applyMatrix4( matrixWorld );\r\n\r\n\t\t\tif ( raycaster.ray.intersectsSphere( sphere ) === false ) return;\r\n\r\n\t\t\t//\r\n\r\n\t\t\tinverseMatrix.getInverse( matrixWorld );\r\n\t\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\r\n\r\n\t\t\tvar vStart = new THREE.Vector3();\r\n\t\t\tvar vEnd = new THREE.Vector3();\r\n\t\t\tvar interSegment = new THREE.Vector3();\r\n\t\t\tvar interRay = new THREE.Vector3();\r\n\t\t\tvar step = this instanceof THREE.LineSegments ? 2 : 1;\r\n\r\n\t\t\tif ( geometry instanceof THREE.BufferGeometry ) {\r\n\r\n\t\t\t\tvar index = geometry.index;\r\n\t\t\t\tvar attributes = geometry.attributes;\r\n\t\t\t\tvar positions = attributes.position.array;\r\n\r\n\t\t\t\tif ( index !== null ) {\r\n\r\n\t\t\t\t\tvar indices = index.array;\r\n\r\n\t\t\t\t\tfor ( var i = 0, l = indices.length - 1; i < l; i += step ) {\r\n\r\n\t\t\t\t\t\tvar a = indices[ i ];\r\n\t\t\t\t\t\tvar b = indices[ i + 1 ];\r\n\r\n\t\t\t\t\t\tvStart.fromArray( positions, a * 3 );\r\n\t\t\t\t\t\tvEnd.fromArray( positions, b * 3 );\r\n\r\n\t\t\t\t\t\tvar distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\r\n\r\n\t\t\t\t\t\tif ( distSq > precisionSq ) continue;\r\n\r\n\t\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\r\n\r\n\t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\r\n\r\n\t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\r\n\r\n\t\t\t\t\t\tintersects.push( {\r\n\r\n\t\t\t\t\t\t\tdistance: distance,\r\n\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\r\n\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\r\n\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\r\n\t\t\t\t\t\t\tindex: i,\r\n\t\t\t\t\t\t\tface: null,\r\n\t\t\t\t\t\t\tfaceIndex: null,\r\n\t\t\t\t\t\t\tobject: this\r\n\r\n\t\t\t\t\t\t} );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tfor ( var i = 0, l = positions.length / 3 - 1; i < l; i += step ) {\r\n\r\n\t\t\t\t\t\tvStart.fromArray( positions, 3 * i );\r\n\t\t\t\t\t\tvEnd.fromArray( positions, 3 * i + 3 );\r\n\r\n\t\t\t\t\t\tvar distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\r\n\r\n\t\t\t\t\t\tif ( distSq > precisionSq ) continue;\r\n\r\n\t\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\r\n\r\n\t\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\r\n\r\n\t\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\r\n\r\n\t\t\t\t\t\tintersects.push( {\r\n\r\n\t\t\t\t\t\t\tdistance: distance,\r\n\t\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\r\n\t\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\r\n\t\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\r\n\t\t\t\t\t\t\tindex: i,\r\n\t\t\t\t\t\t\tface: null,\r\n\t\t\t\t\t\t\tfaceIndex: null,\r\n\t\t\t\t\t\t\tobject: this\r\n\r\n\t\t\t\t\t\t} );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( geometry instanceof THREE.Geometry ) {\r\n\r\n\t\t\t\tvar vertices = geometry.vertices;\r\n\t\t\t\tvar nbVertices = vertices.length;\r\n\r\n\t\t\t\tfor ( var i = 0; i < nbVertices - 1; i += step ) {\r\n\r\n\t\t\t\t\tvar distSq = ray.distanceSqToSegment( vertices[ i ], vertices[ i + 1 ], interRay, interSegment );\r\n\r\n\t\t\t\t\tif ( distSq > precisionSq ) continue;\r\n\r\n\t\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\r\n\r\n\t\t\t\t\tvar distance = raycaster.ray.origin.distanceTo( interRay );\r\n\r\n\t\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\r\n\r\n\t\t\t\t\tintersects.push( {\r\n\r\n\t\t\t\t\t\tdistance: distance,\r\n\t\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\r\n\t\t\t\t\t\t// point: raycaster.ray.at( distance ),\r\n\t\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\r\n\t\t\t\t\t\tindex: i,\r\n\t\t\t\t\t\tface: null,\r\n\t\t\t\t\t\tfaceIndex: null,\r\n\t\t\t\t\t\tobject: this\r\n\r\n\t\t\t\t\t} );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t}() ),\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\r\n\r\n\t}\r\n\r\n} );\r\n\r\n// File:src/objects/LineSegments.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.LineSegments = function ( geometry, material ) {\r\n\r\n\tTHREE.Line.call( this, geometry, material );\r\n\r\n\tthis.type = 'LineSegments';\r\n\r\n};\r\n\r\nTHREE.LineSegments.prototype = Object.assign( Object.create( THREE.Line.prototype ), {\r\n\r\n\tconstructor: THREE.LineSegments\r\n\r\n} );\r\n\r\n// File:src/objects/Mesh.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author jonobr1 / http://jonobr1.com/\r\n */\r\n\r\nTHREE.Mesh = function ( geometry, material ) {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.type = 'Mesh';\r\n\r\n\tthis.geometry = geometry !== undefined ? geometry : new THREE.BufferGeometry();\r\n\tthis.material = material !== undefined ? material : new THREE.MeshBasicMaterial( { color: Math.random() * 0xffffff } );\r\n\r\n\tthis.drawMode = THREE.TrianglesDrawMode;\r\n\r\n\tthis.updateMorphTargets();\r\n\r\n};\r\n\r\nTHREE.Mesh.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {\r\n\r\n\tconstructor: THREE.Mesh,\r\n\r\n\tsetDrawMode: function ( value ) {\r\n\r\n\t\tthis.drawMode = value;\r\n\r\n\t},\r\n\r\n\tupdateMorphTargets: function () {\r\n\r\n\t\tif ( this.geometry.morphTargets !== undefined && this.geometry.morphTargets.length > 0 ) {\r\n\r\n\t\t\tthis.morphTargetBase = - 1;\r\n\t\t\tthis.morphTargetInfluences = [];\r\n\t\t\tthis.morphTargetDictionary = {};\r\n\r\n\t\t\tfor ( var m = 0, ml = this.geometry.morphTargets.length; m < ml; m ++ ) {\r\n\r\n\t\t\t\tthis.morphTargetInfluences.push( 0 );\r\n\t\t\t\tthis.morphTargetDictionary[ this.geometry.morphTargets[ m ].name ] = m;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tgetMorphTargetIndexByName: function ( name ) {\r\n\r\n\t\tif ( this.morphTargetDictionary[ name ] !== undefined ) {\r\n\r\n\t\t\treturn this.morphTargetDictionary[ name ];\r\n\r\n\t\t}\r\n\r\n\t\tconsole.warn( 'THREE.Mesh.getMorphTargetIndexByName: morph target ' + name + ' does not exist. Returning 0.' );\r\n\r\n\t\treturn 0;\r\n\r\n\t},\r\n\r\n\traycast: ( function () {\r\n\r\n\t\tvar inverseMatrix = new THREE.Matrix4();\r\n\t\tvar ray = new THREE.Ray();\r\n\t\tvar sphere = new THREE.Sphere();\r\n\r\n\t\tvar vA = new THREE.Vector3();\r\n\t\tvar vB = new THREE.Vector3();\r\n\t\tvar vC = new THREE.Vector3();\r\n\r\n\t\tvar tempA = new THREE.Vector3();\r\n\t\tvar tempB = new THREE.Vector3();\r\n\t\tvar tempC = new THREE.Vector3();\r\n\r\n\t\tvar uvA = new THREE.Vector2();\r\n\t\tvar uvB = new THREE.Vector2();\r\n\t\tvar uvC = new THREE.Vector2();\r\n\r\n\t\tvar barycoord = new THREE.Vector3();\r\n\r\n\t\tvar intersectionPoint = new THREE.Vector3();\r\n\t\tvar intersectionPointWorld = new THREE.Vector3();\r\n\r\n\t\tfunction uvIntersection( point, p1, p2, p3, uv1, uv2, uv3 ) {\r\n\r\n\t\t\tTHREE.Triangle.barycoordFromPoint( point, p1, p2, p3, barycoord );\r\n\r\n\t\t\tuv1.multiplyScalar( barycoord.x );\r\n\t\t\tuv2.multiplyScalar( barycoord.y );\r\n\t\t\tuv3.multiplyScalar( barycoord.z );\r\n\r\n\t\t\tuv1.add( uv2 ).add( uv3 );\r\n\r\n\t\t\treturn uv1.clone();\r\n\r\n\t\t}\r\n\r\n\t\tfunction checkIntersection( object, raycaster, ray, pA, pB, pC, point ) {\r\n\r\n\t\t\tvar intersect;\r\n\t\t\tvar material = object.material;\r\n\r\n\t\t\tif ( material.side === THREE.BackSide ) {\r\n\r\n\t\t\t\tintersect = ray.intersectTriangle( pC, pB, pA, true, point );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tintersect = ray.intersectTriangle( pA, pB, pC, material.side !== THREE.DoubleSide, point );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( intersect === null ) return null;\r\n\r\n\t\t\tintersectionPointWorld.copy( point );\r\n\t\t\tintersectionPointWorld.applyMatrix4( object.matrixWorld );\r\n\r\n\t\t\tvar distance = raycaster.ray.origin.distanceTo( intersectionPointWorld );\r\n\r\n\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) return null;\r\n\r\n\t\t\treturn {\r\n\t\t\t\tdistance: distance,\r\n\t\t\t\tpoint: intersectionPointWorld.clone(),\r\n\t\t\t\tobject: object\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\tfunction checkBufferGeometryIntersection( object, raycaster, ray, positions, uvs, a, b, c ) {\r\n\r\n\t\t\tvA.fromArray( positions, a * 3 );\r\n\t\t\tvB.fromArray( positions, b * 3 );\r\n\t\t\tvC.fromArray( positions, c * 3 );\r\n\r\n\t\t\tvar intersection = checkIntersection( object, raycaster, ray, vA, vB, vC, intersectionPoint );\r\n\r\n\t\t\tif ( intersection ) {\r\n\r\n\t\t\t\tif ( uvs ) {\r\n\r\n\t\t\t\t\tuvA.fromArray( uvs, a * 2 );\r\n\t\t\t\t\tuvB.fromArray( uvs, b * 2 );\r\n\t\t\t\t\tuvC.fromArray( uvs, c * 2 );\r\n\r\n\t\t\t\t\tintersection.uv = uvIntersection( intersectionPoint,  vA, vB, vC,  uvA, uvB, uvC );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tintersection.face = new THREE.Face3( a, b, c, THREE.Triangle.normal( vA, vB, vC ) );\r\n\t\t\t\tintersection.faceIndex = a;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn intersection;\r\n\r\n\t\t}\r\n\r\n\t\treturn function raycast( raycaster, intersects ) {\r\n\r\n\t\t\tvar geometry = this.geometry;\r\n\t\t\tvar material = this.material;\r\n\t\t\tvar matrixWorld = this.matrixWorld;\r\n\r\n\t\t\tif ( material === undefined ) return;\r\n\r\n\t\t\t// Checking boundingSphere distance to ray\r\n\r\n\t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\r\n\r\n\t\t\tsphere.copy( geometry.boundingSphere );\r\n\t\t\tsphere.applyMatrix4( matrixWorld );\r\n\r\n\t\t\tif ( raycaster.ray.intersectsSphere( sphere ) === false ) return;\r\n\r\n\t\t\t//\r\n\r\n\t\t\tinverseMatrix.getInverse( matrixWorld );\r\n\t\t\tray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );\r\n\r\n\t\t\t// Check boundingBox before continuing\r\n\r\n\t\t\tif ( geometry.boundingBox !== null ) {\r\n\r\n\t\t\t\tif ( ray.intersectsBox( geometry.boundingBox ) === false ) return;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar uvs, intersection;\r\n\r\n\t\t\tif ( geometry instanceof THREE.BufferGeometry ) {\r\n\r\n\t\t\t\tvar a, b, c;\r\n\t\t\t\tvar index = geometry.index;\r\n\t\t\t\tvar attributes = geometry.attributes;\r\n\t\t\t\tvar positions = attributes.position.array;\r\n\r\n\t\t\t\tif ( attributes.uv !== undefined ) {\r\n\r\n\t\t\t\t\tuvs = attributes.uv.array;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( index !== null ) {\r\n\r\n\t\t\t\t\tvar indices = index.array;\r\n\r\n\t\t\t\t\tfor ( var i = 0, l = indices.length; i < l; i += 3 ) {\r\n\r\n\t\t\t\t\t\ta = indices[ i ];\r\n\t\t\t\t\t\tb = indices[ i + 1 ];\r\n\t\t\t\t\t\tc = indices[ i + 2 ];\r\n\r\n\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, raycaster, ray, positions, uvs, a, b, c );\r\n\r\n\t\t\t\t\t\tif ( intersection ) {\r\n\r\n\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( i / 3 ); // triangle number in indices buffer semantics\r\n\t\t\t\t\t\t\tintersects.push( intersection );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\r\n\t\t\t\t\tfor ( var i = 0, l = positions.length; i < l; i += 9 ) {\r\n\r\n\t\t\t\t\t\ta = i / 3;\r\n\t\t\t\t\t\tb = a + 1;\r\n\t\t\t\t\t\tc = a + 2;\r\n\r\n\t\t\t\t\t\tintersection = checkBufferGeometryIntersection( this, raycaster, ray, positions, uvs, a, b, c );\r\n\r\n\t\t\t\t\t\tif ( intersection ) {\r\n\r\n\t\t\t\t\t\t\tintersection.index = a; // triangle number in positions buffer semantics\r\n\t\t\t\t\t\t\tintersects.push( intersection );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( geometry instanceof THREE.Geometry ) {\r\n\r\n\t\t\t\tvar fvA, fvB, fvC;\r\n\t\t\t\tvar isFaceMaterial = material instanceof THREE.MultiMaterial;\r\n\t\t\t\tvar materials = isFaceMaterial === true ? material.materials : null;\r\n\r\n\t\t\t\tvar vertices = geometry.vertices;\r\n\t\t\t\tvar faces = geometry.faces;\r\n\t\t\t\tvar faceVertexUvs = geometry.faceVertexUvs[ 0 ];\r\n\t\t\t\tif ( faceVertexUvs.length > 0 ) uvs = faceVertexUvs;\r\n\r\n\t\t\t\tfor ( var f = 0, fl = faces.length; f < fl; f ++ ) {\r\n\r\n\t\t\t\t\tvar face = faces[ f ];\r\n\t\t\t\t\tvar faceMaterial = isFaceMaterial === true ? materials[ face.materialIndex ] : material;\r\n\r\n\t\t\t\t\tif ( faceMaterial === undefined ) continue;\r\n\r\n\t\t\t\t\tfvA = vertices[ face.a ];\r\n\t\t\t\t\tfvB = vertices[ face.b ];\r\n\t\t\t\t\tfvC = vertices[ face.c ];\r\n\r\n\t\t\t\t\tif ( faceMaterial.morphTargets === true ) {\r\n\r\n\t\t\t\t\t\tvar morphTargets = geometry.morphTargets;\r\n\t\t\t\t\t\tvar morphInfluences = this.morphTargetInfluences;\r\n\r\n\t\t\t\t\t\tvA.set( 0, 0, 0 );\r\n\t\t\t\t\t\tvB.set( 0, 0, 0 );\r\n\t\t\t\t\t\tvC.set( 0, 0, 0 );\r\n\r\n\t\t\t\t\t\tfor ( var t = 0, tl = morphTargets.length; t < tl; t ++ ) {\r\n\r\n\t\t\t\t\t\t\tvar influence = morphInfluences[ t ];\r\n\r\n\t\t\t\t\t\t\tif ( influence === 0 ) continue;\r\n\r\n\t\t\t\t\t\t\tvar targets = morphTargets[ t ].vertices;\r\n\r\n\t\t\t\t\t\t\tvA.addScaledVector( tempA.subVectors( targets[ face.a ], fvA ), influence );\r\n\t\t\t\t\t\t\tvB.addScaledVector( tempB.subVectors( targets[ face.b ], fvB ), influence );\r\n\t\t\t\t\t\t\tvC.addScaledVector( tempC.subVectors( targets[ face.c ], fvC ), influence );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tvA.add( fvA );\r\n\t\t\t\t\t\tvB.add( fvB );\r\n\t\t\t\t\t\tvC.add( fvC );\r\n\r\n\t\t\t\t\t\tfvA = vA;\r\n\t\t\t\t\t\tfvB = vB;\r\n\t\t\t\t\t\tfvC = vC;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tintersection = checkIntersection( this, raycaster, ray, fvA, fvB, fvC, intersectionPoint );\r\n\r\n\t\t\t\t\tif ( intersection ) {\r\n\r\n\t\t\t\t\t\tif ( uvs ) {\r\n\r\n\t\t\t\t\t\t\tvar uvs_f = uvs[ f ];\r\n\t\t\t\t\t\t\tuvA.copy( uvs_f[ 0 ] );\r\n\t\t\t\t\t\t\tuvB.copy( uvs_f[ 1 ] );\r\n\t\t\t\t\t\t\tuvC.copy( uvs_f[ 2 ] );\r\n\r\n\t\t\t\t\t\t\tintersection.uv = uvIntersection( intersectionPoint, fvA, fvB, fvC, uvA, uvB, uvC );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tintersection.face = face;\r\n\t\t\t\t\t\tintersection.faceIndex = f;\r\n\t\t\t\t\t\tintersects.push( intersection );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t}() ),\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor( this.geometry, this.material ).copy( this );\r\n\r\n\t}\r\n\r\n} );\r\n\r\n// File:src/objects/Bone.js\r\n\r\n/**\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author ikerr / http://verold.com\r\n */\r\n\r\nTHREE.Bone = function ( skin ) {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.type = 'Bone';\r\n\r\n\tthis.skin = skin;\r\n\r\n};\r\n\r\nTHREE.Bone.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {\r\n\r\n\tconstructor: THREE.Bone,\r\n\r\n\tcopy: function ( source ) {\r\n\r\n\t\tTHREE.Object3D.prototype.copy.call( this, source );\r\n\r\n\t\tthis.skin = source.skin;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n} );\r\n\r\n// File:src/objects/Skeleton.js\r\n\r\n/**\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author michael guerrero / http://realitymeltdown.com\r\n * @author ikerr / http://verold.com\r\n */\r\n\r\nTHREE.Skeleton = function ( bones, boneInverses, useVertexTexture ) {\r\n\r\n\tthis.useVertexTexture = useVertexTexture !== undefined ? useVertexTexture : true;\r\n\r\n\tthis.identityMatrix = new THREE.Matrix4();\r\n\r\n\t// copy the bone array\r\n\r\n\tbones = bones || [];\r\n\r\n\tthis.bones = bones.slice( 0 );\r\n\r\n\t// create a bone texture or an array of floats\r\n\r\n\tif ( this.useVertexTexture ) {\r\n\r\n\t\t// layout (1 matrix = 4 pixels)\r\n\t\t//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\r\n\t\t//  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)\r\n\t\t//       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)\r\n\t\t//       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)\r\n\t\t//       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)\r\n\r\n\r\n\t\tvar size = Math.sqrt( this.bones.length * 4 ); // 4 pixels needed for 1 matrix\r\n\t\tsize = THREE.Math.nextPowerOfTwo( Math.ceil( size ) );\r\n\t\tsize = Math.max( size, 4 );\r\n\r\n\t\tthis.boneTextureWidth = size;\r\n\t\tthis.boneTextureHeight = size;\r\n\r\n\t\tthis.boneMatrices = new Float32Array( this.boneTextureWidth * this.boneTextureHeight * 4 ); // 4 floats per RGBA pixel\r\n\t\tthis.boneTexture = new THREE.DataTexture( this.boneMatrices, this.boneTextureWidth, this.boneTextureHeight, THREE.RGBAFormat, THREE.FloatType );\r\n\r\n\t} else {\r\n\r\n\t\tthis.boneMatrices = new Float32Array( 16 * this.bones.length );\r\n\r\n\t}\r\n\r\n\t// use the supplied bone inverses or calculate the inverses\r\n\r\n\tif ( boneInverses === undefined ) {\r\n\r\n\t\tthis.calculateInverses();\r\n\r\n\t} else {\r\n\r\n\t\tif ( this.bones.length === boneInverses.length ) {\r\n\r\n\t\t\tthis.boneInverses = boneInverses.slice( 0 );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconsole.warn( 'THREE.Skeleton bonInverses is the wrong length.' );\r\n\r\n\t\t\tthis.boneInverses = [];\r\n\r\n\t\t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\r\n\r\n\t\t\t\tthis.boneInverses.push( new THREE.Matrix4() );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n\r\nObject.assign( THREE.Skeleton.prototype, {\r\n\r\n\tcalculateInverses: function () {\r\n\r\n\t\tthis.boneInverses = [];\r\n\r\n\t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\r\n\r\n\t\t\tvar inverse = new THREE.Matrix4();\r\n\r\n\t\t\tif ( this.bones[ b ] ) {\r\n\r\n\t\t\t\tinverse.getInverse( this.bones[ b ].matrixWorld );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.boneInverses.push( inverse );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tpose: function () {\r\n\r\n\t\tvar bone;\r\n\r\n\t\t// recover the bind-time world matrices\r\n\r\n\t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\r\n\r\n\t\t\tbone = this.bones[ b ];\r\n\r\n\t\t\tif ( bone ) {\r\n\r\n\t\t\t\tbone.matrixWorld.getInverse( this.boneInverses[ b ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// compute the local matrices, positions, rotations and scales\r\n\r\n\t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\r\n\r\n\t\t\tbone = this.bones[ b ];\r\n\r\n\t\t\tif ( bone ) {\r\n\r\n\t\t\t\tif ( bone.parent ) {\r\n\r\n\t\t\t\t\tbone.matrix.getInverse( bone.parent.matrixWorld );\r\n\t\t\t\t\tbone.matrix.multiply( bone.matrixWorld );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tbone.matrix.copy( bone.matrixWorld );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbone.matrix.decompose( bone.position, bone.quaternion, bone.scale );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tupdate: ( function () {\r\n\r\n\t\tvar offsetMatrix = new THREE.Matrix4();\r\n\r\n\t\treturn function update() {\r\n\r\n\t\t\t// flatten bone matrices to array\r\n\r\n\t\t\tfor ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {\r\n\r\n\t\t\t\t// compute the offset between the current and the original transform\r\n\r\n\t\t\t\tvar matrix = this.bones[ b ] ? this.bones[ b ].matrixWorld : this.identityMatrix;\r\n\r\n\t\t\t\toffsetMatrix.multiplyMatrices( matrix, this.boneInverses[ b ] );\r\n\t\t\t\toffsetMatrix.toArray( this.boneMatrices, b * 16 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.useVertexTexture ) {\r\n\r\n\t\t\t\tthis.boneTexture.needsUpdate = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t} )(),\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new THREE.Skeleton( this.bones, this.boneInverses, this.useVertexTexture );\r\n\r\n\t}\r\n\r\n} );\r\n\r\n// File:src/objects/SkinnedMesh.js\r\n\r\n/**\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author ikerr / http://verold.com\r\n */\r\n\r\nTHREE.SkinnedMesh = function ( geometry, material, useVertexTexture ) {\r\n\r\n\tTHREE.Mesh.call( this, geometry, material );\r\n\r\n\tthis.type = 'SkinnedMesh';\r\n\r\n\tthis.bindMode = \"attached\";\r\n\tthis.bindMatrix = new THREE.Matrix4();\r\n\tthis.bindMatrixInverse = new THREE.Matrix4();\r\n\r\n\t// init bones\r\n\r\n\t// TODO: remove bone creation as there is no reason (other than\r\n\t// convenience) for THREE.SkinnedMesh to do this.\r\n\r\n\tvar bones = [];\r\n\r\n\tif ( this.geometry && this.geometry.bones !== undefined ) {\r\n\r\n\t\tvar bone, gbone;\r\n\r\n\t\tfor ( var b = 0, bl = this.geometry.bones.length; b < bl; ++ b ) {\r\n\r\n\t\t\tgbone = this.geometry.bones[ b ];\r\n\r\n\t\t\tbone = new THREE.Bone( this );\r\n\t\t\tbones.push( bone );\r\n\r\n\t\t\tbone.name = gbone.name;\r\n\t\t\tbone.position.fromArray( gbone.pos );\r\n\t\t\tbone.quaternion.fromArray( gbone.rotq );\r\n\t\t\tif ( gbone.scl !== undefined ) bone.scale.fromArray( gbone.scl );\r\n\r\n\t\t}\r\n\r\n\t\tfor ( var b = 0, bl = this.geometry.bones.length; b < bl; ++ b ) {\r\n\r\n\t\t\tgbone = this.geometry.bones[ b ];\r\n\r\n\t\t\tif ( gbone.parent !== - 1 && gbone.parent !== null &&\r\n\t\t\t\t\tbones[ gbone.parent ] !== undefined ) {\r\n\r\n\t\t\t\tbones[ gbone.parent ].add( bones[ b ] );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.add( bones[ b ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tthis.normalizeSkinWeights();\r\n\r\n\tthis.updateMatrixWorld( true );\r\n\tthis.bind( new THREE.Skeleton( bones, undefined, useVertexTexture ), this.matrixWorld );\r\n\r\n};\r\n\r\n\r\nTHREE.SkinnedMesh.prototype = Object.assign( Object.create( THREE.Mesh.prototype ), {\r\n\r\n\tconstructor: THREE.SkinnedMesh,\r\n\r\n\tbind: function( skeleton, bindMatrix ) {\r\n\r\n\t\tthis.skeleton = skeleton;\r\n\r\n\t\tif ( bindMatrix === undefined ) {\r\n\r\n\t\t\tthis.updateMatrixWorld( true );\r\n\r\n\t\t\tthis.skeleton.calculateInverses();\r\n\r\n\t\t\tbindMatrix = this.matrixWorld;\r\n\r\n\t\t}\r\n\r\n\t\tthis.bindMatrix.copy( bindMatrix );\r\n\t\tthis.bindMatrixInverse.getInverse( bindMatrix );\r\n\r\n\t},\r\n\r\n\tpose: function () {\r\n\r\n\t\tthis.skeleton.pose();\r\n\r\n\t},\r\n\r\n\tnormalizeSkinWeights: function () {\r\n\r\n\t\tif ( this.geometry instanceof THREE.Geometry ) {\r\n\r\n\t\t\tfor ( var i = 0; i < this.geometry.skinWeights.length; i ++ ) {\r\n\r\n\t\t\t\tvar sw = this.geometry.skinWeights[ i ];\r\n\r\n\t\t\t\tvar scale = 1.0 / sw.lengthManhattan();\r\n\r\n\t\t\t\tif ( scale !== Infinity ) {\r\n\r\n\t\t\t\t\tsw.multiplyScalar( scale );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tsw.set( 1, 0, 0, 0 ); // do something reasonable\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( this.geometry instanceof THREE.BufferGeometry ) {\r\n\r\n\t\t\tvar vec = new THREE.Vector4();\r\n\r\n\t\t\tvar skinWeight = this.geometry.attributes.skinWeight;\r\n\r\n\t\t\tfor ( var i = 0; i < skinWeight.count; i ++ ) {\r\n\r\n\t\t\t\tvec.x = skinWeight.getX( i );\r\n\t\t\t\tvec.y = skinWeight.getY( i );\r\n\t\t\t\tvec.z = skinWeight.getZ( i );\r\n\t\t\t\tvec.w = skinWeight.getW( i );\r\n\r\n\t\t\t\tvar scale = 1.0 / vec.lengthManhattan();\r\n\r\n\t\t\t\tif ( scale !== Infinity ) {\r\n\r\n\t\t\t\t\tvec.multiplyScalar( scale );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tvec.set( 1, 0, 0, 0 ); // do something reasonable\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tskinWeight.setXYZW( i, vec.x, vec.y, vec.z, vec.w );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tupdateMatrixWorld: function( force ) {\r\n\r\n\t\tTHREE.Mesh.prototype.updateMatrixWorld.call( this, true );\r\n\r\n\t\tif ( this.bindMode === \"attached\" ) {\r\n\r\n\t\t\tthis.bindMatrixInverse.getInverse( this.matrixWorld );\r\n\r\n\t\t} else if ( this.bindMode === \"detached\" ) {\r\n\r\n\t\t\tthis.bindMatrixInverse.getInverse( this.bindMatrix );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconsole.warn( 'THREE.SkinnedMesh unrecognized bindMode: ' + this.bindMode );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tclone: function() {\r\n\r\n\t\treturn new this.constructor( this.geometry, this.material, this.useVertexTexture ).copy( this );\r\n\r\n\t}\r\n\r\n} );\r\n\r\n// File:src/objects/LOD.js\r\n\r\n/**\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.LOD = function () {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.type = 'LOD';\r\n\r\n\tObject.defineProperties( this, {\r\n\t\tlevels: {\r\n\t\t\tenumerable: true,\r\n\t\t\tvalue: []\r\n\t\t}\r\n\t} );\r\n\r\n};\r\n\r\n\r\nTHREE.LOD.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {\r\n\r\n\tconstructor: THREE.LOD,\r\n\r\n\tcopy: function ( source ) {\r\n\r\n\t\tTHREE.Object3D.prototype.copy.call( this, source, false );\r\n\r\n\t\tvar levels = source.levels;\r\n\r\n\t\tfor ( var i = 0, l = levels.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar level = levels[ i ];\r\n\r\n\t\t\tthis.addLevel( level.object.clone(), level.distance );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\taddLevel: function ( object, distance ) {\r\n\r\n\t\tif ( distance === undefined ) distance = 0;\r\n\r\n\t\tdistance = Math.abs( distance );\r\n\r\n\t\tvar levels = this.levels;\r\n\r\n\t\tfor ( var l = 0; l < levels.length; l ++ ) {\r\n\r\n\t\t\tif ( distance < levels[ l ].distance ) {\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tlevels.splice( l, 0, { distance: distance, object: object } );\r\n\r\n\t\tthis.add( object );\r\n\r\n\t},\r\n\r\n\tgetObjectForDistance: function ( distance ) {\r\n\r\n\t\tvar levels = this.levels;\r\n\r\n\t\tfor ( var i = 1, l = levels.length; i < l; i ++ ) {\r\n\r\n\t\t\tif ( distance < levels[ i ].distance ) {\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn levels[ i - 1 ].object;\r\n\r\n\t},\r\n\r\n\traycast: ( function () {\r\n\r\n\t\tvar matrixPosition = new THREE.Vector3();\r\n\r\n\t\treturn function raycast( raycaster, intersects ) {\r\n\r\n\t\t\tmatrixPosition.setFromMatrixPosition( this.matrixWorld );\r\n\r\n\t\t\tvar distance = raycaster.ray.origin.distanceTo( matrixPosition );\r\n\r\n\t\t\tthis.getObjectForDistance( distance ).raycast( raycaster, intersects );\r\n\r\n\t\t};\r\n\r\n\t}() ),\r\n\r\n\tupdate: function () {\r\n\r\n\t\tvar v1 = new THREE.Vector3();\r\n\t\tvar v2 = new THREE.Vector3();\r\n\r\n\t\treturn function update( camera ) {\r\n\r\n\t\t\tvar levels = this.levels;\r\n\r\n\t\t\tif ( levels.length > 1 ) {\r\n\r\n\t\t\t\tv1.setFromMatrixPosition( camera.matrixWorld );\r\n\t\t\t\tv2.setFromMatrixPosition( this.matrixWorld );\r\n\r\n\t\t\t\tvar distance = v1.distanceTo( v2 );\r\n\r\n\t\t\t\tlevels[ 0 ].object.visible = true;\r\n\r\n\t\t\t\tfor ( var i = 1, l = levels.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tif ( distance >= levels[ i ].distance ) {\r\n\r\n\t\t\t\t\t\tlevels[ i - 1 ].object.visible = false;\r\n\t\t\t\t\t\tlevels[ i ].object.visible = true;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor ( ; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tlevels[ i ].object.visible = false;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t}(),\r\n\r\n\ttoJSON: function ( meta ) {\r\n\r\n\t\tvar data = THREE.Object3D.prototype.toJSON.call( this, meta );\r\n\r\n\t\tdata.object.levels = [];\r\n\r\n\t\tvar levels = this.levels;\r\n\r\n\t\tfor ( var i = 0, l = levels.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar level = levels[ i ];\r\n\r\n\t\t\tdata.object.levels.push( {\r\n\t\t\t\tobject: level.object.uuid,\r\n\t\t\t\tdistance: level.distance\r\n\t\t\t} );\r\n\r\n\t\t}\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n} );\r\n\r\n// File:src/objects/Sprite.js\r\n\r\n/**\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.Sprite = function ( material ) {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.type = 'Sprite';\r\n\r\n\tthis.material = ( material !== undefined ) ? material : new THREE.SpriteMaterial();\r\n\r\n};\r\n\r\nTHREE.Sprite.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {\r\n\r\n\tconstructor: THREE.Sprite,\r\n\r\n\traycast: ( function () {\r\n\r\n\t\tvar matrixPosition = new THREE.Vector3();\r\n\r\n\t\treturn function raycast( raycaster, intersects ) {\r\n\r\n\t\t\tmatrixPosition.setFromMatrixPosition( this.matrixWorld );\r\n\r\n\t\t\tvar distanceSq = raycaster.ray.distanceSqToPoint( matrixPosition );\r\n\t\t\tvar guessSizeSq = this.scale.x * this.scale.y / 4;\r\n\r\n\t\t\tif ( distanceSq > guessSizeSq ) {\r\n\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tintersects.push( {\r\n\r\n\t\t\t\tdistance: Math.sqrt( distanceSq ),\r\n\t\t\t\tpoint: this.position,\r\n\t\t\t\tface: null,\r\n\t\t\t\tobject: this\r\n\r\n\t\t\t} );\r\n\r\n\t\t};\r\n\r\n\t}() ),\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor( this.material ).copy( this );\r\n\r\n\t}\r\n\r\n} );\r\n\r\n// File:src/objects/LensFlare.js\r\n\r\n/**\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.LensFlare = function ( texture, size, distance, blending, color ) {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.lensFlares = [];\r\n\r\n\tthis.positionScreen = new THREE.Vector3();\r\n\tthis.customUpdateCallback = undefined;\r\n\r\n\tif ( texture !== undefined ) {\r\n\r\n\t\tthis.add( texture, size, distance, blending, color );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.LensFlare.prototype = Object.assign( Object.create( THREE.Object3D.prototype ), {\r\n\r\n\tconstructor: THREE.LensFlare,\r\n\r\n\tcopy: function ( source ) {\r\n\r\n\t\tTHREE.Object3D.prototype.copy.call( this, source );\r\n\r\n\t\tthis.positionScreen.copy( source.positionScreen );\r\n\t\tthis.customUpdateCallback = source.customUpdateCallback;\r\n\r\n\t\tfor ( var i = 0, l = source.lensFlares.length; i < l; i ++ ) {\r\n\r\n\t\t\tthis.lensFlares.push( source.lensFlares[ i ] );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tadd: function ( texture, size, distance, blending, color, opacity ) {\r\n\r\n\t\tif ( size === undefined ) size = - 1;\r\n\t\tif ( distance === undefined ) distance = 0;\r\n\t\tif ( opacity === undefined ) opacity = 1;\r\n\t\tif ( color === undefined ) color = new THREE.Color( 0xffffff );\r\n\t\tif ( blending === undefined ) blending = THREE.NormalBlending;\r\n\r\n\t\tdistance = Math.min( distance, Math.max( 0, distance ) );\r\n\r\n\t\tthis.lensFlares.push( {\r\n\t\t\ttexture: texture,\t// THREE.Texture\r\n\t\t\tsize: size, \t\t// size in pixels (-1 = use texture.width)\r\n\t\t\tdistance: distance, \t// distance (0-1) from light source (0=at light source)\r\n\t\t\tx: 0, y: 0, z: 0,\t// screen position (-1 => 1) z = 0 is in front z = 1 is back\r\n\t\t\tscale: 1, \t\t// scale\r\n\t\t\trotation: 0, \t\t// rotation\r\n\t\t\topacity: opacity,\t// opacity\r\n\t\t\tcolor: color,\t\t// color\r\n\t\t\tblending: blending\t// blending\r\n\t\t} );\r\n\r\n\t},\r\n\r\n\t/*\r\n\t * Update lens flares update positions on all flares based on the screen position\r\n\t * Set myLensFlare.customUpdateCallback to alter the flares in your project specific way.\r\n\t */\r\n\r\n\tupdateLensFlares: function () {\r\n\r\n\t\tvar f, fl = this.lensFlares.length;\r\n\t\tvar flare;\r\n\t\tvar vecX = - this.positionScreen.x * 2;\r\n\t\tvar vecY = - this.positionScreen.y * 2;\r\n\r\n\t\tfor ( f = 0; f < fl; f ++ ) {\r\n\r\n\t\t\tflare = this.lensFlares[ f ];\r\n\r\n\t\t\tflare.x = this.positionScreen.x + vecX * flare.distance;\r\n\t\t\tflare.y = this.positionScreen.y + vecY * flare.distance;\r\n\r\n\t\t\tflare.wantedRotation = flare.x * Math.PI * 0.25;\r\n\t\t\tflare.rotation += ( flare.wantedRotation - flare.rotation ) * 0.25;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n} );\r\n\r\n// File:src/scenes/Scene.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.Scene = function () {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.type = 'Scene';\r\n\r\n\tthis.fog = null;\r\n\tthis.overrideMaterial = null;\r\n\r\n\tthis.autoUpdate = true; // checked by the renderer\r\n\r\n};\r\n\r\nTHREE.Scene.prototype = Object.create( THREE.Object3D.prototype );\r\nTHREE.Scene.prototype.constructor = THREE.Scene;\r\n\r\nTHREE.Scene.prototype.copy = function ( source, recursive ) {\r\n\r\n\tTHREE.Object3D.prototype.copy.call( this, source, recursive );\r\n\r\n\tif ( source.fog !== null ) this.fog = source.fog.clone();\r\n\tif ( source.overrideMaterial !== null ) this.overrideMaterial = source.overrideMaterial.clone();\r\n\r\n\tthis.autoUpdate = source.autoUpdate;\r\n\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\n// File:src/scenes/Fog.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.Fog = function ( color, near, far ) {\r\n\r\n\tthis.name = '';\r\n\r\n\tthis.color = new THREE.Color( color );\r\n\r\n\tthis.near = ( near !== undefined ) ? near : 1;\r\n\tthis.far = ( far !== undefined ) ? far : 1000;\r\n\r\n};\r\n\r\nTHREE.Fog.prototype.clone = function () {\r\n\r\n\treturn new THREE.Fog( this.color.getHex(), this.near, this.far );\r\n\r\n};\r\n\r\n// File:src/scenes/FogExp2.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.FogExp2 = function ( color, density ) {\r\n\r\n\tthis.name = '';\r\n\r\n\tthis.color = new THREE.Color( color );\r\n\tthis.density = ( density !== undefined ) ? density : 0.00025;\r\n\r\n};\r\n\r\nTHREE.FogExp2.prototype.clone = function () {\r\n\r\n\treturn new THREE.FogExp2( this.color.getHex(), this.density );\r\n\r\n};\r\n\r\n// File:src/renderers/shaders/ShaderChunk.js\r\n\r\nTHREE.ShaderChunk = {};\r\n\r\n// File:src/renderers/shaders/ShaderChunk/alphamap_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'alphamap_fragment' ] = \"#ifdef USE_ALPHAMAP\\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/alphamap_pars_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'alphamap_pars_fragment' ] = \"#ifdef USE_ALPHAMAP\\n\tuniform sampler2D alphaMap;\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/alphatest_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'alphatest_fragment' ] = \"#ifdef ALPHATEST\\n\tif ( diffuseColor.a < ALPHATEST ) discard;\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/aomap_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'aomap_fragment' ] = \"#ifdef USE_AOMAP\\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL )\\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\\n\t#endif\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/aomap_pars_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'aomap_pars_fragment' ] = \"#ifdef USE_AOMAP\\n\tuniform sampler2D aoMap;\\n\tuniform float aoMapIntensity;\\n#endif\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/begin_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'begin_vertex' ] = \"\\nvec3 transformed = vec3( position );\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/beginnormal_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'beginnormal_vertex' ] = \"\\nvec3 objectNormal = vec3( normal );\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/bsdfs.glsl\r\n\r\nTHREE.ShaderChunk[ 'bsdfs' ] = \"bool testLightInRange( const in float lightDistance, const in float cutoffDistance ) {\\n\treturn any( bvec2( cutoffDistance == 0.0, lightDistance < cutoffDistance ) );\\n}\\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\\n\t\tif( decayExponent > 0.0 ) {\\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\\n\t\t\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\\n\t\t\tfloat maxDistanceCutoffFactor = pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\\n\t\t\treturn distanceFalloff * maxDistanceCutoffFactor;\\n#else\\n\t\t\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\\n#endif\\n\t\t}\\n\t\treturn 1.0;\\n}\\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\\n\treturn RECIPROCAL_PI * diffuseColor;\\n}\\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\\n\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\\n\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\\n}\\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\tfloat a2 = pow2( alpha );\\n\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\treturn 1.0 / ( gl * gv );\\n}\\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\tfloat a2 = pow2( alpha );\\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\treturn 0.5 / max( gv + gl, EPSILON );\\n}\\nfloat D_GGX( const in float alpha, const in float dotNH ) {\\n\tfloat a2 = pow2( alpha );\\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\\n}\\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\\n\tfloat alpha = pow2( roughness );\\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\tfloat dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\tvec3 F = F_Schlick( specularColor, dotLH );\\n\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\\n\tfloat D = D_GGX( alpha, dotNH );\\n\treturn F * ( G * D );\\n}\\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\\n\tvec4 r = roughness * c0 + c1;\\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\\n\tvec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\\n\treturn specularColor * AB.x + AB.y;\\n}\\nfloat G_BlinnPhong_Implicit( ) {\\n\treturn 0.25;\\n}\\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\\n}\\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\\n\tvec3 F = F_Schlick( specularColor, dotLH );\\n\tfloat G = G_BlinnPhong_Implicit( );\\n\tfloat D = D_BlinnPhong( shininess, dotNH );\\n\treturn F * ( G * D );\\n}\\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\\n\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\\n}\\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\\n\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\\n}\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/bumpmap_pars_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'bumpmap_pars_fragment' ] = \"#ifdef USE_BUMPMAP\\n\tuniform sampler2D bumpMap;\\n\tuniform float bumpScale;\\n\tvec2 dHdxy_fwd() {\\n\t\tvec2 dSTdx = dFdx( vUv );\\n\t\tvec2 dSTdy = dFdy( vUv );\\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\\n\t\treturn vec2( dBx, dBy );\\n\t}\\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\\n\t\tvec3 vSigmaX = dFdx( surf_pos );\\n\t\tvec3 vSigmaY = dFdy( surf_pos );\\n\t\tvec3 vN = surf_norm;\\n\t\tvec3 R1 = cross( vSigmaY, vN );\\n\t\tvec3 R2 = cross( vN, vSigmaX );\\n\t\tfloat fDet = dot( vSigmaX, R1 );\\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\\n\t}\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/clipping_planes_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'clipping_planes_fragment' ] = \"#if NUM_CLIPPING_PLANES > 0\\n\tfor ( int i = 0; i < NUM_CLIPPING_PLANES; ++ i ) {\\n\t\tvec4 plane = clippingPlanes[ i ];\\n\t\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\\n\t}\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/clipping_planes_pars_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'clipping_planes_pars_fragment' ] = \"#if NUM_CLIPPING_PLANES > 0\\n\t#if ! defined( PHYSICAL ) && ! defined( PHONG )\\n\t\tvarying vec3 vViewPosition;\\n\t#endif\\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/clipping_planes_pars_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'clipping_planes_pars_vertex' ] = \"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\\n\tvarying vec3 vViewPosition;\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/clipping_planes_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'clipping_planes_vertex' ] = \"#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\\n\tvViewPosition = - mvPosition.xyz;\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/color_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'color_fragment' ] = \"#ifdef USE_COLOR\\n\tdiffuseColor.rgb *= vColor;\\n#endif\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/color_pars_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'color_pars_fragment' ] = \"#ifdef USE_COLOR\\n\tvarying vec3 vColor;\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/color_pars_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'color_pars_vertex' ] = \"#ifdef USE_COLOR\\n\tvarying vec3 vColor;\\n#endif\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/color_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'color_vertex' ] = \"#ifdef USE_COLOR\\n\tvColor.xyz = color.xyz;\\n#endif\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/common.glsl\r\n\r\nTHREE.ShaderChunk[ 'common' ] = \"#define PI 3.14159265359\\n#define PI2 6.28318530718\\n#define RECIPROCAL_PI 0.31830988618\\n#define RECIPROCAL_PI2 0.15915494\\n#define LOG2 1.442695\\n#define EPSILON 1e-6\\n#define saturate(a) clamp( a, 0.0, 1.0 )\\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\\nfloat pow2( const in float x ) { return x*x; }\\nfloat pow3( const in float x ) { return x*x*x; }\\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\\nhighp float rand( const in vec2 uv ) {\\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\\n\treturn fract(sin(sn) * c);\\n}\\nstruct IncidentLight {\\n\tvec3 color;\\n\tvec3 direction;\\n\tbool visible;\\n};\\nstruct ReflectedLight {\\n\tvec3 directDiffuse;\\n\tvec3 directSpecular;\\n\tvec3 indirectDiffuse;\\n\tvec3 indirectSpecular;\\n};\\nstruct GeometricContext {\\n\tvec3 position;\\n\tvec3 normal;\\n\tvec3 viewDir;\\n};\\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\\n}\\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\\n}\\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\\n\treturn - distance * planeNormal + point;\\n}\\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\\n}\\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\\n}\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/cube_uv_reflection_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'cube_uv_reflection_fragment' ] = \"#ifdef ENVMAP_TYPE_CUBE_UV\\n#define cubeUV_textureSize (1024.0)\\nint getFaceFromDirection(vec3 direction) {\\n\tvec3 absDirection = abs(direction);\\n\tint face = -1;\\n\tif( absDirection.x > absDirection.z ) {\\n\t\tif(absDirection.x > absDirection.y )\\n\t\t\tface = direction.x > 0.0 ? 0 : 3;\\n\t\telse\\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\\n\t}\\n\telse {\\n\t\tif(absDirection.z > absDirection.y )\\n\t\t\tface = direction.z > 0.0 ? 2 : 5;\\n\t\telse\\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\\n\t}\\n\treturn face;\\n}\\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\\n\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\\n\tfloat dxRoughness = dFdx(roughness);\\n\tfloat dyRoughness = dFdy(roughness);\\n\tvec3 dx = dFdx( vec * scale * dxRoughness );\\n\tvec3 dy = dFdy( vec * scale * dyRoughness );\\n\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\\n\td = clamp(d, 1.0, cubeUV_rangeClamp);\\n\tfloat mipLevel = 0.5 * log2(d);\\n\treturn vec2(floor(mipLevel), fract(mipLevel));\\n}\\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\\n\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\\n\tfloat a = 16.0 * cubeUV_rcpTextureSize;\\n\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\\n\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\\n\tfloat powScale = exp2_packed.x * exp2_packed.y;\\n\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\\n\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\\n\tbool bRes = mipLevel == 0.0;\\n\tscale =  bRes && (scale < a) ? a : scale;\\n\tvec3 r;\\n\tvec2 offset;\\n\tint face = getFaceFromDirection(direction);\\n\tfloat rcpPowScale = 1.0 / powScale;\\n\tif( face == 0) {\\n\t\tr = vec3(direction.x, -direction.z, direction.y);\\n\t\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\\n\t}\\n\telse if( face == 1) {\\n\t\tr = vec3(direction.y, direction.x, direction.z);\\n\t\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\\n\t}\\n\telse if( face == 2) {\\n\t\tr = vec3(direction.z, direction.x, direction.y);\\n\t\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  a : offset.y;\\n\t}\\n\telse if( face == 3) {\\n\t\tr = vec3(direction.x, direction.z, direction.y);\\n\t\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\\n\t}\\n\telse if( face == 4) {\\n\t\tr = vec3(direction.y, direction.x, -direction.z);\\n\t\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\\n\t}\\n\telse {\\n\t\tr = vec3(direction.z, -direction.x, direction.y);\\n\t\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\\n\t\toffset.y = bRes && (offset.y < 2.0*a) ?  0.0 : offset.y;\\n\t}\\n\tr = normalize(r);\\n\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\\n\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\\n\tvec2 base = offset + vec2( texelOffset );\\n\treturn base + s * ( scale - 2.0 * texelOffset );\\n}\\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\\nvec4 textureCubeUV(vec3 reflectedDirection, float roughness ) {\\n\tfloat roughnessVal = roughness* cubeUV_maxLods3;\\n\tfloat r1 = floor(roughnessVal);\\n\tfloat r2 = r1 + 1.0;\\n\tfloat t = fract(roughnessVal);\\n\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\\n\tfloat s = mipInfo.y;\\n\tfloat level0 = mipInfo.x;\\n\tfloat level1 = level0 + 1.0;\\n\tlevel1 = level1 > 5.0 ? 5.0 : level1;\\n\tlevel0 += min( floor( s + 0.5 ), 5.0 );\\n\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\\n\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\\n\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\\n\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\\n\tvec4 result = mix(color10, color20, t);\\n\treturn vec4(result.rgb, 1.0);\\n}\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/defaultnormal_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'defaultnormal_vertex' ] = \"#ifdef FLIP_SIDED\\n\tobjectNormal = -objectNormal;\\n#endif\\nvec3 transformedNormal = normalMatrix * objectNormal;\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/displacementmap_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'displacementmap_vertex' ] = \"#ifdef USE_DISPLACEMENTMAP\\n\ttransformed += normal * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/displacementmap_pars_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'displacementmap_pars_vertex' ] = \"#ifdef USE_DISPLACEMENTMAP\\n\tuniform sampler2D displacementMap;\\n\tuniform float displacementScale;\\n\tuniform float displacementBias;\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/emissivemap_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'emissivemap_fragment' ] = \"#ifdef USE_EMISSIVEMAP\\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\\n\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/emissivemap_pars_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'emissivemap_pars_fragment' ] = \"#ifdef USE_EMISSIVEMAP\\n\tuniform sampler2D emissiveMap;\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/encodings_pars_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'encodings_pars_fragment' ] = \"\\nvec4 LinearToLinear( in vec4 value ) {\\n  return value;\\n}\\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\\n  return vec4( pow( value.xyz, vec3( gammaFactor ) ), value.w );\\n}\\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\\n  return vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\\n}\\nvec4 sRGBToLinear( in vec4 value ) {\\n  return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.w );\\n}\\nvec4 LinearTosRGB( in vec4 value ) {\\n  return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.w );\\n}\\nvec4 RGBEToLinear( in vec4 value ) {\\n  return vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\\n}\\nvec4 LinearToRGBE( in vec4 value ) {\\n  float maxComponent = max( max( value.r, value.g ), value.b );\\n  float fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\\n  return vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\\n}\\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\\n  return vec4( value.xyz * value.w * maxRange, 1.0 );\\n}\\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\\n  float maxRGB = max( value.x, max( value.g, value.b ) );\\n  float M      = clamp( maxRGB / maxRange, 0.0, 1.0 );\\n  M            = ceil( M * 255.0 ) / 255.0;\\n  return vec4( value.rgb / ( M * maxRange ), M );\\n}\\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\\n    return vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\\n}\\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\\n    float maxRGB = max( value.x, max( value.g, value.b ) );\\n    float D      = max( maxRange / maxRGB, 1.0 );\\n    D            = min( floor( D ) / 255.0, 1.0 );\\n    return vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\\n}\\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\\nvec4 LinearToLogLuv( in vec4 value )  {\\n  vec3 Xp_Y_XYZp = value.rgb * cLogLuvM;\\n  Xp_Y_XYZp = max(Xp_Y_XYZp, vec3(1e-6, 1e-6, 1e-6));\\n  vec4 vResult;\\n  vResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\\n  float Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\\n  vResult.w = fract(Le);\\n  vResult.z = (Le - (floor(vResult.w*255.0))/255.0)/255.0;\\n  return vResult;\\n}\\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\\nvec4 LogLuvToLinear( in vec4 value ) {\\n  float Le = value.z * 255.0 + value.w;\\n  vec3 Xp_Y_XYZp;\\n  Xp_Y_XYZp.y = exp2((Le - 127.0) / 2.0);\\n  Xp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\\n  Xp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\\n  vec3 vRGB = Xp_Y_XYZp.rgb * cLogLuvInverseM;\\n  return vec4( max(vRGB, 0.0), 1.0 );\\n}\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/encodings_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'encodings_fragment' ] = \"  gl_FragColor = linearToOutputTexel( gl_FragColor );\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/envmap_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'envmap_fragment' ] = \"#ifdef USE_ENVMAP\\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\t\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\t\t#ifdef ENVMAP_MODE_REFLECTION\\n\t\t\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\\n\t\t#else\\n\t\t\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\\n\t\t#endif\\n\t#else\\n\t\tvec3 reflectVec = vReflect;\\n\t#endif\\n\t#ifdef DOUBLE_SIDED\\n\t\tfloat flipNormal = ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\t#else\\n\t\tfloat flipNormal = 1.0;\\n\t#endif\\n\t#ifdef ENVMAP_TYPE_CUBE\\n\t\tvec4 envColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\\n\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\t\tvec2 sampleUV;\\n\t\tsampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\\n\t\tsampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\t\tvec4 envColor = texture2D( envMap, sampleUV );\\n\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\t\tvec3 reflectView = flipNormal * normalize((viewMatrix * vec4( reflectVec, 0.0 )).xyz + vec3(0.0,0.0,1.0));\\n\t\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\\n\t#endif\\n\tenvColor = envMapTexelToLinear( envColor );\\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\\n\t#elif defined( ENVMAP_BLENDING_MIX )\\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\\n\t#elif defined( ENVMAP_BLENDING_ADD )\\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\\n\t#endif\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/envmap_pars_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'envmap_pars_fragment' ] = \"#if defined( USE_ENVMAP ) || defined( PHYSICAL )\\n\tuniform float reflectivity;\\n\tuniform float envMapIntenstiy;\\n#endif\\n#ifdef USE_ENVMAP\\n\t#if ! defined( PHYSICAL ) && ( defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) )\\n\t\tvarying vec3 vWorldPosition;\\n\t#endif\\n\t#ifdef ENVMAP_TYPE_CUBE\\n\t\tuniform samplerCube envMap;\\n\t#else\\n\t\tuniform sampler2D envMap;\\n\t#endif\\n\tuniform float flipEnvMap;\\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( PHYSICAL )\\n\t\tuniform float refractionRatio;\\n\t#else\\n\t\tvarying vec3 vReflect;\\n\t#endif\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/envmap_pars_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'envmap_pars_vertex' ] = \"#ifdef USE_ENVMAP\\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\t\tvarying vec3 vWorldPosition;\\n\t#else\\n\t\tvarying vec3 vReflect;\\n\t\tuniform float refractionRatio;\\n\t#endif\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/envmap_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'envmap_vertex' ] = \"#ifdef USE_ENVMAP\\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\\n\t\tvWorldPosition = worldPosition.xyz;\\n\t#else\\n\t\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\t\t#ifdef ENVMAP_MODE_REFLECTION\\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\\n\t\t#else\\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\\n\t\t#endif\\n\t#endif\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/fog_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'fog_fragment' ] = \"#ifdef USE_FOG\\n\t#ifdef USE_LOGDEPTHBUF_EXT\\n\t\tfloat depth = gl_FragDepthEXT / gl_FragCoord.w;\\n\t#else\\n\t\tfloat depth = gl_FragCoord.z / gl_FragCoord.w;\\n\t#endif\\n\t#ifdef FOG_EXP2\\n\t\tfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * depth * depth * LOG2 ) );\\n\t#else\\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, depth );\\n\t#endif\\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/fog_pars_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'fog_pars_fragment' ] = \"#ifdef USE_FOG\\n\tuniform vec3 fogColor;\\n\t#ifdef FOG_EXP2\\n\t\tuniform float fogDensity;\\n\t#else\\n\t\tuniform float fogNear;\\n\t\tuniform float fogFar;\\n\t#endif\\n#endif\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/lightmap_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'lightmap_fragment' ] = \"#ifdef USE_LIGHTMAP\\n\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/lightmap_pars_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'lightmap_pars_fragment' ] = \"#ifdef USE_LIGHTMAP\\n\tuniform sampler2D lightMap;\\n\tuniform float lightMapIntensity;\\n#endif\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/lights_lambert_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'lights_lambert_vertex' ] = \"vec3 diffuse = vec3( 1.0 );\\nGeometricContext geometry;\\ngeometry.position = mvPosition.xyz;\\ngeometry.normal = normalize( transformedNormal );\\ngeometry.viewDir = normalize( -mvPosition.xyz );\\nGeometricContext backGeometry;\\nbackGeometry.position = geometry.position;\\nbackGeometry.normal = -geometry.normal;\\nbackGeometry.viewDir = geometry.viewDir;\\nvLightFront = vec3( 0.0 );\\n#ifdef DOUBLE_SIDED\\n\tvLightBack = vec3( 0.0 );\\n#endif\\nIncidentLight directLight;\\nfloat dotNL;\\nvec3 directLightColor_Diffuse;\\n#if NUM_POINT_LIGHTS > 0\\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\t\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\\n\t\tdotNL = dot( geometry.normal, directLight.direction );\\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\t\t#ifdef DOUBLE_SIDED\\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\t\t#endif\\n\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\t\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\\n\t\tdotNL = dot( geometry.normal, directLight.direction );\\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\t\t#ifdef DOUBLE_SIDED\\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\t\t#endif\\n\t}\\n#endif\\n#if NUM_DIR_LIGHTS > 0\\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\t\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\\n\t\tdotNL = dot( geometry.normal, directLight.direction );\\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\\n\t\t#ifdef DOUBLE_SIDED\\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\\n\t\t#endif\\n\t}\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\t\tvLightFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\t\t#ifdef DOUBLE_SIDED\\n\t\t\tvLightBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\\n\t\t#endif\\n\t}\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/lights_pars.glsl\r\n\r\nTHREE.ShaderChunk[ 'lights_pars' ] = \"uniform vec3 ambientLightColor;\\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\\n\tvec3 irradiance = ambientLightColor;\\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\t\tirradiance *= PI;\\n\t#endif\\n\treturn irradiance;\\n}\\n#if NUM_DIR_LIGHTS > 0\\n\tstruct DirectionalLight {\\n\t\tvec3 direction;\\n\t\tvec3 color;\\n\t\tint shadow;\\n\t\tfloat shadowBias;\\n\t\tfloat shadowRadius;\\n\t\tvec2 shadowMapSize;\\n\t};\\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\\n\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\t\tdirectLight.color = directionalLight.color;\\n\t\tdirectLight.direction = directionalLight.direction;\\n\t\tdirectLight.visible = true;\\n\t}\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\tstruct PointLight {\\n\t\tvec3 position;\\n\t\tvec3 color;\\n\t\tfloat distance;\\n\t\tfloat decay;\\n\t\tint shadow;\\n\t\tfloat shadowBias;\\n\t\tfloat shadowRadius;\\n\t\tvec2 shadowMapSize;\\n\t};\\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\\n\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\\n\t\tvec3 lVector = pointLight.position - geometry.position;\\n\t\tdirectLight.direction = normalize( lVector );\\n\t\tfloat lightDistance = length( lVector );\\n\t\tif ( testLightInRange( lightDistance, pointLight.distance ) ) {\\n\t\t\tdirectLight.color = pointLight.color;\\n\t\t\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\\n\t\t\tdirectLight.visible = true;\\n\t\t} else {\\n\t\t\tdirectLight.color = vec3( 0.0 );\\n\t\t\tdirectLight.visible = false;\\n\t\t}\\n\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\tstruct SpotLight {\\n\t\tvec3 position;\\n\t\tvec3 direction;\\n\t\tvec3 color;\\n\t\tfloat distance;\\n\t\tfloat decay;\\n\t\tfloat coneCos;\\n\t\tfloat penumbraCos;\\n\t\tint shadow;\\n\t\tfloat shadowBias;\\n\t\tfloat shadowRadius;\\n\t\tvec2 shadowMapSize;\\n\t};\\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\\n\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\\n\t\tvec3 lVector = spotLight.position - geometry.position;\\n\t\tdirectLight.direction = normalize( lVector );\\n\t\tfloat lightDistance = length( lVector );\\n\t\tfloat angleCos = dot( directLight.direction, spotLight.direction );\\n\t\tif ( all( bvec2( angleCos > spotLight.coneCos, testLightInRange( lightDistance, spotLight.distance ) ) ) ) {\\n\t\t\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\\n\t\t\tdirectLight.color = spotLight.color;\\n\t\t\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\\n\t\t\tdirectLight.visible = true;\\n\t\t} else {\\n\t\t\tdirectLight.color = vec3( 0.0 );\\n\t\t\tdirectLight.visible = false;\\n\t\t}\\n\t}\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\tstruct HemisphereLight {\\n\t\tvec3 direction;\\n\t\tvec3 skyColor;\\n\t\tvec3 groundColor;\\n\t};\\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\\n\t\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\t\t\tirradiance *= PI;\\n\t\t#endif\\n\t\treturn irradiance;\\n\t}\\n#endif\\n#if defined( USE_ENVMAP ) && defined( PHYSICAL )\\n\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\\n\t\t#ifdef DOUBLE_SIDED\\n\t\t\tfloat flipNormal = ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\t\t#else\\n\t\t\tfloat flipNormal = 1.0;\\n\t\t#endif\\n\t\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\\n\t\t#ifdef ENVMAP_TYPE_CUBE\\n\t\t\tvec3 queryVec = flipNormal * vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\t\t\t#ifdef TEXTURE_LOD_EXT\\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\\n\t\t\t#else\\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\\n\t\t\t#endif\\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\t\t\tvec3 queryVec = flipNormal * vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\\n\t\t\tvec4 envMapColor = textureCubeUV( queryVec, 1.0 );\\n\t\t#else\\n\t\t\tvec4 envMapColor = vec4( 0.0 );\\n\t\t#endif\\n\t\treturn PI * envMapColor.rgb * envMapIntensity;\\n\t}\\n\tfloat getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\\n\t\tfloat maxMIPLevelScalar = float( maxMIPLevel );\\n\t\tfloat desiredMIPLevel = maxMIPLevelScalar - 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\\n\t\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\\n\t}\\n\tvec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\\n\t\t#ifdef ENVMAP_MODE_REFLECTION\\n\t\t\tvec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\\n\t\t#else\\n\t\t\tvec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\\n\t\t#endif\\n\t\t#ifdef DOUBLE_SIDED\\n\t\t\tfloat flipNormal = ( float( gl_FrontFacing ) * 2.0 - 1.0 );\\n\t\t#else\\n\t\t\tfloat flipNormal = 1.0;\\n\t\t#endif\\n\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\\n\t\tfloat specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\\n\t\t#ifdef ENVMAP_TYPE_CUBE\\n\t\t\tvec3 queryReflectVec = flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\t\t\t#ifdef TEXTURE_LOD_EXT\\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\\n\t\t\t#else\\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\\n\t\t\t#endif\\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\t\t\tvec3 queryReflectVec = flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\\n\t\t\tvec4 envMapColor = textureCubeUV(queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent));\\n\t\t#elif defined( ENVMAP_TYPE_EQUIREC )\\n\t\t\tvec2 sampleUV;\\n\t\t\tsampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\\n\t\t\tsampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\\n\t\t\t#ifdef TEXTURE_LOD_EXT\\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\\n\t\t\t#else\\n\t\t\t\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\\n\t\t\t#endif\\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\t\t#elif defined( ENVMAP_TYPE_SPHERE )\\n\t\t\tvec3 reflectView = flipNormal * normalize((viewMatrix * vec4( reflectVec, 0.0 )).xyz + vec3(0.0,0.0,1.0));\\n\t\t\t#ifdef TEXTURE_LOD_EXT\\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\t\t\t#else\\n\t\t\t\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\\n\t\t\t#endif\\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\\n\t\t#endif\\n\t\treturn envMapColor.rgb * envMapIntensity;\\n\t}\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/lights_phong_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'lights_phong_fragment' ] = \"BlinnPhongMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\\nmaterial.specularColor = specular;\\nmaterial.specularShininess = shininess;\\nmaterial.specularStrength = specularStrength;\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/lights_phong_pars_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'lights_phong_pars_fragment' ] = \"varying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\tvarying vec3 vNormal;\\n#endif\\nstruct BlinnPhongMaterial {\\n\tvec3\tdiffuseColor;\\n\tvec3\tspecularColor;\\n\tfloat\tspecularShininess;\\n\tfloat\tspecularStrength;\\n};\\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\tvec3 irradiance = dotNL * directLight.color;\\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\t\tirradiance *= PI;\\n\t#endif\\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\\n}\\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\\n#define Material_LightProbeLOD( material )\t(0)\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/lights_physical_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'lights_physical_fragment' ] = \"PhysicalMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\\n#ifdef STANDARD\\n\tmaterial.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\\n#else\\n\tmaterial.specularColor = mix( vec3( 0.16 * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/lights_physical_pars_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'lights_physical_pars_fragment' ] = \"struct PhysicalMaterial {\\n\tvec3\tdiffuseColor;\\n\tfloat\tspecularRoughness;\\n\tvec3\tspecularColor;\\n\t#ifndef STANDARD\\n\t#endif\\n};\\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\\n\tvec3 irradiance = dotNL * directLight.color;\\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\t\tirradiance *= PI;\\n\t#endif\\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\\n}\\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\treflectedLight.indirectSpecular += radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\\n}\\n#define RE_Direct\t\t\t\tRE_Direct_Physical\\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\\n}\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/lights_template.glsl\r\n\r\nTHREE.ShaderChunk[ 'lights_template' ] = \"\\nGeometricContext geometry;\\ngeometry.position = - vViewPosition;\\ngeometry.normal = normal;\\ngeometry.viewDir = normalize( vViewPosition );\\nIncidentLight directLight;\\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\\n\tPointLight pointLight;\\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\t\tpointLight = pointLights[ i ];\\n\t\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\\n\t\t#ifdef USE_SHADOWMAP\\n\t\tdirectLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\\n\t\t#endif\\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\t}\\n#endif\\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\\n\tSpotLight spotLight;\\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\t\tspotLight = spotLights[ i ];\\n\t\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\\n\t\t#ifdef USE_SHADOWMAP\\n\t\tdirectLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\t\t#endif\\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\t}\\n#endif\\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\\n\tDirectionalLight directionalLight;\\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\t\tdirectionalLight = directionalLights[ i ];\\n\t\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\\n\t\t#ifdef USE_SHADOWMAP\\n\t\tdirectLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\t\t#endif\\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\\n\t}\\n#endif\\n#if defined( RE_IndirectDiffuse )\\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\\n\t#ifdef USE_LIGHTMAP\\n\t\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\\n\t\t\tlightMapIrradiance *= PI;\\n\t\t#endif\\n\t\tirradiance += lightMapIrradiance;\\n\t#endif\\n\t#if ( NUM_HEMI_LIGHTS > 0 )\\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\\n\t\t}\\n\t#endif\\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL ) && defined( ENVMAP_TYPE_CUBE_UV )\\n\t \tirradiance += getLightProbeIndirectIrradiance( geometry, 8 );\\n\t#endif\\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\\n#endif\\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\\n\tvec3 radiance = getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), 8 );\\n\tRE_IndirectSpecular( radiance, geometry, material, reflectedLight );\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/logdepthbuf_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'logdepthbuf_fragment' ] = \"#if defined(USE_LOGDEPTHBUF) && defined(USE_LOGDEPTHBUF_EXT)\\n\tgl_FragDepthEXT = log2(vFragDepth) * logDepthBufFC * 0.5;\\n#endif\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/logdepthbuf_pars_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'logdepthbuf_pars_fragment' ] = \"#ifdef USE_LOGDEPTHBUF\\n\tuniform float logDepthBufFC;\\n\t#ifdef USE_LOGDEPTHBUF_EXT\\n\t\tvarying float vFragDepth;\\n\t#endif\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/logdepthbuf_pars_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'logdepthbuf_pars_vertex' ] = \"#ifdef USE_LOGDEPTHBUF\\n\t#ifdef USE_LOGDEPTHBUF_EXT\\n\t\tvarying float vFragDepth;\\n\t#endif\\n\tuniform float logDepthBufFC;\\n#endif\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/logdepthbuf_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'logdepthbuf_vertex' ] = \"#ifdef USE_LOGDEPTHBUF\\n\tgl_Position.z = log2(max( EPSILON, gl_Position.w + 1.0 )) * logDepthBufFC;\\n\t#ifdef USE_LOGDEPTHBUF_EXT\\n\t\tvFragDepth = 1.0 + gl_Position.w;\\n\t#else\\n\t\tgl_Position.z = (gl_Position.z - 1.0) * gl_Position.w;\\n\t#endif\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/map_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'map_fragment' ] = \"#ifdef USE_MAP\\n\tvec4 texelColor = texture2D( map, vUv );\\n\ttexelColor = mapTexelToLinear( texelColor );\\n\tdiffuseColor *= texelColor;\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/map_pars_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'map_pars_fragment' ] = \"#ifdef USE_MAP\\n\tuniform sampler2D map;\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/map_particle_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'map_particle_fragment' ] = \"#ifdef USE_MAP\\n\tvec4 mapTexel = texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) * offsetRepeat.zw + offsetRepeat.xy );\\n\tdiffuseColor *= mapTexelToLinear( mapTexel );\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/map_particle_pars_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'map_particle_pars_fragment' ] = \"#ifdef USE_MAP\\n\tuniform vec4 offsetRepeat;\\n\tuniform sampler2D map;\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/metalnessmap_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'metalnessmap_fragment' ] = \"float metalnessFactor = metalness;\\n#ifdef USE_METALNESSMAP\\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\\n\tmetalnessFactor *= texelMetalness.r;\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/metalnessmap_pars_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'metalnessmap_pars_fragment' ] = \"#ifdef USE_METALNESSMAP\\n\tuniform sampler2D metalnessMap;\\n#endif\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/morphnormal_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'morphnormal_vertex' ] = \"#ifdef USE_MORPHNORMALS\\n\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\\n\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\\n\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\\n\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/morphtarget_pars_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'morphtarget_pars_vertex' ] = \"#ifdef USE_MORPHTARGETS\\n\t#ifndef USE_MORPHNORMALS\\n\tuniform float morphTargetInfluences[ 8 ];\\n\t#else\\n\tuniform float morphTargetInfluences[ 4 ];\\n\t#endif\\n#endif\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/morphtarget_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'morphtarget_vertex' ] = \"#ifdef USE_MORPHTARGETS\\n\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\\n\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\\n\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\\n\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\\n\t#ifndef USE_MORPHNORMALS\\n\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\\n\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\\n\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\\n\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\\n\t#endif\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/normal_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'normal_fragment' ] = \"#ifdef FLAT_SHADED\\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\\n\tvec3 normal = normalize( cross( fdx, fdy ) );\\n#else\\n\tvec3 normal = normalize( vNormal );\\n\t#ifdef DOUBLE_SIDED\\n\t\tnormal = normal * ( -1.0 + 2.0 * float( gl_FrontFacing ) );\\n\t#endif\\n#endif\\n#ifdef USE_NORMALMAP\\n\tnormal = perturbNormal2Arb( -vViewPosition, normal );\\n#elif defined( USE_BUMPMAP )\\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/normalmap_pars_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'normalmap_pars_fragment' ] = \"#ifdef USE_NORMALMAP\\n\tuniform sampler2D normalMap;\\n\tuniform vec2 normalScale;\\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\\n\t\tvec3 q0 = dFdx( eye_pos.xyz );\\n\t\tvec3 q1 = dFdy( eye_pos.xyz );\\n\t\tvec2 st0 = dFdx( vUv.st );\\n\t\tvec2 st1 = dFdy( vUv.st );\\n\t\tvec3 S = normalize( q0 * st1.t - q1 * st0.t );\\n\t\tvec3 T = normalize( -q0 * st1.s + q1 * st0.s );\\n\t\tvec3 N = normalize( surf_norm );\\n\t\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\\n\t\tmapN.xy = normalScale * mapN.xy;\\n\t\tmat3 tsn = mat3( S, T, N );\\n\t\treturn normalize( tsn * mapN );\\n\t}\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/packing.glsl\r\n\r\nTHREE.ShaderChunk[ 'packing' ] = \"vec3 packNormalToRGB( const in vec3 normal ) {\\n  return normalize( normal ) * 0.5 + 0.5;\\n}\\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\\n  return 1.0 - 2.0 * rgb.xyz;\\n}\\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\\nconst float ShiftRight8 = 1. / 256.;\\nvec4 packDepthToRGBA( const in float v ) {\\n\tvec4 r = vec4( fract( v * PackFactors ), v );\\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\\n}\\nfloat unpackRGBAToDepth( const in vec4 v ) {\\n\treturn dot( v, UnpackFactors );\\n}\\nfloat viewZToOrthoDepth( const in float viewZ, const in float near, const in float far ) {\\n  return ( viewZ + near ) / ( near - far );\\n}\\nfloat OrthoDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\\n  return linearClipZ * ( near - far ) - near;\\n}\\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\\n  return (( near + viewZ ) * far ) / (( far - near ) * viewZ );\\n}\\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\\n  return ( near * far ) / ( ( far - near ) * invClipZ - far );\\n}\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/premultiplied_alpha_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'premultiplied_alpha_fragment' ] = \"#ifdef PREMULTIPLIED_ALPHA\\n\tgl_FragColor.rgb *= gl_FragColor.a;\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/project_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'project_vertex' ] = \"#ifdef USE_SKINNING\\n\tvec4 mvPosition = modelViewMatrix * skinned;\\n#else\\n\tvec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\\n#endif\\ngl_Position = projectionMatrix * mvPosition;\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/roughnessmap_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'roughnessmap_fragment' ] = \"float roughnessFactor = roughness;\\n#ifdef USE_ROUGHNESSMAP\\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\\n\troughnessFactor *= texelRoughness.r;\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/roughnessmap_pars_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'roughnessmap_pars_fragment' ] = \"#ifdef USE_ROUGHNESSMAP\\n\tuniform sampler2D roughnessMap;\\n#endif\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/shadowmap_pars_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'shadowmap_pars_fragment' ] = \"#ifdef USE_SHADOWMAP\\n\t#if NUM_DIR_LIGHTS > 0\\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\\n\t#endif\\n\t#if NUM_SPOT_LIGHTS > 0\\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\\n\t#endif\\n\t#if NUM_POINT_LIGHTS > 0\\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\\n\t#endif\\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\\n\t}\\n\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\\n\t\tconst vec2 offset = vec2( 0.0, 1.0 );\\n\t\tvec2 texelSize = vec2( 1.0 ) / size;\\n\t\tvec2 centroidUV = floor( uv * size + 0.5 ) / size;\\n\t\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\\n\t\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\\n\t\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\\n\t\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\\n\t\tvec2 f = fract( uv * size + 0.5 );\\n\t\tfloat a = mix( lb, lt, f.y );\\n\t\tfloat b = mix( rb, rt, f.y );\\n\t\tfloat c = mix( a, b, f.x );\\n\t\treturn c;\\n\t}\\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\t\tshadowCoord.xyz /= shadowCoord.w;\\n\t\tshadowCoord.z += shadowBias;\\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\\n\t\tbool inFrustum = all( inFrustumVec );\\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\\n\t\tbool frustumTest = all( frustumTestVec );\\n\t\tif ( frustumTest ) {\\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\\n\t\t\treturn (\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\t\t\t) * ( 1.0 / 9.0 );\\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\\n\t\t\treturn (\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\t\t\t) * ( 1.0 / 9.0 );\\n\t\t#else\\n\t\t\treturn texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\t\t#endif\\n\t\t}\\n\t\treturn 1.0;\\n\t}\\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\\n\t\tvec3 absV = abs( v );\\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\\n\t\tabsV *= scaleToCube;\\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\\n\t\tvec2 planar = v.xy;\\n\t\tfloat almostATexel = 1.5 * texelSizeY;\\n\t\tfloat almostOne = 1.0 - almostATexel;\\n\t\tif ( absV.z >= almostOne ) {\\n\t\t\tif ( v.z > 0.0 )\\n\t\t\t\tplanar.x = 4.0 - v.x;\\n\t\t} else if ( absV.x >= almostOne ) {\\n\t\t\tfloat signX = sign( v.x );\\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\\n\t\t} else if ( absV.y >= almostOne ) {\\n\t\t\tfloat signY = sign( v.y );\\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\\n\t\t\tplanar.y = v.z * signY - 2.0;\\n\t\t}\\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\\n\t}\\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\\n\t\tvec3 lightToPosition = shadowCoord.xyz;\\n\t\tvec3 bd3D = normalize( lightToPosition );\\n\t\tfloat dp = ( length( lightToPosition ) - shadowBias ) / 1000.0;\\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\\n\t\t\treturn (\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\\n\t\t\t) * ( 1.0 / 9.0 );\\n\t\t#else\\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\\n\t\t#endif\\n\t}\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/shadowmap_pars_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'shadowmap_pars_vertex' ] = \"#ifdef USE_SHADOWMAP\\n\t#if NUM_DIR_LIGHTS > 0\\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\\n\t#endif\\n\t#if NUM_SPOT_LIGHTS > 0\\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\\n\t#endif\\n\t#if NUM_POINT_LIGHTS > 0\\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\\n\t#endif\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/shadowmap_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'shadowmap_vertex' ] = \"#ifdef USE_SHADOWMAP\\n\t#if NUM_DIR_LIGHTS > 0\\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\\n\t}\\n\t#endif\\n\t#if NUM_SPOT_LIGHTS > 0\\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\\n\t}\\n\t#endif\\n\t#if NUM_POINT_LIGHTS > 0\\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\\n\t}\\n\t#endif\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/shadowmask_pars_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'shadowmask_pars_fragment' ] = \"float getShadowMask() {\\n\tfloat shadow = 1.0;\\n\t#ifdef USE_SHADOWMAP\\n\t#if NUM_DIR_LIGHTS > 0\\n\tDirectionalLight directionalLight;\\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\t\tdirectionalLight = directionalLights[ i ];\\n\t\tshadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\t}\\n\t#endif\\n\t#if NUM_SPOT_LIGHTS > 0\\n\tSpotLight spotLight;\\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\t\tspotLight = spotLights[ i ];\\n\t\tshadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\\n\t}\\n\t#endif\\n\t#if NUM_POINT_LIGHTS > 0\\n\tPointLight pointLight;\\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\t\tpointLight = pointLights[ i ];\\n\t\tshadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ] ) : 1.0;\\n\t}\\n\t#endif\\n\t#endif\\n\treturn shadow;\\n}\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/skinbase_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'skinbase_vertex' ] = \"#ifdef USE_SKINNING\\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\\n#endif\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/skinning_pars_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'skinning_pars_vertex' ] = \"#ifdef USE_SKINNING\\n\tuniform mat4 bindMatrix;\\n\tuniform mat4 bindMatrixInverse;\\n\t#ifdef BONE_TEXTURE\\n\t\tuniform sampler2D boneTexture;\\n\t\tuniform int boneTextureWidth;\\n\t\tuniform int boneTextureHeight;\\n\t\tmat4 getBoneMatrix( const in float i ) {\\n\t\t\tfloat j = i * 4.0;\\n\t\t\tfloat x = mod( j, float( boneTextureWidth ) );\\n\t\t\tfloat y = floor( j / float( boneTextureWidth ) );\\n\t\t\tfloat dx = 1.0 / float( boneTextureWidth );\\n\t\t\tfloat dy = 1.0 / float( boneTextureHeight );\\n\t\t\ty = dy * ( y + 0.5 );\\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\\n\t\t\treturn bone;\\n\t\t}\\n\t#else\\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\\n\t\tmat4 getBoneMatrix( const in float i ) {\\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\\n\t\t\treturn bone;\\n\t\t}\\n\t#endif\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/skinning_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'skinning_vertex' ] = \"#ifdef USE_SKINNING\\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\\n\tvec4 skinned = vec4( 0.0 );\\n\tskinned += boneMatX * skinVertex * skinWeight.x;\\n\tskinned += boneMatY * skinVertex * skinWeight.y;\\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\\n\tskinned += boneMatW * skinVertex * skinWeight.w;\\n\tskinned  = bindMatrixInverse * skinned;\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/skinnormal_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'skinnormal_vertex' ] = \"#ifdef USE_SKINNING\\n\tmat4 skinMatrix = mat4( 0.0 );\\n\tskinMatrix += skinWeight.x * boneMatX;\\n\tskinMatrix += skinWeight.y * boneMatY;\\n\tskinMatrix += skinWeight.z * boneMatZ;\\n\tskinMatrix += skinWeight.w * boneMatW;\\n\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/specularmap_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'specularmap_fragment' ] = \"float specularStrength;\\n#ifdef USE_SPECULARMAP\\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\\n\tspecularStrength = texelSpecular.r;\\n#else\\n\tspecularStrength = 1.0;\\n#endif\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/specularmap_pars_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'specularmap_pars_fragment' ] = \"#ifdef USE_SPECULARMAP\\n\tuniform sampler2D specularMap;\\n#endif\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/tonemapping_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'tonemapping_fragment' ] = \"#if defined( TONE_MAPPING )\\n  gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/tonemapping_pars_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'tonemapping_pars_fragment' ] = \"#define saturate(a) clamp( a, 0.0, 1.0 )\\nuniform float toneMappingExposure;\\nuniform float toneMappingWhitePoint;\\nvec3 LinearToneMapping( vec3 color ) {\\n  return toneMappingExposure * color;\\n}\\nvec3 ReinhardToneMapping( vec3 color ) {\\n  color *= toneMappingExposure;\\n  return saturate( color / ( vec3( 1.0 ) + color ) );\\n}\\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\\nvec3 Uncharted2ToneMapping( vec3 color ) {\\n  color *= toneMappingExposure;\\n  return saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\\n}\\nvec3 OptimizedCineonToneMapping( vec3 color ) {\\n  color *= toneMappingExposure;\\n  color = max( vec3( 0.0 ), color - 0.004 );\\n  return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\\n}\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/uv2_pars_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'uv2_pars_fragment' ] = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\tvarying vec2 vUv2;\\n#endif\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/uv2_pars_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'uv2_pars_vertex' ] = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\tattribute vec2 uv2;\\n\tvarying vec2 vUv2;\\n#endif\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/uv2_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'uv2_vertex' ] = \"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\\n\tvUv2 = uv2;\\n#endif\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/uv_pars_fragment.glsl\r\n\r\nTHREE.ShaderChunk[ 'uv_pars_fragment' ] = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\tvarying vec2 vUv;\\n#endif\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/uv_pars_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'uv_pars_vertex' ] = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\tvarying vec2 vUv;\\n\tuniform vec4 offsetRepeat;\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/uv_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'uv_vertex' ] = \"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\\n\tvUv = uv * offsetRepeat.zw + offsetRepeat.xy;\\n#endif\";\r\n\r\n// File:src/renderers/shaders/ShaderChunk/worldpos_vertex.glsl\r\n\r\nTHREE.ShaderChunk[ 'worldpos_vertex' ] = \"#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( PHYSICAL ) || defined( LAMBERT ) || defined ( USE_SHADOWMAP )\\n\t#ifdef USE_SKINNING\\n\t\tvec4 worldPosition = modelMatrix * skinned;\\n\t#else\\n\t\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\\n\t#endif\\n#endif\\n\";\r\n\r\n// File:src/renderers/shaders/UniformsUtils.js\r\n\r\n/**\r\n * Uniform Utilities\r\n */\r\n\r\nTHREE.UniformsUtils = {\r\n\r\n\tmerge: function ( uniforms ) {\r\n\r\n\t\tvar merged = {};\r\n\r\n\t\tfor ( var u = 0; u < uniforms.length; u ++ ) {\r\n\r\n\t\t\tvar tmp = this.clone( uniforms[ u ] );\r\n\r\n\t\t\tfor ( var p in tmp ) {\r\n\r\n\t\t\t\tmerged[ p ] = tmp[ p ];\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn merged;\r\n\r\n\t},\r\n\r\n\tclone: function ( uniforms_src ) {\r\n\r\n\t\tvar uniforms_dst = {};\r\n\r\n\t\tfor ( var u in uniforms_src ) {\r\n\r\n\t\t\tuniforms_dst[ u ] = {};\r\n\r\n\t\t\tfor ( var p in uniforms_src[ u ] ) {\r\n\r\n\t\t\t\tvar parameter_src = uniforms_src[ u ][ p ];\r\n\r\n\t\t\t\tif ( parameter_src instanceof THREE.Color ||\r\n\t\t\t\t\t parameter_src instanceof THREE.Vector2 ||\r\n\t\t\t\t\t parameter_src instanceof THREE.Vector3 ||\r\n\t\t\t\t\t parameter_src instanceof THREE.Vector4 ||\r\n\t\t\t\t\t parameter_src instanceof THREE.Matrix3 ||\r\n\t\t\t\t\t parameter_src instanceof THREE.Matrix4 ||\r\n\t\t\t\t\t parameter_src instanceof THREE.Texture ) {\r\n\r\n\t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src.clone();\r\n\r\n\t\t\t\t} else if ( Array.isArray( parameter_src ) ) {\r\n\r\n\t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src.slice();\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tuniforms_dst[ u ][ p ] = parameter_src;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn uniforms_dst;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/renderers/shaders/UniformsLib.js\r\n\r\n/**\r\n * Uniforms library for shared webgl shaders\r\n */\r\n\r\nTHREE.UniformsLib = {\r\n\r\n\tcommon: {\r\n\r\n\t\t\"diffuse\": { type: \"c\", value: new THREE.Color( 0xeeeeee ) },\r\n\t\t\"opacity\": { type: \"1f\", value: 1.0 },\r\n\r\n\t\t\"map\": { type: \"t\", value: null },\r\n\t\t\"offsetRepeat\": { type: \"v4\", value: new THREE.Vector4( 0, 0, 1, 1 ) },\r\n\r\n\t\t\"specularMap\": { type: \"t\", value: null },\r\n\t\t\"alphaMap\": { type: \"t\", value: null },\r\n\r\n\t\t\"envMap\": { type: \"t\", value: null },\r\n\t\t\"flipEnvMap\": { type: \"1f\", value: - 1 },\r\n\t\t\"reflectivity\": { type: \"1f\", value: 1.0 },\r\n\t\t\"refractionRatio\": { type: \"1f\", value: 0.98 }\r\n\r\n\t},\r\n\r\n\taomap: {\r\n\r\n\t\t\"aoMap\": { type: \"t\", value: null },\r\n\t\t\"aoMapIntensity\": { type: \"1f\", value: 1 }\r\n\r\n\t},\r\n\r\n\tlightmap: {\r\n\r\n\t\t\"lightMap\": { type: \"t\", value: null },\r\n\t\t\"lightMapIntensity\": { type: \"1f\", value: 1 }\r\n\r\n\t},\r\n\r\n\temissivemap: {\r\n\r\n\t\t\"emissiveMap\": { type: \"t\", value: null }\r\n\r\n\t},\r\n\r\n\tbumpmap: {\r\n\r\n\t\t\"bumpMap\": { type: \"t\", value: null },\r\n\t\t\"bumpScale\": { type: \"1f\", value: 1 }\r\n\r\n\t},\r\n\r\n\tnormalmap: {\r\n\r\n\t\t\"normalMap\": { type: \"t\", value: null },\r\n\t\t\"normalScale\": { type: \"v2\", value: new THREE.Vector2( 1, 1 ) }\r\n\r\n\t},\r\n\r\n\tdisplacementmap: {\r\n\r\n\t\t\"displacementMap\": { type: \"t\", value: null },\r\n\t\t\"displacementScale\": { type: \"1f\", value: 1 },\r\n\t\t\"displacementBias\": { type: \"1f\", value: 0 }\r\n\r\n\t},\r\n\r\n\troughnessmap: {\r\n\r\n\t\t\"roughnessMap\": { type: \"t\", value: null }\r\n\r\n\t},\r\n\r\n\tmetalnessmap: {\r\n\r\n\t\t\"metalnessMap\": { type: \"t\", value: null }\r\n\r\n\t},\r\n\r\n\tfog: {\r\n\r\n\t\t\"fogDensity\": { type: \"1f\", value: 0.00025 },\r\n\t\t\"fogNear\": { type: \"1f\", value: 1 },\r\n\t\t\"fogFar\": { type: \"1f\", value: 2000 },\r\n\t\t\"fogColor\": { type: \"c\", value: new THREE.Color( 0xffffff ) }\r\n\r\n\t},\r\n\r\n\tlights: {\r\n\r\n\t\t\"ambientLightColor\": { type: \"3fv\", value: [] },\r\n\r\n\t\t\"directionalLights\": { type: \"sa\", value: [], properties: {\r\n\t\t\t\"direction\": { type: \"v3\" },\r\n\t\t\t\"color\": { type: \"c\" },\r\n\r\n\t\t\t\"shadow\": { type: \"1i\" },\r\n\t\t\t\"shadowBias\": { type: \"1f\" },\r\n\t\t\t\"shadowRadius\": { type: \"1f\" },\r\n\t\t\t\"shadowMapSize\": { type: \"v2\" }\r\n\t\t} },\r\n\r\n\t\t\"directionalShadowMap\": { type: \"tv\", value: [] },\r\n\t\t\"directionalShadowMatrix\": { type: \"m4v\", value: [] },\r\n\r\n\t\t\"spotLights\": { type: \"sa\", value: [], properties: {\r\n\t\t\t\"color\": { type: \"c\" },\r\n\t\t\t\"position\": { type: \"v3\" },\r\n\t\t\t\"direction\": { type: \"v3\" },\r\n\t\t\t\"distance\": { type: \"1f\" },\r\n\t\t\t\"coneCos\": { type: \"1f\" },\r\n\t\t\t\"penumbraCos\": { type: \"1f\" },\r\n\t\t\t\"decay\": { type: \"1f\" },\r\n\r\n\t\t\t\"shadow\": { type: \"1i\" },\r\n\t\t\t\"shadowBias\": { type: \"1f\" },\r\n\t\t\t\"shadowRadius\": { type: \"1f\" },\r\n\t\t\t\"shadowMapSize\": { type: \"v2\" }\r\n\t\t} },\r\n\r\n\t\t\"spotShadowMap\": { type: \"tv\", value: [] },\r\n\t\t\"spotShadowMatrix\": { type: \"m4v\", value: [] },\r\n\r\n\t\t\"pointLights\": { type: \"sa\", value: [], properties: {\r\n\t\t\t\"color\": { type: \"c\" },\r\n\t\t\t\"position\": { type: \"v3\" },\r\n\t\t\t\"decay\": { type: \"1f\" },\r\n\t\t\t\"distance\": { type: \"1f\" },\r\n\r\n\t\t\t\"shadow\": { type: \"1i\" },\r\n\t\t\t\"shadowBias\": { type: \"1f\" },\r\n\t\t\t\"shadowRadius\": { type: \"1f\" },\r\n\t\t\t\"shadowMapSize\": { type: \"v2\" }\r\n\t\t} },\r\n\r\n\t\t\"pointShadowMap\": { type: \"tv\", value: [] },\r\n\t\t\"pointShadowMatrix\": { type: \"m4v\", value: [] },\r\n\r\n\t\t\"hemisphereLights\": { type: \"sa\", value: [], properties: {\r\n\t\t\t\"direction\": { type: \"v3\" },\r\n\t\t\t\"skyColor\": { type: \"c\" },\r\n\t\t\t\"groundColor\": { type: \"c\" }\r\n\t\t} }\r\n\r\n\t},\r\n\r\n\tpoints: {\r\n\r\n\t\t\"diffuse\": { type: \"c\", value: new THREE.Color( 0xeeeeee ) },\r\n\t\t\"opacity\": { type: \"1f\", value: 1.0 },\r\n\t\t\"size\": { type: \"1f\", value: 1.0 },\r\n\t\t\"scale\": { type: \"1f\", value: 1.0 },\r\n\t\t\"map\": { type: \"t\", value: null },\r\n\t\t\"offsetRepeat\": { type: \"v4\", value: new THREE.Vector4( 0, 0, 1, 1 ) }\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/renderers/shaders/ShaderLib/cube_frag.glsl\r\n\r\nTHREE.ShaderChunk[ 'cube_frag' ] = \"uniform samplerCube tCube;\\nuniform float tFlip;\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\t#include <clipping_planes_fragment>\\n\tgl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\\n\t#include <logdepthbuf_fragment>\\n}\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderLib/cube_vert.glsl\r\n\r\nTHREE.ShaderChunk[ 'cube_vert' ] = \"varying vec3 vWorldPosition;\\n#include <common>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\tvWorldPosition = transformDirection( position, modelMatrix );\\n\t#include <begin_vertex>\\n\t#include <project_vertex>\\n\t#include <logdepthbuf_vertex>\\n\t#include <clipping_planes_vertex>\\n}\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderLib/depth_frag.glsl\r\n\r\nTHREE.ShaderChunk[ 'depth_frag' ] = \"#if DEPTH_PACKING == 3200\\n\tuniform float opacity;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\t#include <clipping_planes_fragment>\\n\tvec4 diffuseColor = vec4( 1.0 );\\n\t#if DEPTH_PACKING == 3200\\n\t\tdiffuseColor.a = opacity;\\n\t#endif\\n\t#include <map_fragment>\\n\t#include <alphamap_fragment>\\n\t#include <alphatest_fragment>\\n\t#include <logdepthbuf_fragment>\\n\t#if DEPTH_PACKING == 3200\\n\t\tgl_FragColor = vec4( vec3( gl_FragCoord.z ), opacity );\\n\t#elif DEPTH_PACKING == 3201\\n\t\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\\n\t#endif\\n}\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderLib/depth_vert.glsl\r\n\r\nTHREE.ShaderChunk[ 'depth_vert' ] = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\t#include <uv_vertex>\\n\t#include <skinbase_vertex>\\n\t#include <begin_vertex>\\n\t#include <displacementmap_vertex>\\n\t#include <morphtarget_vertex>\\n\t#include <skinning_vertex>\\n\t#include <project_vertex>\\n\t#include <logdepthbuf_vertex>\\n\t#include <clipping_planes_vertex>\\n}\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderLib/distanceRGBA_frag.glsl\r\n\r\nTHREE.ShaderChunk[ 'distanceRGBA_frag' ] = \"uniform vec3 lightPos;\\nvarying vec4 vWorldPosition;\\n#include <common>\\n#include <packing>\\n#include <clipping_planes_pars_fragment>\\nvoid main () {\\n\t#include <clipping_planes_fragment>\\n\tgl_FragColor = packDepthToRGBA( length( vWorldPosition.xyz - lightPos.xyz ) / 1000.0 );\\n}\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderLib/distanceRGBA_vert.glsl\r\n\r\nTHREE.ShaderChunk[ 'distanceRGBA_vert' ] = \"varying vec4 vWorldPosition;\\n#include <common>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\t#include <skinbase_vertex>\\n\t#include <begin_vertex>\\n\t#include <morphtarget_vertex>\\n\t#include <skinning_vertex>\\n\t#include <project_vertex>\\n\t#include <worldpos_vertex>\\n\t#include <clipping_planes_vertex>\\n\tvWorldPosition = worldPosition;\\n}\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderLib/equirect_frag.glsl\r\n\r\nTHREE.ShaderChunk[ 'equirect_frag' ] = \"uniform sampler2D tEquirect;\\nuniform float tFlip;\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\t#include <clipping_planes_fragment>\\n\tvec3 direction = normalize( vWorldPosition );\\n\tvec2 sampleUV;\\n\tsampleUV.y = saturate( tFlip * direction.y * -0.5 + 0.5 );\\n\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\\n\tgl_FragColor = texture2D( tEquirect, sampleUV );\\n\t#include <logdepthbuf_fragment>\\n}\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderLib/equirect_vert.glsl\r\n\r\nTHREE.ShaderChunk[ 'equirect_vert' ] = \"varying vec3 vWorldPosition;\\n#include <common>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\tvWorldPosition = transformDirection( position, modelMatrix );\\n\t#include <begin_vertex>\\n\t#include <project_vertex>\\n\t#include <logdepthbuf_vertex>\\n\t#include <clipping_planes_vertex>\\n}\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderLib/linedashed_frag.glsl\r\n\r\nTHREE.ShaderChunk[ 'linedashed_frag' ] = \"uniform vec3 diffuse;\\nuniform float opacity;\\nuniform float dashSize;\\nuniform float totalSize;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\t#include <clipping_planes_fragment>\\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\\n\t\tdiscard;\\n\t}\\n\tvec3 outgoingLight = vec3( 0.0 );\\n\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\t#include <logdepthbuf_fragment>\\n\t#include <color_fragment>\\n\toutgoingLight = diffuseColor.rgb;\\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\t#include <premultiplied_alpha_fragment>\\n\t#include <tonemapping_fragment>\\n\t#include <encodings_fragment>\\n\t#include <fog_fragment>\\n}\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderLib/linedashed_vert.glsl\r\n\r\nTHREE.ShaderChunk[ 'linedashed_vert' ] = \"uniform float scale;\\nattribute float lineDistance;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\t#include <color_vertex>\\n\tvLineDistance = scale * lineDistance;\\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\\n\tgl_Position = projectionMatrix * mvPosition;\\n\t#include <logdepthbuf_vertex>\\n\t#include <clipping_planes_vertex>\\n}\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderLib/meshbasic_frag.glsl\r\n\r\nTHREE.ShaderChunk[ 'meshbasic_frag' ] = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#ifndef FLAT_SHADED\\n\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\t#include <clipping_planes_fragment>\\n\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\t#include <logdepthbuf_fragment>\\n\t#include <map_fragment>\\n\t#include <color_fragment>\\n\t#include <alphamap_fragment>\\n\t#include <alphatest_fragment>\\n\t#include <specularmap_fragment>\\n\tReflectedLight reflectedLight;\\n\treflectedLight.directDiffuse = vec3( 0.0 );\\n\treflectedLight.directSpecular = vec3( 0.0 );\\n\treflectedLight.indirectDiffuse = diffuseColor.rgb;\\n\treflectedLight.indirectSpecular = vec3( 0.0 );\\n\t#include <aomap_fragment>\\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\\n\t#include <envmap_fragment>\\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\t#include <premultiplied_alpha_fragment>\\n\t#include <tonemapping_fragment>\\n\t#include <encodings_fragment>\\n\t#include <fog_fragment>\\n}\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderLib/meshbasic_vert.glsl\r\n\r\nTHREE.ShaderChunk[ 'meshbasic_vert' ] = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\t#include <uv_vertex>\\n\t#include <uv2_vertex>\\n\t#include <color_vertex>\\n\t#include <skinbase_vertex>\\n\t#ifdef USE_ENVMAP\\n\t#include <beginnormal_vertex>\\n\t#include <morphnormal_vertex>\\n\t#include <skinnormal_vertex>\\n\t#include <defaultnormal_vertex>\\n\t#endif\\n\t#include <begin_vertex>\\n\t#include <morphtarget_vertex>\\n\t#include <skinning_vertex>\\n\t#include <project_vertex>\\n\t#include <logdepthbuf_vertex>\\n\t#include <worldpos_vertex>\\n\t#include <clipping_planes_vertex>\\n\t#include <envmap_vertex>\\n}\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderLib/meshlambert_frag.glsl\r\n\r\nTHREE.ShaderChunk[ 'meshlambert_frag' ] = \"uniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\nvarying vec3 vLightFront;\\n#ifdef DOUBLE_SIDED\\n\tvarying vec3 vLightBack;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\t#include <clipping_planes_fragment>\\n\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\tvec3 totalEmissiveRadiance = emissive;\\n\t#include <logdepthbuf_fragment>\\n\t#include <map_fragment>\\n\t#include <color_fragment>\\n\t#include <alphamap_fragment>\\n\t#include <alphatest_fragment>\\n\t#include <specularmap_fragment>\\n\t#include <emissivemap_fragment>\\n\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\\n\t#include <lightmap_fragment>\\n\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\\n\t#ifdef DOUBLE_SIDED\\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\\n\t#else\\n\t\treflectedLight.directDiffuse = vLightFront;\\n\t#endif\\n\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\\n\t#include <aomap_fragment>\\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\t#include <envmap_fragment>\\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\t#include <premultiplied_alpha_fragment>\\n\t#include <tonemapping_fragment>\\n\t#include <encodings_fragment>\\n\t#include <fog_fragment>\\n}\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderLib/meshlambert_vert.glsl\r\n\r\nTHREE.ShaderChunk[ 'meshlambert_vert' ] = \"#define LAMBERT\\nvarying vec3 vLightFront;\\n#ifdef DOUBLE_SIDED\\n\tvarying vec3 vLightBack;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <color_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\t#include <uv_vertex>\\n\t#include <uv2_vertex>\\n\t#include <color_vertex>\\n\t#include <beginnormal_vertex>\\n\t#include <morphnormal_vertex>\\n\t#include <skinbase_vertex>\\n\t#include <skinnormal_vertex>\\n\t#include <defaultnormal_vertex>\\n\t#include <begin_vertex>\\n\t#include <morphtarget_vertex>\\n\t#include <skinning_vertex>\\n\t#include <project_vertex>\\n\t#include <logdepthbuf_vertex>\\n\t#include <clipping_planes_vertex>\\n\t#include <worldpos_vertex>\\n\t#include <envmap_vertex>\\n\t#include <lights_lambert_vertex>\\n\t#include <shadowmap_vertex>\\n}\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderLib/meshphong_frag.glsl\r\n\r\nTHREE.ShaderChunk[ 'meshphong_frag' ] = \"#define PHONG\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform vec3 specular;\\nuniform float shininess;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <lights_phong_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\t#include <clipping_planes_fragment>\\n\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\tvec3 totalEmissiveRadiance = emissive;\\n\t#include <logdepthbuf_fragment>\\n\t#include <map_fragment>\\n\t#include <color_fragment>\\n\t#include <alphamap_fragment>\\n\t#include <alphatest_fragment>\\n\t#include <specularmap_fragment>\\n\t#include <normal_fragment>\\n\t#include <emissivemap_fragment>\\n\t#include <lights_phong_fragment>\\n\t#include <lights_template>\\n\t#include <aomap_fragment>\\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\t#include <envmap_fragment>\\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\t#include <premultiplied_alpha_fragment>\\n\t#include <tonemapping_fragment>\\n\t#include <encodings_fragment>\\n\t#include <fog_fragment>\\n}\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderLib/meshphong_vert.glsl\r\n\r\nTHREE.ShaderChunk[ 'meshphong_vert' ] = \"#define PHONG\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\t#include <uv_vertex>\\n\t#include <uv2_vertex>\\n\t#include <color_vertex>\\n\t#include <beginnormal_vertex>\\n\t#include <morphnormal_vertex>\\n\t#include <skinbase_vertex>\\n\t#include <skinnormal_vertex>\\n\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\tvNormal = normalize( transformedNormal );\\n#endif\\n\t#include <begin_vertex>\\n\t#include <displacementmap_vertex>\\n\t#include <morphtarget_vertex>\\n\t#include <skinning_vertex>\\n\t#include <project_vertex>\\n\t#include <logdepthbuf_vertex>\\n\t#include <clipping_planes_vertex>\\n\tvViewPosition = - mvPosition.xyz;\\n\t#include <worldpos_vertex>\\n\t#include <envmap_vertex>\\n\t#include <shadowmap_vertex>\\n}\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderLib/meshphysical_frag.glsl\r\n\r\nTHREE.ShaderChunk[ 'meshphysical_frag' ] = \"#define PHYSICAL\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float roughness;\\nuniform float metalness;\\nuniform float opacity;\\nuniform float envMapIntensity;\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <uv2_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <cube_uv_reflection_fragment>\\n#include <lights_pars>\\n#include <lights_physical_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <roughnessmap_pars_fragment>\\n#include <metalnessmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\t#include <clipping_planes_fragment>\\n\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\tvec3 totalEmissiveRadiance = emissive;\\n\t#include <logdepthbuf_fragment>\\n\t#include <map_fragment>\\n\t#include <color_fragment>\\n\t#include <alphamap_fragment>\\n\t#include <alphatest_fragment>\\n\t#include <specularmap_fragment>\\n\t#include <roughnessmap_fragment>\\n\t#include <metalnessmap_fragment>\\n\t#include <normal_fragment>\\n\t#include <emissivemap_fragment>\\n\t#include <lights_physical_fragment>\\n\t#include <lights_template>\\n\t#include <aomap_fragment>\\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\t#include <premultiplied_alpha_fragment>\\n\t#include <tonemapping_fragment>\\n\t#include <encodings_fragment>\\n\t#include <fog_fragment>\\n}\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderLib/meshphysical_vert.glsl\r\n\r\nTHREE.ShaderChunk[ 'meshphysical_vert' ] = \"#define PHYSICAL\\nvarying vec3 vViewPosition;\\n#ifndef FLAT_SHADED\\n\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <uv2_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\t#include <uv_vertex>\\n\t#include <uv2_vertex>\\n\t#include <color_vertex>\\n\t#include <beginnormal_vertex>\\n\t#include <morphnormal_vertex>\\n\t#include <skinbase_vertex>\\n\t#include <skinnormal_vertex>\\n\t#include <defaultnormal_vertex>\\n#ifndef FLAT_SHADED\\n\tvNormal = normalize( transformedNormal );\\n#endif\\n\t#include <begin_vertex>\\n\t#include <displacementmap_vertex>\\n\t#include <morphtarget_vertex>\\n\t#include <skinning_vertex>\\n\t#include <project_vertex>\\n\t#include <logdepthbuf_vertex>\\n\t#include <clipping_planes_vertex>\\n\tvViewPosition = - mvPosition.xyz;\\n\t#include <worldpos_vertex>\\n\t#include <shadowmap_vertex>\\n}\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderLib/normal_frag.glsl\r\n\r\nTHREE.ShaderChunk[ 'normal_frag' ] = \"uniform float opacity;\\nvarying vec3 vNormal;\\n#include <common>\\n#include <packing>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\t#include <clipping_planes_fragment>\\n\tgl_FragColor = vec4( packNormalToRGB( vNormal ), opacity );\\n\t#include <logdepthbuf_fragment>\\n}\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderLib/normal_vert.glsl\r\n\r\nTHREE.ShaderChunk[ 'normal_vert' ] = \"varying vec3 vNormal;\\n#include <common>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\tvNormal = normalize( normalMatrix * normal );\\n\t#include <begin_vertex>\\n\t#include <morphtarget_vertex>\\n\t#include <project_vertex>\\n\t#include <logdepthbuf_vertex>\\n\t#include <clipping_planes_vertex>\\n}\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderLib/points_frag.glsl\r\n\r\nTHREE.ShaderChunk[ 'points_frag' ] = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <map_particle_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\t#include <clipping_planes_fragment>\\n\tvec3 outgoingLight = vec3( 0.0 );\\n\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\t#include <logdepthbuf_fragment>\\n\t#include <map_particle_fragment>\\n\t#include <color_fragment>\\n\t#include <alphatest_fragment>\\n\toutgoingLight = diffuseColor.rgb;\\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\\n\t#include <premultiplied_alpha_fragment>\\n\t#include <tonemapping_fragment>\\n\t#include <encodings_fragment>\\n\t#include <fog_fragment>\\n}\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderLib/points_vert.glsl\r\n\r\nTHREE.ShaderChunk[ 'points_vert' ] = \"uniform float size;\\nuniform float scale;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\t#include <color_vertex>\\n\t#include <begin_vertex>\\n\t#include <project_vertex>\\n\t#ifdef USE_SIZEATTENUATION\\n\t\tgl_PointSize = size * ( scale / - mvPosition.z );\\n\t#else\\n\t\tgl_PointSize = size;\\n\t#endif\\n\t#include <logdepthbuf_vertex>\\n\t#include <clipping_planes_vertex>\\n\t#include <worldpos_vertex>\\n\t#include <shadowmap_vertex>\\n}\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderLib/shadow_frag.glsl\r\n\r\nTHREE.ShaderChunk[ 'shadow_frag' ] = \"uniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <bsdfs>\\n#include <lights_pars>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\nvoid main() {\\n\tgl_FragColor = vec4( 0.0, 0.0, 0.0, opacity * ( 1.0  - getShadowMask() ) );\\n}\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderLib/shadow_vert.glsl\r\n\r\nTHREE.ShaderChunk[ 'shadow_vert' ] = \"#include <shadowmap_pars_vertex>\\nvoid main() {\\n\t#include <begin_vertex>\\n\t#include <project_vertex>\\n\t#include <worldpos_vertex>\\n\t#include <shadowmap_vertex>\\n}\\n\";\r\n\r\n// File:src/renderers/shaders/ShaderLib.js\r\n\r\n/**\r\n * Webgl Shader Library for three.js\r\n *\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author mikael emtinger / http://gomo.se/\r\n */\r\n\r\n\r\nTHREE.ShaderLib = {\r\n\r\n\t'basic': {\r\n\r\n\t\tuniforms: THREE.UniformsUtils.merge( [\r\n\r\n\t\t\tTHREE.UniformsLib[ 'common' ],\r\n\t\t\tTHREE.UniformsLib[ 'aomap' ],\r\n\t\t\tTHREE.UniformsLib[ 'fog' ]\r\n\r\n\t\t] ),\r\n\r\n\t\tvertexShader: THREE.ShaderChunk[ 'meshbasic_vert' ],\r\n\t\tfragmentShader: THREE.ShaderChunk[ 'meshbasic_frag' ]\r\n\r\n\t},\r\n\r\n\t'lambert': {\r\n\r\n\t\tuniforms: THREE.UniformsUtils.merge( [\r\n\r\n\t\t\tTHREE.UniformsLib[ 'common' ],\r\n\t\t\tTHREE.UniformsLib[ 'aomap' ],\r\n\t\t\tTHREE.UniformsLib[ 'lightmap' ],\r\n\t\t\tTHREE.UniformsLib[ 'emissivemap' ],\r\n\t\t\tTHREE.UniformsLib[ 'fog' ],\r\n\t\t\tTHREE.UniformsLib[ 'lights' ],\r\n\r\n\t\t\t{\r\n\t\t\t\t\"emissive\" : { type: \"c\", value: new THREE.Color( 0x000000 ) }\r\n\t\t\t}\r\n\r\n\t\t] ),\r\n\r\n\t\tvertexShader: THREE.ShaderChunk[ 'meshlambert_vert' ],\r\n\t\tfragmentShader: THREE.ShaderChunk[ 'meshlambert_frag' ]\r\n\r\n\t},\r\n\r\n\t'phong': {\r\n\r\n\t\tuniforms: THREE.UniformsUtils.merge( [\r\n\r\n\t\t\tTHREE.UniformsLib[ 'common' ],\r\n\t\t\tTHREE.UniformsLib[ 'aomap' ],\r\n\t\t\tTHREE.UniformsLib[ 'lightmap' ],\r\n\t\t\tTHREE.UniformsLib[ 'emissivemap' ],\r\n\t\t\tTHREE.UniformsLib[ 'bumpmap' ],\r\n\t\t\tTHREE.UniformsLib[ 'normalmap' ],\r\n\t\t\tTHREE.UniformsLib[ 'displacementmap' ],\r\n\t\t\tTHREE.UniformsLib[ 'fog' ],\r\n\t\t\tTHREE.UniformsLib[ 'lights' ],\r\n\r\n\t\t\t{\r\n\t\t\t\t\"emissive\" : { type: \"c\", value: new THREE.Color( 0x000000 ) },\r\n\t\t\t\t\"specular\" : { type: \"c\", value: new THREE.Color( 0x111111 ) },\r\n\t\t\t\t\"shininess\": { type: \"1f\", value: 30 }\r\n\t\t\t}\r\n\r\n\t\t] ),\r\n\r\n\t\tvertexShader: THREE.ShaderChunk[ 'meshphong_vert' ],\r\n\t\tfragmentShader: THREE.ShaderChunk[ 'meshphong_frag' ]\r\n\r\n\t},\r\n\r\n\t'standard': {\r\n\r\n\t\tuniforms: THREE.UniformsUtils.merge( [\r\n\r\n\t\t\tTHREE.UniformsLib[ 'common' ],\r\n\t\t\tTHREE.UniformsLib[ 'aomap' ],\r\n\t\t\tTHREE.UniformsLib[ 'lightmap' ],\r\n\t\t\tTHREE.UniformsLib[ 'emissivemap' ],\r\n\t\t\tTHREE.UniformsLib[ 'bumpmap' ],\r\n\t\t\tTHREE.UniformsLib[ 'normalmap' ],\r\n\t\t\tTHREE.UniformsLib[ 'displacementmap' ],\r\n\t\t\tTHREE.UniformsLib[ 'roughnessmap' ],\r\n\t\t\tTHREE.UniformsLib[ 'metalnessmap' ],\r\n\t\t\tTHREE.UniformsLib[ 'fog' ],\r\n\t\t\tTHREE.UniformsLib[ 'lights' ],\r\n\r\n\t\t\t{\r\n\t\t\t\t\"emissive\" : { type: \"c\", value: new THREE.Color( 0x000000 ) },\r\n\t\t\t\t\"roughness\": { type: \"1f\", value: 0.5 },\r\n\t\t\t\t\"metalness\": { type: \"1f\", value: 0 },\r\n\t\t\t\t\"envMapIntensity\" : { type: \"1f\", value: 1 } // temporary\r\n\t\t\t}\r\n\r\n\t\t] ),\r\n\r\n\t\tvertexShader: THREE.ShaderChunk[ 'meshphysical_vert' ],\r\n\t\tfragmentShader: THREE.ShaderChunk[ 'meshphysical_frag' ]\r\n\r\n\t},\r\n\r\n\t'points': {\r\n\r\n\t\tuniforms: THREE.UniformsUtils.merge( [\r\n\r\n\t\t\tTHREE.UniformsLib[ 'points' ],\r\n\t\t\tTHREE.UniformsLib[ 'fog' ]\r\n\r\n\t\t] ),\r\n\r\n\t\tvertexShader: THREE.ShaderChunk[ 'points_vert' ],\r\n\t\tfragmentShader: THREE.ShaderChunk[ 'points_frag' ]\r\n\r\n\t},\r\n\r\n\t'dashed': {\r\n\r\n\t\tuniforms: THREE.UniformsUtils.merge( [\r\n\r\n\t\t\tTHREE.UniformsLib[ 'common' ],\r\n\t\t\tTHREE.UniformsLib[ 'fog' ],\r\n\r\n\t\t\t{\r\n\t\t\t\t\"scale\"    : { type: \"1f\", value: 1 },\r\n\t\t\t\t\"dashSize\" : { type: \"1f\", value: 1 },\r\n\t\t\t\t\"totalSize\": { type: \"1f\", value: 2 }\r\n\t\t\t}\r\n\r\n\t\t] ),\r\n\r\n\t\tvertexShader: THREE.ShaderChunk[ 'linedashed_vert' ],\r\n\t\tfragmentShader: THREE.ShaderChunk[ 'linedashed_frag' ]\r\n\r\n\t},\r\n\r\n\t'depth': {\r\n\r\n\t\tuniforms: THREE.UniformsUtils.merge( [\r\n\r\n\t\t\tTHREE.UniformsLib[ 'common' ],\r\n\t\t\tTHREE.UniformsLib[ 'displacementmap' ]\r\n\r\n\t\t] ),\r\n\r\n\t\tvertexShader: THREE.ShaderChunk[ 'depth_vert' ],\r\n\t\tfragmentShader: THREE.ShaderChunk[ 'depth_frag' ]\r\n\r\n\t},\r\n\r\n\t'normal': {\r\n\r\n\t\tuniforms: {\r\n\r\n\t\t\t\"opacity\" : { type: \"1f\", value: 1.0 }\r\n\r\n\t\t},\r\n\r\n\t\tvertexShader: THREE.ShaderChunk[ 'normal_vert' ],\r\n\t\tfragmentShader: THREE.ShaderChunk[ 'normal_frag' ]\r\n\r\n\t},\r\n\r\n\t/* -------------------------------------------------------------------------\r\n\t//\tCube map shader\r\n\t ------------------------------------------------------------------------- */\r\n\r\n\t'cube': {\r\n\r\n\t\tuniforms: {\r\n\t\t\t\"tCube\": { type: \"t\", value: null },\r\n\t\t\t\"tFlip\": { type: \"1f\", value: - 1 }\r\n\t\t},\r\n\r\n\t\tvertexShader: THREE.ShaderChunk[ 'cube_vert' ],\r\n\t\tfragmentShader: THREE.ShaderChunk[ 'cube_frag' ]\r\n\r\n\t},\r\n\r\n\t/* -------------------------------------------------------------------------\r\n\t//\tCube map shader\r\n\t ------------------------------------------------------------------------- */\r\n\r\n\t'equirect': {\r\n\r\n\t\tuniforms: {\r\n\t\t\t\"tEquirect\": { type: \"t\", value: null },\r\n\t\t\t\"tFlip\": { type: \"1f\", value: - 1 }\r\n\t\t},\r\n\r\n\t\tvertexShader: THREE.ShaderChunk[ 'equirect_vert' ],\r\n\t\tfragmentShader: THREE.ShaderChunk[ 'equirect_frag' ]\r\n\r\n\t},\r\n\r\n\t'distanceRGBA': {\r\n\r\n\t\tuniforms: {\r\n\r\n\t\t\t\"lightPos\": { type: \"v3\", value: new THREE.Vector3() }\r\n\r\n\t\t},\r\n\r\n\t\tvertexShader: THREE.ShaderChunk[ 'distanceRGBA_vert' ],\r\n\t\tfragmentShader: THREE.ShaderChunk[ 'distanceRGBA_frag' ]\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.ShaderLib[ 'physical' ] = {\r\n\r\n\tuniforms: THREE.UniformsUtils.merge( [\r\n\r\n\t\tTHREE.ShaderLib[ 'standard' ].uniforms,\r\n\r\n\t\t{\r\n\t\t\t// future\r\n\t\t}\r\n\r\n\t] ),\r\n\r\n\tvertexShader: THREE.ShaderChunk[ 'meshphysical_vert' ],\r\n\tfragmentShader: THREE.ShaderChunk[ 'meshphysical_frag' ]\r\n\r\n};\r\n\r\n\r\n// File:src/renderers/WebGLRenderer.js\r\n\r\n/**\r\n * @author supereggbert / http://www.paulbrunt.co.uk/\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author szimek / https://github.com/szimek/\r\n * @author tschw\r\n */\r\n\r\nTHREE.WebGLRenderer = function ( parameters ) {\r\n\r\n\tconsole.log( 'THREE.WebGLRenderer', THREE.REVISION );\r\n\r\n\tparameters = parameters || {};\r\n\r\n\tvar _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElement( 'canvas' ),\r\n\t_context = parameters.context !== undefined ? parameters.context : null,\r\n\r\n\t_alpha = parameters.alpha !== undefined ? parameters.alpha : false,\r\n\t_depth = parameters.depth !== undefined ? parameters.depth : true,\r\n\t_stencil = parameters.stencil !== undefined ? parameters.stencil : true,\r\n\t_antialias = parameters.antialias !== undefined ? parameters.antialias : false,\r\n\t_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,\r\n\t_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false;\r\n\r\n\tvar lights = [];\r\n\r\n\tvar opaqueObjects = [];\r\n\tvar opaqueObjectsLastIndex = - 1;\r\n\tvar transparentObjects = [];\r\n\tvar transparentObjectsLastIndex = - 1;\r\n\r\n\tvar morphInfluences = new Float32Array( 8 );\r\n\r\n\tvar sprites = [];\r\n\tvar lensFlares = [];\r\n\r\n\t// public properties\r\n\r\n\tthis.domElement = _canvas;\r\n\tthis.context = null;\r\n\r\n\t// clearing\r\n\r\n\tthis.autoClear = true;\r\n\tthis.autoClearColor = true;\r\n\tthis.autoClearDepth = true;\r\n\tthis.autoClearStencil = true;\r\n\r\n\t// scene graph\r\n\r\n\tthis.sortObjects = true;\r\n\r\n\t// user-defined clipping\r\n\r\n\tthis.clippingPlanes = [];\r\n\tthis.localClippingEnabled = false;\r\n\r\n\t// physically based shading\r\n\r\n\tthis.gammaFactor = 2.0;\t// for backwards compatibility\r\n\tthis.gammaInput = false;\r\n\tthis.gammaOutput = false;\r\n\r\n\t// physical lights\r\n\r\n\tthis.physicallyCorrectLights = false;\r\n\r\n\t// tone mapping\r\n\r\n\tthis.toneMapping = THREE.LinearToneMapping;\r\n\tthis.toneMappingExposure = 1.0;\r\n\tthis.toneMappingWhitePoint = 1.0;\r\n\r\n\t// morphs\r\n\r\n\tthis.maxMorphTargets = 8;\r\n\tthis.maxMorphNormals = 4;\r\n\r\n\t// flags\r\n\r\n\tthis.autoScaleCubemaps = true;\r\n\r\n\t// internal properties\r\n\r\n\tvar _this = this,\r\n\r\n\t// internal state cache\r\n\r\n\t_currentProgram = null,\r\n\t_currentRenderTarget = null,\r\n\t_currentFramebuffer = null,\r\n\t_currentMaterialId = - 1,\r\n\t_currentGeometryProgram = '',\r\n\t_currentCamera = null,\r\n\r\n\t_currentScissor = new THREE.Vector4(),\r\n\t_currentScissorTest = null,\r\n\r\n\t_currentViewport = new THREE.Vector4(),\r\n\r\n\t//\r\n\r\n\t_usedTextureUnits = 0,\r\n\r\n\t//\r\n\r\n\t_clearColor = new THREE.Color( 0x000000 ),\r\n\t_clearAlpha = 0,\r\n\r\n\t_width = _canvas.width,\r\n\t_height = _canvas.height,\r\n\r\n\t_pixelRatio = 1,\r\n\r\n\t_scissor = new THREE.Vector4( 0, 0, _width, _height ),\r\n\t_scissorTest = false,\r\n\r\n\t_viewport = new THREE.Vector4( 0, 0, _width, _height ),\r\n\r\n\t// frustum\r\n\r\n\t_frustum = new THREE.Frustum(),\r\n\r\n\t// clipping\r\n\r\n\t_clipping = new THREE.WebGLClipping(),\r\n\t_clippingEnabled = false,\r\n\t_localClippingEnabled = false,\r\n\r\n\t_sphere = new THREE.Sphere(),\r\n\r\n\t// camera matrices cache\r\n\r\n\t_projScreenMatrix = new THREE.Matrix4(),\r\n\r\n\t_vector3 = new THREE.Vector3(),\r\n\r\n\t// light arrays cache\r\n\r\n\t_lights = {\r\n\r\n\t\thash: '',\r\n\r\n\t\tambient: [ 0, 0, 0 ],\r\n\t\tdirectional: [],\r\n\t\tdirectionalShadowMap: [],\r\n\t\tdirectionalShadowMatrix: [],\r\n\t\tspot: [],\r\n\t\tspotShadowMap: [],\r\n\t\tspotShadowMatrix: [],\r\n\t\tpoint: [],\r\n\t\tpointShadowMap: [],\r\n\t\tpointShadowMatrix: [],\r\n\t\themi: [],\r\n\r\n\t\tshadows: []\r\n\r\n\t},\r\n\r\n\t// info\r\n\r\n\t_infoMemory = {\r\n\r\n\t\tgeometries: 0,\r\n\t\ttextures: 0\r\n\r\n\t},\r\n\r\n\t_infoRender = {\r\n\r\n\t\tcalls: 0,\r\n\t\tvertices: 0,\r\n\t\tfaces: 0,\r\n\t\tpoints: 0\r\n\r\n\t};\r\n\r\n\tthis.info = {\r\n\r\n\t\trender: _infoRender,\r\n\t\tmemory: _infoMemory,\r\n\t\tprograms: null\r\n\r\n\t};\r\n\r\n\r\n\t// initialize\r\n\r\n\tvar _gl;\r\n\r\n\ttry {\r\n\r\n\t\tvar attributes = {\r\n\t\t\talpha: _alpha,\r\n\t\t\tdepth: _depth,\r\n\t\t\tstencil: _stencil,\r\n\t\t\tantialias: _antialias,\r\n\t\t\tpremultipliedAlpha: _premultipliedAlpha,\r\n\t\t\tpreserveDrawingBuffer: _preserveDrawingBuffer\r\n\t\t};\r\n\r\n\t\t_gl = _context || _canvas.getContext( 'webgl', attributes ) || _canvas.getContext( 'experimental-webgl', attributes );\r\n\r\n\t\tif ( _gl === null ) {\r\n\r\n\t\t\tif ( _canvas.getContext( 'webgl' ) !== null ) {\r\n\r\n\t\t\t\tthrow 'Error creating WebGL context with your selected attributes.';\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthrow 'Error creating WebGL context.';\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// Some experimental-webgl implementations do not have getShaderPrecisionFormat\r\n\r\n\t\tif ( _gl.getShaderPrecisionFormat === undefined ) {\r\n\r\n\t\t\t_gl.getShaderPrecisionFormat = function () {\r\n\r\n\t\t\t\treturn { 'rangeMin': 1, 'rangeMax': 1, 'precision': 1 };\r\n\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\t_canvas.addEventListener( 'webglcontextlost', onContextLost, false );\r\n\r\n\t} catch ( error ) {\r\n\r\n\t\tconsole.error( 'THREE.WebGLRenderer: ' + error );\r\n\r\n\t}\r\n\r\n\tvar _isWebGL2 = (typeof WebGL2RenderingContext !== 'undefined' && _gl instanceof WebGL2RenderingContext);\r\n\tvar extensions = new THREE.WebGLExtensions( _gl );\r\n\r\n\textensions.get( 'WEBGL_depth_texture' );\r\n\textensions.get( 'OES_texture_float' );\r\n\textensions.get( 'OES_texture_float_linear' );\r\n\textensions.get( 'OES_texture_half_float' );\r\n\textensions.get( 'OES_texture_half_float_linear' );\r\n\textensions.get( 'OES_standard_derivatives' );\r\n\textensions.get( 'ANGLE_instanced_arrays' );\r\n\r\n\tif ( extensions.get( 'OES_element_index_uint' ) ) {\r\n\r\n\t\tTHREE.BufferGeometry.MaxIndex = 4294967296;\r\n\r\n\t}\r\n\r\n\tvar capabilities = new THREE.WebGLCapabilities( _gl, extensions, parameters );\r\n\r\n\tvar state = new THREE.WebGLState( _gl, extensions, paramThreeToGL );\r\n\tvar properties = new THREE.WebGLProperties();\r\n\tvar objects = new THREE.WebGLObjects( _gl, properties, this.info );\r\n\tvar programCache = new THREE.WebGLPrograms( this, capabilities );\r\n\tvar lightCache = new THREE.WebGLLights();\r\n\r\n\tthis.info.programs = programCache.programs;\r\n\r\n\tvar bufferRenderer = new THREE.WebGLBufferRenderer( _gl, extensions, _infoRender );\r\n\tvar indexedBufferRenderer = new THREE.WebGLIndexedBufferRenderer( _gl, extensions, _infoRender );\r\n\r\n\t//\r\n\r\n\tfunction getTargetPixelRatio() {\r\n\r\n\t\treturn _currentRenderTarget === null ? _pixelRatio : 1;\r\n\r\n\t}\r\n\r\n\tfunction glClearColor( r, g, b, a ) {\r\n\r\n\t\tif ( _premultipliedAlpha === true ) {\r\n\r\n\t\t\tr *= a; g *= a; b *= a;\r\n\r\n\t\t}\r\n\r\n\t\tstate.clearColor( r, g, b, a );\r\n\r\n\t}\r\n\r\n\tfunction setDefaultGLState() {\r\n\r\n\t\tstate.init();\r\n\r\n\t\tstate.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ) );\r\n\t\tstate.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ) );\r\n\r\n\t\tglClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\r\n\r\n\t}\r\n\r\n\tfunction resetGLState() {\r\n\r\n\t\t_currentProgram = null;\r\n\t\t_currentCamera = null;\r\n\r\n\t\t_currentGeometryProgram = '';\r\n\t\t_currentMaterialId = - 1;\r\n\r\n\t\tstate.reset();\r\n\r\n\t}\r\n\r\n\tsetDefaultGLState();\r\n\r\n\tthis.context = _gl;\r\n\tthis.capabilities = capabilities;\r\n\tthis.extensions = extensions;\r\n\tthis.properties = properties;\r\n\tthis.state = state;\r\n\r\n\t// shadow map\r\n\r\n\tvar shadowMap = new THREE.WebGLShadowMap( this, _lights, objects );\r\n\r\n\tthis.shadowMap = shadowMap;\r\n\r\n\r\n\t// Plugins\r\n\r\n\tvar spritePlugin = new THREE.SpritePlugin( this, sprites );\r\n\tvar lensFlarePlugin = new THREE.LensFlarePlugin( this, lensFlares );\r\n\r\n\t// API\r\n\r\n\tthis.getContext = function () {\r\n\r\n\t\treturn _gl;\r\n\r\n\t};\r\n\r\n\tthis.getContextAttributes = function () {\r\n\r\n\t\treturn _gl.getContextAttributes();\r\n\r\n\t};\r\n\r\n\tthis.forceContextLoss = function () {\r\n\r\n\t\textensions.get( 'WEBGL_lose_context' ).loseContext();\r\n\r\n\t};\r\n\r\n\tthis.getMaxAnisotropy = ( function () {\r\n\r\n\t\tvar value;\r\n\r\n\t\treturn function getMaxAnisotropy() {\r\n\r\n\t\t\tif ( value !== undefined ) return value;\r\n\r\n\t\t\tvar extension = extensions.get( 'EXT_texture_filter_anisotropic' );\r\n\r\n\t\t\tif ( extension !== null ) {\r\n\r\n\t\t\t\tvalue = _gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tvalue = 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn value;\r\n\r\n\t\t};\r\n\r\n\t} )();\r\n\r\n\tthis.getPrecision = function () {\r\n\r\n\t\treturn capabilities.precision;\r\n\r\n\t};\r\n\r\n\tthis.getPixelRatio = function () {\r\n\r\n\t\treturn _pixelRatio;\r\n\r\n\t};\r\n\r\n\tthis.setPixelRatio = function ( value ) {\r\n\r\n\t\tif ( value === undefined ) return;\r\n\r\n\t\t_pixelRatio = value;\r\n\r\n\t\tthis.setSize( _viewport.z, _viewport.w, false );\r\n\r\n\t};\r\n\r\n\tthis.getSize = function () {\r\n\r\n\t\treturn {\r\n\t\t\twidth: _width,\r\n\t\t\theight: _height\r\n\t\t};\r\n\r\n\t};\r\n\r\n\tthis.setSize = function ( width, height, updateStyle ) {\r\n\r\n\t\t_width = width;\r\n\t\t_height = height;\r\n\r\n\t\t_canvas.width = width * _pixelRatio;\r\n\t\t_canvas.height = height * _pixelRatio;\r\n\r\n\t\tif ( updateStyle !== false ) {\r\n\r\n\t\t\t_canvas.style.width = width + 'px';\r\n\t\t\t_canvas.style.height = height + 'px';\r\n\r\n\t\t}\r\n\r\n\t\tthis.setViewport( 0, 0, width, height );\r\n\r\n\t};\r\n\r\n\tthis.setViewport = function ( x, y, width, height ) {\r\n\r\n\t\tstate.viewport( _viewport.set( x, y, width, height ) );\r\n\r\n\t};\r\n\r\n\tthis.setScissor = function ( x, y, width, height ) {\r\n\r\n\t\tstate.scissor( _scissor.set( x, y, width, height ) );\r\n\r\n\t};\r\n\r\n\tthis.setScissorTest = function ( boolean ) {\r\n\r\n\t\tstate.setScissorTest( _scissorTest = boolean );\r\n\r\n\t};\r\n\r\n\t// Clearing\r\n\r\n\tthis.getClearColor = function () {\r\n\r\n\t\treturn _clearColor;\r\n\r\n\t};\r\n\r\n\tthis.setClearColor = function ( color, alpha ) {\r\n\r\n\t\t_clearColor.set( color );\r\n\r\n\t\t_clearAlpha = alpha !== undefined ? alpha : 1;\r\n\r\n\t\tglClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\r\n\r\n\t};\r\n\r\n\tthis.getClearAlpha = function () {\r\n\r\n\t\treturn _clearAlpha;\r\n\r\n\t};\r\n\r\n\tthis.setClearAlpha = function ( alpha ) {\r\n\r\n\t\t_clearAlpha = alpha;\r\n\r\n\t\tglClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );\r\n\r\n\t};\r\n\r\n\tthis.clear = function ( color, depth, stencil ) {\r\n\r\n\t\tvar bits = 0;\r\n\r\n\t\tif ( color === undefined || color ) bits |= _gl.COLOR_BUFFER_BIT;\r\n\t\tif ( depth === undefined || depth ) bits |= _gl.DEPTH_BUFFER_BIT;\r\n\t\tif ( stencil === undefined || stencil ) bits |= _gl.STENCIL_BUFFER_BIT;\r\n\r\n\t\t_gl.clear( bits );\r\n\r\n\t};\r\n\r\n\tthis.clearColor = function () {\r\n\r\n\t\tthis.clear( true, false, false );\r\n\r\n\t};\r\n\r\n\tthis.clearDepth = function () {\r\n\r\n\t\tthis.clear( false, true, false );\r\n\r\n\t};\r\n\r\n\tthis.clearStencil = function () {\r\n\r\n\t\tthis.clear( false, false, true );\r\n\r\n\t};\r\n\r\n\tthis.clearTarget = function ( renderTarget, color, depth, stencil ) {\r\n\r\n\t\tthis.setRenderTarget( renderTarget );\r\n\t\tthis.clear( color, depth, stencil );\r\n\r\n\t};\r\n\r\n\t// Reset\r\n\r\n\tthis.resetGLState = resetGLState;\r\n\r\n\tthis.dispose = function() {\r\n\r\n\t\t_canvas.removeEventListener( 'webglcontextlost', onContextLost, false );\r\n\r\n\t};\r\n\r\n\t// Events\r\n\r\n\tfunction onContextLost( event ) {\r\n\r\n\t\tevent.preventDefault();\r\n\r\n\t\tresetGLState();\r\n\t\tsetDefaultGLState();\r\n\r\n\t\tproperties.clear();\r\n\r\n\t}\r\n\r\n\tfunction onTextureDispose( event ) {\r\n\r\n\t\tvar texture = event.target;\r\n\r\n\t\ttexture.removeEventListener( 'dispose', onTextureDispose );\r\n\r\n\t\tdeallocateTexture( texture );\r\n\r\n\t\t_infoMemory.textures --;\r\n\r\n\r\n\t}\r\n\r\n\tfunction onRenderTargetDispose( event ) {\r\n\r\n\t\tvar renderTarget = event.target;\r\n\r\n\t\trenderTarget.removeEventListener( 'dispose', onRenderTargetDispose );\r\n\r\n\t\tdeallocateRenderTarget( renderTarget );\r\n\r\n\t\t_infoMemory.textures --;\r\n\r\n\t}\r\n\r\n\tfunction onMaterialDispose( event ) {\r\n\r\n\t\tvar material = event.target;\r\n\r\n\t\tmaterial.removeEventListener( 'dispose', onMaterialDispose );\r\n\r\n\t\tdeallocateMaterial( material );\r\n\r\n\t}\r\n\r\n\t// Buffer deallocation\r\n\r\n\tfunction deallocateTexture( texture ) {\r\n\r\n\t\tvar textureProperties = properties.get( texture );\r\n\r\n\t\tif ( texture.image && textureProperties.__image__webglTextureCube ) {\r\n\r\n\t\t\t// cube texture\r\n\r\n\t\t\t_gl.deleteTexture( textureProperties.__image__webglTextureCube );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// 2D texture\r\n\r\n\t\t\tif ( textureProperties.__webglInit === undefined ) return;\r\n\r\n\t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\r\n\r\n\t\t}\r\n\r\n\t\t// remove all webgl properties\r\n\t\tproperties.delete( texture );\r\n\r\n\t}\r\n\r\n\tfunction deallocateRenderTarget( renderTarget ) {\r\n\r\n\t\tvar renderTargetProperties = properties.get( renderTarget );\r\n\t\tvar textureProperties = properties.get( renderTarget.texture );\r\n\r\n\t\tif ( ! renderTarget ) return;\r\n\r\n\t\tif ( textureProperties.__webglTexture !== undefined ) {\r\n\r\n\t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\r\n\r\n\t\t}\r\n\r\n\t\tif ( renderTarget.depthTexture ) {\r\n\r\n\t\t\trenderTarget.depthTexture.dispose();\r\n\r\n\t\t}\r\n\r\n\t\tif ( renderTarget instanceof THREE.WebGLRenderTargetCube ) {\r\n\r\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );\r\n\t\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );\r\n\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer );\r\n\r\n\t\t}\r\n\r\n\t\tproperties.delete( renderTarget.texture );\r\n\t\tproperties.delete( renderTarget );\r\n\r\n\t}\r\n\r\n\tfunction deallocateMaterial( material ) {\r\n\r\n\t\treleaseMaterialProgramReference( material );\r\n\r\n\t\tproperties.delete( material );\r\n\r\n\t}\r\n\r\n\r\n\tfunction releaseMaterialProgramReference( material ) {\r\n\r\n\t\tvar programInfo = properties.get( material ).program;\r\n\r\n\t\tmaterial.program = undefined;\r\n\r\n\t\tif ( programInfo !== undefined ) {\r\n\r\n\t\t\tprogramCache.releaseProgram( programInfo );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// Buffer rendering\r\n\r\n\tthis.renderBufferImmediate = function ( object, program, material ) {\r\n\r\n\t\tstate.initAttributes();\r\n\r\n\t\tvar buffers = properties.get( object );\r\n\r\n\t\tif ( object.hasPositions && ! buffers.position ) buffers.position = _gl.createBuffer();\r\n\t\tif ( object.hasNormals && ! buffers.normal ) buffers.normal = _gl.createBuffer();\r\n\t\tif ( object.hasUvs && ! buffers.uv ) buffers.uv = _gl.createBuffer();\r\n\t\tif ( object.hasColors && ! buffers.color ) buffers.color = _gl.createBuffer();\r\n\r\n\t\tvar attributes = program.getAttributes();\r\n\r\n\t\tif ( object.hasPositions ) {\r\n\r\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.position );\r\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.positionArray, _gl.DYNAMIC_DRAW );\r\n\r\n\t\t\tstate.enableAttribute( attributes.position );\r\n\t\t\t_gl.vertexAttribPointer( attributes.position, 3, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t}\r\n\r\n\t\tif ( object.hasNormals ) {\r\n\r\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.normal );\r\n\r\n\t\t\tif ( material.type !== 'MeshPhongMaterial' && material.type !== 'MeshStandardMaterial' && material.type !== 'MeshPhysicalMaterial' && material.shading === THREE.FlatShading ) {\r\n\r\n\t\t\t\tfor ( var i = 0, l = object.count * 3; i < l; i += 9 ) {\r\n\r\n\t\t\t\t\tvar array = object.normalArray;\r\n\r\n\t\t\t\t\tvar nx = ( array[ i + 0 ] + array[ i + 3 ] + array[ i + 6 ] ) / 3;\r\n\t\t\t\t\tvar ny = ( array[ i + 1 ] + array[ i + 4 ] + array[ i + 7 ] ) / 3;\r\n\t\t\t\t\tvar nz = ( array[ i + 2 ] + array[ i + 5 ] + array[ i + 8 ] ) / 3;\r\n\r\n\t\t\t\t\tarray[ i + 0 ] = nx;\r\n\t\t\t\t\tarray[ i + 1 ] = ny;\r\n\t\t\t\t\tarray[ i + 2 ] = nz;\r\n\r\n\t\t\t\t\tarray[ i + 3 ] = nx;\r\n\t\t\t\t\tarray[ i + 4 ] = ny;\r\n\t\t\t\t\tarray[ i + 5 ] = nz;\r\n\r\n\t\t\t\t\tarray[ i + 6 ] = nx;\r\n\t\t\t\t\tarray[ i + 7 ] = ny;\r\n\t\t\t\t\tarray[ i + 8 ] = nz;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.normalArray, _gl.DYNAMIC_DRAW );\r\n\r\n\t\t\tstate.enableAttribute( attributes.normal );\r\n\r\n\t\t\t_gl.vertexAttribPointer( attributes.normal, 3, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t}\r\n\r\n\t\tif ( object.hasUvs && material.map ) {\r\n\r\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.uv );\r\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.uvArray, _gl.DYNAMIC_DRAW );\r\n\r\n\t\t\tstate.enableAttribute( attributes.uv );\r\n\r\n\t\t\t_gl.vertexAttribPointer( attributes.uv, 2, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t}\r\n\r\n\t\tif ( object.hasColors && material.vertexColors !== THREE.NoColors ) {\r\n\r\n\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.color );\r\n\t\t\t_gl.bufferData( _gl.ARRAY_BUFFER, object.colorArray, _gl.DYNAMIC_DRAW );\r\n\r\n\t\t\tstate.enableAttribute( attributes.color );\r\n\r\n\t\t\t_gl.vertexAttribPointer( attributes.color, 3, _gl.FLOAT, false, 0, 0 );\r\n\r\n\t\t}\r\n\r\n\t\tstate.disableUnusedAttributes();\r\n\r\n\t\t_gl.drawArrays( _gl.TRIANGLES, 0, object.count );\r\n\r\n\t\tobject.count = 0;\r\n\r\n\t};\r\n\r\n\tthis.renderBufferDirect = function ( camera, fog, geometry, material, object, group ) {\r\n\r\n\t\tsetMaterial( material );\r\n\r\n\t\tvar program = setProgram( camera, fog, material, object );\r\n\r\n\t\tvar updateBuffers = false;\r\n\t\tvar geometryProgram = geometry.id + '_' + program.id + '_' + material.wireframe;\r\n\r\n\t\tif ( geometryProgram !== _currentGeometryProgram ) {\r\n\r\n\t\t\t_currentGeometryProgram = geometryProgram;\r\n\t\t\tupdateBuffers = true;\r\n\r\n\t\t}\r\n\r\n\t\t// morph targets\r\n\r\n\t\tvar morphTargetInfluences = object.morphTargetInfluences;\r\n\r\n\t\tif ( morphTargetInfluences !== undefined ) {\r\n\r\n\t\t\tvar activeInfluences = [];\r\n\r\n\t\t\tfor ( var i = 0, l = morphTargetInfluences.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar influence = morphTargetInfluences[ i ];\r\n\t\t\t\tactiveInfluences.push( [ influence, i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tactiveInfluences.sort( absNumericalSort );\r\n\r\n\t\t\tif ( activeInfluences.length > 8 ) {\r\n\r\n\t\t\t\tactiveInfluences.length = 8;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar morphAttributes = geometry.morphAttributes;\r\n\r\n\t\t\tfor ( var i = 0, l = activeInfluences.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar influence = activeInfluences[ i ];\r\n\t\t\t\tmorphInfluences[ i ] = influence[ 0 ];\r\n\r\n\t\t\t\tif ( influence[ 0 ] !== 0 ) {\r\n\r\n\t\t\t\t\tvar index = influence[ 1 ];\r\n\r\n\t\t\t\t\tif ( material.morphTargets === true && morphAttributes.position ) geometry.addAttribute( 'morphTarget' + i, morphAttributes.position[ index ] );\r\n\t\t\t\t\tif ( material.morphNormals === true && morphAttributes.normal ) geometry.addAttribute( 'morphNormal' + i, morphAttributes.normal[ index ] );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tif ( material.morphTargets === true ) geometry.removeAttribute( 'morphTarget' + i );\r\n\t\t\t\t\tif ( material.morphNormals === true ) geometry.removeAttribute( 'morphNormal' + i );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tprogram.getUniforms().setValue(\r\n\t\t\t\t\t_gl, 'morphTargetInfluences', morphInfluences );\r\n\r\n\t\t\tupdateBuffers = true;\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tvar index = geometry.index;\r\n\t\tvar position = geometry.attributes.position;\r\n\r\n\t\tif ( material.wireframe === true ) {\r\n\r\n\t\t\tindex = objects.getWireframeAttribute( geometry );\r\n\r\n\t\t}\r\n\r\n\t\tvar renderer;\r\n\r\n\t\tif ( index !== null ) {\r\n\r\n\t\t\trenderer = indexedBufferRenderer;\r\n\t\t\trenderer.setIndex( index );\r\n\r\n\t\t} else {\r\n\r\n\t\t\trenderer = bufferRenderer;\r\n\r\n\t\t}\r\n\r\n\t\tif ( updateBuffers ) {\r\n\r\n\t\t\tsetupVertexAttributes( material, program, geometry );\r\n\r\n\t\t\tif ( index !== null ) {\r\n\r\n\t\t\t\t_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, objects.getAttributeBuffer( index ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tvar dataStart = 0;\r\n\t\tvar dataCount = Infinity;\r\n\r\n\t\tif ( index !== null ) {\r\n\r\n\t\t\tdataCount = index.count;\r\n\r\n\t\t} else if ( position !== undefined ) {\r\n\r\n\t\t\tdataCount = position.count;\r\n\r\n\t\t}\r\n\r\n\t\tvar rangeStart = geometry.drawRange.start;\r\n\t\tvar rangeCount = geometry.drawRange.count;\r\n\r\n\t\tvar groupStart = group !== null ? group.start : 0;\r\n\t\tvar groupCount = group !== null ? group.count : Infinity;\r\n\r\n\t\tvar drawStart = Math.max( dataStart, rangeStart, groupStart );\r\n\t\tvar drawEnd = Math.min( dataStart + dataCount, rangeStart + rangeCount, groupStart + groupCount ) - 1;\r\n\r\n\t\tvar drawCount = Math.max( 0, drawEnd - drawStart + 1 );\r\n\r\n\t\t//\r\n\r\n\t\tif ( object instanceof THREE.Mesh ) {\r\n\r\n\t\t\tif ( material.wireframe === true ) {\r\n\r\n\t\t\t\tstate.setLineWidth( material.wireframeLinewidth * getTargetPixelRatio() );\r\n\t\t\t\trenderer.setMode( _gl.LINES );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tswitch ( object.drawMode ) {\r\n\r\n\t\t\t\t\tcase THREE.TrianglesDrawMode:\r\n\t\t\t\t\t\trenderer.setMode( _gl.TRIANGLES );\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase THREE.TriangleStripDrawMode:\r\n\t\t\t\t\t\trenderer.setMode( _gl.TRIANGLE_STRIP );\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase THREE.TriangleFanDrawMode:\r\n\t\t\t\t\t\trenderer.setMode( _gl.TRIANGLE_FAN );\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t} else if ( object instanceof THREE.Line ) {\r\n\r\n\t\t\tvar lineWidth = material.linewidth;\r\n\r\n\t\t\tif ( lineWidth === undefined ) lineWidth = 1; // Not using Line*Material\r\n\r\n\t\t\tstate.setLineWidth( lineWidth * getTargetPixelRatio() );\r\n\r\n\t\t\tif ( object instanceof THREE.LineSegments ) {\r\n\r\n\t\t\t\trenderer.setMode( _gl.LINES );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\trenderer.setMode( _gl.LINE_STRIP );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( object instanceof THREE.Points ) {\r\n\r\n\t\t\trenderer.setMode( _gl.POINTS );\r\n\r\n\t\t}\r\n\r\n\t\tif ( geometry instanceof THREE.InstancedBufferGeometry ) {\r\n\r\n\t\t\tif ( geometry.maxInstancedCount > 0 ) {\r\n\r\n\t\t\t\trenderer.renderInstances( geometry, drawStart, drawCount );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\trenderer.render( drawStart, drawCount );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction setupVertexAttributes( material, program, geometry, startIndex ) {\r\n\r\n\t\tvar extension;\r\n\r\n\t\tif ( geometry instanceof THREE.InstancedBufferGeometry ) {\r\n\r\n\t\t\textension = extensions.get( 'ANGLE_instanced_arrays' );\r\n\r\n\t\t\tif ( extension === null ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( startIndex === undefined ) startIndex = 0;\r\n\r\n\t\tstate.initAttributes();\r\n\r\n\t\tvar geometryAttributes = geometry.attributes;\r\n\r\n\t\tvar programAttributes = program.getAttributes();\r\n\r\n\t\tvar materialDefaultAttributeValues = material.defaultAttributeValues;\r\n\r\n\t\tfor ( var name in programAttributes ) {\r\n\r\n\t\t\tvar programAttribute = programAttributes[ name ];\r\n\r\n\t\t\tif ( programAttribute >= 0 ) {\r\n\r\n\t\t\t\tvar geometryAttribute = geometryAttributes[ name ];\r\n\r\n\t\t\t\tif ( geometryAttribute !== undefined ) {\r\n\r\n\t\t\t\t\tvar type = _gl.FLOAT;\r\n\t\t\t\t\tvar array = geometryAttribute.array;\r\n\t\t\t\t\tvar normalized = geometryAttribute.normalized;\r\n\r\n\t\t\t\t\tif ( array instanceof Float32Array ) {\r\n\r\n\t\t\t\t\t\ttype = _gl.FLOAT;\r\n\r\n\t\t\t\t\t} else if ( array instanceof Float64Array ) {\r\n\r\n\t\t\t\t\t\tconsole.warn(\"Unsupported data buffer format: Float64Array\");\r\n\r\n\t\t\t\t\t} else if ( array instanceof Uint16Array ) {\r\n\r\n\t\t\t\t\t\ttype = _gl.UNSIGNED_SHORT;\r\n\r\n\t\t\t\t\t} else if ( array instanceof Int16Array ) {\r\n\r\n\t\t\t\t\t\ttype = _gl.SHORT;\r\n\r\n\t\t\t\t\t} else if ( array instanceof Uint32Array ) {\r\n\r\n\t\t\t\t\t\ttype = _gl.UNSIGNED_INT;\r\n\r\n\t\t\t\t\t} else if ( array instanceof Int32Array ) {\r\n\r\n\t\t\t\t\t\ttype = _gl.INT;\r\n\r\n\t\t\t\t\t} else if ( array instanceof Int8Array ) {\r\n\r\n\t\t\t\t\t\ttype = _gl.BYTE;\r\n\r\n\t\t\t\t\t} else if ( array instanceof Uint8Array ) {\r\n\r\n\t\t\t\t\t\ttype = _gl.UNSIGNED_BYTE;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tvar size = geometryAttribute.itemSize;\r\n\t\t\t\t\tvar buffer = objects.getAttributeBuffer( geometryAttribute );\r\n\r\n\t\t\t\t\tif ( geometryAttribute instanceof THREE.InterleavedBufferAttribute ) {\r\n\r\n\t\t\t\t\t\tvar data = geometryAttribute.data;\r\n\t\t\t\t\t\tvar stride = data.stride;\r\n\t\t\t\t\t\tvar offset = geometryAttribute.offset;\r\n\r\n\t\t\t\t\t\tif ( data instanceof THREE.InstancedInterleavedBuffer ) {\r\n\r\n\t\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute, data.meshPerAttribute, extension );\r\n\r\n\t\t\t\t\t\t\tif ( geometry.maxInstancedCount === undefined ) {\r\n\r\n\t\t\t\t\t\t\t\tgeometry.maxInstancedCount = data.meshPerAttribute * data.count;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tstate.enableAttribute( programAttribute );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );\r\n\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute, size, type, normalized, stride * data.array.BYTES_PER_ELEMENT, ( startIndex * stride + offset ) * data.array.BYTES_PER_ELEMENT );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tif ( geometryAttribute instanceof THREE.InstancedBufferAttribute ) {\r\n\r\n\t\t\t\t\t\t\tstate.enableAttributeAndDivisor( programAttribute, geometryAttribute.meshPerAttribute, extension );\r\n\r\n\t\t\t\t\t\t\tif ( geometry.maxInstancedCount === undefined ) {\r\n\r\n\t\t\t\t\t\t\t\tgeometry.maxInstancedCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tstate.enableAttribute( programAttribute );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );\r\n\t\t\t\t\t\t_gl.vertexAttribPointer( programAttribute, size, type, normalized, 0, startIndex * size * geometryAttribute.array.BYTES_PER_ELEMENT );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if ( materialDefaultAttributeValues !== undefined ) {\r\n\r\n\t\t\t\t\tvar value = materialDefaultAttributeValues[ name ];\r\n\r\n\t\t\t\t\tif ( value !== undefined ) {\r\n\r\n\t\t\t\t\t\tswitch ( value.length ) {\r\n\r\n\t\t\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\t\t\t_gl.vertexAttrib2fv( programAttribute, value );\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\tcase 3:\r\n\t\t\t\t\t\t\t\t_gl.vertexAttrib3fv( programAttribute, value );\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\tcase 4:\r\n\t\t\t\t\t\t\t\t_gl.vertexAttrib4fv( programAttribute, value );\r\n\t\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\t_gl.vertexAttrib1fv( programAttribute, value );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tstate.disableUnusedAttributes();\r\n\r\n\t}\r\n\r\n\t// Sorting\r\n\r\n\tfunction absNumericalSort( a, b ) {\r\n\r\n\t\treturn Math.abs( b[ 0 ] ) - Math.abs( a[ 0 ] );\r\n\r\n\t}\r\n\r\n\tfunction painterSortStable ( a, b ) {\r\n\r\n\t\tif ( a.object.renderOrder !== b.object.renderOrder ) {\r\n\r\n\t\t\treturn a.object.renderOrder - b.object.renderOrder;\r\n\r\n\t\t} else if ( a.material.id !== b.material.id ) {\r\n\r\n\t\t\treturn a.material.id - b.material.id;\r\n\r\n\t\t} else if ( a.z !== b.z ) {\r\n\r\n\t\t\treturn a.z - b.z;\r\n\r\n\t\t} else {\r\n\r\n\t\t\treturn a.id - b.id;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction reversePainterSortStable ( a, b ) {\r\n\r\n\t\tif ( a.object.renderOrder !== b.object.renderOrder ) {\r\n\r\n\t\t\treturn a.object.renderOrder - b.object.renderOrder;\r\n\r\n\t\t} if ( a.z !== b.z ) {\r\n\r\n\t\t\treturn b.z - a.z;\r\n\r\n\t\t} else {\r\n\r\n\t\t\treturn a.id - b.id;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// Rendering\r\n\r\n\tthis.render = function ( scene, camera, renderTarget, forceClear ) {\r\n\r\n\t\tif ( camera instanceof THREE.Camera === false ) {\r\n\r\n\t\t\tconsole.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tvar fog = scene.fog;\r\n\r\n\t\t// reset caching for this frame\r\n\r\n\t\t_currentGeometryProgram = '';\r\n\t\t_currentMaterialId = - 1;\r\n\t\t_currentCamera = null;\r\n\r\n\t\t// update scene graph\r\n\r\n\t\tif ( scene.autoUpdate === true ) scene.updateMatrixWorld();\r\n\r\n\t\t// update camera matrices and frustum\r\n\r\n\t\tif ( camera.parent === null ) camera.updateMatrixWorld();\r\n\r\n\t\tcamera.matrixWorldInverse.getInverse( camera.matrixWorld );\r\n\r\n\t\t_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\r\n\t\t_frustum.setFromMatrix( _projScreenMatrix );\r\n\r\n\t\tlights.length = 0;\r\n\r\n\t\topaqueObjectsLastIndex = - 1;\r\n\t\ttransparentObjectsLastIndex = - 1;\r\n\r\n\t\tsprites.length = 0;\r\n\t\tlensFlares.length = 0;\r\n\r\n\t\t_localClippingEnabled = this.localClippingEnabled;\r\n\t\t_clippingEnabled = _clipping.init(\r\n\t\t\t\tthis.clippingPlanes, _localClippingEnabled, camera );\r\n\r\n\t\tprojectObject( scene, camera );\r\n\r\n\r\n\t\topaqueObjects.length = opaqueObjectsLastIndex + 1;\r\n\t\ttransparentObjects.length = transparentObjectsLastIndex + 1;\r\n\r\n\t\tif ( _this.sortObjects === true ) {\r\n\r\n\t\t\topaqueObjects.sort( painterSortStable );\r\n\t\t\ttransparentObjects.sort( reversePainterSortStable );\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tif ( _clippingEnabled ) _clipping.beginShadows();\r\n\r\n\t\tsetupShadows( lights );\r\n\r\n\t\tshadowMap.render( scene, camera );\r\n\r\n\t\tsetupLights( lights, camera );\r\n\r\n\t\tif ( _clippingEnabled ) _clipping.endShadows();\r\n\r\n\t\t//\r\n\r\n\t\t_infoRender.calls = 0;\r\n\t\t_infoRender.vertices = 0;\r\n\t\t_infoRender.faces = 0;\r\n\t\t_infoRender.points = 0;\r\n\r\n\t\tif ( renderTarget === undefined ) {\r\n\r\n\t\t\trenderTarget = null;\r\n\r\n\t\t}\r\n\r\n\t\tthis.setRenderTarget( renderTarget );\r\n\r\n\t\tif ( this.autoClear || forceClear ) {\r\n\r\n\t\t\tthis.clear( this.autoClearColor, this.autoClearDepth, this.autoClearStencil );\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tif ( scene.overrideMaterial ) {\r\n\r\n\t\t\tvar overrideMaterial = scene.overrideMaterial;\r\n\r\n\t\t\trenderObjects( opaqueObjects, camera, fog, overrideMaterial );\r\n\t\t\trenderObjects( transparentObjects, camera, fog, overrideMaterial );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// opaque pass (front-to-back order)\r\n\r\n\t\t\tstate.setBlending( THREE.NoBlending );\r\n\t\t\trenderObjects( opaqueObjects, camera, fog );\r\n\r\n\t\t\t// transparent pass (back-to-front order)\r\n\r\n\t\t\trenderObjects( transparentObjects, camera, fog );\r\n\r\n\t\t}\r\n\r\n\t\t// custom render plugins (post pass)\r\n\r\n\t\tspritePlugin.render( scene, camera );\r\n\t\tlensFlarePlugin.render( scene, camera, _currentViewport );\r\n\r\n\t\t// Generate mipmap if we're using any kind of mipmap filtering\r\n\r\n\t\tif ( renderTarget ) {\r\n\r\n\t\t\tvar texture = renderTarget.texture;\r\n\r\n\t\t\tif ( texture.generateMipmaps && isPowerOfTwo( renderTarget ) &&\r\n\t\t\t\t\ttexture.minFilter !== THREE.NearestFilter &&\r\n\t\t\t\t\ttexture.minFilter !== THREE.LinearFilter ) {\r\n\r\n\t\t\t\tupdateRenderTargetMipmap( renderTarget );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// Ensure depth buffer writing is enabled so it can be cleared on next render\r\n\r\n\t\tstate.setDepthTest( true );\r\n\t\tstate.setDepthWrite( true );\r\n\t\tstate.setColorWrite( true );\r\n\r\n\t\t// _gl.finish();\r\n\r\n\t};\r\n\r\n\tfunction pushRenderItem( object, geometry, material, z, group ) {\r\n\r\n\t\tvar array, index;\r\n\r\n\t\t// allocate the next position in the appropriate array\r\n\r\n\t\tif ( material.transparent ) {\r\n\r\n\t\t\tarray = transparentObjects;\r\n\t\t\tindex = ++ transparentObjectsLastIndex;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tarray = opaqueObjects;\r\n\t\t\tindex = ++ opaqueObjectsLastIndex;\r\n\r\n\t\t}\r\n\r\n\t\t// recycle existing render item or grow the array\r\n\r\n\t\tvar renderItem = array[ index ];\r\n\r\n\t\tif ( renderItem !== undefined ) {\r\n\r\n\t\t\trenderItem.id = object.id;\r\n\t\t\trenderItem.object = object;\r\n\t\t\trenderItem.geometry = geometry;\r\n\t\t\trenderItem.material = material;\r\n\t\t\trenderItem.z = _vector3.z;\r\n\t\t\trenderItem.group = group;\r\n\r\n\t\t} else {\r\n\r\n\t\t\trenderItem = {\r\n\t\t\t\tid: object.id,\r\n\t\t\t\tobject: object,\r\n\t\t\t\tgeometry: geometry,\r\n\t\t\t\tmaterial: material,\r\n\t\t\t\tz: _vector3.z,\r\n\t\t\t\tgroup: group\r\n\t\t\t};\r\n\r\n\t\t\t// assert( index === array.length );\r\n\t\t\tarray.push( renderItem );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// TODO Duplicated code (Frustum)\r\n\r\n\tfunction isObjectViewable( object ) {\r\n\r\n\t\tvar geometry = object.geometry;\r\n\r\n\t\tif ( geometry.boundingSphere === null )\r\n\t\t\tgeometry.computeBoundingSphere();\r\n\r\n\t\t_sphere.copy( geometry.boundingSphere ).\r\n\t\t\tapplyMatrix4( object.matrixWorld );\r\n\r\n\t\treturn isSphereViewable( _sphere );\r\n\r\n\t}\r\n\r\n\tfunction isSpriteViewable( sprite ) {\r\n\r\n\t\t_sphere.center.set( 0, 0, 0 );\r\n\t\t_sphere.radius = 0.7071067811865476;\r\n\t\t_sphere.applyMatrix4( sprite.matrixWorld );\r\n\r\n\t\treturn isSphereViewable( _sphere );\r\n\r\n\t}\r\n\r\n\tfunction isSphereViewable( sphere ) {\r\n\r\n\t\tif ( ! _frustum.intersectsSphere( sphere ) ) return false;\r\n\r\n\t\tvar numPlanes = _clipping.numPlanes;\r\n\r\n\t\tif ( numPlanes === 0 ) return true;\r\n\r\n\t\tvar planes = _this.clippingPlanes,\r\n\r\n\t\t\tcenter = sphere.center,\r\n\t\t\tnegRad = - sphere.radius,\r\n\t\t\ti = 0;\r\n\r\n\t\tdo {\r\n\r\n\t\t\t// out when deeper than radius in the negative halfspace\r\n\t\t\tif ( planes[ i ].distanceToPoint( center ) < negRad ) return false;\r\n\r\n\t\t} while ( ++ i !== numPlanes );\r\n\r\n\t\treturn true;\r\n\r\n\t}\r\n\r\n\tfunction projectObject( object, camera ) {\r\n\r\n\t\tif ( object.visible === false ) return;\r\n\r\n\t\tif ( object.layers.test( camera.layers ) ) {\r\n\r\n\t\t\tif ( object instanceof THREE.Light ) {\r\n\r\n\t\t\t\tlights.push( object );\r\n\r\n\t\t\t} else if ( object instanceof THREE.Sprite ) {\r\n\r\n\t\t\t\tif ( object.frustumCulled === false || isSpriteViewable( object ) === true ) {\r\n\r\n\t\t\t\t\tsprites.push( object );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( object instanceof THREE.LensFlare ) {\r\n\r\n\t\t\t\tlensFlares.push( object );\r\n\r\n\t\t\t} else if ( object instanceof THREE.ImmediateRenderObject ) {\r\n\r\n\t\t\t\tif ( _this.sortObjects === true ) {\r\n\r\n\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld );\r\n\t\t\t\t\t_vector3.applyProjection( _projScreenMatrix );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tpushRenderItem( object, null, object.material, _vector3.z, null );\r\n\r\n\t\t\t} else if ( object instanceof THREE.Mesh || object instanceof THREE.Line || object instanceof THREE.Points ) {\r\n\r\n\t\t\t\tif ( object instanceof THREE.SkinnedMesh ) {\r\n\r\n\t\t\t\t\tobject.skeleton.update();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( object.frustumCulled === false || isObjectViewable( object ) === true ) {\r\n\r\n\t\t\t\t\tvar material = object.material;\r\n\r\n\t\t\t\t\tif ( material.visible === true ) {\r\n\r\n\t\t\t\t\t\tif ( _this.sortObjects === true ) {\r\n\r\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld );\r\n\t\t\t\t\t\t\t_vector3.applyProjection( _projScreenMatrix );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tvar geometry = objects.update( object );\r\n\r\n\t\t\t\t\t\tif ( material instanceof THREE.MultiMaterial ) {\r\n\r\n\t\t\t\t\t\t\tvar groups = geometry.groups;\r\n\t\t\t\t\t\t\tvar materials = material.materials;\r\n\r\n\t\t\t\t\t\t\tfor ( var i = 0, l = groups.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\t\t\t\tvar group = groups[ i ];\r\n\t\t\t\t\t\t\t\tvar groupMaterial = materials[ group.materialIndex ];\r\n\r\n\t\t\t\t\t\t\t\tif ( groupMaterial.visible === true ) {\r\n\r\n\t\t\t\t\t\t\t\t\tpushRenderItem( object, geometry, groupMaterial, _vector3.z, group );\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tpushRenderItem( object, geometry, material, _vector3.z, null );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tvar children = object.children;\r\n\r\n\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\r\n\r\n\t\t\tprojectObject( children[ i ], camera );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction renderObjects( renderList, camera, fog, overrideMaterial ) {\r\n\r\n\t\tfor ( var i = 0, l = renderList.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar renderItem = renderList[ i ];\r\n\r\n\t\t\tvar object = renderItem.object;\r\n\t\t\tvar geometry = renderItem.geometry;\r\n\t\t\tvar material = overrideMaterial === undefined ? renderItem.material : overrideMaterial;\r\n\t\t\tvar group = renderItem.group;\r\n\r\n\t\t\tobject.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );\r\n\t\t\tobject.normalMatrix.getNormalMatrix( object.modelViewMatrix );\r\n\r\n\t\t\tif ( object instanceof THREE.ImmediateRenderObject ) {\r\n\r\n\t\t\t\tsetMaterial( material );\r\n\r\n\t\t\t\tvar program = setProgram( camera, fog, material, object );\r\n\r\n\t\t\t\t_currentGeometryProgram = '';\r\n\r\n\t\t\t\tobject.render( function ( object ) {\r\n\r\n\t\t\t\t\t_this.renderBufferImmediate( object, program, material );\r\n\r\n\t\t\t\t} );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t_this.renderBufferDirect( camera, fog, geometry, material, object, group );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction initMaterial( material, fog, object ) {\r\n\r\n\t\tvar materialProperties = properties.get( material );\r\n\r\n\t\tvar parameters = programCache.getParameters(\r\n\t\t\t\tmaterial, _lights, fog, _clipping.numPlanes, object );\r\n\r\n\t\tvar code = programCache.getProgramCode( material, parameters );\r\n\r\n\t\tvar program = materialProperties.program;\r\n\t\tvar programChange = true;\r\n\r\n\t\tif ( program === undefined ) {\r\n\r\n\t\t\t// new material\r\n\t\t\tmaterial.addEventListener( 'dispose', onMaterialDispose );\r\n\r\n\t\t} else if ( program.code !== code ) {\r\n\r\n\t\t\t// changed glsl or parameters\r\n\t\t\treleaseMaterialProgramReference( material );\r\n\r\n\t\t} else if ( parameters.shaderID !== undefined ) {\r\n\r\n\t\t\t// same glsl and uniform list\r\n\t\t\treturn;\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// only rebuild uniform list\r\n\t\t\tprogramChange = false;\r\n\r\n\t\t}\r\n\r\n\t\tif ( programChange ) {\r\n\r\n\t\t\tif ( parameters.shaderID ) {\r\n\r\n\t\t\t\tvar shader = THREE.ShaderLib[ parameters.shaderID ];\r\n\r\n\t\t\t\tmaterialProperties.__webglShader = {\r\n\t\t\t\t\tname: material.type,\r\n\t\t\t\t\tuniforms: THREE.UniformsUtils.clone( shader.uniforms ),\r\n\t\t\t\t\tvertexShader: shader.vertexShader,\r\n\t\t\t\t\tfragmentShader: shader.fragmentShader\r\n\t\t\t\t};\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tmaterialProperties.__webglShader = {\r\n\t\t\t\t\tname: material.type,\r\n\t\t\t\t\tuniforms: material.uniforms,\r\n\t\t\t\t\tvertexShader: material.vertexShader,\r\n\t\t\t\t\tfragmentShader: material.fragmentShader\r\n\t\t\t\t};\r\n\r\n\t\t\t}\r\n\r\n\t\t\tmaterial.__webglShader = materialProperties.__webglShader;\r\n\r\n\t\t\tprogram = programCache.acquireProgram( material, parameters, code );\r\n\r\n\t\t\tmaterialProperties.program = program;\r\n\t\t\tmaterial.program = program;\r\n\r\n\t\t}\r\n\r\n\t\tvar attributes = program.getAttributes();\r\n\r\n\t\tif ( material.morphTargets ) {\r\n\r\n\t\t\tmaterial.numSupportedMorphTargets = 0;\r\n\r\n\t\t\tfor ( var i = 0; i < _this.maxMorphTargets; i ++ ) {\r\n\r\n\t\t\t\tif ( attributes[ 'morphTarget' + i ] >= 0 ) {\r\n\r\n\t\t\t\t\tmaterial.numSupportedMorphTargets ++;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.morphNormals ) {\r\n\r\n\t\t\tmaterial.numSupportedMorphNormals = 0;\r\n\r\n\t\t\tfor ( var i = 0; i < _this.maxMorphNormals; i ++ ) {\r\n\r\n\t\t\t\tif ( attributes[ 'morphNormal' + i ] >= 0 ) {\r\n\r\n\t\t\t\t\tmaterial.numSupportedMorphNormals ++;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tvar uniforms = materialProperties.__webglShader.uniforms;\r\n\r\n\t\tif ( ! ( material instanceof THREE.ShaderMaterial ) &&\r\n\t\t\t\t! ( material instanceof THREE.RawShaderMaterial ) ||\r\n\t\t\t\tmaterial.clipping === true ) {\r\n\r\n\t\t\tmaterialProperties.numClippingPlanes = _clipping.numPlanes;\r\n\t\t\tuniforms.clippingPlanes = _clipping.uniform;\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.lights ) {\r\n\r\n\t\t\t// store the light setup it was created for\r\n\r\n\t\t\tmaterialProperties.lightsHash = _lights.hash;\r\n\r\n\t\t\t// wire up the material to this renderer's lighting state\r\n\r\n\t\t\tuniforms.ambientLightColor.value = _lights.ambient;\r\n\t\t\tuniforms.directionalLights.value = _lights.directional;\r\n\t\t\tuniforms.spotLights.value = _lights.spot;\r\n\t\t\tuniforms.pointLights.value = _lights.point;\r\n\t\t\tuniforms.hemisphereLights.value = _lights.hemi;\r\n\r\n\t\t\tuniforms.directionalShadowMap.value = _lights.directionalShadowMap;\r\n\t\t\tuniforms.directionalShadowMatrix.value = _lights.directionalShadowMatrix;\r\n\t\t\tuniforms.spotShadowMap.value = _lights.spotShadowMap;\r\n\t\t\tuniforms.spotShadowMatrix.value = _lights.spotShadowMatrix;\r\n\t\t\tuniforms.pointShadowMap.value = _lights.pointShadowMap;\r\n\t\t\tuniforms.pointShadowMatrix.value = _lights.pointShadowMatrix;\r\n\r\n\t\t}\r\n\r\n\t\tvar progUniforms = materialProperties.program.getUniforms(),\r\n\t\t\tuniformsList =\r\n\t\t\t\t\tTHREE.WebGLUniforms.seqWithValue( progUniforms.seq, uniforms );\r\n\r\n\t\tmaterialProperties.uniformsList = uniformsList;\r\n\t\tmaterialProperties.dynamicUniforms =\r\n\t\t\t\tTHREE.WebGLUniforms.splitDynamic( uniformsList, uniforms );\r\n\r\n\t}\r\n\r\n\tfunction setMaterial( material ) {\r\n\r\n\t\tif ( material.side !== THREE.DoubleSide )\r\n\t\t\tstate.enable( _gl.CULL_FACE );\r\n\t\telse\r\n\t\t\tstate.disable( _gl.CULL_FACE );\r\n\r\n\t\tstate.setFlipSided( material.side === THREE.BackSide );\r\n\r\n\t\tif ( material.transparent === true ) {\r\n\r\n\t\t\tstate.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tstate.setBlending( THREE.NoBlending );\r\n\r\n\t\t}\r\n\r\n\t\tstate.setDepthFunc( material.depthFunc );\r\n\t\tstate.setDepthTest( material.depthTest );\r\n\t\tstate.setDepthWrite( material.depthWrite );\r\n\t\tstate.setColorWrite( material.colorWrite );\r\n\t\tstate.setPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );\r\n\r\n\t}\r\n\r\n\tfunction setProgram( camera, fog, material, object ) {\r\n\r\n\t\t_usedTextureUnits = 0;\r\n\r\n\t\tvar materialProperties = properties.get( material );\r\n\r\n\t\tif ( _clippingEnabled ) {\r\n\r\n\t\t\tif ( _localClippingEnabled || camera !== _currentCamera ) {\r\n\r\n\t\t\t\tvar useCache =\r\n\t\t\t\t\t\tcamera === _currentCamera &&\r\n\t\t\t\t\t\tmaterial.id === _currentMaterialId;\r\n\r\n\t\t\t\t// we might want to call this function with some ClippingGroup\r\n\t\t\t\t// object instead of the material, once it becomes feasible\r\n\t\t\t\t// (#8465, #8379)\r\n\t\t\t\t_clipping.setState(\r\n\t\t\t\t\t\tmaterial.clippingPlanes, material.clipShadows,\r\n\t\t\t\t\t\tcamera, materialProperties, useCache );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( materialProperties.numClippingPlanes !== undefined &&\r\n\t\t\t\tmaterialProperties.numClippingPlanes !== _clipping.numPlanes ) {\r\n\r\n\t\t\t\tmaterial.needsUpdate = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( materialProperties.program === undefined ) {\r\n\r\n\t\t\tmaterial.needsUpdate = true;\r\n\r\n\t\t}\r\n\r\n\t\tif ( materialProperties.lightsHash !== undefined &&\r\n\t\t\tmaterialProperties.lightsHash !== _lights.hash ) {\r\n\r\n\t\t\tmaterial.needsUpdate = true;\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.needsUpdate ) {\r\n\r\n\t\t\tinitMaterial( material, fog, object );\r\n\t\t\tmaterial.needsUpdate = false;\r\n\r\n\t\t}\r\n\r\n\t\tvar refreshProgram = false;\r\n\t\tvar refreshMaterial = false;\r\n\t\tvar refreshLights = false;\r\n\r\n\t\tvar program = materialProperties.program,\r\n\t\t\tp_uniforms = program.getUniforms(),\r\n\t\t\tm_uniforms = materialProperties.__webglShader.uniforms;\r\n\r\n\t\tif ( program.id !== _currentProgram ) {\r\n\r\n\t\t\t_gl.useProgram( program.program );\r\n\t\t\t_currentProgram = program.id;\r\n\r\n\t\t\trefreshProgram = true;\r\n\t\t\trefreshMaterial = true;\r\n\t\t\trefreshLights = true;\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.id !== _currentMaterialId ) {\r\n\r\n\t\t\t_currentMaterialId = material.id;\r\n\r\n\t\t\trefreshMaterial = true;\r\n\r\n\t\t}\r\n\r\n\t\tif ( refreshProgram || camera !== _currentCamera ) {\r\n\r\n\t\t\tp_uniforms.set( _gl, camera, 'projectionMatrix' );\r\n\r\n\t\t\tif ( capabilities.logarithmicDepthBuffer ) {\r\n\r\n\t\t\t\tp_uniforms.setValue( _gl, 'logDepthBufFC',\r\n\t\t\t\t\t\t2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\tif ( camera !== _currentCamera ) {\r\n\r\n\t\t\t\t_currentCamera = camera;\r\n\r\n\t\t\t\t// lighting uniforms depend on the camera so enforce an update\r\n\t\t\t\t// now, in case this material supports lights - or later, when\r\n\t\t\t\t// the next material that does gets activated:\r\n\r\n\t\t\t\trefreshMaterial = true;\t\t// set to true on material change\r\n\t\t\t\trefreshLights = true;\t\t// remains set until update done\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// load material specific uniforms\r\n\t\t\t// (shader material also gets them for the sake of genericity)\r\n\r\n\t\t\tif ( material instanceof THREE.ShaderMaterial ||\r\n\t\t\t\t material instanceof THREE.MeshPhongMaterial ||\r\n\t\t\t\t material instanceof THREE.MeshStandardMaterial ||\r\n\t\t\t\t material.envMap ) {\r\n\r\n\t\t\t\tvar uCamPos = p_uniforms.map.cameraPosition;\r\n\r\n\t\t\t\tif ( uCamPos !== undefined ) {\r\n\r\n\t\t\t\t\tuCamPos.setValue( _gl,\r\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition( camera.matrixWorld ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material instanceof THREE.MeshPhongMaterial ||\r\n\t\t\t\t material instanceof THREE.MeshLambertMaterial ||\r\n\t\t\t\t material instanceof THREE.MeshBasicMaterial ||\r\n\t\t\t\t material instanceof THREE.MeshStandardMaterial ||\r\n\t\t\t\t material instanceof THREE.ShaderMaterial ||\r\n\t\t\t\t material.skinning ) {\r\n\r\n\t\t\t\tp_uniforms.setValue( _gl, 'viewMatrix', camera.matrixWorldInverse );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tp_uniforms.set( _gl, _this, 'toneMappingExposure' );\r\n\t\t\tp_uniforms.set( _gl, _this, 'toneMappingWhitePoint' );\r\n\r\n\t\t}\r\n\r\n\t\t// skinning uniforms must be set even if material didn't change\r\n\t\t// auto-setting of texture unit for bone texture must go before other textures\r\n\t\t// not sure why, but otherwise weird things happen\r\n\r\n\t\tif ( material.skinning ) {\r\n\r\n\t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrix' );\r\n\t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrixInverse' );\r\n\r\n\t\t\tvar skeleton = object.skeleton;\r\n\r\n\t\t\tif ( skeleton ) {\r\n\r\n\t\t\t\tif ( capabilities.floatVertexTextures && skeleton.useVertexTexture ) {\r\n\r\n\t\t\t\t\tp_uniforms.set( _gl, skeleton, 'boneTexture' );\r\n\t\t\t\t\tp_uniforms.set( _gl, skeleton, 'boneTextureWidth' );\r\n\t\t\t\t\tp_uniforms.set( _gl, skeleton, 'boneTextureHeight' );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tp_uniforms.setOptional( _gl, skeleton, 'boneMatrices' );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( refreshMaterial ) {\r\n\r\n\t\t\tif ( material.lights ) {\r\n\r\n\t\t\t\t// the current material requires lighting info\r\n\r\n\t\t\t\t// note: all lighting uniforms are always set correctly\r\n\t\t\t\t// they simply reference the renderer's state for their\r\n\t\t\t\t// values\r\n\t\t\t\t//\r\n\t\t\t\t// use the current material's .needsUpdate flags to set\r\n\t\t\t\t// the GL state when required\r\n\r\n\t\t\t\tmarkUniformsLightsNeedsUpdate( m_uniforms, refreshLights );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// refresh uniforms common to several materials\r\n\r\n\t\t\tif ( fog && material.fog ) {\r\n\r\n\t\t\t\trefreshUniformsFog( m_uniforms, fog );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material instanceof THREE.MeshBasicMaterial ||\r\n\t\t\t\t material instanceof THREE.MeshLambertMaterial ||\r\n\t\t\t\t material instanceof THREE.MeshPhongMaterial ||\r\n\t\t\t\t material instanceof THREE.MeshStandardMaterial ||\r\n\t\t\t\t material instanceof THREE.MeshDepthMaterial ) {\r\n\r\n\t\t\t\trefreshUniformsCommon( m_uniforms, material );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// refresh single material specific uniforms\r\n\r\n\t\t\tif ( material instanceof THREE.LineBasicMaterial ) {\r\n\r\n\t\t\t\trefreshUniformsLine( m_uniforms, material );\r\n\r\n\t\t\t} else if ( material instanceof THREE.LineDashedMaterial ) {\r\n\r\n\t\t\t\trefreshUniformsLine( m_uniforms, material );\r\n\t\t\t\trefreshUniformsDash( m_uniforms, material );\r\n\r\n\t\t\t} else if ( material instanceof THREE.PointsMaterial ) {\r\n\r\n\t\t\t\trefreshUniformsPoints( m_uniforms, material );\r\n\r\n\t\t\t} else if ( material instanceof THREE.MeshLambertMaterial ) {\r\n\r\n\t\t\t\trefreshUniformsLambert( m_uniforms, material );\r\n\r\n\t\t\t} else if ( material instanceof THREE.MeshPhongMaterial ) {\r\n\r\n\t\t\t\trefreshUniformsPhong( m_uniforms, material );\r\n\r\n\t\t\t} else if ( material instanceof THREE.MeshPhysicalMaterial ) {\r\n\r\n\t\t\t\trefreshUniformsPhysical( m_uniforms, material );\r\n\r\n\t\t\t} else if ( material instanceof THREE.MeshStandardMaterial ) {\r\n\r\n\t\t\t\trefreshUniformsStandard( m_uniforms, material );\r\n\r\n\t\t\t} else if ( material instanceof THREE.MeshDepthMaterial ) {\r\n\r\n\t\t\t\tif ( material.displacementMap ) {\r\n\r\n\t\t\t\t\tm_uniforms.displacementMap.value = material.displacementMap;\r\n\t\t\t\t\tm_uniforms.displacementScale.value = material.displacementScale;\r\n\t\t\t\t\tm_uniforms.displacementBias.value = material.displacementBias;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( material instanceof THREE.MeshNormalMaterial ) {\r\n\r\n\t\t\t\tm_uniforms.opacity.value = material.opacity;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tTHREE.WebGLUniforms.upload(\r\n\t\t\t\t\t_gl, materialProperties.uniformsList, m_uniforms, _this );\r\n\r\n\t\t}\r\n\r\n\r\n\t\t// common matrices\r\n\r\n\t\tp_uniforms.set( _gl, object, 'modelViewMatrix' );\r\n\t\tp_uniforms.set( _gl, object, 'normalMatrix' );\r\n\t\tp_uniforms.setValue( _gl, 'modelMatrix', object.matrixWorld );\r\n\r\n\r\n\t\t// dynamic uniforms\r\n\r\n\t\tvar dynUniforms = materialProperties.dynamicUniforms;\r\n\r\n\t\tif ( dynUniforms !== null ) {\r\n\r\n\t\t\tTHREE.WebGLUniforms.evalDynamic(\r\n\t\t\t\t\tdynUniforms, m_uniforms, object, camera );\r\n\r\n\t\t\tTHREE.WebGLUniforms.upload( _gl, dynUniforms, m_uniforms, _this );\r\n\r\n\t\t}\r\n\r\n\t\treturn program;\r\n\r\n\t}\r\n\r\n\t// Uniforms (refresh uniforms objects)\r\n\r\n\tfunction refreshUniformsCommon ( uniforms, material ) {\r\n\r\n\t\tuniforms.opacity.value = material.opacity;\r\n\r\n\t\tuniforms.diffuse.value = material.color;\r\n\r\n\t\tif ( material.emissive ) {\r\n\r\n\t\t\tuniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );\r\n\r\n\t\t}\r\n\r\n\t\tuniforms.map.value = material.map;\r\n\t\tuniforms.specularMap.value = material.specularMap;\r\n\t\tuniforms.alphaMap.value = material.alphaMap;\r\n\r\n\t\tif ( material.aoMap ) {\r\n\r\n\t\t\tuniforms.aoMap.value = material.aoMap;\r\n\t\t\tuniforms.aoMapIntensity.value = material.aoMapIntensity;\r\n\r\n\t\t}\r\n\r\n\t\t// uv repeat and offset setting priorities\r\n\t\t// 1. color map\r\n\t\t// 2. specular map\r\n\t\t// 3. normal map\r\n\t\t// 4. bump map\r\n\t\t// 5. alpha map\r\n\t\t// 6. emissive map\r\n\r\n\t\tvar uvScaleMap;\r\n\r\n\t\tif ( material.map ) {\r\n\r\n\t\t\tuvScaleMap = material.map;\r\n\r\n\t\t} else if ( material.specularMap ) {\r\n\r\n\t\t\tuvScaleMap = material.specularMap;\r\n\r\n\t\t} else if ( material.displacementMap ) {\r\n\r\n\t\t\tuvScaleMap = material.displacementMap;\r\n\r\n\t\t} else if ( material.normalMap ) {\r\n\r\n\t\t\tuvScaleMap = material.normalMap;\r\n\r\n\t\t} else if ( material.bumpMap ) {\r\n\r\n\t\t\tuvScaleMap = material.bumpMap;\r\n\r\n\t\t} else if ( material.roughnessMap ) {\r\n\r\n\t\t\tuvScaleMap = material.roughnessMap;\r\n\r\n\t\t} else if ( material.metalnessMap ) {\r\n\r\n\t\t\tuvScaleMap = material.metalnessMap;\r\n\r\n\t\t} else if ( material.alphaMap ) {\r\n\r\n\t\t\tuvScaleMap = material.alphaMap;\r\n\r\n\t\t} else if ( material.emissiveMap ) {\r\n\r\n\t\t\tuvScaleMap = material.emissiveMap;\r\n\r\n\t\t}\r\n\r\n\t\tif ( uvScaleMap !== undefined ) {\r\n\r\n\t\t\t// backwards compatibility\r\n\t\t\tif ( uvScaleMap instanceof THREE.WebGLRenderTarget ) {\r\n\r\n\t\t\t\tuvScaleMap = uvScaleMap.texture;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar offset = uvScaleMap.offset;\r\n\t\t\tvar repeat = uvScaleMap.repeat;\r\n\r\n\t\t\tuniforms.offsetRepeat.value.set( offset.x, offset.y, repeat.x, repeat.y );\r\n\r\n\t\t}\r\n\r\n\t\tuniforms.envMap.value = material.envMap;\r\n\r\n\t\t// don't flip CubeTexture envMaps, flip everything else:\r\n\t\t//  WebGLRenderTargetCube will be flipped for backwards compatibility\r\n\t\t//  WebGLRenderTargetCube.texture will be flipped because it's a Texture and NOT a CubeTexture\r\n\t\t// this check must be handled differently, or removed entirely, if WebGLRenderTargetCube uses a CubeTexture in the future\r\n\t\tuniforms.flipEnvMap.value = ( ! ( material.envMap instanceof THREE.CubeTexture ) ) ? 1 : - 1;\r\n\r\n\t\tuniforms.reflectivity.value = material.reflectivity;\r\n\t\tuniforms.refractionRatio.value = material.refractionRatio;\r\n\r\n\t}\r\n\r\n\tfunction refreshUniformsLine ( uniforms, material ) {\r\n\r\n\t\tuniforms.diffuse.value = material.color;\r\n\t\tuniforms.opacity.value = material.opacity;\r\n\r\n\t}\r\n\r\n\tfunction refreshUniformsDash ( uniforms, material ) {\r\n\r\n\t\tuniforms.dashSize.value = material.dashSize;\r\n\t\tuniforms.totalSize.value = material.dashSize + material.gapSize;\r\n\t\tuniforms.scale.value = material.scale;\r\n\r\n\t}\r\n\r\n\tfunction refreshUniformsPoints ( uniforms, material ) {\r\n\r\n\t\tuniforms.diffuse.value = material.color;\r\n\t\tuniforms.opacity.value = material.opacity;\r\n\t\tuniforms.size.value = material.size * _pixelRatio;\r\n\t\tuniforms.scale.value = _canvas.clientHeight * 0.5;\r\n\r\n\t\tuniforms.map.value = material.map;\r\n\r\n\t\tif ( material.map !== null ) {\r\n\r\n\t\t\tvar offset = material.map.offset;\r\n\t\t\tvar repeat = material.map.repeat;\r\n\r\n\t\t\tuniforms.offsetRepeat.value.set( offset.x, offset.y, repeat.x, repeat.y );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction refreshUniformsFog ( uniforms, fog ) {\r\n\r\n\t\tuniforms.fogColor.value = fog.color;\r\n\r\n\t\tif ( fog instanceof THREE.Fog ) {\r\n\r\n\t\t\tuniforms.fogNear.value = fog.near;\r\n\t\t\tuniforms.fogFar.value = fog.far;\r\n\r\n\t\t} else if ( fog instanceof THREE.FogExp2 ) {\r\n\r\n\t\t\tuniforms.fogDensity.value = fog.density;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction refreshUniformsLambert ( uniforms, material ) {\r\n\r\n\t\tif ( material.lightMap ) {\r\n\r\n\t\t\tuniforms.lightMap.value = material.lightMap;\r\n\t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.emissiveMap ) {\r\n\r\n\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction refreshUniformsPhong ( uniforms, material ) {\r\n\r\n\t\tuniforms.specular.value = material.specular;\r\n\t\tuniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )\r\n\r\n\t\tif ( material.lightMap ) {\r\n\r\n\t\t\tuniforms.lightMap.value = material.lightMap;\r\n\t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.emissiveMap ) {\r\n\r\n\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.bumpMap ) {\r\n\r\n\t\t\tuniforms.bumpMap.value = material.bumpMap;\r\n\t\t\tuniforms.bumpScale.value = material.bumpScale;\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.normalMap ) {\r\n\r\n\t\t\tuniforms.normalMap.value = material.normalMap;\r\n\t\t\tuniforms.normalScale.value.copy( material.normalScale );\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.displacementMap ) {\r\n\r\n\t\t\tuniforms.displacementMap.value = material.displacementMap;\r\n\t\t\tuniforms.displacementScale.value = material.displacementScale;\r\n\t\t\tuniforms.displacementBias.value = material.displacementBias;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction refreshUniformsStandard ( uniforms, material ) {\r\n\r\n\t\tuniforms.roughness.value = material.roughness;\r\n\t\tuniforms.metalness.value = material.metalness;\r\n\r\n\t\tif ( material.roughnessMap ) {\r\n\r\n\t\t\tuniforms.roughnessMap.value = material.roughnessMap;\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.metalnessMap ) {\r\n\r\n\t\t\tuniforms.metalnessMap.value = material.metalnessMap;\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.lightMap ) {\r\n\r\n\t\t\tuniforms.lightMap.value = material.lightMap;\r\n\t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.emissiveMap ) {\r\n\r\n\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.bumpMap ) {\r\n\r\n\t\t\tuniforms.bumpMap.value = material.bumpMap;\r\n\t\t\tuniforms.bumpScale.value = material.bumpScale;\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.normalMap ) {\r\n\r\n\t\t\tuniforms.normalMap.value = material.normalMap;\r\n\t\t\tuniforms.normalScale.value.copy( material.normalScale );\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.displacementMap ) {\r\n\r\n\t\t\tuniforms.displacementMap.value = material.displacementMap;\r\n\t\t\tuniforms.displacementScale.value = material.displacementScale;\r\n\t\t\tuniforms.displacementBias.value = material.displacementBias;\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.envMap ) {\r\n\r\n\t\t\t//uniforms.envMap.value = material.envMap; // part of uniforms common\r\n\t\t\tuniforms.envMapIntensity.value = material.envMapIntensity;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction refreshUniformsPhysical ( uniforms, material ) {\r\n\r\n\t\trefreshUniformsStandard( uniforms, material );\r\n\r\n\t}\r\n\r\n\t// If uniforms are marked as clean, they don't need to be loaded to the GPU.\r\n\r\n\tfunction markUniformsLightsNeedsUpdate ( uniforms, value ) {\r\n\r\n\t\tuniforms.ambientLightColor.needsUpdate = value;\r\n\r\n\t\tuniforms.directionalLights.needsUpdate = value;\r\n\t\tuniforms.pointLights.needsUpdate = value;\r\n\t\tuniforms.spotLights.needsUpdate = value;\r\n\t\tuniforms.hemisphereLights.needsUpdate = value;\r\n\r\n\t}\r\n\r\n\t// Lighting\r\n\r\n\tfunction setupShadows ( lights ) {\r\n\r\n\t\tvar lightShadowsLength = 0;\r\n\r\n\t\tfor ( var i = 0, l = lights.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar light = lights[ i ];\r\n\r\n\t\t\tif ( light.castShadow ) {\r\n\r\n\t\t\t\t_lights.shadows[ lightShadowsLength ++ ] = light;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t_lights.shadows.length = lightShadowsLength;\r\n\r\n\t}\r\n\r\n\tfunction setupLights ( lights, camera ) {\r\n\r\n\t\tvar l, ll, light,\r\n\t\tr = 0, g = 0, b = 0,\r\n\t\tcolor,\r\n\t\tintensity,\r\n\t\tdistance,\r\n\t\tshadowMap,\r\n\r\n\t\tviewMatrix = camera.matrixWorldInverse,\r\n\r\n\t\tdirectionalLength = 0,\r\n\t\tpointLength = 0,\r\n\t\tspotLength = 0,\r\n\t\themiLength = 0;\r\n\r\n\t\tfor ( l = 0, ll = lights.length; l < ll; l ++ ) {\r\n\r\n\t\t\tlight = lights[ l ];\r\n\r\n\t\t\tcolor = light.color;\r\n\t\t\tintensity = light.intensity;\r\n\t\t\tdistance = light.distance;\r\n\r\n\t\t\tshadowMap = ( light.shadow && light.shadow.map ) ? light.shadow.map.texture : null;\r\n\r\n\t\t\tif ( light instanceof THREE.AmbientLight ) {\r\n\r\n\t\t\t\tr += color.r * intensity;\r\n\t\t\t\tg += color.g * intensity;\r\n\t\t\t\tb += color.b * intensity;\r\n\r\n\t\t\t} else if ( light instanceof THREE.DirectionalLight ) {\r\n\r\n\t\t\t\tvar uniforms = lightCache.get( light );\r\n\r\n\t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity );\r\n\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\r\n\t\t\t\t_vector3.setFromMatrixPosition( light.target.matrixWorld );\r\n\t\t\t\tuniforms.direction.sub( _vector3 );\r\n\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\r\n\r\n\t\t\t\tuniforms.shadow = light.castShadow;\r\n\r\n\t\t\t\tif ( light.castShadow ) {\r\n\r\n\t\t\t\t\tuniforms.shadowBias = light.shadow.bias;\r\n\t\t\t\t\tuniforms.shadowRadius = light.shadow.radius;\r\n\t\t\t\t\tuniforms.shadowMapSize = light.shadow.mapSize;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t_lights.directionalShadowMap[ directionalLength ] = shadowMap;\r\n\t\t\t\t_lights.directionalShadowMatrix[ directionalLength ] = light.shadow.matrix;\r\n\t\t\t\t_lights.directional[ directionalLength ++ ] = uniforms;\r\n\r\n\t\t\t} else if ( light instanceof THREE.SpotLight ) {\r\n\r\n\t\t\t\tvar uniforms = lightCache.get( light );\r\n\r\n\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\r\n\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\r\n\r\n\t\t\t\tuniforms.color.copy( color ).multiplyScalar( intensity );\r\n\t\t\t\tuniforms.distance = distance;\r\n\r\n\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\r\n\t\t\t\t_vector3.setFromMatrixPosition( light.target.matrixWorld );\r\n\t\t\t\tuniforms.direction.sub( _vector3 );\r\n\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\r\n\r\n\t\t\t\tuniforms.coneCos = Math.cos( light.angle );\r\n\t\t\t\tuniforms.penumbraCos = Math.cos( light.angle * ( 1 - light.penumbra ) );\r\n\t\t\t\tuniforms.decay = ( light.distance === 0 ) ? 0.0 : light.decay;\r\n\r\n\t\t\t\tuniforms.shadow = light.castShadow;\r\n\r\n\t\t\t\tif ( light.castShadow ) {\r\n\r\n\t\t\t\t\tuniforms.shadowBias = light.shadow.bias;\r\n\t\t\t\t\tuniforms.shadowRadius = light.shadow.radius;\r\n\t\t\t\t\tuniforms.shadowMapSize = light.shadow.mapSize;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t_lights.spotShadowMap[ spotLength ] = shadowMap;\r\n\t\t\t\t_lights.spotShadowMatrix[ spotLength ] = light.shadow.matrix;\r\n\t\t\t\t_lights.spot[ spotLength ++ ] = uniforms;\r\n\r\n\t\t\t} else if ( light instanceof THREE.PointLight ) {\r\n\r\n\t\t\t\tvar uniforms = lightCache.get( light );\r\n\r\n\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\r\n\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\r\n\r\n\t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity );\r\n\t\t\t\tuniforms.distance = light.distance;\r\n\t\t\t\tuniforms.decay = ( light.distance === 0 ) ? 0.0 : light.decay;\r\n\r\n\t\t\t\tuniforms.shadow = light.castShadow;\r\n\r\n\t\t\t\tif ( light.castShadow ) {\r\n\r\n\t\t\t\t\tuniforms.shadowBias = light.shadow.bias;\r\n\t\t\t\t\tuniforms.shadowRadius = light.shadow.radius;\r\n\t\t\t\t\tuniforms.shadowMapSize = light.shadow.mapSize;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t_lights.pointShadowMap[ pointLength ] = shadowMap;\r\n\r\n\t\t\t\tif ( _lights.pointShadowMatrix[ pointLength ] === undefined ) {\r\n\r\n\t\t\t\t\t_lights.pointShadowMatrix[ pointLength ] = new THREE.Matrix4();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// for point lights we set the shadow matrix to be a translation-only matrix\r\n\t\t\t\t// equal to inverse of the light's position\r\n\t\t\t\t_vector3.setFromMatrixPosition( light.matrixWorld ).negate();\r\n\t\t\t\t_lights.pointShadowMatrix[ pointLength ].identity().setPosition( _vector3 );\r\n\r\n\t\t\t\t_lights.point[ pointLength ++ ] = uniforms;\r\n\r\n\t\t\t} else if ( light instanceof THREE.HemisphereLight ) {\r\n\r\n\t\t\t\tvar uniforms = lightCache.get( light );\r\n\r\n\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\r\n\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\r\n\t\t\t\tuniforms.direction.normalize();\r\n\r\n\t\t\t\tuniforms.skyColor.copy( light.color ).multiplyScalar( intensity );\r\n\t\t\t\tuniforms.groundColor.copy( light.groundColor ).multiplyScalar( intensity );\r\n\r\n\t\t\t\t_lights.hemi[ hemiLength ++ ] = uniforms;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t_lights.ambient[ 0 ] = r;\r\n\t\t_lights.ambient[ 1 ] = g;\r\n\t\t_lights.ambient[ 2 ] = b;\r\n\r\n\t\t_lights.directional.length = directionalLength;\r\n\t\t_lights.spot.length = spotLength;\r\n\t\t_lights.point.length = pointLength;\r\n\t\t_lights.hemi.length = hemiLength;\r\n\r\n\t\t_lights.hash = directionalLength + ',' + pointLength + ',' + spotLength + ',' + hemiLength + ',' + _lights.shadows.length;\r\n\r\n\t}\r\n\r\n\t// GL state setting\r\n\r\n\tthis.setFaceCulling = function ( cullFace, frontFaceDirection ) {\r\n\r\n\t\tstate.setCullFace( cullFace );\r\n\t\tstate.setFlipSided( frontFaceDirection === THREE.FrontFaceDirectionCW );\r\n\r\n\t};\r\n\r\n\t// Textures\r\n\r\n\tfunction allocTextureUnit() {\r\n\r\n\t\tvar textureUnit = _usedTextureUnits;\r\n\r\n\t\tif ( textureUnit >= capabilities.maxTextures ) {\r\n\r\n\t\t\tconsole.warn( 'WebGLRenderer: trying to use ' + textureUnit + ' texture units while this GPU supports only ' + capabilities.maxTextures );\r\n\r\n\t\t}\r\n\r\n\t\t_usedTextureUnits += 1;\r\n\r\n\t\treturn textureUnit;\r\n\r\n\t}\r\n\r\n\tfunction setTextureParameters ( textureType, texture, isPowerOfTwoImage ) {\r\n\r\n\t\tvar extension;\r\n\r\n\t\tif ( isPowerOfTwoImage ) {\r\n\r\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, paramThreeToGL( texture.wrapS ) );\r\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, paramThreeToGL( texture.wrapT ) );\r\n\r\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, paramThreeToGL( texture.magFilter ) );\r\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, paramThreeToGL( texture.minFilter ) );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE );\r\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE );\r\n\r\n\t\t\tif ( texture.wrapS !== THREE.ClampToEdgeWrapping || texture.wrapT !== THREE.ClampToEdgeWrapping ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.', texture );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, filterFallback( texture.magFilter ) );\r\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, filterFallback( texture.minFilter ) );\r\n\r\n\t\t\tif ( texture.minFilter !== THREE.NearestFilter && texture.minFilter !== THREE.LinearFilter ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.', texture );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\textension = extensions.get( 'EXT_texture_filter_anisotropic' );\r\n\r\n\t\tif ( extension ) {\r\n\r\n\t\t\tif ( texture.type === THREE.FloatType && extensions.get( 'OES_texture_float_linear' ) === null ) return;\r\n\t\t\tif ( texture.type === THREE.HalfFloatType && extensions.get( 'OES_texture_half_float_linear' ) === null ) return;\r\n\r\n\t\t\tif ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {\r\n\r\n\t\t\t\t_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, _this.getMaxAnisotropy() ) );\r\n\t\t\t\tproperties.get( texture ).__currentAnisotropy = texture.anisotropy;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction uploadTexture( textureProperties, texture, slot ) {\r\n\r\n\t\tif ( textureProperties.__webglInit === undefined ) {\r\n\r\n\t\t\ttextureProperties.__webglInit = true;\r\n\r\n\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\r\n\r\n\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\r\n\r\n\t\t\t_infoMemory.textures ++;\r\n\r\n\t\t}\r\n\r\n\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\r\n\t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\r\n\r\n\t\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\r\n\t\t_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha );\r\n\t\t_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, texture.unpackAlignment );\r\n\r\n\t\tvar image = clampToMaxSize( texture.image, capabilities.maxTextureSize );\r\n\r\n\t\tif ( textureNeedsPowerOfTwo( texture ) && isPowerOfTwo( image ) === false ) {\r\n\r\n\t\t\timage = makePowerOfTwo( image );\r\n\r\n\t\t}\r\n\r\n\t\tvar isPowerOfTwoImage = isPowerOfTwo( image ),\r\n\t\tglFormat = paramThreeToGL( texture.format ),\r\n\t\tglType = paramThreeToGL( texture.type );\r\n\r\n\t\tsetTextureParameters( _gl.TEXTURE_2D, texture, isPowerOfTwoImage );\r\n\r\n\t\tvar mipmap, mipmaps = texture.mipmaps;\r\n\r\n\t\tif ( texture instanceof THREE.DepthTexture ) {\r\n\r\n\t\t\t// populate depth texture with dummy data\r\n\r\n\t\t\tvar internalFormat = _gl.DEPTH_COMPONENT;\r\n\r\n\t\t\tif ( texture.type === THREE.FloatType ) {\r\n\r\n\t\t\t\tif ( !_isWebGL2 ) throw new Error('Float Depth Texture only supported in WebGL2.0');\r\n\t\t\t\tinternalFormat = _gl.DEPTH_COMPONENT32F;\r\n\r\n\t\t\t} else if ( _isWebGL2 ) {\r\n\r\n\t\t\t\t// WebGL 2.0 requires signed internalformat for glTexImage2D\r\n\t\t\t\tinternalFormat = _gl.DEPTH_COMPONENT16;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, internalFormat, image.width, image.height, 0, glFormat, glType, null );\r\n\r\n\t\t} else if ( texture instanceof THREE.DataTexture ) {\r\n\r\n\t\t\t// use manually created mipmaps if available\r\n\t\t\t// if there are no manual mipmaps\r\n\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\r\n\r\n\t\t\tif ( mipmaps.length > 0 && isPowerOfTwoImage ) {\r\n\r\n\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tmipmap = mipmaps[ i ];\r\n\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttexture.generateMipmaps = false;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, glFormat, image.width, image.height, 0, glFormat, glType, image.data );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( texture instanceof THREE.CompressedTexture ) {\r\n\r\n\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tmipmap = mipmaps[ i ];\r\n\r\n\t\t\t\tif ( texture.format !== THREE.RGBAFormat && texture.format !== THREE.RGBFormat ) {\r\n\r\n\t\t\t\t\tif ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {\r\n\r\n\t\t\t\t\t\tstate.compressedTexImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()\" );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// regular Texture (image, video, canvas)\r\n\r\n\t\t\t// use manually created mipmaps if available\r\n\t\t\t// if there are no manual mipmaps\r\n\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\r\n\r\n\t\t\tif ( mipmaps.length > 0 && isPowerOfTwoImage ) {\r\n\r\n\t\t\t\tfor ( var i = 0, il = mipmaps.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tmipmap = mipmaps[ i ];\r\n\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glFormat, glFormat, glType, mipmap );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttexture.generateMipmaps = false;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, glFormat, glFormat, glType, image );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( texture.generateMipmaps && isPowerOfTwoImage ) _gl.generateMipmap( _gl.TEXTURE_2D );\r\n\r\n\t\ttextureProperties.__version = texture.version;\r\n\r\n\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\r\n\r\n\t}\r\n\r\n\tfunction setTexture2D( texture, slot ) {\r\n\r\n\t\tvar textureProperties = properties.get( texture );\r\n\r\n\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\r\n\r\n\t\t\tvar image = texture.image;\r\n\r\n\t\t\tif ( image === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is undefined', texture );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( image.complete === false ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete', texture );\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tuploadTexture( textureProperties, texture, slot );\r\n\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\r\n\t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\r\n\r\n\t}\r\n\r\n\tfunction clampToMaxSize ( image, maxSize ) {\r\n\r\n\t\tif ( image.width > maxSize || image.height > maxSize ) {\r\n\r\n\t\t\t// Warning: Scaling through the canvas will only work with images that use\r\n\t\t\t// premultiplied alpha.\r\n\r\n\t\t\tvar scale = maxSize / Math.max( image.width, image.height );\r\n\r\n\t\t\tvar canvas = document.createElement( 'canvas' );\r\n\t\t\tcanvas.width = Math.floor( image.width * scale );\r\n\t\t\tcanvas.height = Math.floor( image.height * scale );\r\n\r\n\t\t\tvar context = canvas.getContext( '2d' );\r\n\t\t\tcontext.drawImage( image, 0, 0, image.width, image.height, 0, 0, canvas.width, canvas.height );\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: image is too big (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image );\r\n\r\n\t\t\treturn canvas;\r\n\r\n\t\t}\r\n\r\n\t\treturn image;\r\n\r\n\t}\r\n\r\n\tfunction isPowerOfTwo( image ) {\r\n\r\n\t\treturn THREE.Math.isPowerOfTwo( image.width ) && THREE.Math.isPowerOfTwo( image.height );\r\n\r\n\t}\r\n\r\n\tfunction textureNeedsPowerOfTwo( texture ) {\r\n\r\n\t\tif ( texture.wrapS !== THREE.ClampToEdgeWrapping || texture.wrapT !== THREE.ClampToEdgeWrapping ) return true;\r\n\t\tif ( texture.minFilter !== THREE.NearestFilter && texture.minFilter !== THREE.LinearFilter ) return true;\r\n\r\n\t\treturn false;\r\n\r\n\t}\r\n\r\n\tfunction makePowerOfTwo( image ) {\r\n\r\n\t\tif ( image instanceof HTMLImageElement || image instanceof HTMLCanvasElement ) {\r\n\r\n\t\t\tvar canvas = document.createElement( 'canvas' );\r\n\t\t\tcanvas.width = THREE.Math.nearestPowerOfTwo( image.width );\r\n\t\t\tcanvas.height = THREE.Math.nearestPowerOfTwo( image.height );\r\n\r\n\t\t\tvar context = canvas.getContext( '2d' );\r\n\t\t\tcontext.drawImage( image, 0, 0, canvas.width, canvas.height );\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: image is not power of two (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image );\r\n\r\n\t\t\treturn canvas;\r\n\r\n\t\t}\r\n\r\n\t\treturn image;\r\n\r\n\t}\r\n\r\n\tfunction setTextureCube ( texture, slot ) {\r\n\r\n\t\tvar textureProperties = properties.get( texture );\r\n\r\n\t\tif ( texture.image.length === 6 ) {\r\n\r\n\t\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\r\n\r\n\t\t\t\tif ( ! textureProperties.__image__webglTextureCube ) {\r\n\r\n\t\t\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\r\n\r\n\t\t\t\t\ttextureProperties.__image__webglTextureCube = _gl.createTexture();\r\n\r\n\t\t\t\t\t_infoMemory.textures ++;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\r\n\t\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );\r\n\r\n\t\t\t\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\r\n\r\n\t\t\t\tvar isCompressed = texture instanceof THREE.CompressedTexture;\r\n\t\t\t\tvar isDataTexture = texture.image[ 0 ] instanceof THREE.DataTexture;\r\n\r\n\t\t\t\tvar cubeImage = [];\r\n\r\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\t\t\tif ( _this.autoScaleCubemaps && ! isCompressed && ! isDataTexture ) {\r\n\r\n\t\t\t\t\t\tcubeImage[ i ] = clampToMaxSize( texture.image[ i ], capabilities.maxCubemapSize );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tcubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar image = cubeImage[ 0 ],\r\n\t\t\t\tisPowerOfTwoImage = isPowerOfTwo( image ),\r\n\t\t\t\tglFormat = paramThreeToGL( texture.format ),\r\n\t\t\t\tglType = paramThreeToGL( texture.type );\r\n\r\n\t\t\t\tsetTextureParameters( _gl.TEXTURE_CUBE_MAP, texture, isPowerOfTwoImage );\r\n\r\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\t\t\tif ( ! isCompressed ) {\r\n\r\n\t\t\t\t\t\tif ( isDataTexture ) {\r\n\r\n\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, glFormat, glType, cubeImage[ i ] );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tvar mipmap, mipmaps = cubeImage[ i ].mipmaps;\r\n\r\n\t\t\t\t\t\tfor ( var j = 0, jl = mipmaps.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\t\t\tmipmap = mipmaps[ j ];\r\n\r\n\t\t\t\t\t\t\tif ( texture.format !== THREE.RGBAFormat && texture.format !== THREE.RGBFormat ) {\r\n\r\n\t\t\t\t\t\t\t\tif ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {\r\n\r\n\t\t\t\t\t\t\t\t\tstate.compressedTexImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );\r\n\r\n\t\t\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()\" );\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( texture.generateMipmaps && isPowerOfTwoImage ) {\r\n\r\n\t\t\t\t\t_gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttextureProperties.__version = texture.version;\r\n\r\n\t\t\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\r\n\t\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction setTextureCubeDynamic ( texture, slot ) {\r\n\r\n\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\r\n\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, properties.get( texture ).__webglTexture );\r\n\r\n\t}\r\n\r\n\tthis.allocTextureUnit = allocTextureUnit;\r\n\r\n\t//this.setTexture2D = setTexture2D;\r\n\tthis.setTexture2D = ( function() {\r\n\r\n\t\tvar warned = false;\r\n\r\n\t\t// backwards compatibility: peel texture.texture\r\n\t\treturn function( texture, slot ) {\r\n\r\n\t\t\tif ( texture instanceof THREE.WebGLRenderTarget ) {\r\n\r\n\t\t\t\tif ( ! warned ) {\r\n\r\n\t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer.setTexture2D: don't use render targets as textures. Use their .texture property instead.\" );\r\n\t\t\t\t\twarned = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttexture = texture.texture;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tsetTexture2D( texture, slot );\r\n\r\n\t\t};\r\n\r\n\t}() );\r\n\r\n\tthis.setTexture = ( function() {\r\n\r\n\t\tvar warned = false;\r\n\r\n\t\treturn function( texture, slot ) {\r\n\r\n\t\t\tif ( ! warned ) {\r\n\r\n\t\t\t\tconsole.warn( \"THREE.WebGLRenderer: .setTexture is deprecated, use setTexture2D instead.\" );\r\n\t\t\t\twarned = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_this.setTexture2D( texture, slot );\r\n\r\n\t\t};\r\n\r\n\t}() );\r\n\r\n\tthis.setTextureCube = ( function() {\r\n\r\n\t\tvar warned = false;\r\n\r\n\t\treturn function( texture, slot ) {\r\n\r\n\t\t\t// backwards compatibility: peel texture.texture\r\n\t\t\tif ( texture instanceof THREE.WebGLRenderTargetCube ) {\r\n\r\n\t\t\t\tif ( ! warned ) {\r\n\r\n\t\t\t\t\tconsole.warn( \"THREE.WebGLRenderer.setTextureCube: don't use cube render targets as textures. Use their .texture property instead.\" );\r\n\t\t\t\t\twarned = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttexture = texture.texture;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// currently relying on the fact that WebGLRenderTargetCube.texture is a Texture and NOT a CubeTexture\r\n\t\t\t// TODO: unify these code paths\r\n\t\t\tif ( texture instanceof THREE.CubeTexture ||\r\n\t\t\t\t ( Array.isArray( texture.image ) && texture.image.length === 6 ) ) {\r\n\r\n\t\t\t\t// CompressedTexture can have Array in image :/\r\n\r\n\t\t\t\t// this function alone should take care of cube textures\r\n\t\t\t\tsetTextureCube( texture, slot );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// assumed: texture property of THREE.WebGLRenderTargetCube\r\n\r\n\t\t\t\tsetTextureCubeDynamic( texture, slot );\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t}() );\r\n\r\n\t// Render targets\r\n\r\n\t// Setup storage for target texture and bind it to correct framebuffer\r\n\tfunction setupFrameBufferTexture ( framebuffer, renderTarget, attachment, textureTarget ) {\r\n\r\n\t\tvar glFormat = paramThreeToGL( renderTarget.texture.format );\r\n\t\tvar glType = paramThreeToGL( renderTarget.texture.type );\r\n\t\tstate.texImage2D( textureTarget, 0, glFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );\r\n\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\r\n\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, attachment, textureTarget, properties.get( renderTarget.texture ).__webglTexture, 0 );\r\n\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );\r\n\r\n\t}\r\n\r\n\t// Setup storage for internal depth/stencil buffers and bind to correct framebuffer\r\n\tfunction setupRenderBufferStorage ( renderbuffer, renderTarget ) {\r\n\r\n\t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, renderbuffer );\r\n\r\n\t\tif ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {\r\n\r\n\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_COMPONENT16, renderTarget.width, renderTarget.height );\r\n\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );\r\n\r\n\t\t} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {\r\n\r\n\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height );\r\n\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// FIXME: We don't support !depth !stencil\r\n\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.RGBA4, renderTarget.width, renderTarget.height );\r\n\r\n\t\t}\r\n\r\n\t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, null );\r\n\r\n\t}\r\n\r\n\t// Setup resources for a Depth Texture for a FBO (needs an extension)\r\n\tfunction setupDepthTexture ( framebuffer, renderTarget ) {\r\n\r\n\t\tvar isCube = ( renderTarget instanceof THREE.WebGLRenderTargetCube );\r\n\t\tif ( isCube ) throw new Error('Depth Texture with cube render targets is not supported!');\r\n\r\n\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\r\n\r\n\t\tif ( !( renderTarget.depthTexture instanceof THREE.DepthTexture ) ) {\r\n\r\n\t\t\tthrow new Error('renderTarget.depthTexture must be an instance of THREE.DepthTexture');\r\n\r\n\t\t}\r\n\r\n\t\t// upload an empty depth texture with framebuffer size\r\n\t\tif ( !properties.get( renderTarget.depthTexture ).__webglTexture ||\r\n\t\t\t\trenderTarget.depthTexture.image.width !== renderTarget.width ||\r\n\t\t\t\trenderTarget.depthTexture.image.height !== renderTarget.height ) {\r\n\t\t\trenderTarget.depthTexture.image.width = renderTarget.width;\r\n\t\t\trenderTarget.depthTexture.image.height = renderTarget.height;\r\n\t\t\trenderTarget.depthTexture.needsUpdate = true;\r\n\t\t}\r\n\r\n\t\t_this.setTexture2D( renderTarget.depthTexture, 0 );\r\n\r\n\t\tvar webglDepthTexture = properties.get( renderTarget.depthTexture ).__webglTexture;\r\n\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );\r\n\r\n\t}\r\n\r\n\t// Setup GL resources for a non-texture depth buffer\r\n\tfunction setupDepthRenderbuffer( renderTarget ) {\r\n\r\n\t\tvar renderTargetProperties = properties.get( renderTarget );\r\n\r\n\t\tvar isCube = ( renderTarget instanceof THREE.WebGLRenderTargetCube );\r\n\r\n\t\tif ( renderTarget.depthTexture ) {\r\n\r\n\t\t\tif ( isCube ) throw new Error('target.depthTexture not supported in Cube render targets');\r\n\r\n\t\t\tsetupDepthTexture( renderTargetProperties.__webglFramebuffer, renderTarget );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tif ( isCube ) {\r\n\r\n\t\t\t\trenderTargetProperties.__webglDepthbuffer = [];\r\n\r\n\t\t\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[ i ] );\r\n\t\t\t\t\trenderTargetProperties.__webglDepthbuffer[ i ] = _gl.createRenderbuffer();\r\n\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer[ i ], renderTarget );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );\r\n\t\t\t\trenderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();\r\n\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer, renderTarget );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );\r\n\r\n\t}\r\n\r\n\t// Set up GL resources for the render target\r\n\tfunction setupRenderTarget( renderTarget ) {\r\n\r\n\t\tvar renderTargetProperties = properties.get( renderTarget );\r\n\t\tvar textureProperties = properties.get( renderTarget.texture );\r\n\r\n\t\trenderTarget.addEventListener( 'dispose', onRenderTargetDispose );\r\n\r\n\t\ttextureProperties.__webglTexture = _gl.createTexture();\r\n\r\n\t\t_infoMemory.textures ++;\r\n\r\n\t\tvar isCube = ( renderTarget instanceof THREE.WebGLRenderTargetCube );\r\n\t\tvar isTargetPowerOfTwo = THREE.Math.isPowerOfTwo( renderTarget.width ) && THREE.Math.isPowerOfTwo( renderTarget.height );\r\n\r\n\t\t// Setup framebuffer\r\n\r\n\t\tif ( isCube ) {\r\n\r\n\t\t\trenderTargetProperties.__webglFramebuffer = [];\r\n\r\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\t\trenderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\trenderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();\r\n\r\n\t\t}\r\n\r\n\t\t// Setup color buffer\r\n\r\n\t\tif ( isCube ) {\r\n\r\n\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture );\r\n\t\t\tsetTextureParameters( _gl.TEXTURE_CUBE_MAP, renderTarget.texture, isTargetPowerOfTwo );\r\n\r\n\t\t\tfor ( var i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ], renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( renderTarget.texture.generateMipmaps && isTargetPowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );\r\n\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, null );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );\r\n\t\t\tsetTextureParameters( _gl.TEXTURE_2D, renderTarget.texture, isTargetPowerOfTwo );\r\n\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D );\r\n\r\n\t\t\tif ( renderTarget.texture.generateMipmaps && isTargetPowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_2D );\r\n\t\t\tstate.bindTexture( _gl.TEXTURE_2D, null );\r\n\r\n\t\t}\r\n\r\n\t\t// Setup depth and stencil buffers\r\n\r\n\t\tif ( renderTarget.depthBuffer ) {\r\n\r\n\t\t\tsetupDepthRenderbuffer( renderTarget );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tthis.getCurrentRenderTarget = function() {\r\n\r\n\t\treturn _currentRenderTarget;\r\n\r\n\t};\r\n\r\n\tthis.setRenderTarget = function ( renderTarget ) {\r\n\r\n\t\t_currentRenderTarget = renderTarget;\r\n\r\n\t\tif ( renderTarget && properties.get( renderTarget ).__webglFramebuffer === undefined ) {\r\n\r\n\t\t\tsetupRenderTarget( renderTarget );\r\n\r\n\t\t}\r\n\r\n\t\tvar isCube = ( renderTarget instanceof THREE.WebGLRenderTargetCube );\r\n\t\tvar framebuffer;\r\n\r\n\t\tif ( renderTarget ) {\r\n\r\n\t\t\tvar renderTargetProperties = properties.get( renderTarget );\r\n\r\n\t\t\tif ( isCube ) {\r\n\r\n\t\t\t\tframebuffer = renderTargetProperties.__webglFramebuffer[ renderTarget.activeCubeFace ];\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tframebuffer = renderTargetProperties.__webglFramebuffer;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_currentScissor.copy( renderTarget.scissor );\r\n\t\t\t_currentScissorTest = renderTarget.scissorTest;\r\n\r\n\t\t\t_currentViewport.copy( renderTarget.viewport );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tframebuffer = null;\r\n\r\n\t\t\t_currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio );\r\n\t\t\t_currentScissorTest = _scissorTest;\r\n\r\n\t\t\t_currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio );\r\n\r\n\t\t}\r\n\r\n\t\tif ( _currentFramebuffer !== framebuffer ) {\r\n\r\n\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\r\n\t\t\t_currentFramebuffer = framebuffer;\r\n\r\n\t\t}\r\n\r\n\t\tstate.scissor( _currentScissor );\r\n\t\tstate.setScissorTest( _currentScissorTest );\r\n\r\n\t\tstate.viewport( _currentViewport );\r\n\r\n\t\tif ( isCube ) {\r\n\r\n\t\t\tvar textureProperties = properties.get( renderTarget.texture );\r\n\t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + renderTarget.activeCubeFace, textureProperties.__webglTexture, renderTarget.activeMipMapLevel );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.readRenderTargetPixels = function ( renderTarget, x, y, width, height, buffer ) {\r\n\r\n\t\tif ( renderTarget instanceof THREE.WebGLRenderTarget === false ) {\r\n\r\n\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tvar framebuffer = properties.get( renderTarget ).__webglFramebuffer;\r\n\r\n\t\tif ( framebuffer ) {\r\n\r\n\t\t\tvar restore = false;\r\n\r\n\t\t\tif ( framebuffer !== _currentFramebuffer ) {\r\n\r\n\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\r\n\r\n\t\t\t\trestore = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\ttry {\r\n\r\n\t\t\t\tvar texture = renderTarget.texture;\r\n\r\n\t\t\t\tif ( texture.format !== THREE.RGBAFormat && paramThreeToGL( texture.format ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_FORMAT ) ) {\r\n\r\n\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.' );\r\n\t\t\t\t\treturn;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( texture.type !== THREE.UnsignedByteType &&\r\n\t\t\t\t     paramThreeToGL( texture.type ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_TYPE ) &&\r\n\t\t\t\t     ! ( texture.type === THREE.FloatType && extensions.get( 'WEBGL_color_buffer_float' ) ) &&\r\n\t\t\t\t     ! ( texture.type === THREE.HalfFloatType && extensions.get( 'EXT_color_buffer_half_float' ) ) ) {\r\n\r\n\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.' );\r\n\t\t\t\t\treturn;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( _gl.checkFramebufferStatus( _gl.FRAMEBUFFER ) === _gl.FRAMEBUFFER_COMPLETE ) {\r\n\r\n\t\t\t\t\t// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)\r\n\r\n\t\t\t\t\tif ( ( x >= 0 && x <= ( renderTarget.width - width ) ) && ( y >= 0 && y <= ( renderTarget.height - height ) ) ) {\r\n\r\n\t\t\t\t\t\t_gl.readPixels( x, y, width, height, paramThreeToGL( texture.format ), paramThreeToGL( texture.type ), buffer );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.' );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} finally {\r\n\r\n\t\t\t\tif ( restore ) {\r\n\r\n\t\t\t\t\t_gl.bindFramebuffer( _gl.FRAMEBUFFER, _currentFramebuffer );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tfunction updateRenderTargetMipmap( renderTarget ) {\r\n\r\n\t\tvar target = renderTarget instanceof THREE.WebGLRenderTargetCube ? _gl.TEXTURE_CUBE_MAP : _gl.TEXTURE_2D;\r\n\t\tvar texture = properties.get( renderTarget.texture ).__webglTexture;\r\n\r\n\t\tstate.bindTexture( target, texture );\r\n\t\t_gl.generateMipmap( target );\r\n\t\tstate.bindTexture( target, null );\r\n\r\n\t}\r\n\r\n\t// Fallback filters for non-power-of-2 textures\r\n\r\n\tfunction filterFallback ( f ) {\r\n\r\n\t\tif ( f === THREE.NearestFilter || f === THREE.NearestMipMapNearestFilter || f === THREE.NearestMipMapLinearFilter ) {\r\n\r\n\t\t\treturn _gl.NEAREST;\r\n\r\n\t\t}\r\n\r\n\t\treturn _gl.LINEAR;\r\n\r\n\t}\r\n\r\n\t// Map three.js constants to WebGL constants\r\n\r\n\tfunction paramThreeToGL ( p ) {\r\n\r\n\t\tvar extension;\r\n\r\n\t\tif ( p === THREE.RepeatWrapping ) return _gl.REPEAT;\r\n\t\tif ( p === THREE.ClampToEdgeWrapping ) return _gl.CLAMP_TO_EDGE;\r\n\t\tif ( p === THREE.MirroredRepeatWrapping ) return _gl.MIRRORED_REPEAT;\r\n\r\n\t\tif ( p === THREE.NearestFilter ) return _gl.NEAREST;\r\n\t\tif ( p === THREE.NearestMipMapNearestFilter ) return _gl.NEAREST_MIPMAP_NEAREST;\r\n\t\tif ( p === THREE.NearestMipMapLinearFilter ) return _gl.NEAREST_MIPMAP_LINEAR;\r\n\r\n\t\tif ( p === THREE.LinearFilter ) return _gl.LINEAR;\r\n\t\tif ( p === THREE.LinearMipMapNearestFilter ) return _gl.LINEAR_MIPMAP_NEAREST;\r\n\t\tif ( p === THREE.LinearMipMapLinearFilter ) return _gl.LINEAR_MIPMAP_LINEAR;\r\n\r\n\t\tif ( p === THREE.UnsignedByteType ) return _gl.UNSIGNED_BYTE;\r\n\t\tif ( p === THREE.UnsignedShort4444Type ) return _gl.UNSIGNED_SHORT_4_4_4_4;\r\n\t\tif ( p === THREE.UnsignedShort5551Type ) return _gl.UNSIGNED_SHORT_5_5_5_1;\r\n\t\tif ( p === THREE.UnsignedShort565Type ) return _gl.UNSIGNED_SHORT_5_6_5;\r\n\r\n\t\tif ( p === THREE.ByteType ) return _gl.BYTE;\r\n\t\tif ( p === THREE.ShortType ) return _gl.SHORT;\r\n\t\tif ( p === THREE.UnsignedShortType ) return _gl.UNSIGNED_SHORT;\r\n\t\tif ( p === THREE.IntType ) return _gl.INT;\r\n\t\tif ( p === THREE.UnsignedIntType ) return _gl.UNSIGNED_INT;\r\n\t\tif ( p === THREE.FloatType ) return _gl.FLOAT;\r\n\r\n\t\textension = extensions.get( 'OES_texture_half_float' );\r\n\r\n\t\tif ( extension !== null ) {\r\n\r\n\t\t\tif ( p === THREE.HalfFloatType ) return extension.HALF_FLOAT_OES;\r\n\r\n\t\t}\r\n\r\n\t\tif ( p === THREE.AlphaFormat ) return _gl.ALPHA;\r\n\t\tif ( p === THREE.RGBFormat ) return _gl.RGB;\r\n\t\tif ( p === THREE.RGBAFormat ) return _gl.RGBA;\r\n\t\tif ( p === THREE.LuminanceFormat ) return _gl.LUMINANCE;\r\n\t\tif ( p === THREE.LuminanceAlphaFormat ) return _gl.LUMINANCE_ALPHA;\r\n\t\tif ( p === THREE.DepthFormat ) return _gl.DEPTH_COMPONENT;\r\n\r\n\t\tif ( p === THREE.AddEquation ) return _gl.FUNC_ADD;\r\n\t\tif ( p === THREE.SubtractEquation ) return _gl.FUNC_SUBTRACT;\r\n\t\tif ( p === THREE.ReverseSubtractEquation ) return _gl.FUNC_REVERSE_SUBTRACT;\r\n\r\n\t\tif ( p === THREE.ZeroFactor ) return _gl.ZERO;\r\n\t\tif ( p === THREE.OneFactor ) return _gl.ONE;\r\n\t\tif ( p === THREE.SrcColorFactor ) return _gl.SRC_COLOR;\r\n\t\tif ( p === THREE.OneMinusSrcColorFactor ) return _gl.ONE_MINUS_SRC_COLOR;\r\n\t\tif ( p === THREE.SrcAlphaFactor ) return _gl.SRC_ALPHA;\r\n\t\tif ( p === THREE.OneMinusSrcAlphaFactor ) return _gl.ONE_MINUS_SRC_ALPHA;\r\n\t\tif ( p === THREE.DstAlphaFactor ) return _gl.DST_ALPHA;\r\n\t\tif ( p === THREE.OneMinusDstAlphaFactor ) return _gl.ONE_MINUS_DST_ALPHA;\r\n\r\n\t\tif ( p === THREE.DstColorFactor ) return _gl.DST_COLOR;\r\n\t\tif ( p === THREE.OneMinusDstColorFactor ) return _gl.ONE_MINUS_DST_COLOR;\r\n\t\tif ( p === THREE.SrcAlphaSaturateFactor ) return _gl.SRC_ALPHA_SATURATE;\r\n\r\n\t\textension = extensions.get( 'WEBGL_compressed_texture_s3tc' );\r\n\r\n\t\tif ( extension !== null ) {\r\n\r\n\t\t\tif ( p === THREE.RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;\r\n\t\t\tif ( p === THREE.RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;\r\n\t\t\tif ( p === THREE.RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;\r\n\t\t\tif ( p === THREE.RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;\r\n\r\n\t\t}\r\n\r\n\t\textension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );\r\n\r\n\t\tif ( extension !== null ) {\r\n\r\n\t\t\tif ( p === THREE.RGB_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;\r\n\t\t\tif ( p === THREE.RGB_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;\r\n\t\t\tif ( p === THREE.RGBA_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;\r\n\t\t\tif ( p === THREE.RGBA_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;\r\n\r\n\t\t}\r\n\r\n\t\textension = extensions.get( 'WEBGL_compressed_texture_etc1' );\r\n\r\n\t\tif ( extension !== null ) {\r\n\r\n\t\t\tif ( p === THREE.RGB_ETC1_Format ) return extension.COMPRESSED_RGB_ETC1_WEBGL;\r\n\r\n\t\t}\r\n\r\n\t\textension = extensions.get( 'EXT_blend_minmax' );\r\n\r\n\t\tif ( extension !== null ) {\r\n\r\n\t\t\tif ( p === THREE.MinEquation ) return extension.MIN_EXT;\r\n\t\t\tif ( p === THREE.MaxEquation ) return extension.MAX_EXT;\r\n\r\n\t\t}\r\n\r\n\t\treturn 0;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/renderers/WebGLRenderTarget.js\r\n\r\n/**\r\n * @author szimek / https://github.com/szimek/\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author Marius Kintel / https://github.com/kintel\r\n */\r\n\r\n/*\r\n In options, we can specify:\r\n * Texture parameters for an auto-generated target texture\r\n * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers\r\n*/\r\nTHREE.WebGLRenderTarget = function ( width, height, options ) {\r\n\r\n\tthis.uuid = THREE.Math.generateUUID();\r\n\r\n\tthis.width = width;\r\n\tthis.height = height;\r\n\r\n\tthis.scissor = new THREE.Vector4( 0, 0, width, height );\r\n\tthis.scissorTest = false;\r\n\r\n\tthis.viewport = new THREE.Vector4( 0, 0, width, height );\r\n\r\n\toptions = options || {};\r\n\r\n\tif ( options.minFilter === undefined ) options.minFilter = THREE.LinearFilter;\r\n\r\n\tthis.texture = new THREE.Texture( undefined, undefined, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.encoding );\r\n\r\n\tthis.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;\r\n\tthis.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : true;\r\n\tthis.depthTexture = null;\r\n\r\n};\r\n\r\nObject.assign( THREE.WebGLRenderTarget.prototype, THREE.EventDispatcher.prototype, {\r\n\r\n\tsetSize: function ( width, height ) {\r\n\r\n\t\tif ( this.width !== width || this.height !== height ) {\r\n\r\n\t\t\tthis.width = width;\r\n\t\t\tthis.height = height;\r\n\r\n\t\t\tthis.dispose();\r\n\r\n\t\t}\r\n\r\n\t\tthis.viewport.set( 0, 0, width, height );\r\n\t\tthis.scissor.set( 0, 0, width, height );\r\n\r\n\t},\r\n\r\n\tclone: function () {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t},\r\n\r\n\tcopy: function ( source ) {\r\n\r\n\t\tthis.width = source.width;\r\n\t\tthis.height = source.height;\r\n\r\n\t\tthis.viewport.copy( source.viewport );\r\n\r\n\t\tthis.texture = source.texture.clone();\r\n\r\n\t\tthis.depthBuffer = source.depthBuffer;\r\n\t\tthis.stencilBuffer = source.stencilBuffer;\r\n\t\tthis.depthTexture = source.depthTexture;\r\n\r\n\t\treturn this;\r\n\r\n\t},\r\n\r\n\tdispose: function () {\r\n\r\n\t\tthis.dispatchEvent( { type: 'dispose' } );\r\n\r\n\t}\r\n\r\n} );\r\n\r\n// File:src/renderers/WebGLRenderTargetCube.js\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com\r\n */\r\n\r\nTHREE.WebGLRenderTargetCube = function ( width, height, options ) {\r\n\r\n\tTHREE.WebGLRenderTarget.call( this, width, height, options );\r\n\r\n\tthis.activeCubeFace = 0; // PX 0, NX 1, PY 2, NY 3, PZ 4, NZ 5\r\n\tthis.activeMipMapLevel = 0;\r\n\r\n};\r\n\r\nTHREE.WebGLRenderTargetCube.prototype = Object.create( THREE.WebGLRenderTarget.prototype );\r\nTHREE.WebGLRenderTargetCube.prototype.constructor = THREE.WebGLRenderTargetCube;\r\n\r\n// File:src/renderers/webgl/WebGLBufferRenderer.js\r\n\r\n/**\r\n* @author mrdoob / http://mrdoob.com/\r\n*/\r\n\r\nTHREE.WebGLBufferRenderer = function ( _gl, extensions, _infoRender ) {\r\n\r\n\tvar mode;\r\n\r\n\tfunction setMode( value ) {\r\n\r\n\t\tmode = value;\r\n\r\n\t}\r\n\r\n\tfunction render( start, count ) {\r\n\r\n\t\t_gl.drawArrays( mode, start, count );\r\n\r\n\t\t_infoRender.calls ++;\r\n\t\t_infoRender.vertices += count;\r\n\t\tif ( mode === _gl.TRIANGLES ) _infoRender.faces += count / 3;\r\n\r\n\t}\r\n\r\n\tfunction renderInstances( geometry ) {\r\n\r\n\t\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\r\n\r\n\t\tif ( extension === null ) {\r\n\r\n\t\t\tconsole.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tvar position = geometry.attributes.position;\r\n\r\n\t\tvar count = 0;\r\n\r\n\t\tif ( position instanceof THREE.InterleavedBufferAttribute ) {\r\n\r\n\t\t\tcount = position.data.count;\r\n\r\n\t\t\textension.drawArraysInstancedANGLE( mode, 0, count, geometry.maxInstancedCount );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tcount = position.count;\r\n\r\n\t\t\textension.drawArraysInstancedANGLE( mode, 0, count, geometry.maxInstancedCount );\r\n\r\n\t\t}\r\n\r\n\t\t_infoRender.calls ++;\r\n\t\t_infoRender.vertices += count * geometry.maxInstancedCount;\r\n\t\tif ( mode === _gl.TRIANGLES ) _infoRender.faces += geometry.maxInstancedCount * count / 3;\r\n\r\n\t}\r\n\r\n\tthis.setMode = setMode;\r\n\tthis.render = render;\r\n\tthis.renderInstances = renderInstances;\r\n\r\n};\r\n\r\n// File:src/renderers/webgl/WebGLClipping.js\r\n\r\nTHREE.WebGLClipping = function() {\r\n\r\n\tvar scope = this,\r\n\r\n\t\tglobalState = null,\r\n\t\tnumGlobalPlanes = 0,\r\n\t\tlocalClippingEnabled = false,\r\n\t\trenderingShadows = false,\r\n\r\n\t\tplane = new THREE.Plane(),\r\n\t\tviewNormalMatrix = new THREE.Matrix3(),\r\n\r\n\t\tuniform = { value: null, needsUpdate: false };\r\n\r\n\tthis.uniform = uniform;\r\n\tthis.numPlanes = 0;\r\n\r\n\tthis.init = function( planes, enableLocalClipping, camera ) {\r\n\r\n\t\tvar enabled =\r\n\t\t\tplanes.length !== 0 ||\r\n\t\t\tenableLocalClipping ||\r\n\t\t\t// enable state of previous frame - the clipping code has to\r\n\t\t\t// run another frame in order to reset the state:\r\n\t\t\tnumGlobalPlanes !== 0 ||\r\n\t\t\tlocalClippingEnabled;\r\n\r\n\t\tlocalClippingEnabled = enableLocalClipping;\r\n\r\n\t\tglobalState = projectPlanes( planes, camera, 0 );\r\n\t\tnumGlobalPlanes = planes.length;\r\n\r\n\t\treturn enabled;\r\n\r\n\t};\r\n\r\n\tthis.beginShadows = function() {\r\n\r\n\t\trenderingShadows = true;\r\n\t\tprojectPlanes( null );\r\n\r\n\t};\r\n\r\n\tthis.endShadows = function() {\r\n\r\n\t\trenderingShadows = false;\r\n\t\tresetGlobalState();\r\n\r\n\t};\r\n\r\n\tthis.setState = function( planes, clipShadows, camera, cache, fromCache ) {\r\n\r\n\t\tif ( ! localClippingEnabled ||\r\n\t\t\t\tplanes === null || planes.length === 0 ||\r\n\t\t\t\trenderingShadows && ! clipShadows ) {\r\n\t\t\t// there's no local clipping\r\n\r\n\t\t\tif ( renderingShadows ) {\r\n\t\t\t\t// there's no global clipping\r\n\r\n\t\t\t\tprojectPlanes( null );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tresetGlobalState();\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tvar nGlobal = renderingShadows ? 0 : numGlobalPlanes,\r\n\t\t\t\tlGlobal = nGlobal * 4,\r\n\r\n\t\t\t\tdstArray = cache.clippingState || null;\r\n\r\n\t\t\tuniform.value = dstArray; // ensure unique state\r\n\r\n\t\t\tdstArray = projectPlanes( planes, camera, lGlobal, fromCache );\r\n\r\n\t\t\tfor ( var i = 0; i !== lGlobal; ++ i ) {\r\n\r\n\t\t\t\tdstArray[ i ] = globalState[ i ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tcache.clippingState = dstArray;\r\n\t\t\tthis.numPlanes += nGlobal;\r\n\r\n\t\t}\r\n\r\n\r\n\t};\r\n\r\n\tfunction resetGlobalState() {\r\n\r\n\t\tif ( uniform.value !== globalState ) {\r\n\r\n\t\t\tuniform.value = globalState;\r\n\t\t\tuniform.needsUpdate = numGlobalPlanes > 0;\r\n\r\n\t\t}\r\n\r\n\t\tscope.numPlanes = numGlobalPlanes;\r\n\r\n\t}\r\n\r\n\tfunction projectPlanes( planes, camera, dstOffset, skipTransform ) {\r\n\r\n\t\tvar nPlanes = planes !== null ? planes.length : 0,\r\n\t\t\tdstArray = null;\r\n\r\n\t\tif ( nPlanes !== 0 ) {\r\n\r\n\t\t\tdstArray = uniform.value;\r\n\r\n\t\t\tif ( skipTransform !== true || dstArray === null ) {\r\n\r\n\t\t\t\tvar flatSize = dstOffset + nPlanes * 4,\r\n\t\t\t\t\tviewMatrix = camera.matrixWorldInverse;\r\n\r\n\t\t\t\tviewNormalMatrix.getNormalMatrix( viewMatrix );\r\n\r\n\t\t\t\tif ( dstArray === null || dstArray.length < flatSize ) {\r\n\r\n\t\t\t\t\tdstArray = new Float32Array( flatSize );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor ( var i = 0, i4 = dstOffset;\r\n\t\t\t\t\t\t\t\t\ti !== nPlanes; ++ i, i4 += 4 ) {\r\n\r\n\t\t\t\t\tplane.copy( planes[ i ] ).\r\n\t\t\t\t\t\t\tapplyMatrix4( viewMatrix, viewNormalMatrix );\r\n\r\n\t\t\t\t\tplane.normal.toArray( dstArray, i4 );\r\n\t\t\t\t\tdstArray[ i4 + 3 ] = plane.constant;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tuniform.value = dstArray;\r\n\t\t\tuniform.needsUpdate = true;\r\n\r\n\t\t}\r\n\r\n\t\tscope.numPlanes = nPlanes;\r\n\t\treturn dstArray;\r\n\r\n\t}\r\n\r\n};\r\n\r\n\r\n// File:src/renderers/webgl/WebGLIndexedBufferRenderer.js\r\n\r\n/**\r\n* @author mrdoob / http://mrdoob.com/\r\n*/\r\n\r\nTHREE.WebGLIndexedBufferRenderer = function ( _gl, extensions, _infoRender ) {\r\n\r\n\tvar mode;\r\n\r\n\tfunction setMode( value ) {\r\n\r\n\t\tmode = value;\r\n\r\n\t}\r\n\r\n\tvar type, size;\r\n\r\n\tfunction setIndex( index ) {\r\n\r\n\t\tif ( index.array instanceof Uint32Array && extensions.get( 'OES_element_index_uint' ) ) {\r\n\r\n\t\t\ttype = _gl.UNSIGNED_INT;\r\n\t\t\tsize = 4;\r\n\r\n\t\t} else {\r\n\r\n\t\t\ttype = _gl.UNSIGNED_SHORT;\r\n\t\t\tsize = 2;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction render( start, count ) {\r\n\r\n\t\t_gl.drawElements( mode, count, type, start * size );\r\n\r\n\t\t_infoRender.calls ++;\r\n\t\t_infoRender.vertices += count;\r\n\t\tif ( mode === _gl.TRIANGLES ) _infoRender.faces += count / 3;\r\n\r\n\t}\r\n\r\n\tfunction renderInstances( geometry, start, count ) {\r\n\r\n\t\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\r\n\r\n\t\tif ( extension === null ) {\r\n\r\n\t\t\tconsole.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\textension.drawElementsInstancedANGLE( mode, count, type, start * size, geometry.maxInstancedCount );\r\n\r\n\t\t_infoRender.calls ++;\r\n\t\t_infoRender.vertices += count * geometry.maxInstancedCount;\r\n\t\tif ( mode === _gl.TRIANGLES ) _infoRender.faces += geometry.maxInstancedCount * count / 3;\r\n\t}\r\n\r\n\tthis.setMode = setMode;\r\n\tthis.setIndex = setIndex;\r\n\tthis.render = render;\r\n\tthis.renderInstances = renderInstances;\r\n\r\n};\r\n\r\n// File:src/renderers/webgl/WebGLExtensions.js\r\n\r\n/**\r\n* @author mrdoob / http://mrdoob.com/\r\n*/\r\n\r\nTHREE.WebGLExtensions = function ( gl ) {\r\n\r\n\tvar extensions = {};\r\n\r\n\tthis.get = function ( name ) {\r\n\r\n\t\tif ( extensions[ name ] !== undefined ) {\r\n\r\n\t\t\treturn extensions[ name ];\r\n\r\n\t\t}\r\n\r\n\t\tvar extension;\r\n\r\n\t\tswitch ( name ) {\r\n\r\n\t\t\tcase 'WEBGL_depth_texture':\r\n\t\t\t\textension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) || gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'EXT_texture_filter_anisotropic':\r\n\t\t\t\textension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) || gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'WEBGL_compressed_texture_s3tc':\r\n\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'WEBGL_compressed_texture_pvrtc':\r\n\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'WEBGL_compressed_texture_etc1':\r\n\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_etc1' );\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\textension = gl.getExtension( name );\r\n\r\n\t\t}\r\n\r\n\t\tif ( extension === null ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );\r\n\r\n\t\t}\r\n\r\n\t\textensions[ name ] = extension;\r\n\r\n\t\treturn extension;\r\n\r\n\t};\r\n\r\n};\r\n\r\n// File:src/renderers/webgl/WebGLCapabilities.js\r\n\r\nTHREE.WebGLCapabilities = function ( gl, extensions, parameters ) {\r\n\r\n\tfunction getMaxPrecision( precision ) {\r\n\r\n\t\tif ( precision === 'highp' ) {\r\n\r\n\t\t\tif ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.HIGH_FLOAT ).precision > 0 &&\r\n\t\t\t     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.HIGH_FLOAT ).precision > 0 ) {\r\n\r\n\t\t\t\treturn 'highp';\r\n\r\n\t\t\t}\r\n\r\n\t\t\tprecision = 'mediump';\r\n\r\n\t\t}\r\n\r\n\t\tif ( precision === 'mediump' ) {\r\n\r\n\t\t\tif ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.MEDIUM_FLOAT ).precision > 0 &&\r\n\t\t\t     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT ).precision > 0 ) {\r\n\r\n\t\t\t\treturn 'mediump';\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn 'lowp';\r\n\r\n\t}\r\n\r\n\tthis.getMaxPrecision = getMaxPrecision;\r\n\r\n\tthis.precision = parameters.precision !== undefined ? parameters.precision : 'highp';\r\n\tthis.logarithmicDepthBuffer = parameters.logarithmicDepthBuffer !== undefined ? parameters.logarithmicDepthBuffer : false;\r\n\r\n\tthis.maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );\r\n\tthis.maxVertexTextures = gl.getParameter( gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS );\r\n\tthis.maxTextureSize = gl.getParameter( gl.MAX_TEXTURE_SIZE );\r\n\tthis.maxCubemapSize = gl.getParameter( gl.MAX_CUBE_MAP_TEXTURE_SIZE );\r\n\r\n\tthis.maxAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );\r\n\tthis.maxVertexUniforms = gl.getParameter( gl.MAX_VERTEX_UNIFORM_VECTORS );\r\n\tthis.maxVaryings = gl.getParameter( gl.MAX_VARYING_VECTORS );\r\n\tthis.maxFragmentUniforms = gl.getParameter( gl.MAX_FRAGMENT_UNIFORM_VECTORS );\r\n\r\n\tthis.vertexTextures = this.maxVertexTextures > 0;\r\n\tthis.floatFragmentTextures = !! extensions.get( 'OES_texture_float' );\r\n\tthis.floatVertexTextures = this.vertexTextures && this.floatFragmentTextures;\r\n\r\n\tvar _maxPrecision = getMaxPrecision( this.precision );\r\n\r\n\tif ( _maxPrecision !== this.precision ) {\r\n\r\n\t\tconsole.warn( 'THREE.WebGLRenderer:', this.precision, 'not supported, using', _maxPrecision, 'instead.' );\r\n\t\tthis.precision = _maxPrecision;\r\n\r\n\t}\r\n\r\n\tif ( this.logarithmicDepthBuffer ) {\r\n\r\n\t\tthis.logarithmicDepthBuffer = !! extensions.get( 'EXT_frag_depth' );\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/renderers/webgl/WebGLGeometries.js\r\n\r\n/**\r\n* @author mrdoob / http://mrdoob.com/\r\n*/\r\n\r\nTHREE.WebGLGeometries = function ( gl, properties, info ) {\r\n\r\n\tvar geometries = {};\r\n\r\n\tfunction get( object ) {\r\n\r\n\t\tvar geometry = object.geometry;\r\n\r\n\t\tif ( geometries[ geometry.id ] !== undefined ) {\r\n\r\n\t\t\treturn geometries[ geometry.id ];\r\n\r\n\t\t}\r\n\r\n\t\tgeometry.addEventListener( 'dispose', onGeometryDispose );\r\n\r\n\t\tvar buffergeometry;\r\n\r\n\t\tif ( geometry instanceof THREE.BufferGeometry ) {\r\n\r\n\t\t\tbuffergeometry = geometry;\r\n\r\n\t\t} else if ( geometry instanceof THREE.Geometry ) {\r\n\r\n\t\t\tif ( geometry._bufferGeometry === undefined ) {\r\n\r\n\t\t\t\tgeometry._bufferGeometry = new THREE.BufferGeometry().setFromObject( object );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tbuffergeometry = geometry._bufferGeometry;\r\n\r\n\t\t}\r\n\r\n\t\tgeometries[ geometry.id ] = buffergeometry;\r\n\r\n\t\tinfo.memory.geometries ++;\r\n\r\n\t\treturn buffergeometry;\r\n\r\n\t}\r\n\r\n\tfunction onGeometryDispose( event ) {\r\n\r\n\t\tvar geometry = event.target;\r\n\t\tvar buffergeometry = geometries[ geometry.id ];\r\n\r\n\t\tif ( buffergeometry.index !== null ) {\r\n\r\n\t\t\tdeleteAttribute( buffergeometry.index );\r\n\r\n\t\t}\r\n\r\n\t\tdeleteAttributes( buffergeometry.attributes );\r\n\r\n\t\tgeometry.removeEventListener( 'dispose', onGeometryDispose );\r\n\r\n\t\tdelete geometries[ geometry.id ];\r\n\r\n\t\t// TODO\r\n\r\n\t\tvar property = properties.get( geometry );\r\n\r\n\t\tif ( property.wireframe ) {\r\n\r\n\t\t\tdeleteAttribute( property.wireframe );\r\n\r\n\t\t}\r\n\r\n\t\tproperties.delete( geometry );\r\n\r\n\t\tvar bufferproperty = properties.get( buffergeometry );\r\n\r\n\t\tif ( bufferproperty.wireframe ) {\r\n\r\n\t\t\tdeleteAttribute( bufferproperty.wireframe );\r\n\r\n\t\t}\r\n\r\n\t\tproperties.delete( buffergeometry );\r\n\r\n\t\t//\r\n\r\n\t\tinfo.memory.geometries --;\r\n\r\n\t}\r\n\r\n\tfunction getAttributeBuffer( attribute ) {\r\n\r\n\t\tif ( attribute instanceof THREE.InterleavedBufferAttribute ) {\r\n\r\n\t\t\treturn properties.get( attribute.data ).__webglBuffer;\r\n\r\n\t\t}\r\n\r\n\t\treturn properties.get( attribute ).__webglBuffer;\r\n\r\n\t}\r\n\r\n\tfunction deleteAttribute( attribute ) {\r\n\r\n\t\tvar buffer = getAttributeBuffer( attribute );\r\n\r\n\t\tif ( buffer !== undefined ) {\r\n\r\n\t\t\tgl.deleteBuffer( buffer );\r\n\t\t\tremoveAttributeBuffer( attribute );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction deleteAttributes( attributes ) {\r\n\r\n\t\tfor ( var name in attributes ) {\r\n\r\n\t\t\tdeleteAttribute( attributes[ name ] );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction removeAttributeBuffer( attribute ) {\r\n\r\n\t\tif ( attribute instanceof THREE.InterleavedBufferAttribute ) {\r\n\r\n\t\t\tproperties.delete( attribute.data );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tproperties.delete( attribute );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tthis.get = get;\r\n\r\n};\r\n\r\n// File:src/renderers/webgl/WebGLLights.js\r\n\r\n/**\r\n* @author mrdoob / http://mrdoob.com/\r\n*/\r\n\r\nTHREE.WebGLLights = function () {\r\n\r\n\tvar lights = {};\r\n\r\n\tthis.get = function ( light ) {\r\n\r\n\t\tif ( lights[ light.id ] !== undefined ) {\r\n\r\n\t\t\treturn lights[ light.id ];\r\n\r\n\t\t}\r\n\r\n\t\tvar uniforms;\r\n\r\n\t\tswitch ( light.type ) {\r\n\r\n\t\t\tcase 'DirectionalLight':\r\n\t\t\t\tuniforms = {\r\n\t\t\t\t\tdirection: new THREE.Vector3(),\r\n\t\t\t\t\tcolor: new THREE.Color(),\r\n\r\n\t\t\t\t\tshadow: false,\r\n\t\t\t\t\tshadowBias: 0,\r\n\t\t\t\t\tshadowRadius: 1,\r\n\t\t\t\t\tshadowMapSize: new THREE.Vector2()\r\n\t\t\t\t};\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'SpotLight':\r\n\t\t\t\tuniforms = {\r\n\t\t\t\t\tposition: new THREE.Vector3(),\r\n\t\t\t\t\tdirection: new THREE.Vector3(),\r\n\t\t\t\t\tcolor: new THREE.Color(),\r\n\t\t\t\t\tdistance: 0,\r\n\t\t\t\t\tconeCos: 0,\r\n\t\t\t\t\tpenumbraCos: 0,\r\n\t\t\t\t\tdecay: 0,\r\n\r\n\t\t\t\t\tshadow: false,\r\n\t\t\t\t\tshadowBias: 0,\r\n\t\t\t\t\tshadowRadius: 1,\r\n\t\t\t\t\tshadowMapSize: new THREE.Vector2()\r\n\t\t\t\t};\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'PointLight':\r\n\t\t\t\tuniforms = {\r\n\t\t\t\t\tposition: new THREE.Vector3(),\r\n\t\t\t\t\tcolor: new THREE.Color(),\r\n\t\t\t\t\tdistance: 0,\r\n\t\t\t\t\tdecay: 0,\r\n\r\n\t\t\t\t\tshadow: false,\r\n\t\t\t\t\tshadowBias: 0,\r\n\t\t\t\t\tshadowRadius: 1,\r\n\t\t\t\t\tshadowMapSize: new THREE.Vector2()\r\n\t\t\t\t};\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'HemisphereLight':\r\n\t\t\t\tuniforms = {\r\n\t\t\t\t\tdirection: new THREE.Vector3(),\r\n\t\t\t\t\tskyColor: new THREE.Color(),\r\n\t\t\t\t\tgroundColor: new THREE.Color()\r\n\t\t\t\t};\r\n\t\t\t\tbreak;\r\n\r\n\t\t}\r\n\r\n\t\tlights[ light.id ] = uniforms;\r\n\r\n\t\treturn uniforms;\r\n\r\n\t};\r\n\r\n};\r\n\r\n// File:src/renderers/webgl/WebGLObjects.js\r\n\r\n/**\r\n* @author mrdoob / http://mrdoob.com/\r\n*/\r\n\r\nTHREE.WebGLObjects = function ( gl, properties, info ) {\r\n\r\n\tvar geometries = new THREE.WebGLGeometries( gl, properties, info );\r\n\r\n\t//\r\n\r\n\tfunction update( object ) {\r\n\r\n\t\t// TODO: Avoid updating twice (when using shadowMap). Maybe add frame counter.\r\n\r\n\t\tvar geometry = geometries.get( object );\r\n\r\n\t\tif ( object.geometry instanceof THREE.Geometry ) {\r\n\r\n\t\t\tgeometry.updateFromObject( object );\r\n\r\n\t\t}\r\n\r\n\t\tvar index = geometry.index;\r\n\t\tvar attributes = geometry.attributes;\r\n\r\n\t\tif ( index !== null ) {\r\n\r\n\t\t\tupdateAttribute( index, gl.ELEMENT_ARRAY_BUFFER );\r\n\r\n\t\t}\r\n\r\n\t\tfor ( var name in attributes ) {\r\n\r\n\t\t\tupdateAttribute( attributes[ name ], gl.ARRAY_BUFFER );\r\n\r\n\t\t}\r\n\r\n\t\t// morph targets\r\n\r\n\t\tvar morphAttributes = geometry.morphAttributes;\r\n\r\n\t\tfor ( var name in morphAttributes ) {\r\n\r\n\t\t\tvar array = morphAttributes[ name ];\r\n\r\n\t\t\tfor ( var i = 0, l = array.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tupdateAttribute( array[ i ], gl.ARRAY_BUFFER );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn geometry;\r\n\r\n\t}\r\n\r\n\tfunction updateAttribute( attribute, bufferType ) {\r\n\r\n\t\tvar data = ( attribute instanceof THREE.InterleavedBufferAttribute ) ? attribute.data : attribute;\r\n\r\n\t\tvar attributeProperties = properties.get( data );\r\n\r\n\t\tif ( attributeProperties.__webglBuffer === undefined ) {\r\n\r\n\t\t\tcreateBuffer( attributeProperties, data, bufferType );\r\n\r\n\t\t} else if ( attributeProperties.version !== data.version ) {\r\n\r\n\t\t\tupdateBuffer( attributeProperties, data, bufferType );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction createBuffer( attributeProperties, data, bufferType ) {\r\n\r\n\t\tattributeProperties.__webglBuffer = gl.createBuffer();\r\n\t\tgl.bindBuffer( bufferType, attributeProperties.__webglBuffer );\r\n\r\n\t\tvar usage = data.dynamic ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;\r\n\r\n\t\tgl.bufferData( bufferType, data.array, usage );\r\n\r\n\t\tattributeProperties.version = data.version;\r\n\r\n\t}\r\n\r\n\tfunction updateBuffer( attributeProperties, data, bufferType ) {\r\n\r\n\t\tgl.bindBuffer( bufferType, attributeProperties.__webglBuffer );\r\n\r\n\t\tif ( data.dynamic === false || data.updateRange.count === - 1 ) {\r\n\r\n\t\t\t// Not using update ranges\r\n\r\n\t\t\tgl.bufferSubData( bufferType, 0, data.array );\r\n\r\n\t\t} else if ( data.updateRange.count === 0 ) {\r\n\r\n\t\t\tconsole.error( 'THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually.' );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tgl.bufferSubData( bufferType, data.updateRange.offset * data.array.BYTES_PER_ELEMENT,\r\n\t\t\t\t\t\t\t  data.array.subarray( data.updateRange.offset, data.updateRange.offset + data.updateRange.count ) );\r\n\r\n\t\t\tdata.updateRange.count = 0; // reset range\r\n\r\n\t\t}\r\n\r\n\t\tattributeProperties.version = data.version;\r\n\r\n\t}\r\n\r\n\tfunction getAttributeBuffer( attribute ) {\r\n\r\n\t\tif ( attribute instanceof THREE.InterleavedBufferAttribute ) {\r\n\r\n\t\t\treturn properties.get( attribute.data ).__webglBuffer;\r\n\r\n\t\t}\r\n\r\n\t\treturn properties.get( attribute ).__webglBuffer;\r\n\r\n\t}\r\n\r\n\tfunction getWireframeAttribute( geometry ) {\r\n\r\n\t\tvar property = properties.get( geometry );\r\n\r\n\t\tif ( property.wireframe !== undefined ) {\r\n\r\n\t\t\treturn property.wireframe;\r\n\r\n\t\t}\r\n\r\n\t\tvar indices = [];\r\n\r\n\t\tvar index = geometry.index;\r\n\t\tvar attributes = geometry.attributes;\r\n\t\tvar position = attributes.position;\r\n\r\n\t\t// console.time( 'wireframe' );\r\n\r\n\t\tif ( index !== null ) {\r\n\r\n\t\t\tvar edges = {};\r\n\t\t\tvar array = index.array;\r\n\r\n\t\t\tfor ( var i = 0, l = array.length; i < l; i += 3 ) {\r\n\r\n\t\t\t\tvar a = array[ i + 0 ];\r\n\t\t\t\tvar b = array[ i + 1 ];\r\n\t\t\t\tvar c = array[ i + 2 ];\r\n\r\n\t\t\t\tif ( checkEdge( edges, a, b ) ) indices.push( a, b );\r\n\t\t\t\tif ( checkEdge( edges, b, c ) ) indices.push( b, c );\r\n\t\t\t\tif ( checkEdge( edges, c, a ) ) indices.push( c, a );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tvar array = attributes.position.array;\r\n\r\n\t\t\tfor ( var i = 0, l = ( array.length / 3 ) - 1; i < l; i += 3 ) {\r\n\r\n\t\t\t\tvar a = i + 0;\r\n\t\t\t\tvar b = i + 1;\r\n\t\t\t\tvar c = i + 2;\r\n\r\n\t\t\t\tindices.push( a, b, b, c, c, a );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// console.timeEnd( 'wireframe' );\r\n\r\n\t\tvar TypeArray = position.count > 65535 ? Uint32Array : Uint16Array;\r\n\t\tvar attribute = new THREE.BufferAttribute( new TypeArray( indices ), 1 );\r\n\r\n\t\tupdateAttribute( attribute, gl.ELEMENT_ARRAY_BUFFER );\r\n\r\n\t\tproperty.wireframe = attribute;\r\n\r\n\t\treturn attribute;\r\n\r\n\t}\r\n\r\n\tfunction checkEdge( edges, a, b ) {\r\n\r\n\t\tif ( a > b ) {\r\n\r\n\t\t\tvar tmp = a;\r\n\t\t\ta = b;\r\n\t\t\tb = tmp;\r\n\r\n\t\t}\r\n\r\n\t\tvar list = edges[ a ];\r\n\r\n\t\tif ( list === undefined ) {\r\n\r\n\t\t\tedges[ a ] = [ b ];\r\n\t\t\treturn true;\r\n\r\n\t\t} else if ( list.indexOf( b ) === -1 ) {\r\n\r\n\t\t\tlist.push( b );\r\n\t\t\treturn true;\r\n\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\r\n\t}\r\n\r\n\tthis.getAttributeBuffer = getAttributeBuffer;\r\n\tthis.getWireframeAttribute = getWireframeAttribute;\r\n\r\n\tthis.update = update;\r\n\r\n};\r\n\r\n// File:src/renderers/webgl/WebGLProgram.js\r\n\r\nTHREE.WebGLProgram = ( function () {\r\n\r\n\tvar programIdCount = 0;\r\n\r\n\tfunction getEncodingComponents( encoding ) {\r\n\r\n\t\tswitch ( encoding ) {\r\n\r\n\t\t\tcase THREE.LinearEncoding:\r\n\t\t\t\treturn [ 'Linear','( value )' ];\r\n\t\t\tcase THREE.sRGBEncoding:\r\n\t\t\t\treturn [ 'sRGB','( value )' ];\r\n\t\t\tcase THREE.RGBEEncoding:\r\n\t\t\t\treturn [ 'RGBE','( value )' ];\r\n\t\t\tcase THREE.RGBM7Encoding:\r\n\t\t\t\treturn [ 'RGBM','( value, 7.0 )' ];\r\n\t\t\tcase THREE.RGBM16Encoding:\r\n\t\t\t\treturn [ 'RGBM','( value, 16.0 )' ];\r\n\t\t\tcase THREE.RGBDEncoding:\r\n\t\t\t\treturn [ 'RGBD','( value, 256.0 )' ];\r\n\t\t\tcase THREE.GammaEncoding:\r\n\t\t\t\treturn [ 'Gamma','( value, float( GAMMA_FACTOR ) )' ];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error( 'unsupported encoding: ' + encoding );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction getTexelDecodingFunction( functionName, encoding ) {\r\n\r\n\t\tvar components = getEncodingComponents( encoding );\r\n\t\treturn \"vec4 \" + functionName + \"( vec4 value ) { return \" + components[ 0 ] + \"ToLinear\" + components[ 1 ] + \"; }\";\r\n\r\n\t}\r\n\r\n\tfunction getTexelEncodingFunction( functionName, encoding ) {\r\n\r\n\t\tvar components = getEncodingComponents( encoding );\r\n\t\treturn \"vec4 \" + functionName + \"( vec4 value ) { return LinearTo\" + components[ 0 ] + components[ 1 ] + \"; }\";\r\n\r\n\t}\r\n\r\n\tfunction getToneMappingFunction( functionName, toneMapping ) {\r\n\r\n\t\tvar toneMappingName;\r\n\r\n\t\tswitch ( toneMapping ) {\r\n\r\n\t\t\tcase THREE.LinearToneMapping:\r\n\t\t\t\ttoneMappingName = \"Linear\";\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase THREE.ReinhardToneMapping:\r\n\t\t\t\ttoneMappingName = \"Reinhard\";\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase THREE.Uncharted2ToneMapping:\r\n\t\t\t\ttoneMappingName = \"Uncharted2\";\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase THREE.CineonToneMapping:\r\n\t\t\t\ttoneMappingName = \"OptimizedCineon\";\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error( 'unsupported toneMapping: ' + toneMapping );\r\n\r\n\t\t}\r\n\r\n\t\treturn \"vec3 \" + functionName + \"( vec3 color ) { return \" + toneMappingName + \"ToneMapping( color ); }\";\r\n\r\n\t}\r\n\r\n\tfunction generateExtensions( extensions, parameters, rendererExtensions ) {\r\n\r\n\t\textensions = extensions || {};\r\n\r\n\t\tvar chunks = [\r\n\t\t\t( extensions.derivatives || parameters.envMapCubeUV || parameters.bumpMap || parameters.normalMap || parameters.flatShading ) ? '#extension GL_OES_standard_derivatives : enable' : '',\r\n\t\t\t( extensions.fragDepth || parameters.logarithmicDepthBuffer ) && rendererExtensions.get( 'EXT_frag_depth' ) ? '#extension GL_EXT_frag_depth : enable' : '',\r\n\t\t\t( extensions.drawBuffers ) && rendererExtensions.get( 'WEBGL_draw_buffers' ) ? '#extension GL_EXT_draw_buffers : require' : '',\r\n\t\t\t( extensions.shaderTextureLOD || parameters.envMap ) && rendererExtensions.get( 'EXT_shader_texture_lod' ) ? '#extension GL_EXT_shader_texture_lod : enable' : '',\r\n\t\t];\r\n\r\n\t\treturn chunks.filter( filterEmptyLine ).join( '\\n' );\r\n\r\n\t}\r\n\r\n\tfunction generateDefines( defines ) {\r\n\r\n\t\tvar chunks = [];\r\n\r\n\t\tfor ( var name in defines ) {\r\n\r\n\t\t\tvar value = defines[ name ];\r\n\r\n\t\t\tif ( value === false ) continue;\r\n\r\n\t\t\tchunks.push( '#define ' + name + ' ' + value );\r\n\r\n\t\t}\r\n\r\n\t\treturn chunks.join( '\\n' );\r\n\r\n\t}\r\n\r\n\tfunction fetchAttributeLocations( gl, program, identifiers ) {\r\n\r\n\t\tvar attributes = {};\r\n\r\n\t\tvar n = gl.getProgramParameter( program, gl.ACTIVE_ATTRIBUTES );\r\n\r\n\t\tfor ( var i = 0; i < n; i ++ ) {\r\n\r\n\t\t\tvar info = gl.getActiveAttrib( program, i );\r\n\t\t\tvar name = info.name;\r\n\r\n\t\t\t// console.log(\"THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:\", name, i );\r\n\r\n\t\t\tattributes[ name ] = gl.getAttribLocation( program, name );\r\n\r\n\t\t}\r\n\r\n\t\treturn attributes;\r\n\r\n\t}\r\n\r\n\tfunction filterEmptyLine( string ) {\r\n\r\n\t\treturn string !== '';\r\n\r\n\t}\r\n\r\n\tfunction replaceLightNums( string, parameters ) {\r\n\r\n\t\treturn string\r\n\t\t\t.replace( /NUM_DIR_LIGHTS/g, parameters.numDirLights )\r\n\t\t\t.replace( /NUM_SPOT_LIGHTS/g, parameters.numSpotLights )\r\n\t\t\t.replace( /NUM_POINT_LIGHTS/g, parameters.numPointLights )\r\n\t\t\t.replace( /NUM_HEMI_LIGHTS/g, parameters.numHemiLights );\r\n\r\n\t}\r\n\r\n\tfunction parseIncludes( string ) {\r\n\r\n\t\tvar pattern = /#include +<([\\w\\d.]+)>/g;\r\n\r\n\t\tfunction replace( match, include ) {\r\n\r\n\t\t\tvar replace = THREE.ShaderChunk[ include ];\r\n\r\n\t\t\tif ( replace === undefined ) {\r\n\r\n\t\t\t\tthrow new Error( 'Can not resolve #include <' + include + '>' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn parseIncludes( replace );\r\n\r\n\t\t}\r\n\r\n\t\treturn string.replace( pattern, replace );\r\n\r\n\t}\r\n\r\n\tfunction unrollLoops( string ) {\r\n\r\n\t\tvar pattern = /for \\( int i \\= (\\d+)\\; i < (\\d+)\\; i \\+\\+ \\) \\{([\\s\\S]+?)(?=\\})\\}/g;\r\n\r\n\t\tfunction replace( match, start, end, snippet ) {\r\n\r\n\t\t\tvar unroll = '';\r\n\r\n\t\t\tfor ( var i = parseInt( start ); i < parseInt( end ); i ++ ) {\r\n\r\n\t\t\t\tunroll += snippet.replace( /\\[ i \\]/g, '[ ' + i + ' ]' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn unroll;\r\n\r\n\t\t}\r\n\r\n\t\treturn string.replace( pattern, replace );\r\n\r\n\t}\r\n\r\n\treturn function WebGLProgram( renderer, code, material, parameters ) {\r\n\r\n\t\tvar gl = renderer.context;\r\n\r\n\t\tvar extensions = material.extensions;\r\n\t\tvar defines = material.defines;\r\n\r\n\t\tvar vertexShader = material.__webglShader.vertexShader;\r\n\t\tvar fragmentShader = material.__webglShader.fragmentShader;\r\n\r\n\t\tvar shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';\r\n\r\n\t\tif ( parameters.shadowMapType === THREE.PCFShadowMap ) {\r\n\r\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';\r\n\r\n\t\t} else if ( parameters.shadowMapType === THREE.PCFSoftShadowMap ) {\r\n\r\n\t\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';\r\n\r\n\t\t}\r\n\r\n\t\tvar envMapTypeDefine = 'ENVMAP_TYPE_CUBE';\r\n\t\tvar envMapModeDefine = 'ENVMAP_MODE_REFLECTION';\r\n\t\tvar envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\r\n\r\n\t\tif ( parameters.envMap ) {\r\n\r\n\t\t\tswitch ( material.envMap.mapping ) {\r\n\r\n\t\t\t\tcase THREE.CubeReflectionMapping:\r\n\t\t\t\tcase THREE.CubeRefractionMapping:\r\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE';\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase THREE.CubeUVReflectionMapping:\r\n\t\t\t\tcase THREE.CubeUVRefractionMapping:\r\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase THREE.EquirectangularReflectionMapping:\r\n\t\t\t\tcase THREE.EquirectangularRefractionMapping:\r\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_EQUIREC';\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase THREE.SphericalReflectionMapping:\r\n\t\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_SPHERE';\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tswitch ( material.envMap.mapping ) {\r\n\r\n\t\t\t\tcase THREE.CubeRefractionMapping:\r\n\t\t\t\tcase THREE.EquirectangularRefractionMapping:\r\n\t\t\t\t\tenvMapModeDefine = 'ENVMAP_MODE_REFRACTION';\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tswitch ( material.combine ) {\r\n\r\n\t\t\t\tcase THREE.MultiplyOperation:\r\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase THREE.MixOperation:\r\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MIX';\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase THREE.AddOperation:\r\n\t\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_ADD';\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tvar gammaFactorDefine = ( renderer.gammaFactor > 0 ) ? renderer.gammaFactor : 1.0;\r\n\r\n\t\t// console.log( 'building new program ' );\r\n\r\n\t\t//\r\n\r\n\t\tvar customExtensions = generateExtensions( extensions, parameters, renderer.extensions );\r\n\r\n\t\tvar customDefines = generateDefines( defines );\r\n\r\n\t\t//\r\n\r\n\t\tvar program = gl.createProgram();\r\n\r\n\t\tvar prefixVertex, prefixFragment;\r\n\r\n\t\tif ( material instanceof THREE.RawShaderMaterial ) {\r\n\r\n\t\t\tprefixVertex = '';\r\n\t\t\tprefixFragment = '';\r\n\r\n\t\t} else {\r\n\r\n\t\t\tprefixVertex = [\r\n\r\n\t\t\t\t'precision ' + parameters.precision + ' float;',\r\n\t\t\t\t'precision ' + parameters.precision + ' int;',\r\n\r\n\t\t\t\t'#define SHADER_NAME ' + material.__webglShader.name,\r\n\r\n\t\t\t\tcustomDefines,\r\n\r\n\t\t\t\tparameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '',\r\n\r\n\t\t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\r\n\r\n\t\t\t\t'#define MAX_BONES ' + parameters.maxBones,\r\n\r\n\t\t\t\tparameters.map ? '#define USE_MAP' : '',\r\n\t\t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\r\n\t\t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\r\n\t\t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\r\n\t\t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\r\n\t\t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\r\n\t\t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\r\n\t\t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\r\n\t\t\t\tparameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '',\r\n\t\t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\r\n\t\t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\r\n\t\t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\r\n\t\t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\r\n\t\t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\r\n\r\n\t\t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\r\n\r\n\t\t\t\tparameters.skinning ? '#define USE_SKINNING' : '',\r\n\t\t\t\tparameters.useVertexTexture ? '#define BONE_TEXTURE' : '',\r\n\r\n\t\t\t\tparameters.morphTargets ? '#define USE_MORPHTARGETS' : '',\r\n\t\t\t\tparameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',\r\n\t\t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\r\n\t\t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\r\n\r\n\t\t\t\t'#define NUM_CLIPPING_PLANES ' + parameters.numClippingPlanes,\r\n\r\n\t\t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\r\n\t\t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\r\n\r\n\t\t\t\tparameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',\r\n\r\n\t\t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\r\n\t\t\t\tparameters.logarithmicDepthBuffer && renderer.extensions.get( 'EXT_frag_depth' ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\r\n\r\n\t\t\t\t'uniform mat4 modelMatrix;',\r\n\t\t\t\t'uniform mat4 modelViewMatrix;',\r\n\t\t\t\t'uniform mat4 projectionMatrix;',\r\n\t\t\t\t'uniform mat4 viewMatrix;',\r\n\t\t\t\t'uniform mat3 normalMatrix;',\r\n\t\t\t\t'uniform vec3 cameraPosition;',\r\n\r\n\t\t\t\t'attribute vec3 position;',\r\n\t\t\t\t'attribute vec3 normal;',\r\n\t\t\t\t'attribute vec2 uv;',\r\n\r\n\t\t\t\t'#ifdef USE_COLOR',\r\n\r\n\t\t\t\t'\tattribute vec3 color;',\r\n\r\n\t\t\t\t'#endif',\r\n\r\n\t\t\t\t'#ifdef USE_MORPHTARGETS',\r\n\r\n\t\t\t\t'\tattribute vec3 morphTarget0;',\r\n\t\t\t\t'\tattribute vec3 morphTarget1;',\r\n\t\t\t\t'\tattribute vec3 morphTarget2;',\r\n\t\t\t\t'\tattribute vec3 morphTarget3;',\r\n\r\n\t\t\t\t'\t#ifdef USE_MORPHNORMALS',\r\n\r\n\t\t\t\t'\t\tattribute vec3 morphNormal0;',\r\n\t\t\t\t'\t\tattribute vec3 morphNormal1;',\r\n\t\t\t\t'\t\tattribute vec3 morphNormal2;',\r\n\t\t\t\t'\t\tattribute vec3 morphNormal3;',\r\n\r\n\t\t\t\t'\t#else',\r\n\r\n\t\t\t\t'\t\tattribute vec3 morphTarget4;',\r\n\t\t\t\t'\t\tattribute vec3 morphTarget5;',\r\n\t\t\t\t'\t\tattribute vec3 morphTarget6;',\r\n\t\t\t\t'\t\tattribute vec3 morphTarget7;',\r\n\r\n\t\t\t\t'\t#endif',\r\n\r\n\t\t\t\t'#endif',\r\n\r\n\t\t\t\t'#ifdef USE_SKINNING',\r\n\r\n\t\t\t\t'\tattribute vec4 skinIndex;',\r\n\t\t\t\t'\tattribute vec4 skinWeight;',\r\n\r\n\t\t\t\t'#endif',\r\n\r\n\t\t\t\t'\\n'\r\n\r\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\r\n\r\n\t\t\tprefixFragment = [\r\n\r\n\t\t\t\tcustomExtensions,\r\n\r\n\t\t\t\t'precision ' + parameters.precision + ' float;',\r\n\t\t\t\t'precision ' + parameters.precision + ' int;',\r\n\r\n\t\t\t\t'#define SHADER_NAME ' + material.__webglShader.name,\r\n\r\n\t\t\t\tcustomDefines,\r\n\r\n\t\t\t\tparameters.alphaTest ? '#define ALPHATEST ' + parameters.alphaTest : '',\r\n\r\n\t\t\t\t'#define GAMMA_FACTOR ' + gammaFactorDefine,\r\n\r\n\t\t\t\t( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',\r\n\t\t\t\t( parameters.useFog && parameters.fogExp ) ? '#define FOG_EXP2' : '',\r\n\r\n\t\t\t\tparameters.map ? '#define USE_MAP' : '',\r\n\t\t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\r\n\t\t\t\tparameters.envMap ? '#define ' + envMapTypeDefine : '',\r\n\t\t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\r\n\t\t\t\tparameters.envMap ? '#define ' + envMapBlendingDefine : '',\r\n\t\t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\r\n\t\t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\r\n\t\t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\r\n\t\t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\r\n\t\t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\r\n\t\t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\r\n\t\t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\r\n\t\t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\r\n\t\t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\r\n\t\t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\r\n\r\n\t\t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\r\n\r\n\t\t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\r\n\t\t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\r\n\r\n\t\t\t\t'#define NUM_CLIPPING_PLANES ' + parameters.numClippingPlanes,\r\n\r\n\t\t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\r\n\t\t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\r\n\r\n\t\t\t\tparameters.premultipliedAlpha ? \"#define PREMULTIPLIED_ALPHA\" : '',\r\n\r\n\t\t\t\tparameters.physicallyCorrectLights ? \"#define PHYSICALLY_CORRECT_LIGHTS\" : '',\r\n\r\n\t\t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\r\n\t\t\t\tparameters.logarithmicDepthBuffer && renderer.extensions.get( 'EXT_frag_depth' ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\r\n\r\n\t\t\t\tparameters.envMap && renderer.extensions.get( 'EXT_shader_texture_lod' ) ? '#define TEXTURE_LOD_EXT' : '',\r\n\r\n\t\t\t\t'uniform mat4 viewMatrix;',\r\n\t\t\t\t'uniform vec3 cameraPosition;',\r\n\r\n\t\t\t\t( parameters.toneMapping !== THREE.NoToneMapping ) ? \"#define TONE_MAPPING\" : '',\r\n\t\t\t\t( parameters.toneMapping !== THREE.NoToneMapping ) ? THREE.ShaderChunk[ 'tonemapping_pars_fragment' ] : '',  // this code is required here because it is used by the toneMapping() function defined below\r\n\t\t\t\t( parameters.toneMapping !== THREE.NoToneMapping ) ? getToneMappingFunction( \"toneMapping\", parameters.toneMapping ) : '',\r\n\r\n\t\t\t\t( parameters.outputEncoding || parameters.mapEncoding || parameters.envMapEncoding || parameters.emissiveMapEncoding ) ? THREE.ShaderChunk[ 'encodings_pars_fragment' ] : '', // this code is required here because it is used by the various encoding/decoding function defined below\r\n\t\t\t\tparameters.mapEncoding ? getTexelDecodingFunction( 'mapTexelToLinear', parameters.mapEncoding ) : '',\r\n\t\t\t\tparameters.envMapEncoding ? getTexelDecodingFunction( 'envMapTexelToLinear', parameters.envMapEncoding ) : '',\r\n\t\t\t\tparameters.emissiveMapEncoding ? getTexelDecodingFunction( 'emissiveMapTexelToLinear', parameters.emissiveMapEncoding ) : '',\r\n\t\t\t\tparameters.outputEncoding ? getTexelEncodingFunction( \"linearToOutputTexel\", parameters.outputEncoding ) : '',\r\n\r\n\t\t\t\tparameters.depthPacking ? \"#define DEPTH_PACKING \" + material.depthPacking : '',\r\n\r\n\t\t\t\t'\\n'\r\n\r\n\t\t\t].filter( filterEmptyLine ).join( '\\n' );\r\n\r\n\t\t}\r\n\r\n\t\tvertexShader = parseIncludes( vertexShader, parameters );\r\n\t\tvertexShader = replaceLightNums( vertexShader, parameters );\r\n\r\n\t\tfragmentShader = parseIncludes( fragmentShader, parameters );\r\n\t\tfragmentShader = replaceLightNums( fragmentShader, parameters );\r\n\r\n\t\tif ( material instanceof THREE.ShaderMaterial === false ) {\r\n\r\n\t\t\tvertexShader = unrollLoops( vertexShader );\r\n\t\t\tfragmentShader = unrollLoops( fragmentShader );\r\n\r\n\t\t}\r\n\r\n\t\tvar vertexGlsl = prefixVertex + vertexShader;\r\n\t\tvar fragmentGlsl = prefixFragment + fragmentShader;\r\n\r\n\t\t// console.log( '*VERTEX*', vertexGlsl );\r\n\t\t// console.log( '*FRAGMENT*', fragmentGlsl );\r\n\r\n\t\tvar glVertexShader = THREE.WebGLShader( gl, gl.VERTEX_SHADER, vertexGlsl );\r\n\t\tvar glFragmentShader = THREE.WebGLShader( gl, gl.FRAGMENT_SHADER, fragmentGlsl );\r\n\r\n\t\tgl.attachShader( program, glVertexShader );\r\n\t\tgl.attachShader( program, glFragmentShader );\r\n\r\n\t\t// Force a particular attribute to index 0.\r\n\r\n\t\tif ( material.index0AttributeName !== undefined ) {\r\n\r\n\t\t\tgl.bindAttribLocation( program, 0, material.index0AttributeName );\r\n\r\n\t\t} else if ( parameters.morphTargets === true ) {\r\n\r\n\t\t\t// programs with morphTargets displace position out of attribute 0\r\n\t\t\tgl.bindAttribLocation( program, 0, 'position' );\r\n\r\n\t\t}\r\n\r\n\t\tgl.linkProgram( program );\r\n\r\n\t\tvar programLog = gl.getProgramInfoLog( program );\r\n\t\tvar vertexLog = gl.getShaderInfoLog( glVertexShader );\r\n\t\tvar fragmentLog = gl.getShaderInfoLog( glFragmentShader );\r\n\r\n\t\tvar runnable = true;\r\n\t\tvar haveDiagnostics = true;\r\n\r\n\t\t// console.log( '**VERTEX**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glVertexShader ) );\r\n\t\t// console.log( '**FRAGMENT**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( glFragmentShader ) );\r\n\r\n\t\tif ( gl.getProgramParameter( program, gl.LINK_STATUS ) === false ) {\r\n\r\n\t\t\trunnable = false;\r\n\r\n\t\t\tconsole.error( 'THREE.WebGLProgram: shader error: ', gl.getError(), 'gl.VALIDATE_STATUS', gl.getProgramParameter( program, gl.VALIDATE_STATUS ), 'gl.getProgramInfoLog', programLog, vertexLog, fragmentLog );\r\n\r\n\t\t} else if ( programLog !== '' ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLProgram: gl.getProgramInfoLog()', programLog );\r\n\r\n\t\t} else if ( vertexLog === '' || fragmentLog === '' ) {\r\n\r\n\t\t\thaveDiagnostics = false;\r\n\r\n\t\t}\r\n\r\n\t\tif ( haveDiagnostics ) {\r\n\r\n\t\t\tthis.diagnostics = {\r\n\r\n\t\t\t\trunnable: runnable,\r\n\t\t\t\tmaterial: material,\r\n\r\n\t\t\t\tprogramLog: programLog,\r\n\r\n\t\t\t\tvertexShader: {\r\n\r\n\t\t\t\t\tlog: vertexLog,\r\n\t\t\t\t\tprefix: prefixVertex\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tfragmentShader: {\r\n\r\n\t\t\t\t\tlog: fragmentLog,\r\n\t\t\t\t\tprefix: prefixFragment\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\t// clean up\r\n\r\n\t\tgl.deleteShader( glVertexShader );\r\n\t\tgl.deleteShader( glFragmentShader );\r\n\r\n\t\t// set up caching for uniform locations\r\n\r\n\t\tvar cachedUniforms;\r\n\r\n\t\tthis.getUniforms = function() {\r\n\r\n\t\t\tif ( cachedUniforms === undefined ) {\r\n\r\n\t\t\t\tcachedUniforms =\r\n\t\t\t\t\t\tnew THREE.WebGLUniforms( gl, program, renderer );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn cachedUniforms;\r\n\r\n\t\t};\r\n\r\n\t\t// set up caching for attribute locations\r\n\r\n\t\tvar cachedAttributes;\r\n\r\n\t\tthis.getAttributes = function() {\r\n\r\n\t\t\tif ( cachedAttributes === undefined ) {\r\n\r\n\t\t\t\tcachedAttributes = fetchAttributeLocations( gl, program );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn cachedAttributes;\r\n\r\n\t\t};\r\n\r\n\t\t// free resource\r\n\r\n\t\tthis.destroy = function() {\r\n\r\n\t\t\tgl.deleteProgram( program );\r\n\t\t\tthis.program = undefined;\r\n\r\n\t\t};\r\n\r\n\t\t// DEPRECATED\r\n\r\n\t\tObject.defineProperties( this, {\r\n\r\n\t\t\tuniforms: {\r\n\t\t\t\tget: function() {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.WebGLProgram: .uniforms is now .getUniforms().' );\r\n\t\t\t\t\treturn this.getUniforms();\r\n\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\tattributes: {\r\n\t\t\t\tget: function() {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.WebGLProgram: .attributes is now .getAttributes().' );\r\n\t\t\t\t\treturn this.getAttributes();\r\n\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t} );\r\n\r\n\r\n\t\t//\r\n\r\n\t\tthis.id = programIdCount ++;\r\n\t\tthis.code = code;\r\n\t\tthis.usedTimes = 1;\r\n\t\tthis.program = program;\r\n\t\tthis.vertexShader = glVertexShader;\r\n\t\tthis.fragmentShader = glFragmentShader;\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n} )();\r\n\r\n// File:src/renderers/webgl/WebGLPrograms.js\r\n\r\nTHREE.WebGLPrograms = function ( renderer, capabilities ) {\r\n\r\n\tvar programs = [];\r\n\r\n\tvar shaderIDs = {\r\n\t\tMeshDepthMaterial: 'depth',\r\n\t\tMeshNormalMaterial: 'normal',\r\n\t\tMeshBasicMaterial: 'basic',\r\n\t\tMeshLambertMaterial: 'lambert',\r\n\t\tMeshPhongMaterial: 'phong',\r\n\t\tMeshStandardMaterial: 'physical',\r\n\t\tMeshPhysicalMaterial: 'physical',\r\n\t\tLineBasicMaterial: 'basic',\r\n\t\tLineDashedMaterial: 'dashed',\r\n\t\tPointsMaterial: 'points'\r\n\t};\r\n\r\n\tvar parameterNames = [\r\n\t\t\"precision\", \"supportsVertexTextures\", \"map\", \"mapEncoding\", \"envMap\", \"envMapMode\", \"envMapEncoding\",\r\n\t\t\"lightMap\", \"aoMap\", \"emissiveMap\", \"emissiveMapEncoding\", \"bumpMap\", \"normalMap\", \"displacementMap\", \"specularMap\",\r\n\t\t\"roughnessMap\", \"metalnessMap\",\r\n\t\t\"alphaMap\", \"combine\", \"vertexColors\", \"fog\", \"useFog\", \"fogExp\",\r\n\t\t\"flatShading\", \"sizeAttenuation\", \"logarithmicDepthBuffer\", \"skinning\",\r\n\t\t\"maxBones\", \"useVertexTexture\", \"morphTargets\", \"morphNormals\",\r\n\t\t\"maxMorphTargets\", \"maxMorphNormals\", \"premultipliedAlpha\",\r\n\t\t\"numDirLights\", \"numPointLights\", \"numSpotLights\", \"numHemiLights\",\r\n\t\t\"shadowMapEnabled\", \"shadowMapType\", \"toneMapping\", 'physicallyCorrectLights',\r\n\t\t\"alphaTest\", \"doubleSided\", \"flipSided\", \"numClippingPlanes\", \"depthPacking\"\r\n\t];\r\n\r\n\r\n\tfunction allocateBones ( object ) {\r\n\r\n\t\tif ( capabilities.floatVertexTextures && object && object.skeleton && object.skeleton.useVertexTexture ) {\r\n\r\n\t\t\treturn 1024;\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// default for when object is not specified\r\n\t\t\t// ( for example when prebuilding shader to be used with multiple objects )\r\n\t\t\t//\r\n\t\t\t//  - leave some extra space for other uniforms\r\n\t\t\t//  - limit here is ANGLE's 254 max uniform vectors\r\n\t\t\t//    (up to 54 should be safe)\r\n\r\n\t\t\tvar nVertexUniforms = capabilities.maxVertexUniforms;\r\n\t\t\tvar nVertexMatrices = Math.floor( ( nVertexUniforms - 20 ) / 4 );\r\n\r\n\t\t\tvar maxBones = nVertexMatrices;\r\n\r\n\t\t\tif ( object !== undefined && object instanceof THREE.SkinnedMesh ) {\r\n\r\n\t\t\t\tmaxBones = Math.min( object.skeleton.bones.length, maxBones );\r\n\r\n\t\t\t\tif ( maxBones < object.skeleton.bones.length ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'WebGLRenderer: too many bones - ' + object.skeleton.bones.length + ', this GPU supports just ' + maxBones + ' (try OpenGL instead of ANGLE)' );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn maxBones;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction getTextureEncodingFromMap( map, gammaOverrideLinear ) {\r\n\r\n\t\tvar encoding;\r\n\r\n\t\tif ( ! map ) {\r\n\r\n\t\t\tencoding = THREE.LinearEncoding;\r\n\r\n\t\t} else if ( map instanceof THREE.Texture ) {\r\n\r\n\t\t\tencoding = map.encoding;\r\n\r\n\t\t} else if ( map instanceof THREE.WebGLRenderTarget ) {\r\n\r\n\t\t\tconsole.warn( \"THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead.\" );\r\n\t\t\tencoding = map.texture.encoding;\r\n\r\n\t\t}\r\n\r\n\t\t// add backwards compatibility for WebGLRenderer.gammaInput/gammaOutput parameter, should probably be removed at some point.\r\n\t\tif ( encoding === THREE.LinearEncoding && gammaOverrideLinear ) {\r\n\r\n\t\t\tencoding = THREE.GammaEncoding;\r\n\r\n\t\t}\r\n\r\n\t\treturn encoding;\r\n\r\n\t}\r\n\r\n\tthis.getParameters = function ( material, lights, fog, nClipPlanes, object ) {\r\n\r\n\t\tvar shaderID = shaderIDs[ material.type ];\r\n\r\n\t\t// heuristics to create shader parameters according to lights in the scene\r\n\t\t// (not to blow over maxLights budget)\r\n\r\n\t\tvar maxBones = allocateBones( object );\r\n\t\tvar precision = renderer.getPrecision();\r\n\r\n\t\tif ( material.precision !== null ) {\r\n\r\n\t\t\tprecision = capabilities.getMaxPrecision( material.precision );\r\n\r\n\t\t\tif ( precision !== material.precision ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tvar currentRenderTarget = renderer.getCurrentRenderTarget();\r\n\r\n\t\tvar parameters = {\r\n\r\n\t\t\tshaderID: shaderID,\r\n\r\n\t\t\tprecision: precision,\r\n\t\t\tsupportsVertexTextures: capabilities.vertexTextures,\r\n\t\t\toutputEncoding: getTextureEncodingFromMap( ( ! currentRenderTarget ) ? null : currentRenderTarget.texture, renderer.gammaOutput ),\r\n\t\t\tmap: !! material.map,\r\n\t\t\tmapEncoding: getTextureEncodingFromMap( material.map, renderer.gammaInput ),\r\n\t\t\tenvMap: !! material.envMap,\r\n\t\t\tenvMapMode: material.envMap && material.envMap.mapping,\r\n\t\t\tenvMapEncoding: getTextureEncodingFromMap( material.envMap, renderer.gammaInput ),\r\n\t\t\tenvMapCubeUV: ( !! material.envMap ) && ( ( material.envMap.mapping === THREE.CubeUVReflectionMapping ) || ( material.envMap.mapping === THREE.CubeUVRefractionMapping ) ),\r\n\t\t\tlightMap: !! material.lightMap,\r\n\t\t\taoMap: !! material.aoMap,\r\n\t\t\temissiveMap: !! material.emissiveMap,\r\n\t\t\temissiveMapEncoding: getTextureEncodingFromMap( material.emissiveMap, renderer.gammaInput ),\r\n\t\t\tbumpMap: !! material.bumpMap,\r\n\t\t\tnormalMap: !! material.normalMap,\r\n\t\t\tdisplacementMap: !! material.displacementMap,\r\n\t\t\troughnessMap: !! material.roughnessMap,\r\n\t\t\tmetalnessMap: !! material.metalnessMap,\r\n\t\t\tspecularMap: !! material.specularMap,\r\n\t\t\talphaMap: !! material.alphaMap,\r\n\r\n\t\t\tcombine: material.combine,\r\n\r\n\t\t\tvertexColors: material.vertexColors,\r\n\r\n\t\t\tfog: fog,\r\n\t\t\tuseFog: material.fog,\r\n\t\t\tfogExp: fog instanceof THREE.FogExp2,\r\n\r\n\t\t\tflatShading: material.shading === THREE.FlatShading,\r\n\r\n\t\t\tsizeAttenuation: material.sizeAttenuation,\r\n\t\t\tlogarithmicDepthBuffer: capabilities.logarithmicDepthBuffer,\r\n\r\n\t\t\tskinning: material.skinning,\r\n\t\t\tmaxBones: maxBones,\r\n\t\t\tuseVertexTexture: capabilities.floatVertexTextures && object && object.skeleton && object.skeleton.useVertexTexture,\r\n\r\n\t\t\tmorphTargets: material.morphTargets,\r\n\t\t\tmorphNormals: material.morphNormals,\r\n\t\t\tmaxMorphTargets: renderer.maxMorphTargets,\r\n\t\t\tmaxMorphNormals: renderer.maxMorphNormals,\r\n\r\n\t\t\tnumDirLights: lights.directional.length,\r\n\t\t\tnumPointLights: lights.point.length,\r\n\t\t\tnumSpotLights: lights.spot.length,\r\n\t\t\tnumHemiLights: lights.hemi.length,\r\n\r\n\t\t\tnumClippingPlanes: nClipPlanes,\r\n\r\n\t\t\tshadowMapEnabled: renderer.shadowMap.enabled && object.receiveShadow && lights.shadows.length > 0,\r\n\t\t\tshadowMapType: renderer.shadowMap.type,\r\n\r\n\t\t\ttoneMapping: renderer.toneMapping,\r\n\t\t\tphysicallyCorrectLights: renderer.physicallyCorrectLights,\r\n\r\n\t\t\tpremultipliedAlpha: material.premultipliedAlpha,\r\n\r\n\t\t\talphaTest: material.alphaTest,\r\n\t\t\tdoubleSided: material.side === THREE.DoubleSide,\r\n\t\t\tflipSided: material.side === THREE.BackSide,\r\n\r\n\t\t\tdepthPacking: ( material.depthPacking !== undefined ) ? material.depthPacking : false\r\n\r\n\t\t};\r\n\r\n\t\treturn parameters;\r\n\r\n\t};\r\n\r\n\tthis.getProgramCode = function ( material, parameters ) {\r\n\r\n\t\tvar array = [];\r\n\r\n\t\tif ( parameters.shaderID ) {\r\n\r\n\t\t\tarray.push( parameters.shaderID );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tarray.push( material.fragmentShader );\r\n\t\t\tarray.push( material.vertexShader );\r\n\r\n\t\t}\r\n\r\n\t\tif ( material.defines !== undefined ) {\r\n\r\n\t\t\tfor ( var name in material.defines ) {\r\n\r\n\t\t\t\tarray.push( name );\r\n\t\t\t\tarray.push( material.defines[ name ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfor ( var i = 0; i < parameterNames.length; i ++ ) {\r\n\r\n\t\t\tarray.push( parameters[ parameterNames[ i ] ] );\r\n\r\n\t\t}\r\n\r\n\t\treturn array.join();\r\n\r\n\t};\r\n\r\n\tthis.acquireProgram = function ( material, parameters, code ) {\r\n\r\n\t\tvar program;\r\n\r\n\t\t// Check if code has been already compiled\r\n\t\tfor ( var p = 0, pl = programs.length; p < pl; p ++ ) {\r\n\r\n\t\t\tvar programInfo = programs[ p ];\r\n\r\n\t\t\tif ( programInfo.code === code ) {\r\n\r\n\t\t\t\tprogram = programInfo;\r\n\t\t\t\t++ program.usedTimes;\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( program === undefined ) {\r\n\r\n\t\t\tprogram = new THREE.WebGLProgram( renderer, code, material, parameters );\r\n\t\t\tprograms.push( program );\r\n\r\n\t\t}\r\n\r\n\t\treturn program;\r\n\r\n\t};\r\n\r\n\tthis.releaseProgram = function( program ) {\r\n\r\n\t\tif ( -- program.usedTimes === 0 ) {\r\n\r\n\t\t\t// Remove from unordered set\r\n\t\t\tvar i = programs.indexOf( program );\r\n\t\t\tprograms[ i ] = programs[ programs.length - 1 ];\r\n\t\t\tprograms.pop();\r\n\r\n\t\t\t// Free WebGL resources\r\n\t\t\tprogram.destroy();\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t// Exposed for resource monitoring & error feedback via renderer.info:\r\n\tthis.programs = programs;\r\n\r\n};\r\n\r\n// File:src/renderers/webgl/WebGLProperties.js\r\n\r\n/**\r\n* @author fordacious / fordacious.github.io\r\n*/\r\n\r\nTHREE.WebGLProperties = function () {\r\n\r\n\tvar properties = {};\r\n\r\n\tthis.get = function ( object ) {\r\n\r\n\t\tvar uuid = object.uuid;\r\n\t\tvar map = properties[ uuid ];\r\n\r\n\t\tif ( map === undefined ) {\r\n\r\n\t\t\tmap = {};\r\n\t\t\tproperties[ uuid ] = map;\r\n\r\n\t\t}\r\n\r\n\t\treturn map;\r\n\r\n\t};\r\n\r\n\tthis.delete = function ( object ) {\r\n\r\n\t\tdelete properties[ object.uuid ];\r\n\r\n\t};\r\n\r\n\tthis.clear = function () {\r\n\r\n\t\tproperties = {};\r\n\r\n\t};\r\n\r\n};\r\n\r\n// File:src/renderers/webgl/WebGLShader.js\r\n\r\nTHREE.WebGLShader = ( function () {\r\n\r\n\tfunction addLineNumbers( string ) {\r\n\r\n\t\tvar lines = string.split( '\\n' );\r\n\r\n\t\tfor ( var i = 0; i < lines.length; i ++ ) {\r\n\r\n\t\t\tlines[ i ] = ( i + 1 ) + ': ' + lines[ i ];\r\n\r\n\t\t}\r\n\r\n\t\treturn lines.join( '\\n' );\r\n\r\n\t}\r\n\r\n\treturn function WebGLShader( gl, type, string ) {\r\n\r\n\t\tvar shader = gl.createShader( type );\r\n\r\n\t\tgl.shaderSource( shader, string );\r\n\t\tgl.compileShader( shader );\r\n\r\n\t\tif ( gl.getShaderParameter( shader, gl.COMPILE_STATUS ) === false ) {\r\n\r\n\t\t\tconsole.error( 'THREE.WebGLShader: Shader couldn\\'t compile.' );\r\n\r\n\t\t}\r\n\r\n\t\tif ( gl.getShaderInfoLog( shader ) !== '' ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.WebGLShader: gl.getShaderInfoLog()', type === gl.VERTEX_SHADER ? 'vertex' : 'fragment', gl.getShaderInfoLog( shader ), addLineNumbers( string ) );\r\n\r\n\t\t}\r\n\r\n\t\t// --enable-privileged-webgl-extension\r\n\t\t// console.log( type, gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );\r\n\r\n\t\treturn shader;\r\n\r\n\t};\r\n\r\n} )();\r\n\r\n// File:src/renderers/webgl/WebGLShadowMap.js\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.WebGLShadowMap = function ( _renderer, _lights, _objects ) {\r\n\r\n\tvar _gl = _renderer.context,\r\n\t_state = _renderer.state,\r\n\t_frustum = new THREE.Frustum(),\r\n\t_projScreenMatrix = new THREE.Matrix4(),\r\n\r\n\t_lightShadows = _lights.shadows,\r\n\r\n\t_shadowMapSize = new THREE.Vector2(),\r\n\r\n\t_lookTarget = new THREE.Vector3(),\r\n\t_lightPositionWorld = new THREE.Vector3(),\r\n\r\n\t_renderList = [],\r\n\r\n\t_MorphingFlag = 1,\r\n\t_SkinningFlag = 2,\r\n\r\n\t_NumberOfMaterialVariants = ( _MorphingFlag | _SkinningFlag ) + 1,\r\n\r\n\t_depthMaterials = new Array( _NumberOfMaterialVariants ),\r\n\t_distanceMaterials = new Array( _NumberOfMaterialVariants ),\r\n\r\n\t_materialCache = {};\r\n\r\n\tvar cubeDirections = [\r\n\t\tnew THREE.Vector3( 1, 0, 0 ), new THREE.Vector3( - 1, 0, 0 ), new THREE.Vector3( 0, 0, 1 ),\r\n\t\tnew THREE.Vector3( 0, 0, - 1 ), new THREE.Vector3( 0, 1, 0 ), new THREE.Vector3( 0, - 1, 0 )\r\n\t];\r\n\r\n\tvar cubeUps = [\r\n\t\tnew THREE.Vector3( 0, 1, 0 ), new THREE.Vector3( 0, 1, 0 ), new THREE.Vector3( 0, 1, 0 ),\r\n\t\tnew THREE.Vector3( 0, 1, 0 ), new THREE.Vector3( 0, 0, 1 ),\tnew THREE.Vector3( 0, 0, - 1 )\r\n\t];\r\n\r\n\tvar cube2DViewPorts = [\r\n\t\tnew THREE.Vector4(), new THREE.Vector4(), new THREE.Vector4(),\r\n\t\tnew THREE.Vector4(), new THREE.Vector4(), new THREE.Vector4()\r\n\t];\r\n\r\n\t// init\r\n\r\n\tvar depthMaterialTemplate = new THREE.MeshDepthMaterial();\r\n\tdepthMaterialTemplate.depthPacking = THREE.RGBADepthPacking;\r\n\tdepthMaterialTemplate.clipping = true;\r\n\r\n\tvar distanceShader = THREE.ShaderLib[ \"distanceRGBA\" ];\r\n\tvar distanceUniforms = THREE.UniformsUtils.clone( distanceShader.uniforms );\r\n\r\n\tfor ( var i = 0; i !== _NumberOfMaterialVariants; ++ i ) {\r\n\r\n\t\tvar useMorphing = ( i & _MorphingFlag ) !== 0;\r\n\t\tvar useSkinning = ( i & _SkinningFlag ) !== 0;\r\n\r\n\t\tvar depthMaterial = depthMaterialTemplate.clone();\r\n\t\tdepthMaterial.morphTargets = useMorphing;\r\n\t\tdepthMaterial.skinning = useSkinning;\r\n\r\n\t\t_depthMaterials[ i ] = depthMaterial;\r\n\r\n\t\tvar distanceMaterial = new THREE.ShaderMaterial( {\r\n\t\t\tdefines: {\r\n\t\t\t\t'USE_SHADOWMAP': ''\r\n\t\t\t},\r\n\t\t\tuniforms: distanceUniforms,\r\n\t\t\tvertexShader: distanceShader.vertexShader,\r\n\t\t\tfragmentShader: distanceShader.fragmentShader,\r\n\t\t\tmorphTargets: useMorphing,\r\n\t\t\tskinning: useSkinning,\r\n\t\t\tclipping: true\r\n\t\t} );\r\n\r\n\t\t_distanceMaterials[ i ] = distanceMaterial;\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tvar scope = this;\r\n\r\n\tthis.enabled = false;\r\n\r\n\tthis.autoUpdate = true;\r\n\tthis.needsUpdate = false;\r\n\r\n\tthis.type = THREE.PCFShadowMap;\r\n\r\n\tthis.renderReverseSided = true;\r\n\tthis.renderSingleSided = true;\r\n\r\n\tthis.render = function ( scene, camera ) {\r\n\r\n\t\tif ( scope.enabled === false ) return;\r\n\t\tif ( scope.autoUpdate === false && scope.needsUpdate === false ) return;\r\n\r\n\t\tif ( _lightShadows.length === 0 ) return;\r\n\r\n\t\t// Set GL state for depth map.\r\n\t\t_state.clearColor( 1, 1, 1, 1 );\r\n\t\t_state.disable( _gl.BLEND );\r\n\t\t_state.setDepthTest( true );\r\n\t\t_state.setScissorTest( false );\r\n\r\n\t\t// render depth map\r\n\r\n\t\tvar faceCount, isPointLight;\r\n\r\n\t\tfor ( var i = 0, il = _lightShadows.length; i < il; i ++ ) {\r\n\r\n\t\t\tvar light = _lightShadows[ i ];\r\n\t\t\tvar shadow = light.shadow;\r\n\r\n\t\t\tif ( shadow === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.WebGLShadowMap:', light, 'has no shadow.' );\r\n\t\t\t\tcontinue;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar shadowCamera = shadow.camera;\r\n\r\n\t\t\t_shadowMapSize.copy( shadow.mapSize );\r\n\r\n\t\t\tif ( light instanceof THREE.PointLight ) {\r\n\r\n\t\t\t\tfaceCount = 6;\r\n\t\t\t\tisPointLight = true;\r\n\r\n\t\t\t\tvar vpWidth = _shadowMapSize.x;\r\n\t\t\t\tvar vpHeight = _shadowMapSize.y;\r\n\r\n\t\t\t\t// These viewports map a cube-map onto a 2D texture with the\r\n\t\t\t\t// following orientation:\r\n\t\t\t\t//\r\n\t\t\t\t//  xzXZ\r\n\t\t\t\t//   y Y\r\n\t\t\t\t//\r\n\t\t\t\t// X - Positive x direction\r\n\t\t\t\t// x - Negative x direction\r\n\t\t\t\t// Y - Positive y direction\r\n\t\t\t\t// y - Negative y direction\r\n\t\t\t\t// Z - Positive z direction\r\n\t\t\t\t// z - Negative z direction\r\n\r\n\t\t\t\t// positive X\r\n\t\t\t\tcube2DViewPorts[ 0 ].set( vpWidth * 2, vpHeight, vpWidth, vpHeight );\r\n\t\t\t\t// negative X\r\n\t\t\t\tcube2DViewPorts[ 1 ].set( 0, vpHeight, vpWidth, vpHeight );\r\n\t\t\t\t// positive Z\r\n\t\t\t\tcube2DViewPorts[ 2 ].set( vpWidth * 3, vpHeight, vpWidth, vpHeight );\r\n\t\t\t\t// negative Z\r\n\t\t\t\tcube2DViewPorts[ 3 ].set( vpWidth, vpHeight, vpWidth, vpHeight );\r\n\t\t\t\t// positive Y\r\n\t\t\t\tcube2DViewPorts[ 4 ].set( vpWidth * 3, 0, vpWidth, vpHeight );\r\n\t\t\t\t// negative Y\r\n\t\t\t\tcube2DViewPorts[ 5 ].set( vpWidth, 0, vpWidth, vpHeight );\r\n\r\n\t\t\t\t_shadowMapSize.x *= 4.0;\r\n\t\t\t\t_shadowMapSize.y *= 2.0;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tfaceCount = 1;\r\n\t\t\t\tisPointLight = false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( shadow.map === null ) {\r\n\r\n\t\t\t\tvar pars = { minFilter: THREE.NearestFilter, magFilter: THREE.NearestFilter, format: THREE.RGBAFormat };\r\n\r\n\t\t\t\tshadow.map = new THREE.WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );\r\n\r\n\t\t\t\tshadowCamera.updateProjectionMatrix();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( shadow instanceof THREE.SpotLightShadow ) {\r\n\r\n\t\t\t\tshadow.update( light );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar shadowMap = shadow.map;\r\n\t\t\tvar shadowMatrix = shadow.matrix;\r\n\r\n\t\t\t_lightPositionWorld.setFromMatrixPosition( light.matrixWorld );\r\n\t\t\tshadowCamera.position.copy( _lightPositionWorld );\r\n\r\n\t\t\t_renderer.setRenderTarget( shadowMap );\r\n\t\t\t_renderer.clear();\r\n\r\n\t\t\t// render shadow map for each cube face (if omni-directional) or\r\n\t\t\t// run a single pass if not\r\n\r\n\t\t\tfor ( var face = 0; face < faceCount; face ++ ) {\r\n\r\n\t\t\t\tif ( isPointLight ) {\r\n\r\n\t\t\t\t\t_lookTarget.copy( shadowCamera.position );\r\n\t\t\t\t\t_lookTarget.add( cubeDirections[ face ] );\r\n\t\t\t\t\tshadowCamera.up.copy( cubeUps[ face ] );\r\n\t\t\t\t\tshadowCamera.lookAt( _lookTarget );\r\n\r\n\t\t\t\t\tvar vpDimensions = cube2DViewPorts[ face ];\r\n\t\t\t\t\t_state.viewport( vpDimensions );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t_lookTarget.setFromMatrixPosition( light.target.matrixWorld );\r\n\t\t\t\t\tshadowCamera.lookAt( _lookTarget );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tshadowCamera.updateMatrixWorld();\r\n\t\t\t\tshadowCamera.matrixWorldInverse.getInverse( shadowCamera.matrixWorld );\r\n\r\n\t\t\t\t// compute shadow matrix\r\n\r\n\t\t\t\tshadowMatrix.set(\r\n\t\t\t\t\t0.5, 0.0, 0.0, 0.5,\r\n\t\t\t\t\t0.0, 0.5, 0.0, 0.5,\r\n\t\t\t\t\t0.0, 0.0, 0.5, 0.5,\r\n\t\t\t\t\t0.0, 0.0, 0.0, 1.0\r\n\t\t\t\t);\r\n\r\n\t\t\t\tshadowMatrix.multiply( shadowCamera.projectionMatrix );\r\n\t\t\t\tshadowMatrix.multiply( shadowCamera.matrixWorldInverse );\r\n\r\n\t\t\t\t// update camera matrices and frustum\r\n\r\n\t\t\t\t_projScreenMatrix.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );\r\n\t\t\t\t_frustum.setFromMatrix( _projScreenMatrix );\r\n\r\n\t\t\t\t// set object matrices & frustum culling\r\n\r\n\t\t\t\t_renderList.length = 0;\r\n\r\n\t\t\t\tprojectObject( scene, camera, shadowCamera );\r\n\r\n\t\t\t\t// render shadow map\r\n\t\t\t\t// render regular objects\r\n\r\n\t\t\t\tfor ( var j = 0, jl = _renderList.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\tvar object = _renderList[ j ];\r\n\t\t\t\t\tvar geometry = _objects.update( object );\r\n\t\t\t\t\tvar material = object.material;\r\n\r\n\t\t\t\t\tif ( material instanceof THREE.MultiMaterial ) {\r\n\r\n\t\t\t\t\t\tvar groups = geometry.groups;\r\n\t\t\t\t\t\tvar materials = material.materials;\r\n\r\n\t\t\t\t\t\tfor ( var k = 0, kl = groups.length; k < kl; k ++ ) {\r\n\r\n\t\t\t\t\t\t\tvar group = groups[ k ];\r\n\t\t\t\t\t\t\tvar groupMaterial = materials[ group.materialIndex ];\r\n\r\n\t\t\t\t\t\t\tif ( groupMaterial.visible === true ) {\r\n\r\n\t\t\t\t\t\t\t\tvar depthMaterial = getDepthMaterial( object, groupMaterial, isPointLight, _lightPositionWorld );\r\n\t\t\t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, group );\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tvar depthMaterial = getDepthMaterial( object, material, isPointLight, _lightPositionWorld );\r\n\t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, null );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// Restore GL state.\r\n\t\tvar clearColor = _renderer.getClearColor(),\r\n\t\tclearAlpha = _renderer.getClearAlpha();\r\n\t\t_renderer.setClearColor( clearColor, clearAlpha );\r\n\r\n\t\tscope.needsUpdate = false;\r\n\r\n\t};\r\n\r\n\tfunction getDepthMaterial( object, material, isPointLight, lightPositionWorld ) {\r\n\r\n\t\tvar geometry = object.geometry;\r\n\r\n\t\tvar result = null;\r\n\r\n\t\tvar materialVariants = _depthMaterials;\r\n\t\tvar customMaterial = object.customDepthMaterial;\r\n\r\n\t\tif ( isPointLight ) {\r\n\r\n\t\t\tmaterialVariants = _distanceMaterials;\r\n\t\t\tcustomMaterial = object.customDistanceMaterial;\r\n\r\n\t\t}\r\n\r\n\t\tif ( ! customMaterial ) {\r\n\r\n\t\t\tvar useMorphing = geometry.morphTargets !== undefined &&\r\n\t\t\t\t\tgeometry.morphTargets.length > 0 && material.morphTargets;\r\n\r\n\t\t\tvar useSkinning = object instanceof THREE.SkinnedMesh && material.skinning;\r\n\r\n\t\t\tvar variantIndex = 0;\r\n\r\n\t\t\tif ( useMorphing ) variantIndex |= _MorphingFlag;\r\n\t\t\tif ( useSkinning ) variantIndex |= _SkinningFlag;\r\n\r\n\t\t\tresult = materialVariants[ variantIndex ];\r\n\r\n\t\t} else {\r\n\r\n\t\t\tresult = customMaterial;\r\n\r\n\t\t}\r\n\r\n\t\tif ( _renderer.localClippingEnabled &&\r\n\t\t\t material.clipShadows === true &&\r\n\t\t\t\tmaterial.clippingPlanes.length !== 0 ) {\r\n\r\n\t\t\t// in this case we need a unique material instance reflecting the\r\n\t\t\t// appropriate state\r\n\r\n\t\t\tvar keyA = result.uuid, keyB = material.uuid;\r\n\r\n\t\t\tvar materialsForVariant = _materialCache[ keyA ];\r\n\r\n\t\t\tif ( materialsForVariant === undefined ) {\r\n\r\n\t\t\t\tmaterialsForVariant = {};\r\n\t\t\t\t_materialCache[ keyA ] = materialsForVariant;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar cachedMaterial = materialsForVariant[ keyB ];\r\n\r\n\t\t\tif ( cachedMaterial === undefined ) {\r\n\r\n\t\t\t\tcachedMaterial = result.clone();\r\n\t\t\t\tmaterialsForVariant[ keyB ] = cachedMaterial;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tresult = cachedMaterial;\r\n\r\n\t\t}\r\n\r\n\t\tresult.visible = material.visible;\r\n\t\tresult.wireframe = material.wireframe;\r\n\r\n\t\tvar side = material.side;\r\n\r\n\t\tif ( scope.renderSingleSided && side == THREE.DoubleSide ) {\r\n\r\n\t\t\tside = THREE.FrontSide;\r\n\r\n\t\t}\r\n\r\n\t\tif ( scope.renderReverseSided ) {\r\n\r\n\t\t\tif ( side === THREE.FrontSide ) side = THREE.BackSide;\r\n\t\t\telse if ( side === THREE.BackSide ) side = THREE.FrontSide;\r\n\r\n\t\t}\r\n\r\n\t\tresult.side = side;\r\n\r\n\t\tresult.clipShadows = material.clipShadows;\r\n\t\tresult.clippingPlanes = material.clippingPlanes;\r\n\r\n\t\tresult.wireframeLinewidth = material.wireframeLinewidth;\r\n\t\tresult.linewidth = material.linewidth;\r\n\r\n\t\tif ( isPointLight && result.uniforms.lightPos !== undefined ) {\r\n\r\n\t\t\tresult.uniforms.lightPos.value.copy( lightPositionWorld );\r\n\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\r\n\t}\r\n\r\n\tfunction projectObject( object, camera, shadowCamera ) {\r\n\r\n\t\tif ( object.visible === false ) return;\r\n\r\n\t\tif ( object.layers.test( camera.layers ) && ( object instanceof THREE.Mesh || object instanceof THREE.Line || object instanceof THREE.Points ) ) {\r\n\r\n\t\t\tif ( object.castShadow && ( object.frustumCulled === false || _frustum.intersectsObject( object ) === true ) ) {\r\n\r\n\t\t\t\tvar material = object.material;\r\n\r\n\t\t\t\tif ( material.visible === true ) {\r\n\r\n\t\t\t\t\tobject.modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );\r\n\t\t\t\t\t_renderList.push( object );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tvar children = object.children;\r\n\r\n\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\r\n\r\n\t\t\tprojectObject( children[ i ], camera, shadowCamera );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/renderers/webgl/WebGLState.js\r\n\r\n/**\r\n* @author mrdoob / http://mrdoob.com/\r\n*/\r\n\r\nTHREE.WebGLState = function ( gl, extensions, paramThreeToGL ) {\r\n\r\n\tvar _this = this;\r\n\r\n\tthis.buffers = {\r\n\t\tcolor: new THREE.WebGLColorBuffer( gl, this ),\r\n\t\tdepth: new THREE.WebGLDepthBuffer( gl, this ),\r\n\t\tstencil: new THREE.WebGLStencilBuffer( gl, this )\r\n\t};\r\n\r\n\tvar maxVertexAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );\r\n\tvar newAttributes = new Uint8Array( maxVertexAttributes );\r\n\tvar enabledAttributes = new Uint8Array( maxVertexAttributes );\r\n\tvar attributeDivisors = new Uint8Array( maxVertexAttributes );\r\n\r\n\tvar capabilities = {};\r\n\r\n\tvar compressedTextureFormats = null;\r\n\r\n\tvar currentBlending = null;\r\n\tvar currentBlendEquation = null;\r\n\tvar currentBlendSrc = null;\r\n\tvar currentBlendDst = null;\r\n\tvar currentBlendEquationAlpha = null;\r\n\tvar currentBlendSrcAlpha = null;\r\n\tvar currentBlendDstAlpha = null;\r\n\tvar currentPremultipledAlpha = false;\r\n\r\n\tvar currentFlipSided = null;\r\n\tvar currentCullFace = null;\r\n\r\n\tvar currentLineWidth = null;\r\n\r\n\tvar currentPolygonOffsetFactor = null;\r\n\tvar currentPolygonOffsetUnits = null;\r\n\r\n\tvar currentScissorTest = null;\r\n\r\n\tvar maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );\r\n\r\n\tvar currentTextureSlot = null;\r\n\tvar currentBoundTextures = {};\r\n\r\n\tvar currentScissor = new THREE.Vector4();\r\n\tvar currentViewport = new THREE.Vector4();\r\n\r\n\tfunction createTexture( type, target, count ) {\r\n\r\n\t\tvar data = new Uint8Array( 3 );\r\n\t\tvar texture = gl.createTexture();\r\n\r\n\t\tgl.bindTexture( type, texture );\r\n\t\tgl.texParameteri( type, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\r\n\t\tgl.texParameteri( type, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\r\n\r\n\t\tfor ( var i = 0; i < count; i ++ ) {\r\n\r\n\t\t\tgl.texImage2D( target + i, 0, gl.RGB, 1, 1, 0, gl.RGB, gl.UNSIGNED_BYTE, data );\r\n\r\n\t\t}\r\n\r\n\t\treturn texture;\r\n\r\n\t}\r\n\r\n\tvar emptyTextures = {};\r\n\temptyTextures[ gl.TEXTURE_2D ] = createTexture( gl.TEXTURE_2D, gl.TEXTURE_2D, 1 );\r\n\temptyTextures[ gl.TEXTURE_CUBE_MAP ] = createTexture( gl.TEXTURE_CUBE_MAP, gl.TEXTURE_CUBE_MAP_POSITIVE_X, 6 );\r\n\r\n\t//\r\n\r\n\tthis.init = function () {\r\n\r\n\t\tthis.clearColor( 0, 0, 0, 1 );\r\n\t\tthis.clearDepth( 1 );\r\n\t\tthis.clearStencil( 0 );\r\n\r\n\t\tthis.enable( gl.DEPTH_TEST );\r\n\t\tthis.setDepthFunc( THREE.LessEqualDepth );\r\n\r\n\t\tthis.setFlipSided( false );\r\n\t\tthis.setCullFace( THREE.CullFaceBack );\r\n\t\tthis.enable( gl.CULL_FACE );\r\n\r\n\t\tthis.enable( gl.BLEND );\r\n\t\tthis.setBlending( THREE.NormalBlending );\r\n\r\n\t};\r\n\r\n\tthis.initAttributes = function () {\r\n\r\n\t\tfor ( var i = 0, l = newAttributes.length; i < l; i ++ ) {\r\n\r\n\t\t\tnewAttributes[ i ] = 0;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.enableAttribute = function ( attribute ) {\r\n\r\n\t\tnewAttributes[ attribute ] = 1;\r\n\r\n\t\tif ( enabledAttributes[ attribute ] === 0 ) {\r\n\r\n\t\t\tgl.enableVertexAttribArray( attribute );\r\n\t\t\tenabledAttributes[ attribute ] = 1;\r\n\r\n\t\t}\r\n\r\n\t\tif ( attributeDivisors[ attribute ] !== 0 ) {\r\n\r\n\t\t\tvar extension = extensions.get( 'ANGLE_instanced_arrays' );\r\n\r\n\t\t\textension.vertexAttribDivisorANGLE( attribute, 0 );\r\n\t\t\tattributeDivisors[ attribute ] = 0;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.enableAttributeAndDivisor = function ( attribute, meshPerAttribute, extension ) {\r\n\r\n\t\tnewAttributes[ attribute ] = 1;\r\n\r\n\t\tif ( enabledAttributes[ attribute ] === 0 ) {\r\n\r\n\t\t\tgl.enableVertexAttribArray( attribute );\r\n\t\t\tenabledAttributes[ attribute ] = 1;\r\n\r\n\t\t}\r\n\r\n\t\tif ( attributeDivisors[ attribute ] !== meshPerAttribute ) {\r\n\r\n\t\t\textension.vertexAttribDivisorANGLE( attribute, meshPerAttribute );\r\n\t\t\tattributeDivisors[ attribute ] = meshPerAttribute;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.disableUnusedAttributes = function () {\r\n\r\n\t\tfor ( var i = 0, l = enabledAttributes.length; i !== l; ++ i ) {\r\n\r\n\t\t\tif ( enabledAttributes[ i ] !== newAttributes[ i ] ) {\r\n\r\n\t\t\t\tgl.disableVertexAttribArray( i );\r\n\t\t\t\tenabledAttributes[ i ] = 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.enable = function ( id ) {\r\n\r\n\t\tif ( capabilities[ id ] !== true ) {\r\n\r\n\t\t\tgl.enable( id );\r\n\t\t\tcapabilities[ id ] = true;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.disable = function ( id ) {\r\n\r\n\t\tif ( capabilities[ id ] !== false ) {\r\n\r\n\t\t\tgl.disable( id );\r\n\t\t\tcapabilities[ id ] = false;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.getCompressedTextureFormats = function () {\r\n\r\n\t\tif ( compressedTextureFormats === null ) {\r\n\r\n\t\t\tcompressedTextureFormats = [];\r\n\r\n\t\t\tif ( extensions.get( 'WEBGL_compressed_texture_pvrtc' ) ||\r\n\t\t\t     extensions.get( 'WEBGL_compressed_texture_s3tc' ) ||\r\n\t\t\t     extensions.get( 'WEBGL_compressed_texture_etc1' ) ) {\r\n\r\n\t\t\t\tvar formats = gl.getParameter( gl.COMPRESSED_TEXTURE_FORMATS );\r\n\r\n\t\t\t\tfor ( var i = 0; i < formats.length; i ++ ) {\r\n\r\n\t\t\t\t\tcompressedTextureFormats.push( formats[ i ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn compressedTextureFormats;\r\n\r\n\t};\r\n\r\n\tthis.setBlending = function ( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha ) {\r\n\r\n\t\tif ( blending !== THREE.NoBlending ) {\r\n\r\n\t\t\tthis.enable( gl.BLEND );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.disable( gl.BLEND );\r\n\t\t\tcurrentBlending = blending; // no blending, that is\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tif ( blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha ) {\r\n\r\n\t\t\tif ( blending === THREE.AdditiveBlending ) {\r\n\r\n\t\t\t\tif ( premultipliedAlpha ) {\r\n\r\n\t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\r\n\t\t\t\t\tgl.blendFuncSeparate( gl.ONE, gl.ONE, gl.ONE, gl.ONE );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\r\n\t\t\t\t\tgl.blendFunc( gl.SRC_ALPHA, gl.ONE );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( blending === THREE.SubtractiveBlending ) {\r\n\r\n\t\t\t\tif ( premultipliedAlpha ) {\r\n\r\n\t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\r\n\t\t\t\t\tgl.blendFuncSeparate( gl.ZERO, gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ONE_MINUS_SRC_ALPHA );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\r\n\t\t\t\t\tgl.blendFunc( gl.ZERO, gl.ONE_MINUS_SRC_COLOR );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( blending === THREE.MultiplyBlending ) {\r\n\r\n\t\t\t\tif ( premultipliedAlpha ) {\r\n\r\n\t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\r\n\t\t\t\t\tgl.blendFuncSeparate( gl.ZERO, gl.SRC_COLOR, gl.ZERO, gl.SRC_ALPHA );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\r\n\t\t\t\t\tgl.blendFunc( gl.ZERO, gl.SRC_COLOR );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tif ( premultipliedAlpha ) {\r\n\r\n\t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\r\n\t\t\t\t\tgl.blendFuncSeparate( gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tgl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );\r\n\t\t\t\t\tgl.blendFuncSeparate( gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tcurrentBlending = blending;\r\n\t\t\tcurrentPremultipledAlpha = premultipliedAlpha;\r\n\r\n\t\t}\r\n\r\n\t\tif ( blending === THREE.CustomBlending ) {\r\n\r\n\t\t\tblendEquationAlpha = blendEquationAlpha || blendEquation;\r\n\t\t\tblendSrcAlpha = blendSrcAlpha || blendSrc;\r\n\t\t\tblendDstAlpha = blendDstAlpha || blendDst;\r\n\r\n\t\t\tif ( blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha ) {\r\n\r\n\t\t\t\tgl.blendEquationSeparate( paramThreeToGL( blendEquation ), paramThreeToGL( blendEquationAlpha ) );\r\n\r\n\t\t\t\tcurrentBlendEquation = blendEquation;\r\n\t\t\t\tcurrentBlendEquationAlpha = blendEquationAlpha;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha ) {\r\n\r\n\t\t\t\tgl.blendFuncSeparate( paramThreeToGL( blendSrc ), paramThreeToGL( blendDst ), paramThreeToGL( blendSrcAlpha ), paramThreeToGL( blendDstAlpha ) );\r\n\r\n\t\t\t\tcurrentBlendSrc = blendSrc;\r\n\t\t\t\tcurrentBlendDst = blendDst;\r\n\t\t\t\tcurrentBlendSrcAlpha = blendSrcAlpha;\r\n\t\t\t\tcurrentBlendDstAlpha = blendDstAlpha;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tcurrentBlendEquation = null;\r\n\t\t\tcurrentBlendSrc = null;\r\n\t\t\tcurrentBlendDst = null;\r\n\t\t\tcurrentBlendEquationAlpha = null;\r\n\t\t\tcurrentBlendSrcAlpha = null;\r\n\t\t\tcurrentBlendDstAlpha = null;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t// TODO Deprecate\r\n\r\n\tthis.setColorWrite = function ( colorWrite ) {\r\n\r\n\t\tthis.buffers.color.setMask( colorWrite );\r\n\r\n\t};\r\n\r\n\tthis.setDepthTest = function ( depthTest ) {\r\n\r\n\t\tthis.buffers.depth.setTest( depthTest );\r\n\r\n\t};\r\n\r\n\tthis.setDepthWrite = function ( depthWrite ) {\r\n\r\n\t\tthis.buffers.depth.setMask( depthWrite );\r\n\r\n\t};\r\n\r\n\tthis.setDepthFunc = function ( depthFunc ) {\r\n\r\n\t\tthis.buffers.depth.setFunc( depthFunc );\r\n\r\n\t};\r\n\r\n\tthis.setStencilTest = function ( stencilTest ) {\r\n\r\n\t\tthis.buffers.stencil.setTest( stencilTest );\r\n\r\n\t};\r\n\r\n\tthis.setStencilWrite = function ( stencilWrite ) {\r\n\r\n\t\tthis.buffers.stencil.setMask( stencilWrite );\r\n\r\n\t};\r\n\r\n\tthis.setStencilFunc = function ( stencilFunc, stencilRef, stencilMask ) {\r\n\r\n\t\tthis.buffers.stencil.setFunc( stencilFunc, stencilRef, stencilMask );\r\n\r\n\t};\r\n\r\n\tthis.setStencilOp = function ( stencilFail, stencilZFail, stencilZPass ) {\r\n\r\n\t\tthis.buffers.stencil.setOp( stencilFail, stencilZFail, stencilZPass );\r\n\r\n\t};\r\n\r\n\t//\r\n\r\n\tthis.setFlipSided = function ( flipSided ) {\r\n\r\n\t\tif ( currentFlipSided !== flipSided ) {\r\n\r\n\t\t\tif ( flipSided ) {\r\n\r\n\t\t\t\tgl.frontFace( gl.CW );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tgl.frontFace( gl.CCW );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tcurrentFlipSided = flipSided;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.setCullFace = function ( cullFace ) {\r\n\r\n\t\tif ( cullFace !== THREE.CullFaceNone ) {\r\n\r\n\t\t\tthis.enable( gl.CULL_FACE );\r\n\r\n\t\t\tif ( cullFace !== currentCullFace ) {\r\n\r\n\t\t\t\tif ( cullFace === THREE.CullFaceBack ) {\r\n\r\n\t\t\t\t\tgl.cullFace( gl.BACK );\r\n\r\n\t\t\t\t} else if ( cullFace === THREE.CullFaceFront ) {\r\n\r\n\t\t\t\t\tgl.cullFace( gl.FRONT );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tgl.cullFace( gl.FRONT_AND_BACK );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.disable( gl.CULL_FACE );\r\n\r\n\t\t}\r\n\r\n\t\tcurrentCullFace = cullFace;\r\n\r\n\t};\r\n\r\n\tthis.setLineWidth = function ( width ) {\r\n\r\n\t\tif ( width !== currentLineWidth ) {\r\n\r\n\t\t\tgl.lineWidth( width );\r\n\r\n\t\t\tcurrentLineWidth = width;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.setPolygonOffset = function ( polygonOffset, factor, units ) {\r\n\r\n\t\tif ( polygonOffset ) {\r\n\r\n\t\t\tthis.enable( gl.POLYGON_OFFSET_FILL );\r\n\r\n\t\t\tif ( currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units ) {\r\n\r\n\t\t\t\tgl.polygonOffset( factor, units );\r\n\r\n\t\t\t\tcurrentPolygonOffsetFactor = factor;\r\n\t\t\t\tcurrentPolygonOffsetUnits = units;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.disable( gl.POLYGON_OFFSET_FILL );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.getScissorTest = function () {\r\n\r\n\t\treturn currentScissorTest;\r\n\r\n\t};\r\n\r\n\tthis.setScissorTest = function ( scissorTest ) {\r\n\r\n\t\tcurrentScissorTest = scissorTest;\r\n\r\n\t\tif ( scissorTest ) {\r\n\r\n\t\t\tthis.enable( gl.SCISSOR_TEST );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.disable( gl.SCISSOR_TEST );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t// texture\r\n\r\n\tthis.activeTexture = function ( webglSlot ) {\r\n\r\n\t\tif ( webglSlot === undefined ) webglSlot = gl.TEXTURE0 + maxTextures - 1;\r\n\r\n\t\tif ( currentTextureSlot !== webglSlot ) {\r\n\r\n\t\t\tgl.activeTexture( webglSlot );\r\n\t\t\tcurrentTextureSlot = webglSlot;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.bindTexture = function ( webglType, webglTexture ) {\r\n\r\n\t\tif ( currentTextureSlot === null ) {\r\n\r\n\t\t\t_this.activeTexture();\r\n\r\n\t\t}\r\n\r\n\t\tvar boundTexture = currentBoundTextures[ currentTextureSlot ];\r\n\r\n\t\tif ( boundTexture === undefined ) {\r\n\r\n\t\t\tboundTexture = { type: undefined, texture: undefined };\r\n\t\t\tcurrentBoundTextures[ currentTextureSlot ] = boundTexture;\r\n\r\n\t\t}\r\n\r\n\t\tif ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {\r\n\r\n\t\t\tgl.bindTexture( webglType, webglTexture || emptyTextures[ webglType ] );\r\n\r\n\t\t\tboundTexture.type = webglType;\r\n\t\t\tboundTexture.texture = webglTexture;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.compressedTexImage2D = function () {\r\n\r\n\t\ttry {\r\n\r\n\t\t\tgl.compressedTexImage2D.apply( gl, arguments );\r\n\r\n\t\t} catch ( error ) {\r\n\r\n\t\t\tconsole.error( error );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.texImage2D = function () {\r\n\r\n\t\ttry {\r\n\r\n\t\t\tgl.texImage2D.apply( gl, arguments );\r\n\r\n\t\t} catch ( error ) {\r\n\r\n\t\t\tconsole.error( error );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t// TODO Deprecate\r\n\r\n\tthis.clearColor = function ( r, g, b, a ) {\r\n\r\n\t\tthis.buffers.color.setClear( r, g, b, a );\r\n\r\n\t};\r\n\r\n\tthis.clearDepth = function ( depth ) {\r\n\r\n\t\tthis.buffers.depth.setClear( depth );\r\n\r\n\t};\r\n\r\n\tthis.clearStencil = function ( stencil ) {\r\n\r\n\t\tthis.buffers.stencil.setClear( stencil );\r\n\r\n\t};\r\n\r\n\t//\r\n\r\n\tthis.scissor = function ( scissor ) {\r\n\r\n\t\tif ( currentScissor.equals( scissor ) === false ) {\r\n\r\n\t\t\tgl.scissor( scissor.x, scissor.y, scissor.z, scissor.w );\r\n\t\t\tcurrentScissor.copy( scissor );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.viewport = function ( viewport ) {\r\n\r\n\t\tif ( currentViewport.equals( viewport ) === false ) {\r\n\r\n\t\t\tgl.viewport( viewport.x, viewport.y, viewport.z, viewport.w );\r\n\t\t\tcurrentViewport.copy( viewport );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t//\r\n\r\n\tthis.reset = function () {\r\n\r\n\t\tfor ( var i = 0; i < enabledAttributes.length; i ++ ) {\r\n\r\n\t\t\tif ( enabledAttributes[ i ] === 1 ) {\r\n\r\n\t\t\t\tgl.disableVertexAttribArray( i );\r\n\t\t\t\tenabledAttributes[ i ] = 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tcapabilities = {};\r\n\r\n\t\tcompressedTextureFormats = null;\r\n\r\n\t\tcurrentTextureSlot = null;\r\n\t\tcurrentBoundTextures = {};\r\n\r\n\t\tcurrentBlending = null;\r\n\r\n\t\tcurrentFlipSided = null;\r\n\t\tcurrentCullFace = null;\r\n\r\n\t\tthis.buffers.color.reset();\r\n\t\tthis.buffers.depth.reset();\r\n\t\tthis.buffers.stencil.reset();\r\n\r\n\t};\r\n\r\n};\r\n\r\nTHREE.WebGLColorBuffer = function ( gl, state ) {\r\n\r\n\tvar locked = false;\r\n\r\n\tvar color = new THREE.Vector4();\r\n\tvar currentColorMask = null;\r\n\tvar currentColorClear = new THREE.Vector4();\r\n\r\n\tthis.setMask = function ( colorMask ) {\r\n\r\n\t\tif ( currentColorMask !== colorMask && ! locked ) {\r\n\r\n\t\t\tgl.colorMask( colorMask, colorMask, colorMask, colorMask );\r\n\t\t\tcurrentColorMask = colorMask;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.setLocked = function ( lock ) {\r\n\r\n\t\tlocked = lock;\r\n\r\n\t};\r\n\r\n\tthis.setClear = function ( r, g, b, a ) {\r\n\r\n\t\tcolor.set( r, g, b, a );\r\n\r\n\t\tif ( currentColorClear.equals( color ) === false ) {\r\n\r\n\t\t\tgl.clearColor( r, g, b, a );\r\n\t\t\tcurrentColorClear.copy( color );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.reset = function () {\r\n\r\n\t\tlocked = false;\r\n\r\n\t\tcurrentColorMask = null;\r\n\t\tcurrentColorClear = new THREE.Vector4();\r\n\r\n\t};\r\n\r\n};\r\n\r\nTHREE.WebGLDepthBuffer = function( gl, state ) {\r\n\r\n\tvar locked = false;\r\n\r\n\tvar currentDepthMask = null;\r\n\tvar currentDepthFunc = null;\r\n\tvar currentDepthClear = null;\r\n\r\n\tthis.setTest = function ( depthTest ) {\r\n\r\n\t\tif ( depthTest ) {\r\n\r\n\t\t\tstate.enable( gl.DEPTH_TEST );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tstate.disable( gl.DEPTH_TEST );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.setMask = function( depthMask ){\r\n\r\n\t\tif ( currentDepthMask !== depthMask && ! locked ) {\r\n\r\n\t\t\tgl.depthMask( depthMask );\r\n\t\t\tcurrentDepthMask = depthMask;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.setFunc = function ( depthFunc ) {\r\n\r\n\t\tif ( currentDepthFunc !== depthFunc ) {\r\n\r\n\t\t\tif ( depthFunc ) {\r\n\r\n\t\t\t\tswitch ( depthFunc ) {\r\n\r\n\t\t\t\t\tcase THREE.NeverDepth:\r\n\r\n\t\t\t\t\t\tgl.depthFunc( gl.NEVER );\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase THREE.AlwaysDepth:\r\n\r\n\t\t\t\t\t\tgl.depthFunc( gl.ALWAYS );\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase THREE.LessDepth:\r\n\r\n\t\t\t\t\t\tgl.depthFunc( gl.LESS );\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase THREE.LessEqualDepth:\r\n\r\n\t\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase THREE.EqualDepth:\r\n\r\n\t\t\t\t\t\tgl.depthFunc( gl.EQUAL );\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase THREE.GreaterEqualDepth:\r\n\r\n\t\t\t\t\t\tgl.depthFunc( gl.GEQUAL );\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase THREE.GreaterDepth:\r\n\r\n\t\t\t\t\t\tgl.depthFunc( gl.GREATER );\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tcase THREE.NotEqualDepth:\r\n\r\n\t\t\t\t\t\tgl.depthFunc( gl.NOTEQUAL );\r\n\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\tdefault:\r\n\r\n\t\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tgl.depthFunc( gl.LEQUAL );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tcurrentDepthFunc = depthFunc;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.setLocked = function ( lock ) {\r\n\r\n\t\tlocked = lock;\r\n\r\n\t};\r\n\r\n\tthis.setClear = function ( depth ) {\r\n\r\n\t\tif ( currentDepthClear !== depth ) {\r\n\r\n\t\t\tgl.clearDepth( depth );\r\n\t\t\tcurrentDepthClear = depth;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.reset = function () {\r\n\r\n\t\tlocked = false;\r\n\r\n\t\tcurrentDepthMask = null;\r\n\t\tcurrentDepthFunc = null;\r\n\t\tcurrentDepthClear = null;\r\n\r\n\t};\r\n\r\n};\r\n\r\nTHREE.WebGLStencilBuffer = function ( gl, state ) {\r\n\r\n\tvar locked = false;\r\n\r\n\tvar currentStencilMask = null;\r\n\tvar currentStencilFunc = null;\r\n\tvar currentStencilRef = null;\r\n\tvar currentStencilFuncMask = null;\r\n\tvar currentStencilFail  = null;\r\n\tvar currentStencilZFail = null;\r\n\tvar currentStencilZPass = null;\r\n\tvar currentStencilClear = null;\r\n\r\n\tthis.setTest = function ( stencilTest ) {\r\n\r\n\t\tif ( stencilTest ) {\r\n\r\n\t\t\tstate.enable( gl.STENCIL_TEST );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tstate.disable( gl.STENCIL_TEST );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.setMask = function ( stencilMask ) {\r\n\r\n\t\tif ( currentStencilMask !== stencilMask && ! locked ) {\r\n\r\n\t\t\tgl.stencilMask( stencilMask );\r\n\t\t\tcurrentStencilMask = stencilMask;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.setFunc = function ( stencilFunc, stencilRef, stencilMask ) {\r\n\r\n\t\tif ( currentStencilFunc !== stencilFunc ||\r\n\t\t     currentStencilRef \t!== stencilRef \t||\r\n\t\t     currentStencilFuncMask !== stencilMask ) {\r\n\r\n\t\t\tgl.stencilFunc( stencilFunc,  stencilRef, stencilMask );\r\n\r\n\t\t\tcurrentStencilFunc = stencilFunc;\r\n\t\t\tcurrentStencilRef  = stencilRef;\r\n\t\t\tcurrentStencilFuncMask = stencilMask;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.setOp\t = function ( stencilFail, stencilZFail, stencilZPass ) {\r\n\r\n\t\tif ( currentStencilFail\t !== stencilFail \t||\r\n\t\t     currentStencilZFail !== stencilZFail ||\r\n\t\t     currentStencilZPass !== stencilZPass ) {\r\n\r\n\t\t\tgl.stencilOp( stencilFail,  stencilZFail, stencilZPass );\r\n\r\n\t\t\tcurrentStencilFail  = stencilFail;\r\n\t\t\tcurrentStencilZFail = stencilZFail;\r\n\t\t\tcurrentStencilZPass = stencilZPass;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.setLocked = function ( lock ) {\r\n\r\n\t\tlocked = lock;\r\n\r\n\t};\r\n\r\n\tthis.setClear = function ( stencil ) {\r\n\r\n\t\tif ( currentStencilClear !== stencil ) {\r\n\r\n\t\t\tgl.clearStencil( stencil );\r\n\t\t\tcurrentStencilClear = stencil;\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tthis.reset = function () {\r\n\r\n\t\tlocked = false;\r\n\r\n\t\tcurrentStencilMask = null;\r\n\t\tcurrentStencilFunc = null;\r\n\t\tcurrentStencilRef = null;\r\n\t\tcurrentStencilFuncMask = null;\r\n\t\tcurrentStencilFail = null;\r\n\t\tcurrentStencilZFail = null;\r\n\t\tcurrentStencilZPass = null;\r\n\t\tcurrentStencilClear = null;\r\n\r\n\t};\r\n\r\n};\r\n\r\n// File:src/renderers/webgl/WebGLUniforms.js\r\n\r\n/**\r\n *\r\n * Uniforms of a program.\r\n * Those form a tree structure with a special top-level container for the root,\r\n * which you get by calling 'new WebGLUniforms( gl, program, renderer )'.\r\n *\r\n *\r\n * Properties of inner nodes including the top-level container:\r\n *\r\n * .seq - array of nested uniforms\r\n * .map - nested uniforms by name\r\n *\r\n *\r\n * Methods of all nodes except the top-level container:\r\n *\r\n * .setValue( gl, value, [renderer] )\r\n *\r\n * \t\tuploads a uniform value(s)\r\n *  \tthe 'renderer' parameter is needed for sampler uniforms\r\n *\r\n *\r\n * Static methods of the top-level container (renderer factorizations):\r\n *\r\n * .upload( gl, seq, values, renderer )\r\n *\r\n * \t\tsets uniforms in 'seq' to 'values[id].value'\r\n *\r\n * .seqWithValue( seq, values ) : filteredSeq\r\n *\r\n * \t\tfilters 'seq' entries with corresponding entry in values\r\n *\r\n * .splitDynamic( seq, values ) : filteredSeq\r\n *\r\n * \t\tfilters 'seq' entries with dynamic entry and removes them from 'seq'\r\n *\r\n *\r\n * Methods of the top-level container (renderer factorizations):\r\n *\r\n * .setValue( gl, name, value )\r\n *\r\n * \t\tsets uniform with  name 'name' to 'value'\r\n *\r\n * .set( gl, obj, prop )\r\n *\r\n * \t\tsets uniform from object and property with same name than uniform\r\n *\r\n * .setOptional( gl, obj, prop )\r\n *\r\n * \t\tlike .set for an optional property of the object\r\n *\r\n *\r\n * @author tschw\r\n *\r\n */\r\n\r\nTHREE.WebGLUniforms = ( function() { // scope\r\n\r\n\t// --- Base for inner nodes (including the root) ---\r\n\r\n\tvar UniformContainer = function() {\r\n\r\n\t\t\tthis.seq = [];\r\n\t\t\tthis.map = {};\r\n\r\n\t\t},\r\n\r\n\t// --- Utilities ---\r\n\r\n\t// Array Caches (provide typed arrays for temporary by size)\r\n\r\n\t\tarrayCacheF32 = [],\r\n\t\tarrayCacheI32 = [],\r\n\r\n\t\tuncacheTemporaryArrays = function() {\r\n\r\n\t\t\tarrayCacheF32.length = 0;\r\n\t\t\tarrayCacheI32.length = 0;\r\n\r\n\t\t},\r\n\r\n\t// Flattening for arrays of vectors and matrices\r\n\r\n\t\tflatten = function( array, nBlocks, blockSize ) {\r\n\r\n\t\t\tvar firstElem = array[ 0 ];\r\n\r\n\t\t\tif ( firstElem <= 0 || firstElem > 0 ) return array;\r\n\t\t\t// unoptimized: ! isNaN( firstElem )\r\n\t\t\t// see http://jacksondunstan.com/articles/983\r\n\r\n\t\t\tvar n = nBlocks * blockSize,\r\n\t\t\t\tr = arrayCacheF32[ n ];\r\n\r\n\t\t\tif ( r === undefined ) {\r\n\r\n\t\t\t\tr = new Float32Array( n );\r\n\t\t\t\tarrayCacheF32[ n ] = r;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( nBlocks !== 0 ) {\r\n\r\n\t\t\t\tfirstElem.toArray( r, 0 );\r\n\r\n\t\t\t\tfor ( var i = 1, offset = 0; i !== nBlocks; ++ i ) {\r\n\r\n\t\t\t\t\toffset += blockSize;\r\n\t\t\t\t\tarray[ i ].toArray( r, offset );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn r;\r\n\r\n\t\t},\r\n\r\n\t// Texture unit allocation\r\n\r\n\t\tallocTexUnits = function( renderer, n ) {\r\n\r\n\t\t\tvar r = arrayCacheI32[ n ];\r\n\r\n\t\t\tif ( r === undefined ) {\r\n\r\n\t\t\t\tr = new Int32Array( n );\r\n\t\t\t\tarrayCacheI32[ n ] = r;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var i = 0; i !== n; ++ i )\r\n\t\t\t\tr[ i ] = renderer.allocTextureUnit();\r\n\r\n\t\t\treturn r;\r\n\r\n\t\t},\r\n\r\n\t// --- Setters ---\r\n\r\n\t// Note: Defining these methods externally, because they come in a bunch\r\n\t// and this way their names minify.\r\n\r\n\t\t// Single scalar\r\n\r\n\t\tsetValue1f = function( gl, v ) { gl.uniform1f( this.addr, v ); },\r\n\t\tsetValue1i = function( gl, v ) { gl.uniform1i( this.addr, v ); },\r\n\r\n\t\t// Single float vector (from flat array or THREE.VectorN)\r\n\r\n\t\tsetValue2fv = function( gl, v ) {\r\n\r\n\t\t\tif ( v.x === undefined ) gl.uniform2fv( this.addr, v );\r\n\t\t\telse gl.uniform2f( this.addr, v.x, v.y );\r\n\r\n\t\t},\r\n\r\n\t\tsetValue3fv = function( gl, v ) {\r\n\r\n\t\t\tif ( v.x !== undefined )\r\n\t\t\t\tgl.uniform3f( this.addr, v.x, v.y, v.z );\r\n\t\t\telse if ( v.r !== undefined )\r\n\t\t\t\tgl.uniform3f( this.addr, v.r, v.g, v.b );\r\n\t\t\telse\r\n\t\t\t\tgl.uniform3fv( this.addr, v );\r\n\r\n\t\t},\r\n\r\n\t\tsetValue4fv = function( gl, v ) {\r\n\r\n\t\t\tif ( v.x === undefined ) gl.uniform4fv( this.addr, v );\r\n\t\t\telse gl.uniform4f( this.addr, v.x, v.y, v.z, v.w );\r\n\r\n\t\t},\r\n\r\n\t\t// Single matrix (from flat array or MatrixN)\r\n\r\n\t\tsetValue2fm = function( gl, v ) {\r\n\r\n\t\t\tgl.uniformMatrix2fv( this.addr, false, v.elements || v );\r\n\r\n\t\t},\r\n\r\n\t\tsetValue3fm = function( gl, v ) {\r\n\r\n\t\t\tgl.uniformMatrix3fv( this.addr, false, v.elements || v );\r\n\r\n\t\t},\r\n\r\n\t\tsetValue4fm = function( gl, v ) {\r\n\r\n\t\t\tgl.uniformMatrix4fv( this.addr, false, v.elements || v );\r\n\r\n\t\t},\r\n\r\n\t\t// Single texture (2D / Cube)\r\n\r\n\t\tsetValueT1 = function( gl, v, renderer ) {\r\n\r\n\t\t\tvar unit = renderer.allocTextureUnit();\r\n\t\t\tgl.uniform1i( this.addr, unit );\r\n\t\t\tif ( v ) renderer.setTexture2D( v, unit );\r\n\r\n\t\t},\r\n\r\n\t\tsetValueT6 = function( gl, v, renderer ) {\r\n\r\n\t\t\tvar unit = renderer.allocTextureUnit();\r\n\t\t\tgl.uniform1i( this.addr, unit );\r\n\t\t\tif ( v ) renderer.setTextureCube( v, unit );\r\n\r\n\t\t},\r\n\r\n\t\t// Integer / Boolean vectors or arrays thereof (always flat arrays)\r\n\r\n\t\tsetValue2iv = function( gl, v ) { gl.uniform2iv( this.addr, v ); },\r\n\t\tsetValue3iv = function( gl, v ) { gl.uniform3iv( this.addr, v ); },\r\n\t\tsetValue4iv = function( gl, v ) { gl.uniform4iv( this.addr, v ); },\r\n\r\n\t\t// Helper to pick the right setter for the singular case\r\n\r\n\t\tgetSingularSetter = function( type ) {\r\n\r\n\t\t\tswitch ( type ) {\r\n\r\n\t\t\t\tcase 0x1406: return setValue1f; // FLOAT\r\n\t\t\t\tcase 0x8b50: return setValue2fv; // _VEC2\r\n\t\t\t\tcase 0x8b51: return setValue3fv; // _VEC3\r\n\t\t\t\tcase 0x8b52: return setValue4fv; // _VEC4\r\n\r\n\t\t\t\tcase 0x8b5a: return setValue2fm; // _MAT2\r\n\t\t\t\tcase 0x8b5b: return setValue3fm; // _MAT3\r\n\t\t\t\tcase 0x8b5c: return setValue4fm; // _MAT4\r\n\r\n\t\t\t\tcase 0x8b5e: return setValueT1; // SAMPLER_2D\r\n\t\t\t\tcase 0x8b60: return setValueT6; // SAMPLER_CUBE\r\n\r\n\t\t\t\tcase 0x1404: case 0x8b56: return setValue1i; // INT, BOOL\r\n\t\t\t\tcase 0x8b53: case 0x8b57: return setValue2iv; // _VEC2\r\n\t\t\t\tcase 0x8b54: case 0x8b58: return setValue3iv; // _VEC3\r\n\t\t\t\tcase 0x8b55: case 0x8b59: return setValue4iv; // _VEC4\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\t// Array of scalars\r\n\r\n\t\tsetValue1fv = function( gl, v ) { gl.uniform1fv( this.addr, v ); },\r\n\t\tsetValue1iv = function( gl, v ) { gl.uniform1iv( this.addr, v ); },\r\n\r\n\t\t// Array of vectors (flat or from THREE classes)\r\n\r\n\t\tsetValueV2a = function( gl, v ) {\r\n\r\n\t\t\tgl.uniform2fv( this.addr, flatten( v, this.size, 2 ) );\r\n\r\n\t\t},\r\n\r\n\t\tsetValueV3a = function( gl, v ) {\r\n\r\n\t\t\tgl.uniform3fv( this.addr, flatten( v, this.size, 3 ) );\r\n\r\n\t\t},\r\n\r\n\t\tsetValueV4a = function( gl, v ) {\r\n\r\n\t\t\tgl.uniform4fv( this.addr, flatten( v, this.size, 4 ) );\r\n\r\n\t\t},\r\n\r\n\t\t// Array of matrices (flat or from THREE clases)\r\n\r\n\t\tsetValueM2a = function( gl, v ) {\r\n\r\n\t\t\tgl.uniformMatrix2fv( this.addr, false, flatten( v, this.size, 4 ) );\r\n\r\n\t\t},\r\n\r\n\t\tsetValueM3a = function( gl, v ) {\r\n\r\n\t\t\tgl.uniformMatrix3fv( this.addr, false, flatten( v, this.size, 9 ) );\r\n\r\n\t\t},\r\n\r\n\t\tsetValueM4a = function( gl, v ) {\r\n\r\n\t\t\tgl.uniformMatrix4fv( this.addr, false, flatten( v, this.size, 16 ) );\r\n\r\n\t\t},\r\n\r\n\t\t// Array of textures (2D / Cube)\r\n\r\n\t\tsetValueT1a = function( gl, v, renderer ) {\r\n\r\n\t\t\tvar n = v.length,\r\n\t\t\t\tunits = allocTexUnits( renderer, n );\r\n\r\n\t\t\tgl.uniform1iv( this.addr, units );\r\n\r\n\t\t\tfor ( var i = 0; i !== n; ++ i ) {\r\n\r\n\t\t\t\tvar tex = v[ i ];\r\n\t\t\t\tif ( tex ) renderer.setTexture2D( tex, units[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tsetValueT6a = function( gl, v, renderer ) {\r\n\r\n\t\t\tvar n = v.length,\r\n\t\t\t\tunits = allocTexUnits( renderer, n );\r\n\r\n\t\t\tgl.uniform1iv( this.addr, units );\r\n\r\n\t\t\tfor ( var i = 0; i !== n; ++ i ) {\r\n\r\n\t\t\t\tvar tex = v[ i ];\r\n\t\t\t\tif ( tex ) renderer.setTextureCube( tex, units[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\r\n\t\t// Helper to pick the right setter for a pure (bottom-level) array\r\n\r\n\t\tgetPureArraySetter = function( type ) {\r\n\r\n\t\t\tswitch ( type ) {\r\n\r\n\t\t\t\tcase 0x1406: return setValue1fv; // FLOAT\r\n\t\t\t\tcase 0x8b50: return setValueV2a; // _VEC2\r\n\t\t\t\tcase 0x8b51: return setValueV3a; // _VEC3\r\n\t\t\t\tcase 0x8b52: return setValueV4a; // _VEC4\r\n\r\n\t\t\t\tcase 0x8b5a: return setValueM2a; // _MAT2\r\n\t\t\t\tcase 0x8b5b: return setValueM3a; // _MAT3\r\n\t\t\t\tcase 0x8b5c: return setValueM4a; // _MAT4\r\n\r\n\t\t\t\tcase 0x8b5e: return setValueT1a; // SAMPLER_2D\r\n\t\t\t\tcase 0x8b60: return setValueT6a; // SAMPLER_CUBE\r\n\r\n\t\t\t\tcase 0x1404: case 0x8b56: return setValue1iv; // INT, BOOL\r\n\t\t\t\tcase 0x8b53: case 0x8b57: return setValue2iv; // _VEC2\r\n\t\t\t\tcase 0x8b54: case 0x8b58: return setValue3iv; // _VEC3\r\n\t\t\t\tcase 0x8b55: case 0x8b59: return setValue4iv; // _VEC4\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t// --- Uniform Classes ---\r\n\r\n\t\tSingleUniform = function SingleUniform( id, activeInfo, addr ) {\r\n\r\n\t\t\tthis.id = id;\r\n\t\t\tthis.addr = addr;\r\n\t\t\tthis.setValue = getSingularSetter( activeInfo.type );\r\n\r\n\t\t\t// this.path = activeInfo.name; // DEBUG\r\n\r\n\t\t},\r\n\r\n\t\tPureArrayUniform = function( id, activeInfo, addr ) {\r\n\r\n\t\t\tthis.id = id;\r\n\t\t\tthis.addr = addr;\r\n\t\t\tthis.size = activeInfo.size;\r\n\t\t\tthis.setValue = getPureArraySetter( activeInfo.type );\r\n\r\n\t\t\t// this.path = activeInfo.name; // DEBUG\r\n\r\n\t\t},\r\n\r\n\t\tStructuredUniform = function( id ) {\r\n\r\n\t\t\tthis.id = id;\r\n\r\n\t\t\tUniformContainer.call( this ); // mix-in\r\n\r\n\t\t};\r\n\r\n\tStructuredUniform.prototype.setValue = function( gl, value ) {\r\n\r\n\t\t// Note: Don't need an extra 'renderer' parameter, since samplers\r\n\t\t// are not allowed in structured uniforms.\r\n\r\n\t\tvar seq = this.seq;\r\n\r\n\t\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\r\n\r\n\t\t\tvar u = seq[ i ];\r\n\t\t\tu.setValue( gl, value[ u.id ] );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\t// --- Top-level ---\r\n\r\n\t// Parser - builds up the property tree from the path strings\r\n\r\n\tvar RePathPart = /([\\w\\d_]+)(\\])?(\\[|\\.)?/g,\r\n\t\t// extracts\r\n\t\t// \t- the identifier (member name or array index)\r\n\t\t//  - followed by an optional right bracket (found when array index)\r\n\t\t//  - followed by an optional left bracket or dot (type of subscript)\r\n\t\t//\r\n\t\t// Note: These portions can be read in a non-overlapping fashion and\r\n\t\t// allow straightforward parsing of the hierarchy that WebGL encodes\r\n\t\t// in the uniform names.\r\n\r\n\t\taddUniform = function( container, uniformObject ) {\r\n\r\n\t\t\tcontainer.seq.push( uniformObject );\r\n\t\t\tcontainer.map[ uniformObject.id ] = uniformObject;\r\n\r\n\t\t},\r\n\r\n\t\tparseUniform = function( activeInfo, addr, container ) {\r\n\r\n\t\t\tvar path = activeInfo.name,\r\n\t\t\t\tpathLength = path.length;\r\n\r\n\t\t\t// reset RegExp object, because of the early exit of a previous run\r\n\t\t\tRePathPart.lastIndex = 0;\r\n\r\n\t\t\tfor (; ;) {\r\n\r\n\t\t\t\tvar match = RePathPart.exec( path ),\r\n\t\t\t\t\tmatchEnd = RePathPart.lastIndex,\r\n\r\n\t\t\t\t\tid = match[ 1 ],\r\n\t\t\t\t\tidIsIndex = match[ 2 ] === ']',\r\n\t\t\t\t\tsubscript = match[ 3 ];\r\n\r\n\t\t\t\tif ( idIsIndex ) id = id | 0; // convert to integer\r\n\r\n\t\t\t\tif ( subscript === undefined ||\r\n\t\t\t\t\t\tsubscript === '[' && matchEnd + 2 === pathLength ) {\r\n\t\t\t\t\t// bare name or \"pure\" bottom-level array \"[0]\" suffix\r\n\r\n\t\t\t\t\taddUniform( container, subscript === undefined ?\r\n\t\t\t\t\t\t\tnew SingleUniform( id, activeInfo, addr ) :\r\n\t\t\t\t\t\t\tnew PureArrayUniform( id, activeInfo, addr ) );\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// step into inner node / create it in case it doesn't exist\r\n\r\n\t\t\t\t\tvar map = container.map,\r\n\t\t\t\t\t\tnext = map[ id ];\r\n\r\n\t\t\t\t\tif ( next === undefined ) {\r\n\r\n\t\t\t\t\t\tnext = new StructuredUniform( id );\r\n\t\t\t\t\t\taddUniform( container, next );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tcontainer = next;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t// Root Container\r\n\r\n\t\tWebGLUniforms = function WebGLUniforms( gl, program, renderer ) {\r\n\r\n\t\t\tUniformContainer.call( this );\r\n\r\n\t\t\tthis.renderer = renderer;\r\n\r\n\t\t\tvar n = gl.getProgramParameter( program, gl.ACTIVE_UNIFORMS );\r\n\r\n\t\t\tfor ( var i = 0; i !== n; ++ i ) {\r\n\r\n\t\t\t\tvar info = gl.getActiveUniform( program, i ),\r\n\t\t\t\t\tpath = info.name,\r\n\t\t\t\t\taddr = gl.getUniformLocation( program, path );\r\n\r\n\t\t\t\tparseUniform( info, addr, this );\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\r\n\tWebGLUniforms.prototype.setValue = function( gl, name, value ) {\r\n\r\n\t\tvar u = this.map[ name ];\r\n\r\n\t\tif ( u !== undefined ) u.setValue( gl, value, this.renderer );\r\n\r\n\t};\r\n\r\n\tWebGLUniforms.prototype.set = function( gl, object, name ) {\r\n\r\n\t\tvar u = this.map[ name ];\r\n\r\n\t\tif ( u !== undefined ) u.setValue( gl, object[ name ], this.renderer );\r\n\r\n\t};\r\n\r\n\tWebGLUniforms.prototype.setOptional = function( gl, object, name ) {\r\n\r\n\t\tvar v = object[ name ];\r\n\r\n\t\tif ( v !== undefined ) this.setValue( gl, name, v );\r\n\r\n\t};\r\n\r\n\r\n\t// Static interface\r\n\r\n\tWebGLUniforms.upload = function( gl, seq, values, renderer ) {\r\n\r\n\t\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\r\n\r\n\t\t\tvar u = seq[ i ],\r\n\t\t\t\tv = values[ u.id ];\r\n\r\n\t\t\tif ( v.needsUpdate !== false ) {\r\n\t\t\t\t// note: always updating when .needsUpdate is undefined\r\n\r\n\t\t\t\tu.setValue( gl, v.value, renderer );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\tWebGLUniforms.seqWithValue = function( seq, values ) {\r\n\r\n\t\tvar r = [];\r\n\r\n\t\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\r\n\r\n\t\t\tvar u = seq[ i ];\r\n\t\t\tif ( u.id in values ) r.push( u );\r\n\r\n\t\t}\r\n\r\n\t\treturn r;\r\n\r\n\t};\r\n\r\n\tWebGLUniforms.splitDynamic = function( seq, values ) {\r\n\r\n\t\tvar r = null,\r\n\t\t\tn = seq.length,\r\n\t\t\tw = 0;\r\n\r\n\t\tfor ( var i = 0; i !== n; ++ i ) {\r\n\r\n\t\t\tvar u = seq[ i ],\r\n\t\t\t\tv = values[ u.id ];\r\n\r\n\t\t\tif ( v && v.dynamic === true ) {\r\n\r\n\t\t\t\tif ( r === null ) r = [];\r\n\t\t\t\tr.push( u );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// in-place compact 'seq', removing the matches\r\n\t\t\t\tif ( w < i ) seq[ w ] = u;\r\n\t\t\t\t++ w;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( w < n ) seq.length = w;\r\n\r\n\t\treturn r;\r\n\r\n\t};\r\n\r\n\tWebGLUniforms.evalDynamic = function( seq, values, object, camera ) {\r\n\r\n\t\tfor ( var i = 0, n = seq.length; i !== n; ++ i ) {\r\n\r\n\t\t\tvar v = values[ seq[ i ].id ],\r\n\t\t\t\tf = v.onUpdateCallback;\r\n\r\n\t\t\tif ( f !== undefined ) f.call( v, object, camera );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n\treturn WebGLUniforms;\r\n\r\n} )();\r\n\r\n\r\n// File:src/renderers/webgl/plugins/LensFlarePlugin.js\r\n\r\n/**\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.LensFlarePlugin = function ( renderer, flares ) {\r\n\r\n\tvar gl = renderer.context;\r\n\tvar state = renderer.state;\r\n\r\n\tvar vertexBuffer, elementBuffer;\r\n\tvar shader, program, attributes, uniforms;\r\n\r\n\tvar tempTexture, occlusionTexture;\r\n\r\n\tfunction init() {\r\n\r\n\t\tvar vertices = new Float32Array( [\r\n\t\t\t- 1, - 1,  0, 0,\r\n\t\t\t 1, - 1,  1, 0,\r\n\t\t\t 1,  1,  1, 1,\r\n\t\t\t- 1,  1,  0, 1\r\n\t\t] );\r\n\r\n\t\tvar faces = new Uint16Array( [\r\n\t\t\t0, 1, 2,\r\n\t\t\t0, 2, 3\r\n\t\t] );\r\n\r\n\t\t// buffers\r\n\r\n\t\tvertexBuffer     = gl.createBuffer();\r\n\t\telementBuffer    = gl.createBuffer();\r\n\r\n\t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\r\n\t\tgl.bufferData( gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW );\r\n\r\n\t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\r\n\t\tgl.bufferData( gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW );\r\n\r\n\t\t// textures\r\n\r\n\t\ttempTexture      = gl.createTexture();\r\n\t\tocclusionTexture = gl.createTexture();\r\n\r\n\t\tstate.bindTexture( gl.TEXTURE_2D, tempTexture );\r\n\t\tgl.texImage2D( gl.TEXTURE_2D, 0, gl.RGB, 16, 16, 0, gl.RGB, gl.UNSIGNED_BYTE, null );\r\n\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );\r\n\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );\r\n\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\r\n\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\r\n\r\n\t\tstate.bindTexture( gl.TEXTURE_2D, occlusionTexture );\r\n\t\tgl.texImage2D( gl.TEXTURE_2D, 0, gl.RGBA, 16, 16, 0, gl.RGBA, gl.UNSIGNED_BYTE, null );\r\n\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );\r\n\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );\r\n\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\r\n\t\tgl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\r\n\r\n\t\tshader = {\r\n\r\n\t\t\tvertexShader: [\r\n\r\n\t\t\t\t\"uniform lowp int renderType;\",\r\n\r\n\t\t\t\t\"uniform vec3 screenPosition;\",\r\n\t\t\t\t\"uniform vec2 scale;\",\r\n\t\t\t\t\"uniform float rotation;\",\r\n\r\n\t\t\t\t\"uniform sampler2D occlusionMap;\",\r\n\r\n\t\t\t\t\"attribute vec2 position;\",\r\n\t\t\t\t\"attribute vec2 uv;\",\r\n\r\n\t\t\t\t\"varying vec2 vUV;\",\r\n\t\t\t\t\"varying float vVisibility;\",\r\n\r\n\t\t\t\t\"void main() {\",\r\n\r\n\t\t\t\t\t\"vUV = uv;\",\r\n\r\n\t\t\t\t\t\"vec2 pos = position;\",\r\n\r\n\t\t\t\t\t\"if ( renderType == 2 ) {\",\r\n\r\n\t\t\t\t\t\t\"vec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );\",\r\n\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );\",\r\n\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );\",\r\n\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );\",\r\n\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );\",\r\n\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );\",\r\n\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );\",\r\n\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );\",\r\n\t\t\t\t\t\t\"visibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );\",\r\n\r\n\t\t\t\t\t\t\"vVisibility =        visibility.r / 9.0;\",\r\n\t\t\t\t\t\t\"vVisibility *= 1.0 - visibility.g / 9.0;\",\r\n\t\t\t\t\t\t\"vVisibility *=       visibility.b / 9.0;\",\r\n\t\t\t\t\t\t\"vVisibility *= 1.0 - visibility.a / 9.0;\",\r\n\r\n\t\t\t\t\t\t\"pos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\",\r\n\t\t\t\t\t\t\"pos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\",\r\n\r\n\t\t\t\t\t\"}\",\r\n\r\n\t\t\t\t\t\"gl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\",\r\n\r\n\t\t\t\t\"}\"\r\n\r\n\t\t\t].join( \"\\n\" ),\r\n\r\n\t\t\tfragmentShader: [\r\n\r\n\t\t\t\t\"uniform lowp int renderType;\",\r\n\r\n\t\t\t\t\"uniform sampler2D map;\",\r\n\t\t\t\t\"uniform float opacity;\",\r\n\t\t\t\t\"uniform vec3 color;\",\r\n\r\n\t\t\t\t\"varying vec2 vUV;\",\r\n\t\t\t\t\"varying float vVisibility;\",\r\n\r\n\t\t\t\t\"void main() {\",\r\n\r\n\t\t\t\t\t// pink square\r\n\r\n\t\t\t\t\t\"if ( renderType == 0 ) {\",\r\n\r\n\t\t\t\t\t\t\"gl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );\",\r\n\r\n\t\t\t\t\t// restore\r\n\r\n\t\t\t\t\t\"} else if ( renderType == 1 ) {\",\r\n\r\n\t\t\t\t\t\t\"gl_FragColor = texture2D( map, vUV );\",\r\n\r\n\t\t\t\t\t// flare\r\n\r\n\t\t\t\t\t\"} else {\",\r\n\r\n\t\t\t\t\t\t\"vec4 texture = texture2D( map, vUV );\",\r\n\t\t\t\t\t\t\"texture.a *= opacity * vVisibility;\",\r\n\t\t\t\t\t\t\"gl_FragColor = texture;\",\r\n\t\t\t\t\t\t\"gl_FragColor.rgb *= color;\",\r\n\r\n\t\t\t\t\t\"}\",\r\n\r\n\t\t\t\t\"}\"\r\n\r\n\t\t\t].join( \"\\n\" )\r\n\r\n\t\t};\r\n\r\n\t\tprogram = createProgram( shader );\r\n\r\n\t\tattributes = {\r\n\t\t\tvertex: gl.getAttribLocation ( program, \"position\" ),\r\n\t\t\tuv:     gl.getAttribLocation ( program, \"uv\" )\r\n\t\t};\r\n\r\n\t\tuniforms = {\r\n\t\t\trenderType:     gl.getUniformLocation( program, \"renderType\" ),\r\n\t\t\tmap:            gl.getUniformLocation( program, \"map\" ),\r\n\t\t\tocclusionMap:   gl.getUniformLocation( program, \"occlusionMap\" ),\r\n\t\t\topacity:        gl.getUniformLocation( program, \"opacity\" ),\r\n\t\t\tcolor:          gl.getUniformLocation( program, \"color\" ),\r\n\t\t\tscale:          gl.getUniformLocation( program, \"scale\" ),\r\n\t\t\trotation:       gl.getUniformLocation( program, \"rotation\" ),\r\n\t\t\tscreenPosition: gl.getUniformLocation( program, \"screenPosition\" )\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t/*\r\n\t * Render lens flares\r\n\t * Method: renders 16x16 0xff00ff-colored points scattered over the light source area,\r\n\t *         reads these back and calculates occlusion.\r\n\t */\r\n\r\n\tthis.render = function ( scene, camera, viewport ) {\r\n\r\n\t\tif ( flares.length === 0 ) return;\r\n\r\n\t\tvar tempPosition = new THREE.Vector3();\r\n\r\n\t\tvar invAspect = viewport.w / viewport.z,\r\n\t\t\thalfViewportWidth = viewport.z * 0.5,\r\n\t\t\thalfViewportHeight = viewport.w * 0.5;\r\n\r\n\t\tvar size = 16 / viewport.w,\r\n\t\t\tscale = new THREE.Vector2( size * invAspect, size );\r\n\r\n\t\tvar screenPosition = new THREE.Vector3( 1, 1, 0 ),\r\n\t\t\tscreenPositionPixels = new THREE.Vector2( 1, 1 );\r\n\r\n\t\tvar validArea = new THREE.Box2();\r\n\r\n\t\tvalidArea.min.set( 0, 0 );\r\n\t\tvalidArea.max.set( viewport.z - 16, viewport.w - 16 );\r\n\r\n\t\tif ( program === undefined ) {\r\n\r\n\t\t\tinit();\r\n\r\n\t\t}\r\n\r\n\t\tgl.useProgram( program );\r\n\r\n\t\tstate.initAttributes();\r\n\t\tstate.enableAttribute( attributes.vertex );\r\n\t\tstate.enableAttribute( attributes.uv );\r\n\t\tstate.disableUnusedAttributes();\r\n\r\n\t\t// loop through all lens flares to update their occlusion and positions\r\n\t\t// setup gl and common used attribs/uniforms\r\n\r\n\t\tgl.uniform1i( uniforms.occlusionMap, 0 );\r\n\t\tgl.uniform1i( uniforms.map, 1 );\r\n\r\n\t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\r\n\t\tgl.vertexAttribPointer( attributes.vertex, 2, gl.FLOAT, false, 2 * 8, 0 );\r\n\t\tgl.vertexAttribPointer( attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8 );\r\n\r\n\t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\r\n\r\n\t\tstate.disable( gl.CULL_FACE );\r\n\t\tstate.setDepthWrite( false );\r\n\r\n\t\tfor ( var i = 0, l = flares.length; i < l; i ++ ) {\r\n\r\n\t\t\tsize = 16 / viewport.w;\r\n\t\t\tscale.set( size * invAspect, size );\r\n\r\n\t\t\t// calc object screen position\r\n\r\n\t\t\tvar flare = flares[ i ];\r\n\r\n\t\t\ttempPosition.set( flare.matrixWorld.elements[ 12 ], flare.matrixWorld.elements[ 13 ], flare.matrixWorld.elements[ 14 ] );\r\n\r\n\t\t\ttempPosition.applyMatrix4( camera.matrixWorldInverse );\r\n\t\t\ttempPosition.applyProjection( camera.projectionMatrix );\r\n\r\n\t\t\t// setup arrays for gl programs\r\n\r\n\t\t\tscreenPosition.copy( tempPosition );\r\n\r\n\t\t\t// horizontal and vertical coordinate of the lower left corner of the pixels to copy\r\n\r\n\t\t\tscreenPositionPixels.x = viewport.x + ( screenPosition.x * halfViewportWidth ) + halfViewportWidth - 8;\r\n\t\t\tscreenPositionPixels.y = viewport.y + ( screenPosition.y * halfViewportHeight ) + halfViewportHeight - 8;\r\n\r\n\t\t\t// screen cull\r\n\r\n\t\t\tif ( validArea.containsPoint( screenPositionPixels ) === true ) {\r\n\r\n\t\t\t\t// save current RGB to temp texture\r\n\r\n\t\t\t\tstate.activeTexture( gl.TEXTURE0 );\r\n\t\t\t\tstate.bindTexture( gl.TEXTURE_2D, null );\r\n\t\t\t\tstate.activeTexture( gl.TEXTURE1 );\r\n\t\t\t\tstate.bindTexture( gl.TEXTURE_2D, tempTexture );\r\n\t\t\t\tgl.copyTexImage2D( gl.TEXTURE_2D, 0, gl.RGB, screenPositionPixels.x, screenPositionPixels.y, 16, 16, 0 );\r\n\r\n\r\n\t\t\t\t// render pink quad\r\n\r\n\t\t\t\tgl.uniform1i( uniforms.renderType, 0 );\r\n\t\t\t\tgl.uniform2f( uniforms.scale, scale.x, scale.y );\r\n\t\t\t\tgl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );\r\n\r\n\t\t\t\tstate.disable( gl.BLEND );\r\n\t\t\t\tstate.enable( gl.DEPTH_TEST );\r\n\r\n\t\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\r\n\r\n\r\n\t\t\t\t// copy result to occlusionMap\r\n\r\n\t\t\t\tstate.activeTexture( gl.TEXTURE0 );\r\n\t\t\t\tstate.bindTexture( gl.TEXTURE_2D, occlusionTexture );\r\n\t\t\t\tgl.copyTexImage2D( gl.TEXTURE_2D, 0, gl.RGBA, screenPositionPixels.x, screenPositionPixels.y, 16, 16, 0 );\r\n\r\n\r\n\t\t\t\t// restore graphics\r\n\r\n\t\t\t\tgl.uniform1i( uniforms.renderType, 1 );\r\n\t\t\t\tstate.disable( gl.DEPTH_TEST );\r\n\r\n\t\t\t\tstate.activeTexture( gl.TEXTURE1 );\r\n\t\t\t\tstate.bindTexture( gl.TEXTURE_2D, tempTexture );\r\n\t\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\r\n\r\n\r\n\t\t\t\t// update object positions\r\n\r\n\t\t\t\tflare.positionScreen.copy( screenPosition );\r\n\r\n\t\t\t\tif ( flare.customUpdateCallback ) {\r\n\r\n\t\t\t\t\tflare.customUpdateCallback( flare );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tflare.updateLensFlares();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// render flares\r\n\r\n\t\t\t\tgl.uniform1i( uniforms.renderType, 2 );\r\n\t\t\t\tstate.enable( gl.BLEND );\r\n\r\n\t\t\t\tfor ( var j = 0, jl = flare.lensFlares.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\tvar sprite = flare.lensFlares[ j ];\r\n\r\n\t\t\t\t\tif ( sprite.opacity > 0.001 && sprite.scale > 0.001 ) {\r\n\r\n\t\t\t\t\t\tscreenPosition.x = sprite.x;\r\n\t\t\t\t\t\tscreenPosition.y = sprite.y;\r\n\t\t\t\t\t\tscreenPosition.z = sprite.z;\r\n\r\n\t\t\t\t\t\tsize = sprite.size * sprite.scale / viewport.w;\r\n\r\n\t\t\t\t\t\tscale.x = size * invAspect;\r\n\t\t\t\t\t\tscale.y = size;\r\n\r\n\t\t\t\t\t\tgl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );\r\n\t\t\t\t\t\tgl.uniform2f( uniforms.scale, scale.x, scale.y );\r\n\t\t\t\t\t\tgl.uniform1f( uniforms.rotation, sprite.rotation );\r\n\r\n\t\t\t\t\t\tgl.uniform1f( uniforms.opacity, sprite.opacity );\r\n\t\t\t\t\t\tgl.uniform3f( uniforms.color, sprite.color.r, sprite.color.g, sprite.color.b );\r\n\r\n\t\t\t\t\t\tstate.setBlending( sprite.blending, sprite.blendEquation, sprite.blendSrc, sprite.blendDst );\r\n\t\t\t\t\t\trenderer.setTexture2D( sprite.texture, 1 );\r\n\r\n\t\t\t\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// restore gl\r\n\r\n\t\tstate.enable( gl.CULL_FACE );\r\n\t\tstate.enable( gl.DEPTH_TEST );\r\n\t\tstate.setDepthWrite( true );\r\n\r\n\t\trenderer.resetGLState();\r\n\r\n\t};\r\n\r\n\tfunction createProgram ( shader ) {\r\n\r\n\t\tvar program = gl.createProgram();\r\n\r\n\t\tvar fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );\r\n\t\tvar vertexShader = gl.createShader( gl.VERTEX_SHADER );\r\n\r\n\t\tvar prefix = \"precision \" + renderer.getPrecision() + \" float;\\n\";\r\n\r\n\t\tgl.shaderSource( fragmentShader, prefix + shader.fragmentShader );\r\n\t\tgl.shaderSource( vertexShader, prefix + shader.vertexShader );\r\n\r\n\t\tgl.compileShader( fragmentShader );\r\n\t\tgl.compileShader( vertexShader );\r\n\r\n\t\tgl.attachShader( program, fragmentShader );\r\n\t\tgl.attachShader( program, vertexShader );\r\n\r\n\t\tgl.linkProgram( program );\r\n\r\n\t\treturn program;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/renderers/webgl/plugins/SpritePlugin.js\r\n\r\n/**\r\n * @author mikael emtinger / http://gomo.se/\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.SpritePlugin = function ( renderer, sprites ) {\r\n\r\n\tvar gl = renderer.context;\r\n\tvar state = renderer.state;\r\n\r\n\tvar vertexBuffer, elementBuffer;\r\n\tvar program, attributes, uniforms;\r\n\r\n\tvar texture;\r\n\r\n\t// decompose matrixWorld\r\n\r\n\tvar spritePosition = new THREE.Vector3();\r\n\tvar spriteRotation = new THREE.Quaternion();\r\n\tvar spriteScale = new THREE.Vector3();\r\n\r\n\tfunction init() {\r\n\r\n\t\tvar vertices = new Float32Array( [\r\n\t\t\t- 0.5, - 0.5,  0, 0,\r\n\t\t\t  0.5, - 0.5,  1, 0,\r\n\t\t\t  0.5,   0.5,  1, 1,\r\n\t\t\t- 0.5,   0.5,  0, 1\r\n\t\t] );\r\n\r\n\t\tvar faces = new Uint16Array( [\r\n\t\t\t0, 1, 2,\r\n\t\t\t0, 2, 3\r\n\t\t] );\r\n\r\n\t\tvertexBuffer  = gl.createBuffer();\r\n\t\telementBuffer = gl.createBuffer();\r\n\r\n\t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\r\n\t\tgl.bufferData( gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW );\r\n\r\n\t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\r\n\t\tgl.bufferData( gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW );\r\n\r\n\t\tprogram = createProgram();\r\n\r\n\t\tattributes = {\r\n\t\t\tposition:\t\t\tgl.getAttribLocation ( program, 'position' ),\r\n\t\t\tuv:\t\t\t\t\tgl.getAttribLocation ( program, 'uv' )\r\n\t\t};\r\n\r\n\t\tuniforms = {\r\n\t\t\tuvOffset:\t\t\tgl.getUniformLocation( program, 'uvOffset' ),\r\n\t\t\tuvScale:\t\t\tgl.getUniformLocation( program, 'uvScale' ),\r\n\r\n\t\t\trotation:\t\t\tgl.getUniformLocation( program, 'rotation' ),\r\n\t\t\tscale:\t\t\t\tgl.getUniformLocation( program, 'scale' ),\r\n\r\n\t\t\tcolor:\t\t\t\tgl.getUniformLocation( program, 'color' ),\r\n\t\t\tmap:\t\t\t\tgl.getUniformLocation( program, 'map' ),\r\n\t\t\topacity:\t\t\tgl.getUniformLocation( program, 'opacity' ),\r\n\r\n\t\t\tmodelViewMatrix: \tgl.getUniformLocation( program, 'modelViewMatrix' ),\r\n\t\t\tprojectionMatrix:\tgl.getUniformLocation( program, 'projectionMatrix' ),\r\n\r\n\t\t\tfogType:\t\t\tgl.getUniformLocation( program, 'fogType' ),\r\n\t\t\tfogDensity:\t\t\tgl.getUniformLocation( program, 'fogDensity' ),\r\n\t\t\tfogNear:\t\t\tgl.getUniformLocation( program, 'fogNear' ),\r\n\t\t\tfogFar:\t\t\t\tgl.getUniformLocation( program, 'fogFar' ),\r\n\t\t\tfogColor:\t\t\tgl.getUniformLocation( program, 'fogColor' ),\r\n\r\n\t\t\talphaTest:\t\t\tgl.getUniformLocation( program, 'alphaTest' )\r\n\t\t};\r\n\r\n\t\tvar canvas = document.createElement( 'canvas' );\r\n\t\tcanvas.width = 8;\r\n\t\tcanvas.height = 8;\r\n\r\n\t\tvar context = canvas.getContext( '2d' );\r\n\t\tcontext.fillStyle = 'white';\r\n\t\tcontext.fillRect( 0, 0, 8, 8 );\r\n\r\n\t\ttexture = new THREE.Texture( canvas );\r\n\t\ttexture.needsUpdate = true;\r\n\r\n\t}\r\n\r\n\tthis.render = function ( scene, camera ) {\r\n\r\n\t\tif ( sprites.length === 0 ) return;\r\n\r\n\t\t// setup gl\r\n\r\n\t\tif ( program === undefined ) {\r\n\r\n\t\t\tinit();\r\n\r\n\t\t}\r\n\r\n\t\tgl.useProgram( program );\r\n\r\n\t\tstate.initAttributes();\r\n\t\tstate.enableAttribute( attributes.position );\r\n\t\tstate.enableAttribute( attributes.uv );\r\n\t\tstate.disableUnusedAttributes();\r\n\r\n\t\tstate.disable( gl.CULL_FACE );\r\n\t\tstate.enable( gl.BLEND );\r\n\r\n\t\tgl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );\r\n\t\tgl.vertexAttribPointer( attributes.position, 2, gl.FLOAT, false, 2 * 8, 0 );\r\n\t\tgl.vertexAttribPointer( attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8 );\r\n\r\n\t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );\r\n\r\n\t\tgl.uniformMatrix4fv( uniforms.projectionMatrix, false, camera.projectionMatrix.elements );\r\n\r\n\t\tstate.activeTexture( gl.TEXTURE0 );\r\n\t\tgl.uniform1i( uniforms.map, 0 );\r\n\r\n\t\tvar oldFogType = 0;\r\n\t\tvar sceneFogType = 0;\r\n\t\tvar fog = scene.fog;\r\n\r\n\t\tif ( fog ) {\r\n\r\n\t\t\tgl.uniform3f( uniforms.fogColor, fog.color.r, fog.color.g, fog.color.b );\r\n\r\n\t\t\tif ( fog instanceof THREE.Fog ) {\r\n\r\n\t\t\t\tgl.uniform1f( uniforms.fogNear, fog.near );\r\n\t\t\t\tgl.uniform1f( uniforms.fogFar, fog.far );\r\n\r\n\t\t\t\tgl.uniform1i( uniforms.fogType, 1 );\r\n\t\t\t\toldFogType = 1;\r\n\t\t\t\tsceneFogType = 1;\r\n\r\n\t\t\t} else if ( fog instanceof THREE.FogExp2 ) {\r\n\r\n\t\t\t\tgl.uniform1f( uniforms.fogDensity, fog.density );\r\n\r\n\t\t\t\tgl.uniform1i( uniforms.fogType, 2 );\r\n\t\t\t\toldFogType = 2;\r\n\t\t\t\tsceneFogType = 2;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tgl.uniform1i( uniforms.fogType, 0 );\r\n\t\t\toldFogType = 0;\r\n\t\t\tsceneFogType = 0;\r\n\r\n\t\t}\r\n\r\n\r\n\t\t// update positions and sort\r\n\r\n\t\tfor ( var i = 0, l = sprites.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar sprite = sprites[ i ];\r\n\r\n\t\t\tsprite.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, sprite.matrixWorld );\r\n\t\t\tsprite.z = - sprite.modelViewMatrix.elements[ 14 ];\r\n\r\n\t\t}\r\n\r\n\t\tsprites.sort( painterSortStable );\r\n\r\n\t\t// render all sprites\r\n\r\n\t\tvar scale = [];\r\n\r\n\t\tfor ( var i = 0, l = sprites.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar sprite = sprites[ i ];\r\n\t\t\tvar material = sprite.material;\r\n\r\n\t\t\tgl.uniform1f( uniforms.alphaTest, material.alphaTest );\r\n\t\t\tgl.uniformMatrix4fv( uniforms.modelViewMatrix, false, sprite.modelViewMatrix.elements );\r\n\r\n\t\t\tsprite.matrixWorld.decompose( spritePosition, spriteRotation, spriteScale );\r\n\r\n\t\t\tscale[ 0 ] = spriteScale.x;\r\n\t\t\tscale[ 1 ] = spriteScale.y;\r\n\r\n\t\t\tvar fogType = 0;\r\n\r\n\t\t\tif ( scene.fog && material.fog ) {\r\n\r\n\t\t\t\tfogType = sceneFogType;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( oldFogType !== fogType ) {\r\n\r\n\t\t\t\tgl.uniform1i( uniforms.fogType, fogType );\r\n\t\t\t\toldFogType = fogType;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( material.map !== null ) {\r\n\r\n\t\t\t\tgl.uniform2f( uniforms.uvOffset, material.map.offset.x, material.map.offset.y );\r\n\t\t\t\tgl.uniform2f( uniforms.uvScale, material.map.repeat.x, material.map.repeat.y );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tgl.uniform2f( uniforms.uvOffset, 0, 0 );\r\n\t\t\t\tgl.uniform2f( uniforms.uvScale, 1, 1 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgl.uniform1f( uniforms.opacity, material.opacity );\r\n\t\t\tgl.uniform3f( uniforms.color, material.color.r, material.color.g, material.color.b );\r\n\r\n\t\t\tgl.uniform1f( uniforms.rotation, material.rotation );\r\n\t\t\tgl.uniform2fv( uniforms.scale, scale );\r\n\r\n\t\t\tstate.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst );\r\n\t\t\tstate.setDepthTest( material.depthTest );\r\n\t\t\tstate.setDepthWrite( material.depthWrite );\r\n\r\n\t\t\tif ( material.map ) {\r\n\r\n\t\t\t\trenderer.setTexture2D( material.map, 0 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\trenderer.setTexture2D( texture, 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );\r\n\r\n\t\t}\r\n\r\n\t\t// restore gl\r\n\r\n\t\tstate.enable( gl.CULL_FACE );\r\n\r\n\t\trenderer.resetGLState();\r\n\r\n\t};\r\n\r\n\tfunction createProgram () {\r\n\r\n\t\tvar program = gl.createProgram();\r\n\r\n\t\tvar vertexShader = gl.createShader( gl.VERTEX_SHADER );\r\n\t\tvar fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );\r\n\r\n\t\tgl.shaderSource( vertexShader, [\r\n\r\n\t\t\t'precision ' + renderer.getPrecision() + ' float;',\r\n\r\n\t\t\t'uniform mat4 modelViewMatrix;',\r\n\t\t\t'uniform mat4 projectionMatrix;',\r\n\t\t\t'uniform float rotation;',\r\n\t\t\t'uniform vec2 scale;',\r\n\t\t\t'uniform vec2 uvOffset;',\r\n\t\t\t'uniform vec2 uvScale;',\r\n\r\n\t\t\t'attribute vec2 position;',\r\n\t\t\t'attribute vec2 uv;',\r\n\r\n\t\t\t'varying vec2 vUV;',\r\n\r\n\t\t\t'void main() {',\r\n\r\n\t\t\t\t'vUV = uvOffset + uv * uvScale;',\r\n\r\n\t\t\t\t'vec2 alignedPosition = position * scale;',\r\n\r\n\t\t\t\t'vec2 rotatedPosition;',\r\n\t\t\t\t'rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;',\r\n\t\t\t\t'rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;',\r\n\r\n\t\t\t\t'vec4 finalPosition;',\r\n\r\n\t\t\t\t'finalPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );',\r\n\t\t\t\t'finalPosition.xy += rotatedPosition;',\r\n\t\t\t\t'finalPosition = projectionMatrix * finalPosition;',\r\n\r\n\t\t\t\t'gl_Position = finalPosition;',\r\n\r\n\t\t\t'}'\r\n\r\n\t\t].join( '\\n' ) );\r\n\r\n\t\tgl.shaderSource( fragmentShader, [\r\n\r\n\t\t\t'precision ' + renderer.getPrecision() + ' float;',\r\n\r\n\t\t\t'uniform vec3 color;',\r\n\t\t\t'uniform sampler2D map;',\r\n\t\t\t'uniform float opacity;',\r\n\r\n\t\t\t'uniform int fogType;',\r\n\t\t\t'uniform vec3 fogColor;',\r\n\t\t\t'uniform float fogDensity;',\r\n\t\t\t'uniform float fogNear;',\r\n\t\t\t'uniform float fogFar;',\r\n\t\t\t'uniform float alphaTest;',\r\n\r\n\t\t\t'varying vec2 vUV;',\r\n\r\n\t\t\t'void main() {',\r\n\r\n\t\t\t\t'vec4 texture = texture2D( map, vUV );',\r\n\r\n\t\t\t\t'if ( texture.a < alphaTest ) discard;',\r\n\r\n\t\t\t\t'gl_FragColor = vec4( color * texture.xyz, texture.a * opacity );',\r\n\r\n\t\t\t\t'if ( fogType > 0 ) {',\r\n\r\n\t\t\t\t\t'float depth = gl_FragCoord.z / gl_FragCoord.w;',\r\n\t\t\t\t\t'float fogFactor = 0.0;',\r\n\r\n\t\t\t\t\t'if ( fogType == 1 ) {',\r\n\r\n\t\t\t\t\t\t'fogFactor = smoothstep( fogNear, fogFar, depth );',\r\n\r\n\t\t\t\t\t'} else {',\r\n\r\n\t\t\t\t\t\t'const float LOG2 = 1.442695;',\r\n\t\t\t\t\t\t'fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );',\r\n\t\t\t\t\t\t'fogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );',\r\n\r\n\t\t\t\t\t'}',\r\n\r\n\t\t\t\t\t'gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );',\r\n\r\n\t\t\t\t'}',\r\n\r\n\t\t\t'}'\r\n\r\n\t\t].join( '\\n' ) );\r\n\r\n\t\tgl.compileShader( vertexShader );\r\n\t\tgl.compileShader( fragmentShader );\r\n\r\n\t\tgl.attachShader( program, vertexShader );\r\n\t\tgl.attachShader( program, fragmentShader );\r\n\r\n\t\tgl.linkProgram( program );\r\n\r\n\t\treturn program;\r\n\r\n\t}\r\n\r\n\tfunction painterSortStable ( a, b ) {\r\n\t\t\r\n\t\tif ( a.renderOrder !== b.renderOrder ) {\r\n\r\n\t\t\treturn a.renderOrder - b.renderOrder;\r\n\r\n\t\t} else if ( a.z !== b.z ) {\r\n\r\n\t\t\treturn b.z - a.z;\r\n\r\n\t\t} else {\r\n\r\n\t\t\treturn b.id - a.id;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/Three.Legacy.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nObject.assign( THREE, {\r\n\tFace4: function ( a, b, c, d, normal, color, materialIndex ) {\r\n\t\tconsole.warn( 'THREE.Face4 has been removed. A THREE.Face3 will be created instead.' );\r\n\t\treturn new THREE.Face3( a, b, c, normal, color, materialIndex );\r\n\t},\r\n\tLineStrip: 0,\r\n\tLinePieces: 1,\r\n\tMeshFaceMaterial: THREE.MultiMaterial,\r\n\tPointCloud: function ( geometry, material ) {\r\n\t\tconsole.warn( 'THREE.PointCloud has been renamed to THREE.Points.' );\r\n\t\treturn new THREE.Points( geometry, material );\r\n\t},\r\n\tParticle: THREE.Sprite,\r\n\tParticleSystem: function ( geometry, material ) {\r\n\t\tconsole.warn( 'THREE.ParticleSystem has been renamed to THREE.Points.' );\r\n\t\treturn new THREE.Points( geometry, material );\r\n\t},\r\n\tPointCloudMaterial: function ( parameters ) {\r\n\t\tconsole.warn( 'THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.' );\r\n\t\treturn new THREE.PointsMaterial( parameters );\r\n\t},\r\n\tParticleBasicMaterial: function ( parameters ) {\r\n\t\tconsole.warn( 'THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.' );\r\n\t\treturn new THREE.PointsMaterial( parameters );\r\n\t},\r\n\tParticleSystemMaterial: function ( parameters ) {\r\n\t\tconsole.warn( 'THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.' );\r\n\t\treturn new THREE.PointsMaterial( parameters );\r\n\t},\r\n\tVertex: function ( x, y, z ) {\r\n\t\tconsole.warn( 'THREE.Vertex has been removed. Use THREE.Vector3 instead.' );\r\n\t\treturn new THREE.Vector3( x, y, z );\r\n\t}\r\n} );\r\n\r\n//\r\n\r\nObject.assign( THREE.Box2.prototype, {\r\n\tempty: function () {\r\n\t\tconsole.warn( 'THREE.Box2: .empty() has been renamed to .isEmpty().' );\r\n\t\treturn this.isEmpty();\r\n\t},\r\n\tisIntersectionBox: function ( box ) {\r\n\t\tconsole.warn( 'THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().' );\r\n\t\treturn this.intersectsBox( box );\r\n\t}\r\n} );\r\n\r\nObject.assign( THREE.Box3.prototype, {\r\n\tempty: function () {\r\n\t\tconsole.warn( 'THREE.Box3: .empty() has been renamed to .isEmpty().' );\r\n\t\treturn this.isEmpty();\r\n\t},\r\n\tisIntersectionBox: function ( box ) {\r\n\t\tconsole.warn( 'THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().' );\r\n\t\treturn this.intersectsBox( box );\r\n\t},\r\n\tisIntersectionSphere: function ( sphere ) {\r\n\t\tconsole.warn( 'THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\r\n\t\treturn this.intersectsSphere( sphere );\r\n\t}\r\n} );\r\n\r\nObject.assign( THREE.Matrix3.prototype, {\r\n\tmultiplyVector3: function ( vector ) {\r\n\t\tconsole.warn( 'THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.' );\r\n\t\treturn vector.applyMatrix3( this );\r\n\t},\r\n\tmultiplyVector3Array: function ( a ) {\r\n\t\tconsole.warn( 'THREE.Matrix3: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.' );\r\n\t\treturn this.applyToVector3Array( a );\r\n\t}\r\n} );\r\n\r\nObject.assign( THREE.Matrix4.prototype, {\r\n\textractPosition: function ( m ) {\r\n\t\tconsole.warn( 'THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().' );\r\n\t\treturn this.copyPosition( m );\r\n\t},\r\n\tsetRotationFromQuaternion: function ( q ) {\r\n\t\tconsole.warn( 'THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().' );\r\n\t\treturn this.makeRotationFromQuaternion( q );\r\n\t},\r\n\tmultiplyVector3: function ( vector ) {\r\n\t\tconsole.warn( 'THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) or vector.applyProjection( matrix ) instead.' );\r\n\t\treturn vector.applyProjection( this );\r\n\t},\r\n\tmultiplyVector4: function ( vector ) {\r\n\t\tconsole.warn( 'THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\r\n\t\treturn vector.applyMatrix4( this );\r\n\t},\r\n\tmultiplyVector3Array: function ( a ) {\r\n\t\tconsole.warn( 'THREE.Matrix4: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.' );\r\n\t\treturn this.applyToVector3Array( a );\r\n\t},\r\n\trotateAxis: function ( v ) {\r\n\t\tconsole.warn( 'THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.' );\r\n\t\tv.transformDirection( this );\r\n\t},\r\n\tcrossVector: function ( vector ) {\r\n\t\tconsole.warn( 'THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.' );\r\n\t\treturn vector.applyMatrix4( this );\r\n\t},\r\n\ttranslate: function ( v ) {\r\n\t\tconsole.error( 'THREE.Matrix4: .translate() has been removed.' );\r\n\t},\r\n\trotateX: function ( angle ) {\r\n\t\tconsole.error( 'THREE.Matrix4: .rotateX() has been removed.' );\r\n\t},\r\n\trotateY: function ( angle ) {\r\n\t\tconsole.error( 'THREE.Matrix4: .rotateY() has been removed.' );\r\n\t},\r\n\trotateZ: function ( angle ) {\r\n\t\tconsole.error( 'THREE.Matrix4: .rotateZ() has been removed.' );\r\n\t},\r\n\trotateByAxis: function ( axis, angle ) {\r\n\t\tconsole.error( 'THREE.Matrix4: .rotateByAxis() has been removed.' );\r\n\t}\r\n} );\r\n\r\nObject.assign( THREE.Plane.prototype, {\r\n\tisIntersectionLine: function ( line ) {\r\n\t\tconsole.warn( 'THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().' );\r\n\t\treturn this.intersectsLine( line );\r\n\t}\r\n} );\r\n\r\nObject.assign( THREE.Quaternion.prototype, {\r\n\tmultiplyVector3: function ( vector ) {\r\n\t\tconsole.warn( 'THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.' );\r\n\t\treturn vector.applyQuaternion( this );\r\n\t}\r\n} );\r\n\r\nObject.assign( THREE.Ray.prototype, {\r\n\tisIntersectionBox: function ( box ) {\r\n\t\tconsole.warn( 'THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().' );\r\n\t\treturn this.intersectsBox( box );\r\n\t},\r\n\tisIntersectionPlane: function ( plane ) {\r\n\t\tconsole.warn( 'THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().' );\r\n\t\treturn this.intersectsPlane( plane );\r\n\t},\r\n\tisIntersectionSphere: function ( sphere ) {\r\n\t\tconsole.warn( 'THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().' );\r\n\t\treturn this.intersectsSphere( sphere );\r\n\t}\r\n} );\r\n\r\nObject.assign( THREE.Vector3.prototype, {\r\n\tsetEulerFromRotationMatrix: function () {\r\n\t\tconsole.error( 'THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.' );\r\n\t},\r\n\tsetEulerFromQuaternion: function () {\r\n\t\tconsole.error( 'THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.' );\r\n\t},\r\n\tgetPositionFromMatrix: function ( m ) {\r\n\t\tconsole.warn( 'THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().' );\r\n\t\treturn this.setFromMatrixPosition( m );\r\n\t},\r\n\tgetScaleFromMatrix: function ( m ) {\r\n\t\tconsole.warn( 'THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().' );\r\n\t\treturn this.setFromMatrixScale( m );\r\n\t},\r\n\tgetColumnFromMatrix: function ( index, matrix ) {\r\n\t\tconsole.warn( 'THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().' );\r\n\t\treturn this.setFromMatrixColumn( matrix, index );\r\n\t}\r\n} );\r\n\r\n//\r\n\r\nObject.assign( THREE.Object3D.prototype, {\r\n\tgetChildByName: function ( name ) {\r\n\t\tconsole.warn( 'THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().' );\r\n\t\treturn this.getObjectByName( name );\r\n\t},\r\n\trenderDepth: function ( value ) {\r\n\t\tconsole.warn( 'THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.' );\r\n\t},\r\n\ttranslate: function ( distance, axis ) {\r\n\t\tconsole.warn( 'THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.' );\r\n\t\treturn this.translateOnAxis( axis, distance );\r\n\t}\r\n} );\r\n\r\nObject.defineProperties( THREE.Object3D.prototype, {\r\n\teulerOrder: {\r\n\t\tget: function () {\r\n\t\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\r\n\t\t\treturn this.rotation.order;\r\n\t\t},\r\n\t\tset: function ( value ) {\r\n\t\t\tconsole.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );\r\n\t\t\tthis.rotation.order = value;\r\n\t\t}\r\n\t},\r\n\tuseQuaternion: {\r\n\t\tget: function () {\r\n\t\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\r\n\t\t},\r\n\t\tset: function ( value ) {\r\n\t\t\tconsole.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );\r\n\t\t}\r\n\t}\r\n} );\r\n\r\nObject.defineProperties( THREE.LOD.prototype, {\r\n\tobjects: {\r\n\t\tget: function () {\r\n\t\t\tconsole.warn( 'THREE.LOD: .objects has been renamed to .levels.' );\r\n\t\t\treturn this.levels;\r\n\t\t}\r\n\t}\r\n} );\r\n\r\n//\r\n\r\nTHREE.PerspectiveCamera.prototype.setLens = function ( focalLength, filmGauge ) {\r\n\r\n\tconsole.warn( \"THREE.PerspectiveCamera.setLens is deprecated. \" +\r\n\t\t\t\"Use .setFocalLength and .filmGauge for a photographic setup.\" );\r\n\r\n\tif ( filmGauge !== undefined ) this.filmGauge = filmGauge;\r\n\tthis.setFocalLength( focalLength );\r\n\r\n};\r\n\r\n//\r\n\r\nObject.defineProperties( THREE.Light.prototype, {\r\n\tonlyShadow: {\r\n\t\tset: function ( value ) {\r\n\t\t\tconsole.warn( 'THREE.Light: .onlyShadow has been removed.' );\r\n\t\t}\r\n\t},\r\n\tshadowCameraFov: {\r\n\t\tset: function ( value ) {\r\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraFov is now .shadow.camera.fov.' );\r\n\t\t\tthis.shadow.camera.fov = value;\r\n\t\t}\r\n\t},\r\n\tshadowCameraLeft: {\r\n\t\tset: function ( value ) {\r\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraLeft is now .shadow.camera.left.' );\r\n\t\t\tthis.shadow.camera.left = value;\r\n\t\t}\r\n\t},\r\n\tshadowCameraRight: {\r\n\t\tset: function ( value ) {\r\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraRight is now .shadow.camera.right.' );\r\n\t\t\tthis.shadow.camera.right = value;\r\n\t\t}\r\n\t},\r\n\tshadowCameraTop: {\r\n\t\tset: function ( value ) {\r\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraTop is now .shadow.camera.top.' );\r\n\t\t\tthis.shadow.camera.top = value;\r\n\t\t}\r\n\t},\r\n\tshadowCameraBottom: {\r\n\t\tset: function ( value ) {\r\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.' );\r\n\t\t\tthis.shadow.camera.bottom = value;\r\n\t\t}\r\n\t},\r\n\tshadowCameraNear: {\r\n\t\tset: function ( value ) {\r\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraNear is now .shadow.camera.near.' );\r\n\t\t\tthis.shadow.camera.near = value;\r\n\t\t}\r\n\t},\r\n\tshadowCameraFar: {\r\n\t\tset: function ( value ) {\r\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraFar is now .shadow.camera.far.' );\r\n\t\t\tthis.shadow.camera.far = value;\r\n\t\t}\r\n\t},\r\n\tshadowCameraVisible: {\r\n\t\tset: function ( value ) {\r\n\t\t\tconsole.warn( 'THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.' );\r\n\t\t}\r\n\t},\r\n\tshadowBias: {\r\n\t\tset: function ( value ) {\r\n\t\t\tconsole.warn( 'THREE.Light: .shadowBias is now .shadow.bias.' );\r\n\t\t\tthis.shadow.bias = value;\r\n\t\t}\r\n\t},\r\n\tshadowDarkness: {\r\n\t\tset: function ( value ) {\r\n\t\t\tconsole.warn( 'THREE.Light: .shadowDarkness has been removed.' );\r\n\t\t}\r\n\t},\r\n\tshadowMapWidth: {\r\n\t\tset: function ( value ) {\r\n\t\t\tconsole.warn( 'THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.' );\r\n\t\t\tthis.shadow.mapSize.width = value;\r\n\t\t}\r\n\t},\r\n\tshadowMapHeight: {\r\n\t\tset: function ( value ) {\r\n\t\t\tconsole.warn( 'THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.' );\r\n\t\t\tthis.shadow.mapSize.height = value;\r\n\t\t}\r\n\t}\r\n} );\r\n\r\n//\r\n\r\nObject.defineProperties( THREE.BufferAttribute.prototype, {\r\n\tlength: {\r\n\t\tget: function () {\r\n\t\t\tconsole.warn( 'THREE.BufferAttribute: .length has been deprecated. Please use .count.' );\r\n\t\t\treturn this.array.length;\r\n\t\t}\r\n\t}\r\n} );\r\n\r\nObject.assign( THREE.BufferGeometry.prototype, {\r\n\taddIndex: function ( index ) {\r\n\t\tconsole.warn( 'THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().' );\r\n\t\tthis.setIndex( index );\r\n\t},\r\n\taddDrawCall: function ( start, count, indexOffset ) {\r\n\t\tif ( indexOffset !== undefined ) {\r\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.' );\r\n\t\t}\r\n\t\tconsole.warn( 'THREE.BufferGeometry: .addDrawCall() is now .addGroup().' );\r\n\t\tthis.addGroup( start, count );\r\n\t},\r\n\tclearDrawCalls: function () {\r\n\t\tconsole.warn( 'THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().' );\r\n\t\tthis.clearGroups();\r\n\t},\r\n\tcomputeTangents: function () {\r\n\t\tconsole.warn( 'THREE.BufferGeometry: .computeTangents() has been removed.' );\r\n\t},\r\n\tcomputeOffsets: function () {\r\n\t\tconsole.warn( 'THREE.BufferGeometry: .computeOffsets() has been removed.' );\r\n\t}\r\n} );\r\n\r\nObject.defineProperties( THREE.BufferGeometry.prototype, {\r\n\tdrawcalls: {\r\n\t\tget: function () {\r\n\t\t\tconsole.error( 'THREE.BufferGeometry: .drawcalls has been renamed to .groups.' );\r\n\t\t\treturn this.groups;\r\n\t\t}\r\n\t},\r\n\toffsets: {\r\n\t\tget: function () {\r\n\t\t\tconsole.warn( 'THREE.BufferGeometry: .offsets has been renamed to .groups.' );\r\n\t\t\treturn this.groups;\r\n\t\t}\r\n\t}\r\n} );\r\n\r\n//\r\n\r\nObject.defineProperties( THREE.Material.prototype, {\r\n\twrapAround: {\r\n\t\tget: function () {\r\n\t\t\tconsole.warn( 'THREE.' + this.type + ': .wrapAround has been removed.' );\r\n\t\t},\r\n\t\tset: function ( value ) {\r\n\t\t\tconsole.warn( 'THREE.' + this.type + ': .wrapAround has been removed.' );\r\n\t\t}\r\n\t},\r\n\twrapRGB: {\r\n\t\tget: function () {\r\n\t\t\tconsole.warn( 'THREE.' + this.type + ': .wrapRGB has been removed.' );\r\n\t\t\treturn new THREE.Color();\r\n\t\t}\r\n\t}\r\n} );\r\n\r\nObject.defineProperties( THREE.MeshPhongMaterial.prototype, {\r\n\tmetal: {\r\n\t\tget: function () {\r\n\t\t\tconsole.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.' );\r\n\t\t\treturn false;\r\n\t\t},\r\n\t\tset: function ( value ) {\r\n\t\t\tconsole.warn( 'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead' );\r\n\t\t}\r\n\t}\r\n} );\r\n\r\nObject.defineProperties( THREE.ShaderMaterial.prototype, {\r\n\tderivatives: {\r\n\t\tget: function () {\r\n\t\t\tconsole.warn( 'THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\r\n\t\t\treturn this.extensions.derivatives;\r\n\t\t},\r\n\t\tset: function ( value ) {\r\n\t\t\tconsole.warn( 'THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.' );\r\n\t\t\tthis.extensions.derivatives = value;\r\n\t\t}\r\n\t}\r\n} );\r\n\r\n//\r\n\r\nTHREE.EventDispatcher.prototype = Object.assign( Object.create( {\r\n\r\n\t// Note: Extra base ensures these properties are not 'assign'ed.\r\n\r\n\tconstructor: THREE.EventDispatcher,\r\n\r\n\tapply: function ( target ) {\r\n\r\n\t\tconsole.warn( \"THREE.EventDispatcher: .apply is deprecated, \" +\r\n\t\t\t\t\"just inherit or Object.assign the prototype to mix-in.\" );\r\n\r\n\t\tObject.assign( target, this );\r\n\r\n\t}\r\n\r\n} ), THREE.EventDispatcher.prototype );\r\n\r\n//\r\n\r\nObject.assign( THREE.WebGLRenderer.prototype, {\r\n\tsupportsFloatTextures: function () {\r\n\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \\'OES_texture_float\\' ).' );\r\n\t\treturn this.extensions.get( 'OES_texture_float' );\r\n\t},\r\n\tsupportsHalfFloatTextures: function () {\r\n\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \\'OES_texture_half_float\\' ).' );\r\n\t\treturn this.extensions.get( 'OES_texture_half_float' );\r\n\t},\r\n\tsupportsStandardDerivatives: function () {\r\n\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \\'OES_standard_derivatives\\' ).' );\r\n\t\treturn this.extensions.get( 'OES_standard_derivatives' );\r\n\t},\r\n\tsupportsCompressedTextureS3TC: function () {\r\n\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \\'WEBGL_compressed_texture_s3tc\\' ).' );\r\n\t\treturn this.extensions.get( 'WEBGL_compressed_texture_s3tc' );\r\n\t},\r\n\tsupportsCompressedTexturePVRTC: function () {\r\n\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \\'WEBGL_compressed_texture_pvrtc\\' ).' );\r\n\t\treturn this.extensions.get( 'WEBGL_compressed_texture_pvrtc' );\r\n\t},\r\n\tsupportsBlendMinMax: function () {\r\n\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \\'EXT_blend_minmax\\' ).' );\r\n\t\treturn this.extensions.get( 'EXT_blend_minmax' );\r\n\t},\r\n\tsupportsVertexTextures: function () {\r\n\t\treturn this.capabilities.vertexTextures;\r\n\t},\r\n\tsupportsInstancedArrays: function () {\r\n\t\tconsole.warn( 'THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \\'ANGLE_instanced_arrays\\' ).' );\r\n\t\treturn this.extensions.get( 'ANGLE_instanced_arrays' );\r\n\t},\r\n\tenableScissorTest: function ( boolean ) {\r\n\t\tconsole.warn( 'THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().' );\r\n\t\tthis.setScissorTest( boolean );\r\n\t},\r\n\tinitMaterial: function () {\r\n\t\tconsole.warn( 'THREE.WebGLRenderer: .initMaterial() has been removed.' );\r\n\t},\r\n\taddPrePlugin: function () {\r\n\t\tconsole.warn( 'THREE.WebGLRenderer: .addPrePlugin() has been removed.' );\r\n\t},\r\n\taddPostPlugin: function () {\r\n\t\tconsole.warn( 'THREE.WebGLRenderer: .addPostPlugin() has been removed.' );\r\n\t},\r\n\tupdateShadowMap: function () {\r\n\t\tconsole.warn( 'THREE.WebGLRenderer: .updateShadowMap() has been removed.' );\r\n\t}\r\n} );\r\n\r\nObject.defineProperties( THREE.WebGLRenderer.prototype, {\r\n\tshadowMapEnabled: {\r\n\t\tget: function () {\r\n\t\t\treturn this.shadowMap.enabled;\r\n\t\t},\r\n\t\tset: function ( value ) {\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.' );\r\n\t\t\tthis.shadowMap.enabled = value;\r\n\t\t}\r\n\t},\r\n\tshadowMapType: {\r\n\t\tget: function () {\r\n\t\t\treturn this.shadowMap.type;\r\n\t\t},\r\n\t\tset: function ( value ) {\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.' );\r\n\t\t\tthis.shadowMap.type = value;\r\n\t\t}\r\n\t},\r\n\tshadowMapCullFace: {\r\n\t\tget: function () {\r\n\t\t\treturn this.shadowMap.cullFace;\r\n\t\t},\r\n\t\tset: function ( value ) {\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: .shadowMapCullFace is now .shadowMap.cullFace.' );\r\n\t\t\tthis.shadowMap.cullFace = value;\r\n\t\t}\r\n\t}\r\n} );\r\n\r\nObject.defineProperties( THREE.WebGLShadowMap.prototype, {\r\n\tcullFace: {\r\n\t\tget: function () {\r\n\t\t\treturn this.renderReverseSided ? THREE.CullFaceFront : THREE.CullFaceBack;\r\n\t\t},\r\n\t\tset: function ( cullFace ) {\r\n\t\t\tvar value = ( cullFace !== THREE.CullFaceBack );\r\n\t\t\tconsole.warn( \"WebGLRenderer: .shadowMap.cullFace is deprecated. Set .shadowMap.renderReverseSided to \" + value + \".\" );\r\n\t\t\tthis.renderReverseSided = value;\r\n\t\t}\r\n\t}\r\n} );\r\n\r\n//\r\n\r\nObject.defineProperties( THREE.WebGLRenderTarget.prototype, {\r\n\twrapS: {\r\n\t\tget: function () {\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\r\n\t\t\treturn this.texture.wrapS;\r\n\t\t},\r\n\t\tset: function ( value ) {\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );\r\n\t\t\tthis.texture.wrapS = value;\r\n\t\t}\r\n\t},\r\n\twrapT: {\r\n\t\tget: function () {\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\r\n\t\t\treturn this.texture.wrapT;\r\n\t\t},\r\n\t\tset: function ( value ) {\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );\r\n\t\t\tthis.texture.wrapT = value;\r\n\t\t}\r\n\t},\r\n\tmagFilter: {\r\n\t\tget: function () {\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\r\n\t\t\treturn this.texture.magFilter;\r\n\t\t},\r\n\t\tset: function ( value ) {\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );\r\n\t\t\tthis.texture.magFilter = value;\r\n\t\t}\r\n\t},\r\n\tminFilter: {\r\n\t\tget: function () {\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\r\n\t\t\treturn this.texture.minFilter;\r\n\t\t},\r\n\t\tset: function ( value ) {\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );\r\n\t\t\tthis.texture.minFilter = value;\r\n\t\t}\r\n\t},\r\n\tanisotropy: {\r\n\t\tget: function () {\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\r\n\t\t\treturn this.texture.anisotropy;\r\n\t\t},\r\n\t\tset: function ( value ) {\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );\r\n\t\t\tthis.texture.anisotropy = value;\r\n\t\t}\r\n\t},\r\n\toffset: {\r\n\t\tget: function () {\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\r\n\t\t\treturn this.texture.offset;\r\n\t\t},\r\n\t\tset: function ( value ) {\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );\r\n\t\t\tthis.texture.offset = value;\r\n\t\t}\r\n\t},\r\n\trepeat: {\r\n\t\tget: function () {\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\r\n\t\t\treturn this.texture.repeat;\r\n\t\t},\r\n\t\tset: function ( value ) {\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );\r\n\t\t\tthis.texture.repeat = value;\r\n\t\t}\r\n\t},\r\n\tformat: {\r\n\t\tget: function () {\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\r\n\t\t\treturn this.texture.format;\r\n\t\t},\r\n\t\tset: function ( value ) {\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );\r\n\t\t\tthis.texture.format = value;\r\n\t\t}\r\n\t},\r\n\ttype: {\r\n\t\tget: function () {\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\r\n\t\t\treturn this.texture.type;\r\n\t\t},\r\n\t\tset: function ( value ) {\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );\r\n\t\t\tthis.texture.type = value;\r\n\t\t}\r\n\t},\r\n\tgenerateMipmaps: {\r\n\t\tget: function () {\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\r\n\t\t\treturn this.texture.generateMipmaps;\r\n\t\t},\r\n\t\tset: function ( value ) {\r\n\t\t\tconsole.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );\r\n\t\t\tthis.texture.generateMipmaps = value;\r\n\t\t}\r\n\t}\r\n} );\r\n\r\n//\r\n\r\nObject.assign( THREE.Audio.prototype, {\r\n\tload: function ( file ) {\r\n\t\tconsole.warn( 'THREE.Audio: .load has been deprecated. Please use THREE.AudioLoader.' );\r\n\t\tvar scope = this;\r\n\t\tvar audioLoader = new THREE.AudioLoader();\r\n\t\taudioLoader.load( file, function ( buffer ) {\r\n\t\t\tscope.setBuffer( buffer );\r\n\t\t} );\r\n\t\treturn this;\r\n\t}\r\n} );\r\n\r\nObject.assign( THREE.AudioAnalyser.prototype, {\r\n\tgetData: function ( file ) {\r\n\t\tconsole.warn( 'THREE.AudioAnalyser: .getData() is now .getFrequencyData().' );\r\n\t\treturn this.getFrequencyData();\r\n\t}\r\n} );\r\n\r\n//\r\n\r\nTHREE.GeometryUtils = {\r\n\r\n\tmerge: function ( geometry1, geometry2, materialIndexOffset ) {\r\n\r\n\t\tconsole.warn( 'THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.' );\r\n\r\n\t\tvar matrix;\r\n\r\n\t\tif ( geometry2 instanceof THREE.Mesh ) {\r\n\r\n\t\t\tgeometry2.matrixAutoUpdate && geometry2.updateMatrix();\r\n\r\n\t\t\tmatrix = geometry2.matrix;\r\n\t\t\tgeometry2 = geometry2.geometry;\r\n\r\n\t\t}\r\n\r\n\t\tgeometry1.merge( geometry2, matrix, materialIndexOffset );\r\n\r\n\t},\r\n\r\n\tcenter: function ( geometry ) {\r\n\r\n\t\tconsole.warn( 'THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.' );\r\n\t\treturn geometry.center();\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.ImageUtils = {\r\n\r\n\tcrossOrigin: undefined,\r\n\r\n\tloadTexture: function ( url, mapping, onLoad, onError ) {\r\n\r\n\t\tconsole.warn( 'THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.' );\r\n\r\n\t\tvar loader = new THREE.TextureLoader();\r\n\t\tloader.setCrossOrigin( this.crossOrigin );\r\n\r\n\t\tvar texture = loader.load( url, onLoad, undefined, onError );\r\n\r\n\t\tif ( mapping ) texture.mapping = mapping;\r\n\r\n\t\treturn texture;\r\n\r\n\t},\r\n\r\n\tloadTextureCube: function ( urls, mapping, onLoad, onError ) {\r\n\r\n\t\tconsole.warn( 'THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.' );\r\n\r\n\t\tvar loader = new THREE.CubeTextureLoader();\r\n\t\tloader.setCrossOrigin( this.crossOrigin );\r\n\r\n\t\tvar texture = loader.load( urls, onLoad, undefined, onError );\r\n\r\n\t\tif ( mapping ) texture.mapping = mapping;\r\n\r\n\t\treturn texture;\r\n\r\n\t},\r\n\r\n\tloadCompressedTexture: function () {\r\n\r\n\t\tconsole.error( 'THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.' );\r\n\r\n\t},\r\n\r\n\tloadCompressedTextureCube: function () {\r\n\r\n\t\tconsole.error( 'THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.' );\r\n\r\n\t}\r\n\r\n};\r\n\r\n//\r\n\r\nTHREE.Projector = function () {\r\n\r\n\tconsole.error( 'THREE.Projector has been moved to /examples/js/renderers/Projector.js.' );\r\n\r\n\tthis.projectVector = function ( vector, camera ) {\r\n\r\n\t\tconsole.warn( 'THREE.Projector: .projectVector() is now vector.project().' );\r\n\t\tvector.project( camera );\r\n\r\n\t};\r\n\r\n\tthis.unprojectVector = function ( vector, camera ) {\r\n\r\n\t\tconsole.warn( 'THREE.Projector: .unprojectVector() is now vector.unproject().' );\r\n\t\tvector.unproject( camera );\r\n\r\n\t};\r\n\r\n\tthis.pickingRay = function ( vector, camera ) {\r\n\r\n\t\tconsole.error( 'THREE.Projector: .pickingRay() is now raycaster.setFromCamera().' );\r\n\r\n\t};\r\n\r\n};\r\n\r\n//\r\n\r\nTHREE.CanvasRenderer = function () {\r\n\r\n\tconsole.error( 'THREE.CanvasRenderer has been moved to /examples/js/renderers/CanvasRenderer.js' );\r\n\r\n\tthis.domElement = document.createElement( 'canvas' );\r\n\tthis.clear = function () {};\r\n\tthis.render = function () {};\r\n\tthis.setClearColor = function () {};\r\n\tthis.setSize = function () {};\r\n\r\n};\r\n\r\n// File:src/extras/CurveUtils.js\r\n\r\n/**\r\n * @author zz85 / http://www.lab4games.net/zz85/blog\r\n */\r\n\r\nTHREE.CurveUtils = {\r\n\r\n\ttangentQuadraticBezier: function ( t, p0, p1, p2 ) {\r\n\r\n\t\treturn 2 * ( 1 - t ) * ( p1 - p0 ) + 2 * t * ( p2 - p1 );\r\n\r\n\t},\r\n\r\n\t// Puay Bing, thanks for helping with this derivative!\r\n\r\n\ttangentCubicBezier: function ( t, p0, p1, p2, p3 ) {\r\n\r\n\t\treturn - 3 * p0 * ( 1 - t ) * ( 1 - t )  +\r\n\t\t\t3 * p1 * ( 1 - t ) * ( 1 - t ) - 6 * t * p1 * ( 1 - t ) +\r\n\t\t\t6 * t *  p2 * ( 1 - t ) - 3 * t * t * p2 +\r\n\t\t\t3 * t * t * p3;\r\n\r\n\t},\r\n\r\n\ttangentSpline: function ( t, p0, p1, p2, p3 ) {\r\n\r\n\t\t// To check if my formulas are correct\r\n\r\n\t\tvar h00 = 6 * t * t - 6 * t; \t// derived from 2t^3 − 3t^2 + 1\r\n\t\tvar h10 = 3 * t * t - 4 * t + 1; // t^3 − 2t^2 + t\r\n\t\tvar h01 = - 6 * t * t + 6 * t; \t// − 2t3 + 3t2\r\n\t\tvar h11 = 3 * t * t - 2 * t;\t// t3 − t2\r\n\r\n\t\treturn h00 + h10 + h01 + h11;\r\n\r\n\t},\r\n\r\n\t// Catmull-Rom\r\n\r\n\tinterpolate: function( p0, p1, p2, p3, t ) {\r\n\r\n\t\tvar v0 = ( p2 - p0 ) * 0.5;\r\n\t\tvar v1 = ( p3 - p1 ) * 0.5;\r\n\t\tvar t2 = t * t;\r\n\t\tvar t3 = t * t2;\r\n\t\treturn ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/extras/SceneUtils.js\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.SceneUtils = {\r\n\r\n\tcreateMultiMaterialObject: function ( geometry, materials ) {\r\n\r\n\t\tvar group = new THREE.Group();\r\n\r\n\t\tfor ( var i = 0, l = materials.length; i < l; i ++ ) {\r\n\r\n\t\t\tgroup.add( new THREE.Mesh( geometry, materials[ i ] ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn group;\r\n\r\n\t},\r\n\r\n\tdetach: function ( child, parent, scene ) {\r\n\r\n\t\tchild.applyMatrix( parent.matrixWorld );\r\n\t\tparent.remove( child );\r\n\t\tscene.add( child );\r\n\r\n\t},\r\n\r\n\tattach: function ( child, scene, parent ) {\r\n\r\n\t\tvar matrixWorldInverse = new THREE.Matrix4();\r\n\t\tmatrixWorldInverse.getInverse( parent.matrixWorld );\r\n\t\tchild.applyMatrix( matrixWorldInverse );\r\n\r\n\t\tscene.remove( child );\r\n\t\tparent.add( child );\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/extras/ShapeUtils.js\r\n\r\n/**\r\n * @author zz85 / http://www.lab4games.net/zz85/blog\r\n */\r\n\r\nTHREE.ShapeUtils = {\r\n\r\n\t// calculate area of the contour polygon\r\n\r\n\tarea: function ( contour ) {\r\n\r\n\t\tvar n = contour.length;\r\n\t\tvar a = 0.0;\r\n\r\n\t\tfor ( var p = n - 1, q = 0; q < n; p = q ++ ) {\r\n\r\n\t\t\ta += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;\r\n\r\n\t\t}\r\n\r\n\t\treturn a * 0.5;\r\n\r\n\t},\r\n\r\n\ttriangulate: ( function () {\r\n\r\n\t\t/**\r\n\t\t * This code is a quick port of code written in C++ which was submitted to\r\n\t\t * flipcode.com by John W. Ratcliff  // July 22, 2000\r\n\t\t * See original code and more information here:\r\n\t\t * http://www.flipcode.com/archives/Efficient_Polygon_Triangulation.shtml\r\n\t\t *\r\n\t\t * ported to actionscript by Zevan Rosser\r\n\t\t * www.actionsnippet.com\r\n\t\t *\r\n\t\t * ported to javascript by Joshua Koo\r\n\t\t * http://www.lab4games.net/zz85/blog\r\n\t\t *\r\n\t\t */\r\n\r\n\t\tfunction snip( contour, u, v, w, n, verts ) {\r\n\r\n\t\t\tvar p;\r\n\t\t\tvar ax, ay, bx, by;\r\n\t\t\tvar cx, cy, px, py;\r\n\r\n\t\t\tax = contour[ verts[ u ] ].x;\r\n\t\t\tay = contour[ verts[ u ] ].y;\r\n\r\n\t\t\tbx = contour[ verts[ v ] ].x;\r\n\t\t\tby = contour[ verts[ v ] ].y;\r\n\r\n\t\t\tcx = contour[ verts[ w ] ].x;\r\n\t\t\tcy = contour[ verts[ w ] ].y;\r\n\r\n\t\t\tif ( Number.EPSILON > ( ( ( bx - ax ) * ( cy - ay ) ) - ( ( by - ay ) * ( cx - ax ) ) ) ) return false;\r\n\r\n\t\t\tvar aX, aY, bX, bY, cX, cY;\r\n\t\t\tvar apx, apy, bpx, bpy, cpx, cpy;\r\n\t\t\tvar cCROSSap, bCROSScp, aCROSSbp;\r\n\r\n\t\t\taX = cx - bx;  aY = cy - by;\r\n\t\t\tbX = ax - cx;  bY = ay - cy;\r\n\t\t\tcX = bx - ax;  cY = by - ay;\r\n\r\n\t\t\tfor ( p = 0; p < n; p ++ ) {\r\n\r\n\t\t\t\tpx = contour[ verts[ p ] ].x;\r\n\t\t\t\tpy = contour[ verts[ p ] ].y;\r\n\r\n\t\t\t\tif ( ( ( px === ax ) && ( py === ay ) ) ||\r\n\t\t\t\t\t ( ( px === bx ) && ( py === by ) ) ||\r\n\t\t\t\t\t ( ( px === cx ) && ( py === cy ) ) )\tcontinue;\r\n\r\n\t\t\t\tapx = px - ax;  apy = py - ay;\r\n\t\t\t\tbpx = px - bx;  bpy = py - by;\r\n\t\t\t\tcpx = px - cx;  cpy = py - cy;\r\n\r\n\t\t\t\t// see if p is inside triangle abc\r\n\r\n\t\t\t\taCROSSbp = aX * bpy - aY * bpx;\r\n\t\t\t\tcCROSSap = cX * apy - cY * apx;\r\n\t\t\t\tbCROSScp = bX * cpy - bY * cpx;\r\n\r\n\t\t\t\tif ( ( aCROSSbp >= - Number.EPSILON ) && ( bCROSScp >= - Number.EPSILON ) && ( cCROSSap >= - Number.EPSILON ) ) return false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t}\r\n\r\n\t\t// takes in an contour array and returns\r\n\r\n\t\treturn function ( contour, indices ) {\r\n\r\n\t\t\tvar n = contour.length;\r\n\r\n\t\t\tif ( n < 3 ) return null;\r\n\r\n\t\t\tvar result = [],\r\n\t\t\t\tverts = [],\r\n\t\t\t\tvertIndices = [];\r\n\r\n\t\t\t/* we want a counter-clockwise polygon in verts */\r\n\r\n\t\t\tvar u, v, w;\r\n\r\n\t\t\tif ( THREE.ShapeUtils.area( contour ) > 0.0 ) {\r\n\r\n\t\t\t\tfor ( v = 0; v < n; v ++ ) verts[ v ] = v;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tfor ( v = 0; v < n; v ++ ) verts[ v ] = ( n - 1 ) - v;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar nv = n;\r\n\r\n\t\t\t/*  remove nv - 2 vertices, creating 1 triangle every time */\r\n\r\n\t\t\tvar count = 2 * nv;   /* error detection */\r\n\r\n\t\t\tfor ( v = nv - 1; nv > 2; ) {\r\n\r\n\t\t\t\t/* if we loop, it is probably a non-simple polygon */\r\n\r\n\t\t\t\tif ( ( count -- ) <= 0 ) {\r\n\r\n\t\t\t\t\t//** Triangulate: ERROR - probable bad polygon!\r\n\r\n\t\t\t\t\t//throw ( \"Warning, unable to triangulate polygon!\" );\r\n\t\t\t\t\t//return null;\r\n\t\t\t\t\t// Sometimes warning is fine, especially polygons are triangulated in reverse.\r\n\t\t\t\t\tconsole.warn( 'THREE.ShapeUtils: Unable to triangulate polygon! in triangulate()' );\r\n\r\n\t\t\t\t\tif ( indices ) return vertIndices;\r\n\t\t\t\t\treturn result;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t/* three consecutive vertices in current polygon, <u,v,w> */\r\n\r\n\t\t\t\tu = v; \t \tif ( nv <= u ) u = 0;     /* previous */\r\n\t\t\t\tv = u + 1;  if ( nv <= v ) v = 0;     /* new v    */\r\n\t\t\t\tw = v + 1;  if ( nv <= w ) w = 0;     /* next     */\r\n\r\n\t\t\t\tif ( snip( contour, u, v, w, nv, verts ) ) {\r\n\r\n\t\t\t\t\tvar a, b, c, s, t;\r\n\r\n\t\t\t\t\t/* true names of the vertices */\r\n\r\n\t\t\t\t\ta = verts[ u ];\r\n\t\t\t\t\tb = verts[ v ];\r\n\t\t\t\t\tc = verts[ w ];\r\n\r\n\t\t\t\t\t/* output Triangle */\r\n\r\n\t\t\t\t\tresult.push( [ contour[ a ],\r\n\t\t\t\t\t\tcontour[ b ],\r\n\t\t\t\t\t\tcontour[ c ] ] );\r\n\r\n\r\n\t\t\t\t\tvertIndices.push( [ verts[ u ], verts[ v ], verts[ w ] ] );\r\n\r\n\t\t\t\t\t/* remove v from the remaining polygon */\r\n\r\n\t\t\t\t\tfor ( s = v, t = v + 1; t < nv; s ++, t ++ ) {\r\n\r\n\t\t\t\t\t\tverts[ s ] = verts[ t ];\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tnv --;\r\n\r\n\t\t\t\t\t/* reset error detection counter */\r\n\r\n\t\t\t\t\tcount = 2 * nv;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( indices ) return vertIndices;\r\n\t\t\treturn result;\r\n\r\n\t\t}\r\n\r\n\t} )(),\r\n\r\n\ttriangulateShape: function ( contour, holes ) {\r\n\r\n\t\tfunction point_in_segment_2D_colin( inSegPt1, inSegPt2, inOtherPt ) {\r\n\r\n\t\t\t// inOtherPt needs to be collinear to the inSegment\r\n\t\t\tif ( inSegPt1.x !== inSegPt2.x ) {\r\n\r\n\t\t\t\tif ( inSegPt1.x < inSegPt2.x ) {\r\n\r\n\t\t\t\t\treturn\t( ( inSegPt1.x <= inOtherPt.x ) && ( inOtherPt.x <= inSegPt2.x ) );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\treturn\t( ( inSegPt2.x <= inOtherPt.x ) && ( inOtherPt.x <= inSegPt1.x ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tif ( inSegPt1.y < inSegPt2.y ) {\r\n\r\n\t\t\t\t\treturn\t( ( inSegPt1.y <= inOtherPt.y ) && ( inOtherPt.y <= inSegPt2.y ) );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\treturn\t( ( inSegPt2.y <= inOtherPt.y ) && ( inOtherPt.y <= inSegPt1.y ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction intersect_segments_2D( inSeg1Pt1, inSeg1Pt2, inSeg2Pt1, inSeg2Pt2, inExcludeAdjacentSegs ) {\r\n\r\n\t\t\tvar seg1dx = inSeg1Pt2.x - inSeg1Pt1.x,   seg1dy = inSeg1Pt2.y - inSeg1Pt1.y;\r\n\t\t\tvar seg2dx = inSeg2Pt2.x - inSeg2Pt1.x,   seg2dy = inSeg2Pt2.y - inSeg2Pt1.y;\r\n\r\n\t\t\tvar seg1seg2dx = inSeg1Pt1.x - inSeg2Pt1.x;\r\n\t\t\tvar seg1seg2dy = inSeg1Pt1.y - inSeg2Pt1.y;\r\n\r\n\t\t\tvar limit\t\t= seg1dy * seg2dx - seg1dx * seg2dy;\r\n\t\t\tvar perpSeg1\t= seg1dy * seg1seg2dx - seg1dx * seg1seg2dy;\r\n\r\n\t\t\tif ( Math.abs( limit ) > Number.EPSILON ) {\r\n\r\n\t\t\t\t// not parallel\r\n\r\n\t\t\t\tvar perpSeg2;\r\n\t\t\t\tif ( limit > 0 ) {\r\n\r\n\t\t\t\t\tif ( ( perpSeg1 < 0 ) || ( perpSeg1 > limit ) ) \t\treturn [];\r\n\t\t\t\t\tperpSeg2 = seg2dy * seg1seg2dx - seg2dx * seg1seg2dy;\r\n\t\t\t\t\tif ( ( perpSeg2 < 0 ) || ( perpSeg2 > limit ) ) \t\treturn [];\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tif ( ( perpSeg1 > 0 ) || ( perpSeg1 < limit ) ) \t\treturn [];\r\n\t\t\t\t\tperpSeg2 = seg2dy * seg1seg2dx - seg2dx * seg1seg2dy;\r\n\t\t\t\t\tif ( ( perpSeg2 > 0 ) || ( perpSeg2 < limit ) ) \t\treturn [];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// i.e. to reduce rounding errors\r\n\t\t\t\t// intersection at endpoint of segment#1?\r\n\t\t\t\tif ( perpSeg2 === 0 ) {\r\n\r\n\t\t\t\t\tif ( ( inExcludeAdjacentSegs ) &&\r\n\t\t\t\t\t\t ( ( perpSeg1 === 0 ) || ( perpSeg1 === limit ) ) )\t\treturn [];\r\n\t\t\t\t\treturn [ inSeg1Pt1 ];\r\n\r\n\t\t\t\t}\r\n\t\t\t\tif ( perpSeg2 === limit ) {\r\n\r\n\t\t\t\t\tif ( ( inExcludeAdjacentSegs ) &&\r\n\t\t\t\t\t\t ( ( perpSeg1 === 0 ) || ( perpSeg1 === limit ) ) )\t\treturn [];\r\n\t\t\t\t\treturn [ inSeg1Pt2 ];\r\n\r\n\t\t\t\t}\r\n\t\t\t\t// intersection at endpoint of segment#2?\r\n\t\t\t\tif ( perpSeg1 === 0 )\t\treturn [ inSeg2Pt1 ];\r\n\t\t\t\tif ( perpSeg1 === limit )\treturn [ inSeg2Pt2 ];\r\n\r\n\t\t\t\t// return real intersection point\r\n\t\t\t\tvar factorSeg1 = perpSeg2 / limit;\r\n\t\t\t\treturn\t[ { x: inSeg1Pt1.x + factorSeg1 * seg1dx,\r\n\t\t\t\t\t\t\ty: inSeg1Pt1.y + factorSeg1 * seg1dy } ];\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// parallel or collinear\r\n\t\t\t\tif ( ( perpSeg1 !== 0 ) ||\r\n\t\t\t\t\t ( seg2dy * seg1seg2dx !== seg2dx * seg1seg2dy ) ) \t\t\treturn [];\r\n\r\n\t\t\t\t// they are collinear or degenerate\r\n\t\t\t\tvar seg1Pt = ( ( seg1dx === 0 ) && ( seg1dy === 0 ) );\t// segment1 is just a point?\r\n\t\t\t\tvar seg2Pt = ( ( seg2dx === 0 ) && ( seg2dy === 0 ) );\t// segment2 is just a point?\r\n\t\t\t\t// both segments are points\r\n\t\t\t\tif ( seg1Pt && seg2Pt ) {\r\n\r\n\t\t\t\t\tif ( ( inSeg1Pt1.x !== inSeg2Pt1.x ) ||\r\n\t\t\t\t\t\t ( inSeg1Pt1.y !== inSeg2Pt1.y ) )\t\treturn [];\t// they are distinct  points\r\n\t\t\t\t\treturn [ inSeg1Pt1 ];                 \t\t\t\t\t\t// they are the same point\r\n\r\n\t\t\t\t}\r\n\t\t\t\t// segment#1  is a single point\r\n\t\t\t\tif ( seg1Pt ) {\r\n\r\n\t\t\t\t\tif ( ! point_in_segment_2D_colin( inSeg2Pt1, inSeg2Pt2, inSeg1Pt1 ) )\t\treturn [];\t\t// but not in segment#2\r\n\t\t\t\t\treturn [ inSeg1Pt1 ];\r\n\r\n\t\t\t\t}\r\n\t\t\t\t// segment#2  is a single point\r\n\t\t\t\tif ( seg2Pt ) {\r\n\r\n\t\t\t\t\tif ( ! point_in_segment_2D_colin( inSeg1Pt1, inSeg1Pt2, inSeg2Pt1 ) )\t\treturn [];\t\t// but not in segment#1\r\n\t\t\t\t\treturn [ inSeg2Pt1 ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// they are collinear segments, which might overlap\r\n\t\t\t\tvar seg1min, seg1max, seg1minVal, seg1maxVal;\r\n\t\t\t\tvar seg2min, seg2max, seg2minVal, seg2maxVal;\r\n\t\t\t\tif ( seg1dx !== 0 ) {\r\n\r\n\t\t\t\t\t// the segments are NOT on a vertical line\r\n\t\t\t\t\tif ( inSeg1Pt1.x < inSeg1Pt2.x ) {\r\n\r\n\t\t\t\t\t\tseg1min = inSeg1Pt1; seg1minVal = inSeg1Pt1.x;\r\n\t\t\t\t\t\tseg1max = inSeg1Pt2; seg1maxVal = inSeg1Pt2.x;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tseg1min = inSeg1Pt2; seg1minVal = inSeg1Pt2.x;\r\n\t\t\t\t\t\tseg1max = inSeg1Pt1; seg1maxVal = inSeg1Pt1.x;\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ( inSeg2Pt1.x < inSeg2Pt2.x ) {\r\n\r\n\t\t\t\t\t\tseg2min = inSeg2Pt1; seg2minVal = inSeg2Pt1.x;\r\n\t\t\t\t\t\tseg2max = inSeg2Pt2; seg2maxVal = inSeg2Pt2.x;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tseg2min = inSeg2Pt2; seg2minVal = inSeg2Pt2.x;\r\n\t\t\t\t\t\tseg2max = inSeg2Pt1; seg2maxVal = inSeg2Pt1.x;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// the segments are on a vertical line\r\n\t\t\t\t\tif ( inSeg1Pt1.y < inSeg1Pt2.y ) {\r\n\r\n\t\t\t\t\t\tseg1min = inSeg1Pt1; seg1minVal = inSeg1Pt1.y;\r\n\t\t\t\t\t\tseg1max = inSeg1Pt2; seg1maxVal = inSeg1Pt2.y;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tseg1min = inSeg1Pt2; seg1minVal = inSeg1Pt2.y;\r\n\t\t\t\t\t\tseg1max = inSeg1Pt1; seg1maxVal = inSeg1Pt1.y;\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ( inSeg2Pt1.y < inSeg2Pt2.y ) {\r\n\r\n\t\t\t\t\t\tseg2min = inSeg2Pt1; seg2minVal = inSeg2Pt1.y;\r\n\t\t\t\t\t\tseg2max = inSeg2Pt2; seg2maxVal = inSeg2Pt2.y;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tseg2min = inSeg2Pt2; seg2minVal = inSeg2Pt2.y;\r\n\t\t\t\t\t\tseg2max = inSeg2Pt1; seg2maxVal = inSeg2Pt1.y;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\t\t\t\tif ( seg1minVal <= seg2minVal ) {\r\n\r\n\t\t\t\t\tif ( seg1maxVal <  seg2minVal )\treturn [];\r\n\t\t\t\t\tif ( seg1maxVal === seg2minVal )\t{\r\n\r\n\t\t\t\t\t\tif ( inExcludeAdjacentSegs )\t\treturn [];\r\n\t\t\t\t\t\treturn [ seg2min ];\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ( seg1maxVal <= seg2maxVal )\treturn [ seg2min, seg1max ];\r\n\t\t\t\t\treturn\t[ seg2min, seg2max ];\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tif ( seg1minVal >  seg2maxVal )\treturn [];\r\n\t\t\t\t\tif ( seg1minVal === seg2maxVal )\t{\r\n\r\n\t\t\t\t\t\tif ( inExcludeAdjacentSegs )\t\treturn [];\r\n\t\t\t\t\t\treturn [ seg1min ];\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ( seg1maxVal <= seg2maxVal )\treturn [ seg1min, seg1max ];\r\n\t\t\t\t\treturn\t[ seg1min, seg2max ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfunction isPointInsideAngle( inVertex, inLegFromPt, inLegToPt, inOtherPt ) {\r\n\r\n\t\t\t// The order of legs is important\r\n\r\n\t\t\t// translation of all points, so that Vertex is at (0,0)\r\n\t\t\tvar legFromPtX\t= inLegFromPt.x - inVertex.x,  legFromPtY\t= inLegFromPt.y - inVertex.y;\r\n\t\t\tvar legToPtX\t= inLegToPt.x\t- inVertex.x,  legToPtY\t\t= inLegToPt.y\t- inVertex.y;\r\n\t\t\tvar otherPtX\t= inOtherPt.x\t- inVertex.x,  otherPtY\t\t= inOtherPt.y\t- inVertex.y;\r\n\r\n\t\t\t// main angle >0: < 180 deg.; 0: 180 deg.; <0: > 180 deg.\r\n\t\t\tvar from2toAngle\t= legFromPtX * legToPtY - legFromPtY * legToPtX;\r\n\t\t\tvar from2otherAngle\t= legFromPtX * otherPtY - legFromPtY * otherPtX;\r\n\r\n\t\t\tif ( Math.abs( from2toAngle ) > Number.EPSILON ) {\r\n\r\n\t\t\t\t// angle != 180 deg.\r\n\r\n\t\t\t\tvar other2toAngle\t\t= otherPtX * legToPtY - otherPtY * legToPtX;\r\n\t\t\t\t// console.log( \"from2to: \" + from2toAngle + \", from2other: \" + from2otherAngle + \", other2to: \" + other2toAngle );\r\n\r\n\t\t\t\tif ( from2toAngle > 0 ) {\r\n\r\n\t\t\t\t\t// main angle < 180 deg.\r\n\t\t\t\t\treturn\t( ( from2otherAngle >= 0 ) && ( other2toAngle >= 0 ) );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// main angle > 180 deg.\r\n\t\t\t\t\treturn\t( ( from2otherAngle >= 0 ) || ( other2toAngle >= 0 ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// angle == 180 deg.\r\n\t\t\t\t// console.log( \"from2to: 180 deg., from2other: \" + from2otherAngle  );\r\n\t\t\t\treturn\t( from2otherAngle > 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\r\n\t\tfunction removeHoles( contour, holes ) {\r\n\r\n\t\t\tvar shape = contour.concat(); // work on this shape\r\n\t\t\tvar hole;\r\n\r\n\t\t\tfunction isCutLineInsideAngles( inShapeIdx, inHoleIdx ) {\r\n\r\n\t\t\t\t// Check if hole point lies within angle around shape point\r\n\t\t\t\tvar lastShapeIdx = shape.length - 1;\r\n\r\n\t\t\t\tvar prevShapeIdx = inShapeIdx - 1;\r\n\t\t\t\tif ( prevShapeIdx < 0 )\t\t\tprevShapeIdx = lastShapeIdx;\r\n\r\n\t\t\t\tvar nextShapeIdx = inShapeIdx + 1;\r\n\t\t\t\tif ( nextShapeIdx > lastShapeIdx )\tnextShapeIdx = 0;\r\n\r\n\t\t\t\tvar insideAngle = isPointInsideAngle( shape[ inShapeIdx ], shape[ prevShapeIdx ], shape[ nextShapeIdx ], hole[ inHoleIdx ] );\r\n\t\t\t\tif ( ! insideAngle ) {\r\n\r\n\t\t\t\t\t// console.log( \"Vertex (Shape): \" + inShapeIdx + \", Point: \" + hole[inHoleIdx].x + \"/\" + hole[inHoleIdx].y );\r\n\t\t\t\t\treturn\tfalse;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Check if shape point lies within angle around hole point\r\n\t\t\t\tvar lastHoleIdx = hole.length - 1;\r\n\r\n\t\t\t\tvar prevHoleIdx = inHoleIdx - 1;\r\n\t\t\t\tif ( prevHoleIdx < 0 )\t\t\tprevHoleIdx = lastHoleIdx;\r\n\r\n\t\t\t\tvar nextHoleIdx = inHoleIdx + 1;\r\n\t\t\t\tif ( nextHoleIdx > lastHoleIdx )\tnextHoleIdx = 0;\r\n\r\n\t\t\t\tinsideAngle = isPointInsideAngle( hole[ inHoleIdx ], hole[ prevHoleIdx ], hole[ nextHoleIdx ], shape[ inShapeIdx ] );\r\n\t\t\t\tif ( ! insideAngle ) {\r\n\r\n\t\t\t\t\t// console.log( \"Vertex (Hole): \" + inHoleIdx + \", Point: \" + shape[inShapeIdx].x + \"/\" + shape[inShapeIdx].y );\r\n\t\t\t\t\treturn\tfalse;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn\ttrue;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfunction intersectsShapeEdge( inShapePt, inHolePt ) {\r\n\r\n\t\t\t\t// checks for intersections with shape edges\r\n\t\t\t\tvar sIdx, nextIdx, intersection;\r\n\t\t\t\tfor ( sIdx = 0; sIdx < shape.length; sIdx ++ ) {\r\n\r\n\t\t\t\t\tnextIdx = sIdx + 1; nextIdx %= shape.length;\r\n\t\t\t\t\tintersection = intersect_segments_2D( inShapePt, inHolePt, shape[ sIdx ], shape[ nextIdx ], true );\r\n\t\t\t\t\tif ( intersection.length > 0 )\t\treturn\ttrue;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn\tfalse;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar indepHoles = [];\r\n\r\n\t\t\tfunction intersectsHoleEdge( inShapePt, inHolePt ) {\r\n\r\n\t\t\t\t// checks for intersections with hole edges\r\n\t\t\t\tvar ihIdx, chkHole,\r\n\t\t\t\t\thIdx, nextIdx, intersection;\r\n\t\t\t\tfor ( ihIdx = 0; ihIdx < indepHoles.length; ihIdx ++ ) {\r\n\r\n\t\t\t\t\tchkHole = holes[ indepHoles[ ihIdx ]];\r\n\t\t\t\t\tfor ( hIdx = 0; hIdx < chkHole.length; hIdx ++ ) {\r\n\r\n\t\t\t\t\t\tnextIdx = hIdx + 1; nextIdx %= chkHole.length;\r\n\t\t\t\t\t\tintersection = intersect_segments_2D( inShapePt, inHolePt, chkHole[ hIdx ], chkHole[ nextIdx ], true );\r\n\t\t\t\t\t\tif ( intersection.length > 0 )\t\treturn\ttrue;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\t\t\t\treturn\tfalse;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar holeIndex, shapeIndex,\r\n\t\t\t\tshapePt, holePt,\r\n\t\t\t\tholeIdx, cutKey, failedCuts = [],\r\n\t\t\t\ttmpShape1, tmpShape2,\r\n\t\t\t\ttmpHole1, tmpHole2;\r\n\r\n\t\t\tfor ( var h = 0, hl = holes.length; h < hl; h ++ ) {\r\n\r\n\t\t\t\tindepHoles.push( h );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar minShapeIndex = 0;\r\n\t\t\tvar counter = indepHoles.length * 2;\r\n\t\t\twhile ( indepHoles.length > 0 ) {\r\n\r\n\t\t\t\tcounter --;\r\n\t\t\t\tif ( counter < 0 ) {\r\n\r\n\t\t\t\t\tconsole.log( \"Infinite Loop! Holes left:\" + indepHoles.length + \", Probably Hole outside Shape!\" );\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// search for shape-vertex and hole-vertex,\r\n\t\t\t\t// which can be connected without intersections\r\n\t\t\t\tfor ( shapeIndex = minShapeIndex; shapeIndex < shape.length; shapeIndex ++ ) {\r\n\r\n\t\t\t\t\tshapePt = shape[ shapeIndex ];\r\n\t\t\t\t\tholeIndex\t= - 1;\r\n\r\n\t\t\t\t\t// search for hole which can be reached without intersections\r\n\t\t\t\t\tfor ( var h = 0; h < indepHoles.length; h ++ ) {\r\n\r\n\t\t\t\t\t\tholeIdx = indepHoles[ h ];\r\n\r\n\t\t\t\t\t\t// prevent multiple checks\r\n\t\t\t\t\t\tcutKey = shapePt.x + \":\" + shapePt.y + \":\" + holeIdx;\r\n\t\t\t\t\t\tif ( failedCuts[ cutKey ] !== undefined )\t\t\tcontinue;\r\n\r\n\t\t\t\t\t\thole = holes[ holeIdx ];\r\n\t\t\t\t\t\tfor ( var h2 = 0; h2 < hole.length; h2 ++ ) {\r\n\r\n\t\t\t\t\t\t\tholePt = hole[ h2 ];\r\n\t\t\t\t\t\t\tif ( ! isCutLineInsideAngles( shapeIndex, h2 ) )\t\tcontinue;\r\n\t\t\t\t\t\t\tif ( intersectsShapeEdge( shapePt, holePt ) )\t\tcontinue;\r\n\t\t\t\t\t\t\tif ( intersectsHoleEdge( shapePt, holePt ) )\t\tcontinue;\r\n\r\n\t\t\t\t\t\t\tholeIndex = h2;\r\n\t\t\t\t\t\t\tindepHoles.splice( h, 1 );\r\n\r\n\t\t\t\t\t\t\ttmpShape1 = shape.slice( 0, shapeIndex + 1 );\r\n\t\t\t\t\t\t\ttmpShape2 = shape.slice( shapeIndex );\r\n\t\t\t\t\t\t\ttmpHole1 = hole.slice( holeIndex );\r\n\t\t\t\t\t\t\ttmpHole2 = hole.slice( 0, holeIndex + 1 );\r\n\r\n\t\t\t\t\t\t\tshape = tmpShape1.concat( tmpHole1 ).concat( tmpHole2 ).concat( tmpShape2 );\r\n\r\n\t\t\t\t\t\t\tminShapeIndex = shapeIndex;\r\n\r\n\t\t\t\t\t\t\t// Debug only, to show the selected cuts\r\n\t\t\t\t\t\t\t// glob_CutLines.push( [ shapePt, holePt ] );\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif ( holeIndex >= 0 )\tbreak;\t\t// hole-vertex found\r\n\r\n\t\t\t\t\t\tfailedCuts[ cutKey ] = true;\t\t\t// remember failure\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ( holeIndex >= 0 )\tbreak;\t\t// hole-vertex found\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn shape; \t\t\t/* shape with no holes */\r\n\r\n\t\t}\r\n\r\n\r\n\t\tvar i, il, f, face,\r\n\t\t\tkey, index,\r\n\t\t\tallPointsMap = {};\r\n\r\n\t\t// To maintain reference to old shape, one must match coordinates, or offset the indices from original arrays. It's probably easier to do the first.\r\n\r\n\t\tvar allpoints = contour.concat();\r\n\r\n\t\tfor ( var h = 0, hl = holes.length; h < hl; h ++ ) {\r\n\r\n\t\t\tArray.prototype.push.apply( allpoints, holes[ h ] );\r\n\r\n\t\t}\r\n\r\n\t\t//console.log( \"allpoints\",allpoints, allpoints.length );\r\n\r\n\t\t// prepare all points map\r\n\r\n\t\tfor ( i = 0, il = allpoints.length; i < il; i ++ ) {\r\n\r\n\t\t\tkey = allpoints[ i ].x + \":\" + allpoints[ i ].y;\r\n\r\n\t\t\tif ( allPointsMap[ key ] !== undefined ) {\r\n\r\n\t\t\t\tconsole.warn( \"THREE.Shape: Duplicate point\", key );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tallPointsMap[ key ] = i;\r\n\r\n\t\t}\r\n\r\n\t\t// remove holes by cutting paths to holes and adding them to the shape\r\n\t\tvar shapeWithoutHoles = removeHoles( contour, holes );\r\n\r\n\t\tvar triangles = THREE.ShapeUtils.triangulate( shapeWithoutHoles, false ); // True returns indices for points of spooled shape\r\n\t\t//console.log( \"triangles\",triangles, triangles.length );\r\n\r\n\t\t// check all face vertices against all points map\r\n\r\n\t\tfor ( i = 0, il = triangles.length; i < il; i ++ ) {\r\n\r\n\t\t\tface = triangles[ i ];\r\n\r\n\t\t\tfor ( f = 0; f < 3; f ++ ) {\r\n\r\n\t\t\t\tkey = face[ f ].x + \":\" + face[ f ].y;\r\n\r\n\t\t\t\tindex = allPointsMap[ key ];\r\n\r\n\t\t\t\tif ( index !== undefined ) {\r\n\r\n\t\t\t\t\tface[ f ] = index;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn triangles.concat();\r\n\r\n\t},\r\n\r\n\tisClockWise: function ( pts ) {\r\n\r\n\t\treturn THREE.ShapeUtils.area( pts ) < 0;\r\n\r\n\t},\r\n\r\n\t// Bezier Curves formulas obtained from\r\n\t// http://en.wikipedia.org/wiki/B%C3%A9zier_curve\r\n\r\n\t// Quad Bezier Functions\r\n\r\n\tb2: ( function () {\r\n\r\n\t\tfunction b2p0( t, p ) {\r\n\r\n\t\t\tvar k = 1 - t;\r\n\t\t\treturn k * k * p;\r\n\r\n\t\t}\r\n\r\n\t\tfunction b2p1( t, p ) {\r\n\r\n\t\t\treturn 2 * ( 1 - t ) * t * p;\r\n\r\n\t\t}\r\n\r\n\t\tfunction b2p2( t, p ) {\r\n\r\n\t\t\treturn t * t * p;\r\n\r\n\t\t}\r\n\r\n\t\treturn function ( t, p0, p1, p2 ) {\r\n\r\n\t\t\treturn b2p0( t, p0 ) + b2p1( t, p1 ) + b2p2( t, p2 );\r\n\r\n\t\t};\r\n\r\n\t} )(),\r\n\r\n\t// Cubic Bezier Functions\r\n\r\n\tb3: ( function () {\r\n\r\n\t\tfunction b3p0( t, p ) {\r\n\r\n\t\t\tvar k = 1 - t;\r\n\t\t\treturn k * k * k * p;\r\n\r\n\t\t}\r\n\r\n\t\tfunction b3p1( t, p ) {\r\n\r\n\t\t\tvar k = 1 - t;\r\n\t\t\treturn 3 * k * k * t * p;\r\n\r\n\t\t}\r\n\r\n\t\tfunction b3p2( t, p ) {\r\n\r\n\t\t\tvar k = 1 - t;\r\n\t\t\treturn 3 * k * t * t * p;\r\n\r\n\t\t}\r\n\r\n\t\tfunction b3p3( t, p ) {\r\n\r\n\t\t\treturn t * t * t * p;\r\n\r\n\t\t}\r\n\r\n\t\treturn function ( t, p0, p1, p2, p3 ) {\r\n\r\n\t\t\treturn b3p0( t, p0 ) + b3p1( t, p1 ) + b3p2( t, p2 ) + b3p3( t, p3 );\r\n\r\n\t\t};\r\n\r\n\t} )()\r\n\r\n};\r\n\r\n// File:src/extras/core/Curve.js\r\n\r\n/**\r\n * @author zz85 / http://www.lab4games.net/zz85/blog\r\n * Extensible curve object\r\n *\r\n * Some common of Curve methods\r\n * .getPoint(t), getTangent(t)\r\n * .getPointAt(u), getTagentAt(u)\r\n * .getPoints(), .getSpacedPoints()\r\n * .getLength()\r\n * .updateArcLengths()\r\n *\r\n * This following classes subclasses THREE.Curve:\r\n *\r\n * -- 2d classes --\r\n * THREE.LineCurve\r\n * THREE.QuadraticBezierCurve\r\n * THREE.CubicBezierCurve\r\n * THREE.SplineCurve\r\n * THREE.ArcCurve\r\n * THREE.EllipseCurve\r\n *\r\n * -- 3d classes --\r\n * THREE.LineCurve3\r\n * THREE.QuadraticBezierCurve3\r\n * THREE.CubicBezierCurve3\r\n * THREE.SplineCurve3\r\n *\r\n * A series of curves can be represented as a THREE.CurvePath\r\n *\r\n **/\r\n\r\n/**************************************************************\r\n *\tAbstract Curve base class\r\n **************************************************************/\r\n\r\nTHREE.Curve = function () {\r\n\r\n};\r\n\r\nTHREE.Curve.prototype = {\r\n\r\n\tconstructor: THREE.Curve,\r\n\r\n\t// Virtual base class method to overwrite and implement in subclasses\r\n\t//\t- t [0 .. 1]\r\n\r\n\tgetPoint: function ( t ) {\r\n\r\n\t\tconsole.warn( \"THREE.Curve: Warning, getPoint() not implemented!\" );\r\n\t\treturn null;\r\n\r\n\t},\r\n\r\n\t// Get point at relative position in curve according to arc length\r\n\t// - u [0 .. 1]\r\n\r\n\tgetPointAt: function ( u ) {\r\n\r\n\t\tvar t = this.getUtoTmapping( u );\r\n\t\treturn this.getPoint( t );\r\n\r\n\t},\r\n\r\n\t// Get sequence of points using getPoint( t )\r\n\r\n\tgetPoints: function ( divisions ) {\r\n\r\n\t\tif ( ! divisions ) divisions = 5;\r\n\r\n\t\tvar d, pts = [];\r\n\r\n\t\tfor ( d = 0; d <= divisions; d ++ ) {\r\n\r\n\t\t\tpts.push( this.getPoint( d / divisions ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn pts;\r\n\r\n\t},\r\n\r\n\t// Get sequence of points using getPointAt( u )\r\n\r\n\tgetSpacedPoints: function ( divisions ) {\r\n\r\n\t\tif ( ! divisions ) divisions = 5;\r\n\r\n\t\tvar d, pts = [];\r\n\r\n\t\tfor ( d = 0; d <= divisions; d ++ ) {\r\n\r\n\t\t\tpts.push( this.getPointAt( d / divisions ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn pts;\r\n\r\n\t},\r\n\r\n\t// Get total curve arc length\r\n\r\n\tgetLength: function () {\r\n\r\n\t\tvar lengths = this.getLengths();\r\n\t\treturn lengths[ lengths.length - 1 ];\r\n\r\n\t},\r\n\r\n\t// Get list of cumulative segment lengths\r\n\r\n\tgetLengths: function ( divisions ) {\r\n\r\n\t\tif ( ! divisions ) divisions = ( this.__arcLengthDivisions ) ? ( this.__arcLengthDivisions ) : 200;\r\n\r\n\t\tif ( this.cacheArcLengths\r\n\t\t\t&& ( this.cacheArcLengths.length === divisions + 1 )\r\n\t\t\t&& ! this.needsUpdate ) {\r\n\r\n\t\t\t//console.log( \"cached\", this.cacheArcLengths );\r\n\t\t\treturn this.cacheArcLengths;\r\n\r\n\t\t}\r\n\r\n\t\tthis.needsUpdate = false;\r\n\r\n\t\tvar cache = [];\r\n\t\tvar current, last = this.getPoint( 0 );\r\n\t\tvar p, sum = 0;\r\n\r\n\t\tcache.push( 0 );\r\n\r\n\t\tfor ( p = 1; p <= divisions; p ++ ) {\r\n\r\n\t\t\tcurrent = this.getPoint ( p / divisions );\r\n\t\t\tsum += current.distanceTo( last );\r\n\t\t\tcache.push( sum );\r\n\t\t\tlast = current;\r\n\r\n\t\t}\r\n\r\n\t\tthis.cacheArcLengths = cache;\r\n\r\n\t\treturn cache; // { sums: cache, sum:sum }; Sum is in the last element.\r\n\r\n\t},\r\n\r\n\tupdateArcLengths: function() {\r\n\r\n\t\tthis.needsUpdate = true;\r\n\t\tthis.getLengths();\r\n\r\n\t},\r\n\r\n\t// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant\r\n\r\n\tgetUtoTmapping: function ( u, distance ) {\r\n\r\n\t\tvar arcLengths = this.getLengths();\r\n\r\n\t\tvar i = 0, il = arcLengths.length;\r\n\r\n\t\tvar targetArcLength; // The targeted u distance value to get\r\n\r\n\t\tif ( distance ) {\r\n\r\n\t\t\ttargetArcLength = distance;\r\n\r\n\t\t} else {\r\n\r\n\t\t\ttargetArcLength = u * arcLengths[ il - 1 ];\r\n\r\n\t\t}\r\n\r\n\t\t//var time = Date.now();\r\n\r\n\t\t// binary search for the index with largest value smaller than target u distance\r\n\r\n\t\tvar low = 0, high = il - 1, comparison;\r\n\r\n\t\twhile ( low <= high ) {\r\n\r\n\t\t\ti = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats\r\n\r\n\t\t\tcomparison = arcLengths[ i ] - targetArcLength;\r\n\r\n\t\t\tif ( comparison < 0 ) {\r\n\r\n\t\t\t\tlow = i + 1;\r\n\r\n\t\t\t} else if ( comparison > 0 ) {\r\n\r\n\t\t\t\thigh = i - 1;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\thigh = i;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t\t// DONE\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\ti = high;\r\n\r\n\t\t//console.log('b' , i, low, high, Date.now()- time);\r\n\r\n\t\tif ( arcLengths[ i ] === targetArcLength ) {\r\n\r\n\t\t\tvar t = i / ( il - 1 );\r\n\t\t\treturn t;\r\n\r\n\t\t}\r\n\r\n\t\t// we could get finer grain at lengths, or use simple interpolation between two points\r\n\r\n\t\tvar lengthBefore = arcLengths[ i ];\r\n\t\tvar lengthAfter = arcLengths[ i + 1 ];\r\n\r\n\t\tvar segmentLength = lengthAfter - lengthBefore;\r\n\r\n\t\t// determine where we are between the 'before' and 'after' points\r\n\r\n\t\tvar segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;\r\n\r\n\t\t// add that fractional amount to t\r\n\r\n\t\tvar t = ( i + segmentFraction ) / ( il - 1 );\r\n\r\n\t\treturn t;\r\n\r\n\t},\r\n\r\n\t// Returns a unit vector tangent at t\r\n\t// In case any sub curve does not implement its tangent derivation,\r\n\t// 2 points a small delta apart will be used to find its gradient\r\n\t// which seems to give a reasonable approximation\r\n\r\n\tgetTangent: function( t ) {\r\n\r\n\t\tvar delta = 0.0001;\r\n\t\tvar t1 = t - delta;\r\n\t\tvar t2 = t + delta;\r\n\r\n\t\t// Capping in case of danger\r\n\r\n\t\tif ( t1 < 0 ) t1 = 0;\r\n\t\tif ( t2 > 1 ) t2 = 1;\r\n\r\n\t\tvar pt1 = this.getPoint( t1 );\r\n\t\tvar pt2 = this.getPoint( t2 );\r\n\r\n\t\tvar vec = pt2.clone().sub( pt1 );\r\n\t\treturn vec.normalize();\r\n\r\n\t},\r\n\r\n\tgetTangentAt: function ( u ) {\r\n\r\n\t\tvar t = this.getUtoTmapping( u );\r\n\t\treturn this.getTangent( t );\r\n\r\n\t}\r\n\r\n};\r\n\r\n// TODO: Transformation for Curves?\r\n\r\n/**************************************************************\r\n *\t3D Curves\r\n **************************************************************/\r\n\r\n// A Factory method for creating new curve subclasses\r\n\r\nTHREE.Curve.create = function ( constructor, getPointFunc ) {\r\n\r\n\tconstructor.prototype = Object.create( THREE.Curve.prototype );\r\n\tconstructor.prototype.constructor = constructor;\r\n\tconstructor.prototype.getPoint = getPointFunc;\r\n\r\n\treturn constructor;\r\n\r\n};\r\n\r\n// File:src/extras/core/CurvePath.js\r\n\r\n/**\r\n * @author zz85 / http://www.lab4games.net/zz85/blog\r\n *\r\n **/\r\n\r\n/**************************************************************\r\n *\tCurved Path - a curve path is simply a array of connected\r\n *  curves, but retains the api of a curve\r\n **************************************************************/\r\n\r\nTHREE.CurvePath = function () {\r\n\r\n\tthis.curves = [];\r\n\r\n\tthis.autoClose = false; // Automatically closes the path\r\n\r\n};\r\n\r\nTHREE.CurvePath.prototype = Object.assign( Object.create( THREE.Curve.prototype ), {\r\n\r\n\tconstructor: THREE.CurvePath,\r\n\r\n\tadd: function ( curve ) {\r\n\r\n\t\tthis.curves.push( curve );\r\n\r\n\t},\r\n\r\n\tclosePath: function () {\r\n\r\n\t\t// TODO Test\r\n\t\t// and verify for vector3 (needs to implement equals)\r\n\t\t// Add a line curve if start and end of lines are not connected\r\n\t\tvar startPoint = this.curves[ 0 ].getPoint( 0 );\r\n\t\tvar endPoint = this.curves[ this.curves.length - 1 ].getPoint( 1 );\r\n\r\n\t\tif ( ! startPoint.equals( endPoint ) ) {\r\n\r\n\t\t\tthis.curves.push( new THREE.LineCurve( endPoint, startPoint ) );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\t// To get accurate point with reference to\r\n\t// entire path distance at time t,\r\n\t// following has to be done:\r\n\r\n\t// 1. Length of each sub path have to be known\r\n\t// 2. Locate and identify type of curve\r\n\t// 3. Get t for the curve\r\n\t// 4. Return curve.getPointAt(t')\r\n\r\n\tgetPoint: function ( t ) {\r\n\r\n\t\tvar d = t * this.getLength();\r\n\t\tvar curveLengths = this.getCurveLengths();\r\n\t\tvar i = 0;\r\n\r\n\t\t// To think about boundaries points.\r\n\r\n\t\twhile ( i < curveLengths.length ) {\r\n\r\n\t\t\tif ( curveLengths[ i ] >= d ) {\r\n\r\n\t\t\t\tvar diff = curveLengths[ i ] - d;\r\n\t\t\t\tvar curve = this.curves[ i ];\r\n\r\n\t\t\t\tvar u = 1 - diff / curve.getLength();\r\n\r\n\t\t\t\treturn curve.getPointAt( u );\r\n\r\n\t\t\t}\r\n\r\n\t\t\ti ++;\r\n\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\r\n\t\t// loop where sum != 0, sum > d , sum+1 <d\r\n\r\n\t},\r\n\r\n\t// We cannot use the default THREE.Curve getPoint() with getLength() because in\r\n\t// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath\r\n\t// getPoint() depends on getLength\r\n\r\n\tgetLength: function () {\r\n\r\n\t\tvar lens = this.getCurveLengths();\r\n\t\treturn lens[ lens.length - 1 ];\r\n\r\n\t},\r\n\r\n\t// Compute lengths and cache them\r\n\t// We cannot overwrite getLengths() because UtoT mapping uses it.\r\n\r\n\tgetCurveLengths: function () {\r\n\r\n\t\t// We use cache values if curves and cache array are same length\r\n\r\n\t\tif ( this.cacheLengths && this.cacheLengths.length === this.curves.length ) {\r\n\r\n\t\t\treturn this.cacheLengths;\r\n\r\n\t\t}\r\n\r\n\t\t// Get length of sub-curve\r\n\t\t// Push sums into cached array\r\n\r\n\t\tvar lengths = [], sums = 0;\r\n\r\n\t\tfor ( var i = 0, l = this.curves.length; i < l; i ++ ) {\r\n\r\n\t\t\tsums += this.curves[ i ].getLength();\r\n\t\t\tlengths.push( sums );\r\n\r\n\t\t}\r\n\r\n\t\tthis.cacheLengths = lengths;\r\n\r\n\t\treturn lengths;\r\n\r\n\t},\r\n\r\n\t/**************************************************************\r\n\t *\tCreate Geometries Helpers\r\n\t **************************************************************/\r\n\r\n\t/// Generate geometry from path points (for Line or Points objects)\r\n\r\n\tcreatePointsGeometry: function ( divisions ) {\r\n\r\n\t\tvar pts = this.getPoints( divisions );\r\n\t\treturn this.createGeometry( pts );\r\n\r\n\t},\r\n\r\n\t// Generate geometry from equidistant sampling along the path\r\n\r\n\tcreateSpacedPointsGeometry: function ( divisions ) {\r\n\r\n\t\tvar pts = this.getSpacedPoints( divisions );\r\n\t\treturn this.createGeometry( pts );\r\n\r\n\t},\r\n\r\n\tcreateGeometry: function ( points ) {\r\n\r\n\t\tvar geometry = new THREE.Geometry();\r\n\r\n\t\tfor ( var i = 0, l = points.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar point = points[ i ];\r\n\t\t\tgeometry.vertices.push( new THREE.Vector3( point.x, point.y, point.z || 0 ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn geometry;\r\n\r\n\t}\r\n\r\n} );\r\n\r\n// File:src/extras/core/Font.js\r\n\r\n/**\r\n * @author zz85 / http://www.lab4games.net/zz85/blog\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.Font = function ( data ) {\r\n\r\n\tthis.data = data;\r\n\r\n};\r\n\r\nObject.assign( THREE.Font.prototype, {\r\n\r\n\tgenerateShapes: function ( text, size, divisions ) {\r\n\r\n\t\tfunction createPaths( text ) {\r\n\r\n\t\t\tvar chars = String( text ).split( '' );\r\n\t\t\tvar scale = size / data.resolution;\r\n\t\t\tvar offset = 0;\r\n\r\n\t\t\tvar paths = [];\r\n\r\n\t\t\tfor ( var i = 0; i < chars.length; i ++ ) {\r\n\r\n\t\t\t\tvar ret = createPath( chars[ i ], scale, offset );\r\n\t\t\t\toffset += ret.offset;\r\n\r\n\t\t\t\tpaths.push( ret.path );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn paths;\r\n\r\n\t\t}\r\n\r\n\t\tfunction createPath( c, scale, offset ) {\r\n\r\n\t\t\tvar glyph = data.glyphs[ c ] || data.glyphs[ '?' ];\r\n\r\n\t\t\tif ( ! glyph ) return;\r\n\r\n\t\t\tvar path = new THREE.Path();\r\n\r\n\t\t\tvar pts = [], b2 = THREE.ShapeUtils.b2, b3 = THREE.ShapeUtils.b3;\r\n\t\t\tvar x, y, cpx, cpy, cpx0, cpy0, cpx1, cpy1, cpx2, cpy2, laste;\r\n\r\n\t\t\tif ( glyph.o ) {\r\n\r\n\t\t\t\tvar outline = glyph._cachedOutline || ( glyph._cachedOutline = glyph.o.split( ' ' ) );\r\n\r\n\t\t\t\tfor ( var i = 0, l = outline.length; i < l; ) {\r\n\r\n\t\t\t\t\tvar action = outline[ i ++ ];\r\n\r\n\t\t\t\t\tswitch ( action ) {\r\n\r\n\t\t\t\t\t\tcase 'm': // moveTo\r\n\r\n\t\t\t\t\t\t\tx = outline[ i ++ ] * scale + offset;\r\n\t\t\t\t\t\t\ty = outline[ i ++ ] * scale;\r\n\r\n\t\t\t\t\t\t\tpath.moveTo( x, y );\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'l': // lineTo\r\n\r\n\t\t\t\t\t\t\tx = outline[ i ++ ] * scale + offset;\r\n\t\t\t\t\t\t\ty = outline[ i ++ ] * scale;\r\n\r\n\t\t\t\t\t\t\tpath.lineTo( x, y );\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'q': // quadraticCurveTo\r\n\r\n\t\t\t\t\t\t\tcpx  = outline[ i ++ ] * scale + offset;\r\n\t\t\t\t\t\t\tcpy  = outline[ i ++ ] * scale;\r\n\t\t\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offset;\r\n\t\t\t\t\t\t\tcpy1 = outline[ i ++ ] * scale;\r\n\r\n\t\t\t\t\t\t\tpath.quadraticCurveTo( cpx1, cpy1, cpx, cpy );\r\n\r\n\t\t\t\t\t\t\tlaste = pts[ pts.length - 1 ];\r\n\r\n\t\t\t\t\t\t\tif ( laste ) {\r\n\r\n\t\t\t\t\t\t\t\tcpx0 = laste.x;\r\n\t\t\t\t\t\t\t\tcpy0 = laste.y;\r\n\r\n\t\t\t\t\t\t\t\tfor ( var i2 = 1; i2 <= divisions; i2 ++ ) {\r\n\r\n\t\t\t\t\t\t\t\t\tvar t = i2 / divisions;\r\n\t\t\t\t\t\t\t\t\tb2( t, cpx0, cpx1, cpx );\r\n\t\t\t\t\t\t\t\t\tb2( t, cpy0, cpy1, cpy );\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'b': // bezierCurveTo\r\n\r\n\t\t\t\t\t\t\tcpx  = outline[ i ++ ] * scale + offset;\r\n\t\t\t\t\t\t\tcpy  = outline[ i ++ ] * scale;\r\n\t\t\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offset;\r\n\t\t\t\t\t\t\tcpy1 = outline[ i ++ ] * scale;\r\n\t\t\t\t\t\t\tcpx2 = outline[ i ++ ] * scale + offset;\r\n\t\t\t\t\t\t\tcpy2 = outline[ i ++ ] * scale;\r\n\r\n\t\t\t\t\t\t\tpath.bezierCurveTo( cpx1, cpy1, cpx2, cpy2, cpx, cpy );\r\n\r\n\t\t\t\t\t\t\tlaste = pts[ pts.length - 1 ];\r\n\r\n\t\t\t\t\t\t\tif ( laste ) {\r\n\r\n\t\t\t\t\t\t\t\tcpx0 = laste.x;\r\n\t\t\t\t\t\t\t\tcpy0 = laste.y;\r\n\r\n\t\t\t\t\t\t\t\tfor ( var i2 = 1; i2 <= divisions; i2 ++ ) {\r\n\r\n\t\t\t\t\t\t\t\t\tvar t = i2 / divisions;\r\n\t\t\t\t\t\t\t\t\tb3( t, cpx0, cpx1, cpx2, cpx );\r\n\t\t\t\t\t\t\t\t\tb3( t, cpy0, cpy1, cpy2, cpy );\r\n\r\n\t\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn { offset: glyph.ha * scale, path: path };\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tif ( size === undefined ) size = 100;\r\n\t\tif ( divisions === undefined ) divisions = 4;\r\n\r\n\t\tvar data = this.data;\r\n\r\n\t\tvar paths = createPaths( text );\r\n\t\tvar shapes = [];\r\n\r\n\t\tfor ( var p = 0, pl = paths.length; p < pl; p ++ ) {\r\n\r\n\t\t\tArray.prototype.push.apply( shapes, paths[ p ].toShapes() );\r\n\r\n\t\t}\r\n\r\n\t\treturn shapes;\r\n\r\n\t}\r\n\r\n} );\r\n\r\n// File:src/extras/core/Path.js\r\n\r\n/**\r\n * @author zz85 / http://www.lab4games.net/zz85/blog\r\n * Creates free form 2d path using series of points, lines or curves.\r\n *\r\n **/\r\n\r\nTHREE.Path = function ( points ) {\r\n\r\n\tTHREE.CurvePath.call( this );\r\n\r\n\tthis.actions = [];\r\n\r\n\tif ( points ) {\r\n\r\n\t\tthis.fromPoints( points );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.Path.prototype = Object.assign( Object.create( THREE.CurvePath.prototype ), {\r\n\r\n\tconstructor: THREE.Path,\r\n\r\n\t// TODO Clean up PATH API\r\n\r\n\t// Create path using straight lines to connect all points\r\n\t// - vectors: array of Vector2\r\n\r\n\tfromPoints: function ( vectors ) {\r\n\r\n\t\tthis.moveTo( vectors[ 0 ].x, vectors[ 0 ].y );\r\n\r\n\t\tfor ( var i = 1, l = vectors.length; i < l; i ++ ) {\r\n\r\n\t\t\tthis.lineTo( vectors[ i ].x, vectors[ i ].y );\r\n\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tmoveTo: function ( x, y ) {\r\n\r\n\t\tthis.actions.push( { action: 'moveTo', args: [ x, y ] } );\r\n\r\n\t},\r\n\r\n\tlineTo: function ( x, y ) {\r\n\r\n\t\tvar lastargs = this.actions[ this.actions.length - 1 ].args;\r\n\r\n\t\tvar x0 = lastargs[ lastargs.length - 2 ];\r\n\t\tvar y0 = lastargs[ lastargs.length - 1 ];\r\n\r\n\t\tvar curve = new THREE.LineCurve( new THREE.Vector2( x0, y0 ), new THREE.Vector2( x, y ) );\r\n\t\tthis.curves.push( curve );\r\n\r\n\t\tthis.actions.push( { action: 'lineTo', args: [ x, y ] } );\r\n\r\n\t},\r\n\r\n\tquadraticCurveTo: function ( aCPx, aCPy, aX, aY ) {\r\n\r\n\t\tvar lastargs = this.actions[ this.actions.length - 1 ].args;\r\n\r\n\t\tvar x0 = lastargs[ lastargs.length - 2 ];\r\n\t\tvar y0 = lastargs[ lastargs.length - 1 ];\r\n\r\n\t\tvar curve = new THREE.QuadraticBezierCurve(\r\n\t\t\tnew THREE.Vector2( x0, y0 ),\r\n\t\t\tnew THREE.Vector2( aCPx, aCPy ),\r\n\t\t\tnew THREE.Vector2( aX, aY )\r\n\t\t);\r\n\r\n\t\tthis.curves.push( curve );\r\n\r\n\t\tthis.actions.push( { action: 'quadraticCurveTo', args: [ aCPx, aCPy, aX, aY ] } );\r\n\r\n\t},\r\n\r\n\tbezierCurveTo: function ( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\r\n\r\n\t\tvar lastargs = this.actions[ this.actions.length - 1 ].args;\r\n\r\n\t\tvar x0 = lastargs[ lastargs.length - 2 ];\r\n\t\tvar y0 = lastargs[ lastargs.length - 1 ];\r\n\r\n\t\tvar curve = new THREE.CubicBezierCurve(\r\n\t\t\tnew THREE.Vector2( x0, y0 ),\r\n\t\t\tnew THREE.Vector2( aCP1x, aCP1y ),\r\n\t\t\tnew THREE.Vector2( aCP2x, aCP2y ),\r\n\t\t\tnew THREE.Vector2( aX, aY )\r\n\t\t);\r\n\r\n\t\tthis.curves.push( curve );\r\n\r\n\t\tthis.actions.push( { action: 'bezierCurveTo', args: [ aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ] } );\r\n\r\n\t},\r\n\r\n\tsplineThru: function ( pts /*Array of Vector*/ ) {\r\n\r\n\t\tvar args = Array.prototype.slice.call( arguments );\r\n\r\n\t\tvar lastargs = this.actions[ this.actions.length - 1 ].args;\r\n\r\n\t\tvar x0 = lastargs[ lastargs.length - 2 ];\r\n\t\tvar y0 = lastargs[ lastargs.length - 1 ];\r\n\r\n\t\tvar npts = [ new THREE.Vector2( x0, y0 ) ];\r\n\t\tArray.prototype.push.apply( npts, pts );\r\n\r\n\t\tvar curve = new THREE.SplineCurve( npts );\r\n\t\tthis.curves.push( curve );\r\n\r\n\t\tthis.actions.push( { action: 'splineThru', args: args } );\r\n\r\n\t},\r\n\r\n\tarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\r\n\r\n\t\tvar lastargs = this.actions[ this.actions.length - 1 ].args;\r\n\t\tvar x0 = lastargs[ lastargs.length - 2 ];\r\n\t\tvar y0 = lastargs[ lastargs.length - 1 ];\r\n\r\n\t\tthis.absarc( aX + x0, aY + y0, aRadius,\r\n\t\t\taStartAngle, aEndAngle, aClockwise );\r\n\r\n\t},\r\n\r\n\tabsarc: function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\r\n\r\n\t\tthis.absellipse( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\r\n\r\n\t},\r\n\r\n\tellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\r\n\r\n\t\tvar lastargs = this.actions[ this.actions.length - 1 ].args;\r\n\t\tvar x0 = lastargs[ lastargs.length - 2 ];\r\n\t\tvar y0 = lastargs[ lastargs.length - 1 ];\r\n\r\n\t\tthis.absellipse( aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\r\n\r\n\t},\r\n\r\n\tabsellipse: function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\r\n\r\n\t\tvar args = [\r\n\t\t\taX, aY,\r\n\t\t\txRadius, yRadius,\r\n\t\t\taStartAngle, aEndAngle,\r\n\t\t\taClockwise,\r\n\t\t\taRotation || 0 // aRotation is optional.\r\n\t\t];\r\n\r\n\t\tvar curve = new THREE.EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\r\n\t\tthis.curves.push( curve );\r\n\r\n\t\tvar lastPoint = curve.getPoint( 1 );\r\n\t\targs.push( lastPoint.x );\r\n\t\targs.push( lastPoint.y );\r\n\r\n\t\tthis.actions.push( { action: 'ellipse', args: args } );\r\n\r\n\t},\r\n\r\n\tgetSpacedPoints: function ( divisions ) {\r\n\r\n\t\tif ( ! divisions ) divisions = 40;\r\n\r\n\t\tvar points = [];\r\n\r\n\t\tfor ( var i = 0; i < divisions; i ++ ) {\r\n\r\n\t\t\tpoints.push( this.getPoint( i / divisions ) );\r\n\r\n\t\t\t//if ( !this.getPoint( i / divisions ) ) throw \"DIE\";\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.autoClose ) {\r\n\r\n\t\t\tpoints.push( points[ 0 ] );\r\n\r\n\t\t}\r\n\r\n\t\treturn points;\r\n\r\n\t},\r\n\r\n\tgetPoints: function ( divisions ) {\r\n\r\n\t\tdivisions = divisions || 12;\r\n\r\n\t\tvar b2 = THREE.ShapeUtils.b2;\r\n\t\tvar b3 = THREE.ShapeUtils.b3;\r\n\r\n\t\tvar points = [];\r\n\r\n\t\tvar cpx, cpy, cpx2, cpy2, cpx1, cpy1, cpx0, cpy0,\r\n\t\t\tlaste, tx, ty;\r\n\r\n\t\tfor ( var i = 0, l = this.actions.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar item = this.actions[ i ];\r\n\r\n\t\t\tvar action = item.action;\r\n\t\t\tvar args = item.args;\r\n\r\n\t\t\tswitch ( action ) {\r\n\r\n\t\t\tcase 'moveTo':\r\n\r\n\t\t\t\tpoints.push( new THREE.Vector2( args[ 0 ], args[ 1 ] ) );\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'lineTo':\r\n\r\n\t\t\t\tpoints.push( new THREE.Vector2( args[ 0 ], args[ 1 ] ) );\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'quadraticCurveTo':\r\n\r\n\t\t\t\tcpx  = args[ 2 ];\r\n\t\t\t\tcpy  = args[ 3 ];\r\n\r\n\t\t\t\tcpx1 = args[ 0 ];\r\n\t\t\t\tcpy1 = args[ 1 ];\r\n\r\n\t\t\t\tif ( points.length > 0 ) {\r\n\r\n\t\t\t\t\tlaste = points[ points.length - 1 ];\r\n\r\n\t\t\t\t\tcpx0 = laste.x;\r\n\t\t\t\t\tcpy0 = laste.y;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tlaste = this.actions[ i - 1 ].args;\r\n\r\n\t\t\t\t\tcpx0 = laste[ laste.length - 2 ];\r\n\t\t\t\t\tcpy0 = laste[ laste.length - 1 ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor ( var j = 1; j <= divisions; j ++ ) {\r\n\r\n\t\t\t\t\tvar t = j / divisions;\r\n\r\n\t\t\t\t\ttx = b2( t, cpx0, cpx1, cpx );\r\n\t\t\t\t\tty = b2( t, cpy0, cpy1, cpy );\r\n\r\n\t\t\t\t\tpoints.push( new THREE.Vector2( tx, ty ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'bezierCurveTo':\r\n\r\n\t\t\t\tcpx  = args[ 4 ];\r\n\t\t\t\tcpy  = args[ 5 ];\r\n\r\n\t\t\t\tcpx1 = args[ 0 ];\r\n\t\t\t\tcpy1 = args[ 1 ];\r\n\r\n\t\t\t\tcpx2 = args[ 2 ];\r\n\t\t\t\tcpy2 = args[ 3 ];\r\n\r\n\t\t\t\tif ( points.length > 0 ) {\r\n\r\n\t\t\t\t\tlaste = points[ points.length - 1 ];\r\n\r\n\t\t\t\t\tcpx0 = laste.x;\r\n\t\t\t\t\tcpy0 = laste.y;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tlaste = this.actions[ i - 1 ].args;\r\n\r\n\t\t\t\t\tcpx0 = laste[ laste.length - 2 ];\r\n\t\t\t\t\tcpy0 = laste[ laste.length - 1 ];\r\n\r\n\t\t\t\t}\r\n\r\n\r\n\t\t\t\tfor ( var j = 1; j <= divisions; j ++ ) {\r\n\r\n\t\t\t\t\tvar t = j / divisions;\r\n\r\n\t\t\t\t\ttx = b3( t, cpx0, cpx1, cpx2, cpx );\r\n\t\t\t\t\tty = b3( t, cpy0, cpy1, cpy2, cpy );\r\n\r\n\t\t\t\t\tpoints.push( new THREE.Vector2( tx, ty ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'splineThru':\r\n\r\n\t\t\t\tlaste = this.actions[ i - 1 ].args;\r\n\r\n\t\t\t\tvar last = new THREE.Vector2( laste[ laste.length - 2 ], laste[ laste.length - 1 ] );\r\n\t\t\t\tvar spts = [ last ];\r\n\r\n\t\t\t\tvar n = divisions * args[ 0 ].length;\r\n\r\n\t\t\t\tspts = spts.concat( args[ 0 ] );\r\n\r\n\t\t\t\tvar spline = new THREE.SplineCurve( spts );\r\n\r\n\t\t\t\tfor ( var j = 1; j <= n; j ++ ) {\r\n\r\n\t\t\t\t\tpoints.push( spline.getPointAt( j / n ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'arc':\r\n\r\n\t\t\t\tvar aX = args[ 0 ], aY = args[ 1 ],\r\n\t\t\t\t\taRadius = args[ 2 ],\r\n\t\t\t\t\taStartAngle = args[ 3 ], aEndAngle = args[ 4 ],\r\n\t\t\t\t\taClockwise = !! args[ 5 ];\r\n\r\n\t\t\t\tvar deltaAngle = aEndAngle - aStartAngle;\r\n\t\t\t\tvar angle;\r\n\t\t\t\tvar tdivisions = divisions * 2;\r\n\r\n\t\t\t\tfor ( var j = 1; j <= tdivisions; j ++ ) {\r\n\r\n\t\t\t\t\tvar t = j / tdivisions;\r\n\r\n\t\t\t\t\tif ( ! aClockwise ) {\r\n\r\n\t\t\t\t\t\tt = 1 - t;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tangle = aStartAngle + t * deltaAngle;\r\n\r\n\t\t\t\t\ttx = aX + aRadius * Math.cos( angle );\r\n\t\t\t\t\tty = aY + aRadius * Math.sin( angle );\r\n\r\n\t\t\t\t\t//console.log('t', t, 'angle', angle, 'tx', tx, 'ty', ty);\r\n\r\n\t\t\t\t\tpoints.push( new THREE.Vector2( tx, ty ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//console.log(points);\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'ellipse':\r\n\r\n\t\t\t\tvar aX = args[ 0 ], aY = args[ 1 ],\r\n\t\t\t\t\txRadius = args[ 2 ],\r\n\t\t\t\t\tyRadius = args[ 3 ],\r\n\t\t\t\t\taStartAngle = args[ 4 ], aEndAngle = args[ 5 ],\r\n\t\t\t\t\taClockwise = !! args[ 6 ],\r\n\t\t\t\t\taRotation = args[ 7 ];\r\n\r\n\r\n\t\t\t\tvar deltaAngle = aEndAngle - aStartAngle;\r\n\t\t\t\tvar angle;\r\n\t\t\t\tvar tdivisions = divisions * 2;\r\n\r\n\t\t\t\tvar cos, sin;\r\n\t\t\t\tif ( aRotation !== 0 ) {\r\n\r\n\t\t\t\t\tcos = Math.cos( aRotation );\r\n\t\t\t\t\tsin = Math.sin( aRotation );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor ( var j = 1; j <= tdivisions; j ++ ) {\r\n\r\n\t\t\t\t\tvar t = j / tdivisions;\r\n\r\n\t\t\t\t\tif ( ! aClockwise ) {\r\n\r\n\t\t\t\t\t\tt = 1 - t;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tangle = aStartAngle + t * deltaAngle;\r\n\r\n\t\t\t\t\ttx = aX + xRadius * Math.cos( angle );\r\n\t\t\t\t\tty = aY + yRadius * Math.sin( angle );\r\n\r\n\t\t\t\t\tif ( aRotation !== 0 ) {\r\n\r\n\t\t\t\t\t\tvar x = tx, y = ty;\r\n\r\n\t\t\t\t\t\t// Rotate the point about the center of the ellipse.\r\n\t\t\t\t\t\ttx = ( x - aX ) * cos - ( y - aY ) * sin + aX;\r\n\t\t\t\t\t\tty = ( x - aX ) * sin + ( y - aY ) * cos + aY;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t//console.log('t', t, 'angle', angle, 'tx', tx, 'ty', ty);\r\n\r\n\t\t\t\t\tpoints.push( new THREE.Vector2( tx, ty ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//console.log(points);\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t} // end switch\r\n\r\n\t\t}\r\n\r\n\r\n\r\n\t\t// Normalize to remove the closing point by default.\r\n\t\tvar lastPoint = points[ points.length - 1 ];\r\n\t\tif ( Math.abs( lastPoint.x - points[ 0 ].x ) < Number.EPSILON &&\r\n\t\t\t\t Math.abs( lastPoint.y - points[ 0 ].y ) < Number.EPSILON )\r\n\t\t\tpoints.splice( points.length - 1, 1 );\r\n\r\n\t\tif ( this.autoClose ) {\r\n\r\n\t\t\tpoints.push( points[ 0 ] );\r\n\r\n\t\t}\r\n\r\n\t\treturn points;\r\n\r\n\t},\r\n\r\n\ttoShapes: function ( isCCW, noHoles ) {\r\n\r\n\t\tfunction extractSubpaths( inActions ) {\r\n\r\n\t\t\tvar subPaths = [], lastPath = new THREE.Path();\r\n\r\n\t\t\tfor ( var i = 0, l = inActions.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar item = inActions[ i ];\r\n\r\n\t\t\t\tvar args = item.args;\r\n\t\t\t\tvar action = item.action;\r\n\r\n\t\t\t\tif ( action === 'moveTo' ) {\r\n\r\n\t\t\t\t\tif ( lastPath.actions.length !== 0 ) {\r\n\r\n\t\t\t\t\t\tsubPaths.push( lastPath );\r\n\t\t\t\t\t\tlastPath = new THREE.Path();\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlastPath[ action ].apply( lastPath, args );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( lastPath.actions.length !== 0 ) {\r\n\r\n\t\t\t\tsubPaths.push( lastPath );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// console.log(subPaths);\r\n\r\n\t\t\treturn\tsubPaths;\r\n\r\n\t\t}\r\n\r\n\t\tfunction toShapesNoHoles( inSubpaths ) {\r\n\r\n\t\t\tvar shapes = [];\r\n\r\n\t\t\tfor ( var i = 0, l = inSubpaths.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar tmpPath = inSubpaths[ i ];\r\n\r\n\t\t\t\tvar tmpShape = new THREE.Shape();\r\n\t\t\t\ttmpShape.actions = tmpPath.actions;\r\n\t\t\t\ttmpShape.curves = tmpPath.curves;\r\n\r\n\t\t\t\tshapes.push( tmpShape );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//console.log(\"shape\", shapes);\r\n\r\n\t\t\treturn shapes;\r\n\r\n\t\t}\r\n\r\n\t\tfunction isPointInsidePolygon( inPt, inPolygon ) {\r\n\r\n\t\t\tvar polyLen = inPolygon.length;\r\n\r\n\t\t\t// inPt on polygon contour => immediate success    or\r\n\t\t\t// toggling of inside/outside at every single! intersection point of an edge\r\n\t\t\t//  with the horizontal line through inPt, left of inPt\r\n\t\t\t//  not counting lowerY endpoints of edges and whole edges on that line\r\n\t\t\tvar inside = false;\r\n\t\t\tfor ( var p = polyLen - 1, q = 0; q < polyLen; p = q ++ ) {\r\n\r\n\t\t\t\tvar edgeLowPt  = inPolygon[ p ];\r\n\t\t\t\tvar edgeHighPt = inPolygon[ q ];\r\n\r\n\t\t\t\tvar edgeDx = edgeHighPt.x - edgeLowPt.x;\r\n\t\t\t\tvar edgeDy = edgeHighPt.y - edgeLowPt.y;\r\n\r\n\t\t\t\tif ( Math.abs( edgeDy ) > Number.EPSILON ) {\r\n\r\n\t\t\t\t\t// not parallel\r\n\t\t\t\t\tif ( edgeDy < 0 ) {\r\n\r\n\t\t\t\t\t\tedgeLowPt  = inPolygon[ q ]; edgeDx = - edgeDx;\r\n\t\t\t\t\t\tedgeHighPt = inPolygon[ p ]; edgeDy = - edgeDy;\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ( ( inPt.y < edgeLowPt.y ) || ( inPt.y > edgeHighPt.y ) ) \t\tcontinue;\r\n\r\n\t\t\t\t\tif ( inPt.y === edgeLowPt.y ) {\r\n\r\n\t\t\t\t\t\tif ( inPt.x === edgeLowPt.x )\t\treturn\ttrue;\t\t// inPt is on contour ?\r\n\t\t\t\t\t\t// continue;\t\t\t\t// no intersection or edgeLowPt => doesn't count !!!\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tvar perpEdge = edgeDy * ( inPt.x - edgeLowPt.x ) - edgeDx * ( inPt.y - edgeLowPt.y );\r\n\t\t\t\t\t\tif ( perpEdge === 0 )\t\t\t\treturn\ttrue;\t\t// inPt is on contour ?\r\n\t\t\t\t\t\tif ( perpEdge < 0 ) \t\t\t\tcontinue;\r\n\t\t\t\t\t\tinside = ! inside;\t\t// true intersection left of inPt\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// parallel or collinear\r\n\t\t\t\t\tif ( inPt.y !== edgeLowPt.y ) \t\tcontinue;\t\t\t// parallel\r\n\t\t\t\t\t// edge lies on the same horizontal line as inPt\r\n\t\t\t\t\tif ( ( ( edgeHighPt.x <= inPt.x ) && ( inPt.x <= edgeLowPt.x ) ) ||\r\n\t\t\t\t\t\t ( ( edgeLowPt.x <= inPt.x ) && ( inPt.x <= edgeHighPt.x ) ) )\t\treturn\ttrue;\t// inPt: Point on contour !\r\n\t\t\t\t\t// continue;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn\tinside;\r\n\r\n\t\t}\r\n\r\n\t\tvar isClockWise = THREE.ShapeUtils.isClockWise;\r\n\r\n\t\tvar subPaths = extractSubpaths( this.actions );\r\n\t\tif ( subPaths.length === 0 ) return [];\r\n\r\n\t\tif ( noHoles === true )\treturn\ttoShapesNoHoles( subPaths );\r\n\r\n\r\n\t\tvar solid, tmpPath, tmpShape, shapes = [];\r\n\r\n\t\tif ( subPaths.length === 1 ) {\r\n\r\n\t\t\ttmpPath = subPaths[ 0 ];\r\n\t\t\ttmpShape = new THREE.Shape();\r\n\t\t\ttmpShape.actions = tmpPath.actions;\r\n\t\t\ttmpShape.curves = tmpPath.curves;\r\n\t\t\tshapes.push( tmpShape );\r\n\t\t\treturn shapes;\r\n\r\n\t\t}\r\n\r\n\t\tvar holesFirst = ! isClockWise( subPaths[ 0 ].getPoints() );\r\n\t\tholesFirst = isCCW ? ! holesFirst : holesFirst;\r\n\r\n\t\t// console.log(\"Holes first\", holesFirst);\r\n\r\n\t\tvar betterShapeHoles = [];\r\n\t\tvar newShapes = [];\r\n\t\tvar newShapeHoles = [];\r\n\t\tvar mainIdx = 0;\r\n\t\tvar tmpPoints;\r\n\r\n\t\tnewShapes[ mainIdx ] = undefined;\r\n\t\tnewShapeHoles[ mainIdx ] = [];\r\n\r\n\t\tfor ( var i = 0, l = subPaths.length; i < l; i ++ ) {\r\n\r\n\t\t\ttmpPath = subPaths[ i ];\r\n\t\t\ttmpPoints = tmpPath.getPoints();\r\n\t\t\tsolid = isClockWise( tmpPoints );\r\n\t\t\tsolid = isCCW ? ! solid : solid;\r\n\r\n\t\t\tif ( solid ) {\r\n\r\n\t\t\t\tif ( ( ! holesFirst ) && ( newShapes[ mainIdx ] ) )\tmainIdx ++;\r\n\r\n\t\t\t\tnewShapes[ mainIdx ] = { s: new THREE.Shape(), p: tmpPoints };\r\n\t\t\t\tnewShapes[ mainIdx ].s.actions = tmpPath.actions;\r\n\t\t\t\tnewShapes[ mainIdx ].s.curves = tmpPath.curves;\r\n\r\n\t\t\t\tif ( holesFirst )\tmainIdx ++;\r\n\t\t\t\tnewShapeHoles[ mainIdx ] = [];\r\n\r\n\t\t\t\t//console.log('cw', i);\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tnewShapeHoles[ mainIdx ].push( { h: tmpPath, p: tmpPoints[ 0 ] } );\r\n\r\n\t\t\t\t//console.log('ccw', i);\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// only Holes? -> probably all Shapes with wrong orientation\r\n\t\tif ( ! newShapes[ 0 ] )\treturn\ttoShapesNoHoles( subPaths );\r\n\r\n\r\n\t\tif ( newShapes.length > 1 ) {\r\n\r\n\t\t\tvar ambiguous = false;\r\n\t\t\tvar toChange = [];\r\n\r\n\t\t\tfor ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\r\n\r\n\t\t\t\tbetterShapeHoles[ sIdx ] = [];\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\r\n\r\n\t\t\t\tvar sho = newShapeHoles[ sIdx ];\r\n\r\n\t\t\t\tfor ( var hIdx = 0; hIdx < sho.length; hIdx ++ ) {\r\n\r\n\t\t\t\t\tvar ho = sho[ hIdx ];\r\n\t\t\t\t\tvar hole_unassigned = true;\r\n\r\n\t\t\t\t\tfor ( var s2Idx = 0; s2Idx < newShapes.length; s2Idx ++ ) {\r\n\r\n\t\t\t\t\t\tif ( isPointInsidePolygon( ho.p, newShapes[ s2Idx ].p ) ) {\r\n\r\n\t\t\t\t\t\t\tif ( sIdx !== s2Idx )\ttoChange.push( { froms: sIdx, tos: s2Idx, hole: hIdx } );\r\n\t\t\t\t\t\t\tif ( hole_unassigned ) {\r\n\r\n\t\t\t\t\t\t\t\thole_unassigned = false;\r\n\t\t\t\t\t\t\t\tbetterShapeHoles[ s2Idx ].push( ho );\r\n\r\n\t\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t\tambiguous = true;\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ( hole_unassigned ) {\r\n\r\n\t\t\t\t\t\tbetterShapeHoles[ sIdx ].push( ho );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t\t// console.log(\"ambiguous: \", ambiguous);\r\n\t\t\tif ( toChange.length > 0 ) {\r\n\r\n\t\t\t\t// console.log(\"to change: \", toChange);\r\n\t\t\t\tif ( ! ambiguous )\tnewShapeHoles = betterShapeHoles;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tvar tmpHoles;\r\n\r\n\t\tfor ( var i = 0, il = newShapes.length; i < il; i ++ ) {\r\n\r\n\t\t\ttmpShape = newShapes[ i ].s;\r\n\t\t\tshapes.push( tmpShape );\r\n\t\t\ttmpHoles = newShapeHoles[ i ];\r\n\r\n\t\t\tfor ( var j = 0, jl = tmpHoles.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\ttmpShape.holes.push( tmpHoles[ j ].h );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t//console.log(\"shape\", shapes);\r\n\r\n\t\treturn shapes;\r\n\r\n\t}\r\n\r\n} );\r\n\r\n// File:src/extras/core/Shape.js\r\n\r\n/**\r\n * @author zz85 / http://www.lab4games.net/zz85/blog\r\n * Defines a 2d shape plane using paths.\r\n **/\r\n\r\n// STEP 1 Create a path.\r\n// STEP 2 Turn path into shape.\r\n// STEP 3 ExtrudeGeometry takes in Shape/Shapes\r\n// STEP 3a - Extract points from each shape, turn to vertices\r\n// STEP 3b - Triangulate each shape, add faces.\r\n\r\nTHREE.Shape = function () {\r\n\r\n\tTHREE.Path.apply( this, arguments );\r\n\r\n\tthis.holes = [];\r\n\r\n};\r\n\r\nTHREE.Shape.prototype = Object.assign( Object.create( THREE.Path.prototype ), {\r\n\r\n\tconstructor: THREE.Shape,\r\n\r\n\t// Convenience method to return ExtrudeGeometry\r\n\r\n\textrude: function ( options ) {\r\n\r\n\t\treturn new THREE.ExtrudeGeometry( this, options );\r\n\r\n\t},\r\n\r\n\t// Convenience method to return ShapeGeometry\r\n\r\n\tmakeGeometry: function ( options ) {\r\n\r\n\t\treturn new THREE.ShapeGeometry( this, options );\r\n\r\n\t},\r\n\r\n\tgetPointsHoles: function ( divisions ) {\r\n\r\n\t\tvar holesPts = [];\r\n\r\n\t\tfor ( var i = 0, l = this.holes.length; i < l; i ++ ) {\r\n\r\n\t\t\tholesPts[ i ] = this.holes[ i ].getPoints( divisions );\r\n\r\n\t\t}\r\n\r\n\t\treturn holesPts;\r\n\r\n\t},\r\n\r\n\t// Get points of shape and holes (keypoints based on segments parameter)\r\n\r\n\textractAllPoints: function ( divisions ) {\r\n\r\n\t\treturn {\r\n\r\n\t\t\tshape: this.getPoints( divisions ),\r\n\t\t\tholes: this.getPointsHoles( divisions )\r\n\r\n\t\t};\r\n\r\n\t},\r\n\r\n\textractPoints: function ( divisions ) {\r\n\r\n\t\treturn this.extractAllPoints( divisions );\r\n\r\n\t}\r\n\r\n} );\r\n\r\n// File:src/extras/curves/LineCurve.js\r\n\r\n/**************************************************************\r\n *\tLine\r\n **************************************************************/\r\n\r\nTHREE.LineCurve = function ( v1, v2 ) {\r\n\r\n\tthis.v1 = v1;\r\n\tthis.v2 = v2;\r\n\r\n};\r\n\r\nTHREE.LineCurve.prototype = Object.create( THREE.Curve.prototype );\r\nTHREE.LineCurve.prototype.constructor = THREE.LineCurve;\r\n\r\nTHREE.LineCurve.prototype.getPoint = function ( t ) {\r\n\r\n\tvar point = this.v2.clone().sub( this.v1 );\r\n\tpoint.multiplyScalar( t ).add( this.v1 );\r\n\r\n\treturn point;\r\n\r\n};\r\n\r\n// Line curve is linear, so we can overwrite default getPointAt\r\n\r\nTHREE.LineCurve.prototype.getPointAt = function ( u ) {\r\n\r\n\treturn this.getPoint( u );\r\n\r\n};\r\n\r\nTHREE.LineCurve.prototype.getTangent = function( t ) {\r\n\r\n\tvar tangent = this.v2.clone().sub( this.v1 );\r\n\r\n\treturn tangent.normalize();\r\n\r\n};\r\n\r\n// File:src/extras/curves/QuadraticBezierCurve.js\r\n\r\n/**************************************************************\r\n *\tQuadratic Bezier curve\r\n **************************************************************/\r\n\r\n\r\nTHREE.QuadraticBezierCurve = function ( v0, v1, v2 ) {\r\n\r\n\tthis.v0 = v0;\r\n\tthis.v1 = v1;\r\n\tthis.v2 = v2;\r\n\r\n};\r\n\r\nTHREE.QuadraticBezierCurve.prototype = Object.create( THREE.Curve.prototype );\r\nTHREE.QuadraticBezierCurve.prototype.constructor = THREE.QuadraticBezierCurve;\r\n\r\n\r\nTHREE.QuadraticBezierCurve.prototype.getPoint = function ( t ) {\r\n\r\n\tvar b2 = THREE.ShapeUtils.b2;\r\n\r\n\treturn new THREE.Vector2(\r\n\t\tb2( t, this.v0.x, this.v1.x, this.v2.x ),\r\n\t\tb2( t, this.v0.y, this.v1.y, this.v2.y )\r\n\t);\r\n\r\n};\r\n\r\n\r\nTHREE.QuadraticBezierCurve.prototype.getTangent = function( t ) {\r\n\r\n\tvar tangentQuadraticBezier = THREE.CurveUtils.tangentQuadraticBezier;\r\n\r\n\treturn new THREE.Vector2(\r\n\t\ttangentQuadraticBezier( t, this.v0.x, this.v1.x, this.v2.x ),\r\n\t\ttangentQuadraticBezier( t, this.v0.y, this.v1.y, this.v2.y )\r\n\t).normalize();\r\n\r\n};\r\n\r\n// File:src/extras/curves/CubicBezierCurve.js\r\n\r\n/**************************************************************\r\n *\tCubic Bezier curve\r\n **************************************************************/\r\n\r\nTHREE.CubicBezierCurve = function ( v0, v1, v2, v3 ) {\r\n\r\n\tthis.v0 = v0;\r\n\tthis.v1 = v1;\r\n\tthis.v2 = v2;\r\n\tthis.v3 = v3;\r\n\r\n};\r\n\r\nTHREE.CubicBezierCurve.prototype = Object.create( THREE.Curve.prototype );\r\nTHREE.CubicBezierCurve.prototype.constructor = THREE.CubicBezierCurve;\r\n\r\nTHREE.CubicBezierCurve.prototype.getPoint = function ( t ) {\r\n\r\n\tvar b3 = THREE.ShapeUtils.b3;\r\n\r\n\treturn new THREE.Vector2( \r\n\t\tb3( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),\r\n\t\tb3( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y )\r\n\t);\r\n\r\n};\r\n\r\nTHREE.CubicBezierCurve.prototype.getTangent = function( t ) {\r\n\r\n\tvar tangentCubicBezier = THREE.CurveUtils.tangentCubicBezier;\r\n\r\n\treturn new THREE.Vector2( \r\n\t\ttangentCubicBezier( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),\r\n\t\ttangentCubicBezier( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y )\r\n\t).normalize();\r\n\r\n};\r\n\r\n// File:src/extras/curves/SplineCurve.js\r\n\r\n/**************************************************************\r\n *\tSpline curve\r\n **************************************************************/\r\n\r\nTHREE.SplineCurve = function ( points /* array of Vector2 */ ) {\r\n\r\n\tthis.points = ( points == undefined ) ? [] : points;\r\n\r\n};\r\n\r\nTHREE.SplineCurve.prototype = Object.create( THREE.Curve.prototype );\r\nTHREE.SplineCurve.prototype.constructor = THREE.SplineCurve;\r\n\r\nTHREE.SplineCurve.prototype.getPoint = function ( t ) {\r\n\r\n\tvar points = this.points;\r\n\tvar point = ( points.length - 1 ) * t;\r\n\r\n\tvar intPoint = Math.floor( point );\r\n\tvar weight = point - intPoint;\r\n\r\n\tvar point0 = points[ intPoint === 0 ? intPoint : intPoint - 1 ];\r\n\tvar point1 = points[ intPoint ];\r\n\tvar point2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];\r\n\tvar point3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];\r\n\r\n\tvar interpolate = THREE.CurveUtils.interpolate;\r\n\r\n\treturn new THREE.Vector2(\r\n\t\tinterpolate( point0.x, point1.x, point2.x, point3.x, weight ),\r\n\t\tinterpolate( point0.y, point1.y, point2.y, point3.y, weight )\r\n\t);\r\n\r\n};\r\n\r\n// File:src/extras/curves/EllipseCurve.js\r\n\r\n/**************************************************************\r\n *\tEllipse curve\r\n **************************************************************/\r\n\r\nTHREE.EllipseCurve = function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\r\n\r\n\tthis.aX = aX;\r\n\tthis.aY = aY;\r\n\r\n\tthis.xRadius = xRadius;\r\n\tthis.yRadius = yRadius;\r\n\r\n\tthis.aStartAngle = aStartAngle;\r\n\tthis.aEndAngle = aEndAngle;\r\n\r\n\tthis.aClockwise = aClockwise;\r\n\t\r\n\tthis.aRotation = aRotation || 0;\r\n\r\n};\r\n\r\nTHREE.EllipseCurve.prototype = Object.create( THREE.Curve.prototype );\r\nTHREE.EllipseCurve.prototype.constructor = THREE.EllipseCurve;\r\n\r\nTHREE.EllipseCurve.prototype.getPoint = function ( t ) {\r\n\r\n\tvar deltaAngle = this.aEndAngle - this.aStartAngle;\r\n\r\n\tif ( deltaAngle < 0 ) deltaAngle += Math.PI * 2;\r\n\tif ( deltaAngle > Math.PI * 2 ) deltaAngle -= Math.PI * 2;\r\n\r\n\tvar angle;\r\n\r\n\tif ( this.aClockwise === true ) {\r\n\r\n\t\tangle = this.aEndAngle + ( 1 - t ) * ( Math.PI * 2 - deltaAngle );\r\n\r\n\t} else {\r\n\r\n\t\tangle = this.aStartAngle + t * deltaAngle;\r\n\r\n\t}\r\n\t\r\n\tvar x = this.aX + this.xRadius * Math.cos( angle );\r\n\tvar y = this.aY + this.yRadius * Math.sin( angle );\r\n\r\n\tif ( this.aRotation !== 0 ) {\r\n\r\n\t\tvar cos = Math.cos( this.aRotation );\r\n\t\tvar sin = Math.sin( this.aRotation );\r\n\r\n\t\tvar tx = x, ty = y;\r\n\r\n\t\t// Rotate the point about the center of the ellipse.\r\n\t\tx = ( tx - this.aX ) * cos - ( ty - this.aY ) * sin + this.aX;\r\n\t\ty = ( tx - this.aX ) * sin + ( ty - this.aY ) * cos + this.aY;\r\n\r\n\t}\r\n\r\n\treturn new THREE.Vector2( x, y );\r\n\r\n};\r\n\r\n// File:src/extras/curves/ArcCurve.js\r\n\r\n/**************************************************************\r\n *\tArc curve\r\n **************************************************************/\r\n\r\nTHREE.ArcCurve = function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\r\n\r\n\tTHREE.EllipseCurve.call( this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\r\n\r\n};\r\n\r\nTHREE.ArcCurve.prototype = Object.create( THREE.EllipseCurve.prototype );\r\nTHREE.ArcCurve.prototype.constructor = THREE.ArcCurve;\r\n\r\n// File:src/extras/curves/LineCurve3.js\r\n\r\n/**************************************************************\r\n *\tLine3D\r\n **************************************************************/\r\n\r\nTHREE.LineCurve3 = THREE.Curve.create(\r\n\r\n\tfunction ( v1, v2 ) {\r\n\r\n\t\tthis.v1 = v1;\r\n\t\tthis.v2 = v2;\r\n\r\n\t},\r\n\r\n\tfunction ( t ) {\r\n\r\n\t\tvar vector = new THREE.Vector3();\r\n\r\n\t\tvector.subVectors( this.v2, this.v1 ); // diff\r\n\t\tvector.multiplyScalar( t );\r\n\t\tvector.add( this.v1 );\r\n\r\n\t\treturn vector;\r\n\r\n\t}\r\n\r\n);\r\n\r\n// File:src/extras/curves/QuadraticBezierCurve3.js\r\n\r\n/**************************************************************\r\n *\tQuadratic Bezier 3D curve\r\n **************************************************************/\r\n\r\nTHREE.QuadraticBezierCurve3 = THREE.Curve.create(\r\n\r\n\tfunction ( v0, v1, v2 ) {\r\n\r\n\t\tthis.v0 = v0;\r\n\t\tthis.v1 = v1;\r\n\t\tthis.v2 = v2;\r\n\r\n\t},\r\n\r\n\tfunction ( t ) {\r\n\r\n\t\tvar b2 = THREE.ShapeUtils.b2;\t\t\r\n\r\n\t\treturn new THREE.Vector3(\r\n\t\t\tb2( t, this.v0.x, this.v1.x, this.v2.x ),\r\n\t\t\tb2( t, this.v0.y, this.v1.y, this.v2.y ),\r\n\t\t\tb2( t, this.v0.z, this.v1.z, this.v2.z )\r\n\t\t);\r\n\r\n\t}\r\n\r\n);\r\n\r\n// File:src/extras/curves/CubicBezierCurve3.js\r\n\r\n/**************************************************************\r\n *\tCubic Bezier 3D curve\r\n **************************************************************/\r\n\r\nTHREE.CubicBezierCurve3 = THREE.Curve.create(\r\n\r\n\tfunction ( v0, v1, v2, v3 ) {\r\n\r\n\t\tthis.v0 = v0;\r\n\t\tthis.v1 = v1;\r\n\t\tthis.v2 = v2;\r\n\t\tthis.v3 = v3;\r\n\r\n\t},\r\n\r\n\tfunction ( t ) {\r\n\r\n\t\tvar b3 = THREE.ShapeUtils.b3;\r\n\r\n\t\treturn new THREE.Vector3(\r\n\t\t\tb3( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),\r\n\t\t\tb3( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y ),\r\n\t\t\tb3( t, this.v0.z, this.v1.z, this.v2.z, this.v3.z )\r\n\t\t);\r\n\r\n\t}\r\n\r\n);\r\n\r\n// File:src/extras/curves/SplineCurve3.js\r\n\r\n/**************************************************************\r\n *\tSpline 3D curve\r\n **************************************************************/\r\n\r\n\r\nTHREE.SplineCurve3 = THREE.Curve.create(\r\n\r\n\tfunction ( points /* array of Vector3 */ ) {\r\n\r\n\t\tconsole.warn( 'THREE.SplineCurve3 will be deprecated. Please use THREE.CatmullRomCurve3' );\r\n\t\tthis.points = ( points == undefined ) ? [] : points;\r\n\r\n\t},\r\n\r\n\tfunction ( t ) {\r\n\r\n\t\tvar points = this.points;\r\n\t\tvar point = ( points.length - 1 ) * t;\r\n\r\n\t\tvar intPoint = Math.floor( point );\r\n\t\tvar weight = point - intPoint;\r\n\r\n\t\tvar point0 = points[ intPoint == 0 ? intPoint : intPoint - 1 ];\r\n\t\tvar point1 = points[ intPoint ];\r\n\t\tvar point2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];\r\n\t\tvar point3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];\r\n\r\n\t\tvar interpolate = THREE.CurveUtils.interpolate;\r\n\r\n\t\treturn new THREE.Vector3(\r\n\t\t\tinterpolate( point0.x, point1.x, point2.x, point3.x, weight ),\r\n\t\t\tinterpolate( point0.y, point1.y, point2.y, point3.y, weight ),\r\n\t\t\tinterpolate( point0.z, point1.z, point2.z, point3.z, weight )\r\n\t\t);\r\n\r\n\t}\r\n\r\n);\r\n\r\n// File:src/extras/curves/CatmullRomCurve3.js\r\n\r\n/**\r\n * @author zz85 https://github.com/zz85\r\n *\r\n * Centripetal CatmullRom Curve - which is useful for avoiding\r\n * cusps and self-intersections in non-uniform catmull rom curves.\r\n * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf\r\n *\r\n * curve.type accepts centripetal(default), chordal and catmullrom\r\n * curve.tension is used for catmullrom which defaults to 0.5\r\n */\r\n\r\nTHREE.CatmullRomCurve3 = ( function() {\r\n\r\n\tvar\r\n\t\ttmp = new THREE.Vector3(),\r\n\t\tpx = new CubicPoly(),\r\n\t\tpy = new CubicPoly(),\r\n\t\tpz = new CubicPoly();\r\n\r\n\t/*\r\n\tBased on an optimized c++ solution in\r\n\t - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/\r\n\t - http://ideone.com/NoEbVM\r\n\r\n\tThis CubicPoly class could be used for reusing some variables and calculations,\r\n\tbut for three.js curve use, it could be possible inlined and flatten into a single function call\r\n\twhich can be placed in CurveUtils.\r\n\t*/\r\n\r\n\tfunction CubicPoly() {\r\n\r\n\t}\r\n\r\n\t/*\r\n\t * Compute coefficients for a cubic polynomial\r\n\t *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3\r\n\t * such that\r\n\t *   p(0) = x0, p(1) = x1\r\n\t *  and\r\n\t *   p'(0) = t0, p'(1) = t1.\r\n\t */\r\n\tCubicPoly.prototype.init = function( x0, x1, t0, t1 ) {\r\n\r\n\t\tthis.c0 = x0;\r\n\t\tthis.c1 = t0;\r\n\t\tthis.c2 = - 3 * x0 + 3 * x1 - 2 * t0 - t1;\r\n\t\tthis.c3 = 2 * x0 - 2 * x1 + t0 + t1;\r\n\r\n\t};\r\n\r\n\tCubicPoly.prototype.initNonuniformCatmullRom = function( x0, x1, x2, x3, dt0, dt1, dt2 ) {\r\n\r\n\t\t// compute tangents when parameterized in [t1,t2]\r\n\t\tvar t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;\r\n\t\tvar t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;\r\n\r\n\t\t// rescale tangents for parametrization in [0,1]\r\n\t\tt1 *= dt1;\r\n\t\tt2 *= dt1;\r\n\r\n\t\t// initCubicPoly\r\n\t\tthis.init( x1, x2, t1, t2 );\r\n\r\n\t};\r\n\r\n\t// standard Catmull-Rom spline: interpolate between x1 and x2 with previous/following points x1/x4\r\n\tCubicPoly.prototype.initCatmullRom = function( x0, x1, x2, x3, tension ) {\r\n\r\n\t\tthis.init( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );\r\n\r\n\t};\r\n\r\n\tCubicPoly.prototype.calc = function( t ) {\r\n\r\n\t\tvar t2 = t * t;\r\n\t\tvar t3 = t2 * t;\r\n\t\treturn this.c0 + this.c1 * t + this.c2 * t2 + this.c3 * t3;\r\n\r\n\t};\r\n\r\n\t// Subclass Three.js curve\r\n\treturn THREE.Curve.create(\r\n\r\n\t\tfunction ( p /* array of Vector3 */ ) {\r\n\r\n\t\t\tthis.points = p || [];\r\n\t\t\tthis.closed = false;\r\n\r\n\t\t},\r\n\r\n\t\tfunction ( t ) {\r\n\r\n\t\t\tvar points = this.points,\r\n\t\t\t\tpoint, intPoint, weight, l;\r\n\r\n\t\t\tl = points.length;\r\n\r\n\t\t\tif ( l < 2 ) console.log( 'duh, you need at least 2 points' );\r\n\r\n\t\t\tpoint = ( l - ( this.closed ? 0 : 1 ) ) * t;\r\n\t\t\tintPoint = Math.floor( point );\r\n\t\t\tweight = point - intPoint;\r\n\r\n\t\t\tif ( this.closed ) {\r\n\r\n\t\t\t\tintPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / points.length ) + 1 ) * points.length;\r\n\r\n\t\t\t} else if ( weight === 0 && intPoint === l - 1 ) {\r\n\r\n\t\t\t\tintPoint = l - 2;\r\n\t\t\t\tweight = 1;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar p0, p1, p2, p3; // 4 points\r\n\r\n\t\t\tif ( this.closed || intPoint > 0 ) {\r\n\r\n\t\t\t\tp0 = points[ ( intPoint - 1 ) % l ];\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// extrapolate first point\r\n\t\t\t\ttmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );\r\n\t\t\t\tp0 = tmp;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tp1 = points[ intPoint % l ];\r\n\t\t\tp2 = points[ ( intPoint + 1 ) % l ];\r\n\r\n\t\t\tif ( this.closed || intPoint + 2 < l ) {\r\n\r\n\t\t\t\tp3 = points[ ( intPoint + 2 ) % l ];\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// extrapolate last point\r\n\t\t\t\ttmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 1 ] );\r\n\t\t\t\tp3 = tmp;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.type === undefined || this.type === 'centripetal' || this.type === 'chordal' ) {\r\n\r\n\t\t\t\t// init Centripetal / Chordal Catmull-Rom\r\n\t\t\t\tvar pow = this.type === 'chordal' ? 0.5 : 0.25;\r\n\t\t\t\tvar dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );\r\n\t\t\t\tvar dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );\r\n\t\t\t\tvar dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );\r\n\r\n\t\t\t\t// safety check for repeated points\r\n\t\t\t\tif ( dt1 < 1e-4 ) dt1 = 1.0;\r\n\t\t\t\tif ( dt0 < 1e-4 ) dt0 = dt1;\r\n\t\t\t\tif ( dt2 < 1e-4 ) dt2 = dt1;\r\n\r\n\t\t\t\tpx.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );\r\n\t\t\t\tpy.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );\r\n\t\t\t\tpz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );\r\n\r\n\t\t\t} else if ( this.type === 'catmullrom' ) {\r\n\r\n\t\t\t\tvar tension = this.tension !== undefined ? this.tension : 0.5;\r\n\t\t\t\tpx.initCatmullRom( p0.x, p1.x, p2.x, p3.x, tension );\r\n\t\t\t\tpy.initCatmullRom( p0.y, p1.y, p2.y, p3.y, tension );\r\n\t\t\t\tpz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, tension );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar v = new THREE.Vector3(\r\n\t\t\t\tpx.calc( weight ),\r\n\t\t\t\tpy.calc( weight ),\r\n\t\t\t\tpz.calc( weight )\r\n\t\t\t);\r\n\r\n\t\t\treturn v;\r\n\r\n\t\t}\r\n\r\n\t);\r\n\r\n} )();\r\n\r\n// File:src/extras/curves/ClosedSplineCurve3.js\r\n\r\n/**************************************************************\r\n *\tClosed Spline 3D curve\r\n **************************************************************/\r\n\r\n\r\nTHREE.ClosedSplineCurve3 = function ( points ) {\r\n\r\n\tconsole.warn( 'THREE.ClosedSplineCurve3 has been deprecated. Please use THREE.CatmullRomCurve3.' );\r\n\r\n\tTHREE.CatmullRomCurve3.call( this, points );\r\n\tthis.type = 'catmullrom';\r\n\tthis.closed = true;\r\n\r\n};\r\n\r\nTHREE.ClosedSplineCurve3.prototype = Object.create( THREE.CatmullRomCurve3.prototype );\r\n\r\n// File:src/extras/geometries/BoxGeometry.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Cube.as\r\n */\r\n\r\nTHREE.BoxGeometry = function ( width, height, depth, widthSegments, heightSegments, depthSegments ) {\r\n\r\n\tTHREE.Geometry.call( this );\r\n\r\n\tthis.type = 'BoxGeometry';\r\n\r\n\tthis.parameters = {\r\n\t\twidth: width,\r\n\t\theight: height,\r\n\t\tdepth: depth,\r\n\t\twidthSegments: widthSegments,\r\n\t\theightSegments: heightSegments,\r\n\t\tdepthSegments: depthSegments\r\n\t};\r\n\r\n\tthis.fromBufferGeometry( new THREE.BoxBufferGeometry( width, height, depth, widthSegments, heightSegments, depthSegments ) );\r\n\tthis.mergeVertices();\r\n\r\n};\r\n\r\nTHREE.BoxGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\nTHREE.BoxGeometry.prototype.constructor = THREE.BoxGeometry;\r\n\r\nTHREE.CubeGeometry = THREE.BoxGeometry;\r\n\r\n// File:src/extras/geometries/BoxBufferGeometry.js\r\n\r\n/**\r\n * @author Mugen87 / https://github.com/Mugen87\r\n */\r\n\r\nTHREE.BoxBufferGeometry = function ( width, height, depth, widthSegments, heightSegments, depthSegments ) {\r\n\r\n\tTHREE.BufferGeometry.call( this );\r\n\r\n\tthis.type = 'BoxBufferGeometry';\r\n\r\n\tthis.parameters = {\r\n\t\twidth: width,\r\n\t\theight: height,\r\n\t\tdepth: depth,\r\n\t\twidthSegments: widthSegments,\r\n\t\theightSegments: heightSegments,\r\n\t\tdepthSegments: depthSegments\r\n\t};\r\n\r\n\tvar scope = this;\r\n\r\n\t// segments\r\n\twidthSegments = Math.floor( widthSegments ) || 1;\r\n\theightSegments = Math.floor( heightSegments ) || 1;\r\n\tdepthSegments = Math.floor( depthSegments ) || 1;\r\n\r\n\t// these are used to calculate buffer length\r\n\tvar vertexCount = calculateVertexCount( widthSegments, heightSegments, depthSegments );\r\n\tvar indexCount = calculateIndexCount( widthSegments, heightSegments, depthSegments );\r\n\r\n\t// buffers\r\n\tvar indices = new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount );\r\n\tvar vertices = new Float32Array( vertexCount * 3 );\r\n\tvar normals = new Float32Array( vertexCount * 3 );\r\n\tvar uvs = new Float32Array( vertexCount * 2 );\r\n\r\n\t// offset variables\r\n\tvar vertexBufferOffset = 0;\r\n\tvar uvBufferOffset = 0;\r\n\tvar indexBufferOffset = 0;\r\n\tvar numberOfVertices = 0;\r\n\r\n\t// group variables\r\n\tvar groupStart = 0;\r\n\r\n\t// build each side of the box geometry\r\n\tbuildPlane( 'z', 'y', 'x', - 1, - 1, depth, height,   width,  depthSegments, heightSegments, 0 ); // px\r\n\tbuildPlane( 'z', 'y', 'x',   1, - 1, depth, height, - width,  depthSegments, heightSegments, 1 ); // nx\r\n\tbuildPlane( 'x', 'z', 'y',   1,   1, width, depth,    height, widthSegments, depthSegments,  2 ); // py\r\n\tbuildPlane( 'x', 'z', 'y',   1, - 1, width, depth,  - height, widthSegments, depthSegments,  3 ); // ny\r\n\tbuildPlane( 'x', 'y', 'z',   1, - 1, width, height,   depth,  widthSegments, heightSegments, 4 ); // pz\r\n\tbuildPlane( 'x', 'y', 'z', - 1, - 1, width, height, - depth,  widthSegments, heightSegments, 5 ); // nz\r\n\r\n\t// build geometry\r\n\tthis.setIndex( new THREE.BufferAttribute( indices, 1 ) );\r\n\tthis.addAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );\r\n\tthis.addAttribute( 'normal', new THREE.BufferAttribute( normals, 3 ) );\r\n\tthis.addAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ) );\r\n\r\n\t// helper functions\r\n\r\n\tfunction calculateVertexCount ( w, h, d ) {\r\n\r\n\t\tvar vertices = 0;\r\n\r\n\t\t// calculate the amount of vertices for each side (plane)\r\n\t\tvertices += (w + 1) * (h + 1) * 2; // xy\r\n\t\tvertices += (w + 1) * (d + 1) * 2; // xz\r\n\t\tvertices += (d + 1) * (h + 1) * 2; // zy\r\n\r\n\t\treturn vertices;\r\n\r\n\t}\r\n\r\n\tfunction calculateIndexCount ( w, h, d ) {\r\n\r\n\t\tvar index = 0;\r\n\r\n\t\t// calculate the amount of squares for each side\r\n\t\tindex += w * h * 2; // xy\r\n\t\tindex += w * d * 2; // xz\r\n\t\tindex += d * h * 2; // zy\r\n\r\n\t\treturn index * 6; // two triangles per square => six vertices per square\r\n\r\n\t}\r\n\r\n\tfunction buildPlane ( u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex ) {\r\n\r\n\t\tvar segmentWidth\t= width / gridX;\r\n\t\tvar segmentHeight = height / gridY;\r\n\r\n\t\tvar widthHalf = width / 2;\r\n\t\tvar heightHalf = height / 2;\r\n\t\tvar depthHalf = depth / 2;\r\n\r\n\t\tvar gridX1 = gridX + 1;\r\n\t\tvar gridY1 = gridY + 1;\r\n\r\n\t\tvar vertexCounter = 0;\r\n\t\tvar groupCount = 0;\r\n\r\n\t\tvar vector = new THREE.Vector3();\r\n\r\n\t\t// generate vertices, normals and uvs\r\n\r\n\t\tfor ( var iy = 0; iy < gridY1; iy ++ ) {\r\n\r\n\t\t\tvar y = iy * segmentHeight - heightHalf;\r\n\r\n\t\t\tfor ( var ix = 0; ix < gridX1; ix ++ ) {\r\n\r\n\t\t\t\tvar x = ix * segmentWidth - widthHalf;\r\n\r\n\t\t\t\t// set values to correct vector component\r\n\t\t\t\tvector[ u ] = x * udir;\r\n\t\t\t\tvector[ v ] = y * vdir;\r\n\t\t\t\tvector[ w ] = depthHalf;\r\n\r\n\t\t\t\t// now apply vector to vertex buffer\r\n\t\t\t\tvertices[ vertexBufferOffset ] = vector.x;\r\n\t\t\t\tvertices[ vertexBufferOffset + 1 ] = vector.y;\r\n\t\t\t\tvertices[ vertexBufferOffset + 2 ] = vector.z;\r\n\r\n\t\t\t\t// set values to correct vector component\r\n\t\t\t\tvector[ u ] = 0;\r\n\t\t\t\tvector[ v ] = 0;\r\n\t\t\t\tvector[ w ] = depth > 0 ? 1 : - 1;\r\n\r\n\t\t\t\t// now apply vector to normal buffer\r\n\t\t\t\tnormals[ vertexBufferOffset ] = vector.x;\r\n\t\t\t\tnormals[ vertexBufferOffset + 1 ] = vector.y;\r\n\t\t\t\tnormals[ vertexBufferOffset + 2 ] = vector.z;\r\n\r\n\t\t\t\t// uvs\r\n\t\t\t\tuvs[ uvBufferOffset ] = ix / gridX;\r\n\t\t\t\tuvs[ uvBufferOffset + 1 ] = 1 - ( iy / gridY );\r\n\r\n\t\t\t\t// update offsets and counters\r\n\t\t\t\tvertexBufferOffset += 3;\r\n\t\t\t\tuvBufferOffset += 2;\r\n\t\t\t\tvertexCounter += 1;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// 1. you need three indices to draw a single face\r\n\t\t// 2. a single segment consists of two faces\r\n\t\t// 3. so we need to generate six (2*3) indices per segment\r\n\r\n\t\tfor ( iy = 0; iy < gridY; iy ++ ) {\r\n\r\n\t\t\tfor ( ix = 0; ix < gridX; ix ++ ) {\r\n\r\n\t\t\t\t// indices\r\n\t\t\t\tvar a = numberOfVertices + ix + gridX1 * iy;\r\n\t\t\t\tvar b = numberOfVertices + ix + gridX1 * ( iy + 1 );\r\n\t\t\t\tvar c = numberOfVertices + ( ix + 1 ) + gridX1 * ( iy + 1 );\r\n\t\t\t\tvar d = numberOfVertices + ( ix + 1 ) + gridX1 * iy;\r\n\r\n\t\t\t\t// face one\r\n\t\t\t\tindices[ indexBufferOffset ] = a;\r\n\t\t\t\tindices[ indexBufferOffset + 1 ] = b;\r\n\t\t\t\tindices[ indexBufferOffset + 2 ] = d;\r\n\r\n\t\t\t\t// face two\r\n\t\t\t\tindices[ indexBufferOffset + 3 ] = b;\r\n\t\t\t\tindices[ indexBufferOffset + 4 ] = c;\r\n\t\t\t\tindices[ indexBufferOffset + 5 ] = d;\r\n\r\n\t\t\t\t// update offsets and counters\r\n\t\t\t\tindexBufferOffset += 6;\r\n\t\t\t\tgroupCount += 6;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// add a group to the geometry. this will ensure multi material support\r\n\t\tscope.addGroup( groupStart, groupCount, materialIndex );\r\n\r\n\t\t// calculate new start value for groups\r\n\t\tgroupStart += groupCount;\r\n\r\n\t\t// update total number of vertices\r\n\t\tnumberOfVertices += vertexCounter;\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.BoxBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\r\nTHREE.BoxBufferGeometry.prototype.constructor = THREE.BoxBufferGeometry;\r\n\r\n// File:src/extras/geometries/CircleGeometry.js\r\n\r\n/**\r\n * @author hughes\r\n */\r\n\r\nTHREE.CircleGeometry = function ( radius, segments, thetaStart, thetaLength ) {\r\n\r\n\tTHREE.Geometry.call( this );\r\n\r\n\tthis.type = 'CircleGeometry';\r\n\r\n\tthis.parameters = {\r\n\t\tradius: radius,\r\n\t\tsegments: segments,\r\n\t\tthetaStart: thetaStart,\r\n\t\tthetaLength: thetaLength\r\n\t};\r\n\r\n\tthis.fromBufferGeometry( new THREE.CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) );\r\n\r\n};\r\n\r\nTHREE.CircleGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\nTHREE.CircleGeometry.prototype.constructor = THREE.CircleGeometry;\r\n\r\n// File:src/extras/geometries/CircleBufferGeometry.js\r\n\r\n/**\r\n * @author benaadams / https://twitter.com/ben_a_adams\r\n */\r\n\r\nTHREE.CircleBufferGeometry = function ( radius, segments, thetaStart, thetaLength ) {\r\n\r\n\tTHREE.BufferGeometry.call( this );\r\n\r\n\tthis.type = 'CircleBufferGeometry';\r\n\r\n\tthis.parameters = {\r\n\t\tradius: radius,\r\n\t\tsegments: segments,\r\n\t\tthetaStart: thetaStart,\r\n\t\tthetaLength: thetaLength\r\n\t};\r\n\r\n\tradius = radius || 50;\r\n\tsegments = segments !== undefined ? Math.max( 3, segments ) : 8;\r\n\r\n\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\r\n\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\r\n\r\n\tvar vertices = segments + 2;\r\n\r\n\tvar positions = new Float32Array( vertices * 3 );\r\n\tvar normals = new Float32Array( vertices * 3 );\r\n\tvar uvs = new Float32Array( vertices * 2 );\r\n\r\n\t// center data is already zero, but need to set a few extras\r\n\tnormals[ 2 ] = 1.0;\r\n\tuvs[ 0 ] = 0.5;\r\n\tuvs[ 1 ] = 0.5;\r\n\r\n\tfor ( var s = 0, i = 3, ii = 2 ; s <= segments; s ++, i += 3, ii += 2 ) {\r\n\r\n\t\tvar segment = thetaStart + s / segments * thetaLength;\r\n\r\n\t\tpositions[ i ] = radius * Math.cos( segment );\r\n\t\tpositions[ i + 1 ] = radius * Math.sin( segment );\r\n\r\n\t\tnormals[ i + 2 ] = 1; // normal z\r\n\r\n\t\tuvs[ ii ] = ( positions[ i ] / radius + 1 ) / 2;\r\n\t\tuvs[ ii + 1 ] = ( positions[ i + 1 ] / radius + 1 ) / 2;\r\n\r\n\t}\r\n\r\n\tvar indices = [];\r\n\r\n\tfor ( var i = 1; i <= segments; i ++ ) {\r\n\r\n\t\tindices.push( i, i + 1, 0 );\r\n\r\n\t}\r\n\r\n\tthis.setIndex( new THREE.BufferAttribute( new Uint16Array( indices ), 1 ) );\r\n\tthis.addAttribute( 'position', new THREE.BufferAttribute( positions, 3 ) );\r\n\tthis.addAttribute( 'normal', new THREE.BufferAttribute( normals, 3 ) );\r\n\tthis.addAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ) );\r\n\r\n\tthis.boundingSphere = new THREE.Sphere( new THREE.Vector3(), radius );\r\n\r\n};\r\n\r\nTHREE.CircleBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\r\nTHREE.CircleBufferGeometry.prototype.constructor = THREE.CircleBufferGeometry;\r\n\r\n// File:src/extras/geometries/CylinderBufferGeometry.js\r\n\r\n/**\r\n * @author Mugen87 / https://github.com/Mugen87\r\n */\r\n\r\nTHREE.CylinderBufferGeometry = function( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\r\n\r\n\tTHREE.BufferGeometry.call( this );\r\n\r\n\tthis.type = 'CylinderBufferGeometry';\r\n\r\n\tthis.parameters = {\r\n\t\tradiusTop: radiusTop,\r\n\t\tradiusBottom: radiusBottom,\r\n\t\theight: height,\r\n\t\tradialSegments: radialSegments,\r\n\t\theightSegments: heightSegments,\r\n\t\topenEnded: openEnded,\r\n\t\tthetaStart: thetaStart,\r\n\t\tthetaLength: thetaLength\r\n\t};\r\n\r\n\tvar scope = this;\r\n\r\n\tradiusTop = radiusTop !== undefined ? radiusTop : 20;\r\n\tradiusBottom = radiusBottom !== undefined ? radiusBottom : 20;\r\n\theight = height !== undefined ? height : 100;\r\n\r\n\tradialSegments = Math.floor( radialSegments ) || 8;\r\n\theightSegments = Math.floor( heightSegments ) || 1;\r\n\r\n\topenEnded = openEnded !== undefined ? openEnded : false;\r\n\tthetaStart = thetaStart !== undefined ? thetaStart : 0.0;\r\n\tthetaLength = thetaLength !== undefined ? thetaLength : 2.0 * Math.PI;\r\n\r\n\t// used to calculate buffer length\r\n\r\n\tvar nbCap = 0;\r\n\r\n\tif ( openEnded === false ) {\r\n\r\n\t\tif ( radiusTop > 0 ) nbCap ++;\r\n\t\tif ( radiusBottom > 0 ) nbCap ++;\r\n\r\n\t}\r\n\r\n\tvar vertexCount = calculateVertexCount();\r\n\tvar indexCount = calculateIndexCount();\r\n\r\n\t// buffers\r\n\r\n\tvar indices = new THREE.BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ), 1 );\r\n\tvar vertices = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\r\n\tvar normals = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\r\n\tvar uvs = new THREE.BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\r\n\r\n\t// helper variables\r\n\r\n\tvar index = 0,\r\n\t    indexOffset = 0,\r\n\t    indexArray = [],\r\n\t    halfHeight = height / 2;\r\n\r\n\t// group variables\r\n\tvar groupStart = 0;\r\n\r\n\t// generate geometry\r\n\r\n\tgenerateTorso();\r\n\r\n\tif ( openEnded === false ) {\r\n\r\n\t\tif ( radiusTop > 0 ) generateCap( true );\r\n\t\tif ( radiusBottom > 0 ) generateCap( false );\r\n\r\n\t}\r\n\r\n\t// build geometry\r\n\r\n\tthis.setIndex( indices );\r\n\tthis.addAttribute( 'position', vertices );\r\n\tthis.addAttribute( 'normal', normals );\r\n\tthis.addAttribute( 'uv', uvs );\r\n\r\n\t// helper functions\r\n\r\n\tfunction calculateVertexCount() {\r\n\r\n\t\tvar count = ( radialSegments + 1 ) * ( heightSegments + 1 );\r\n\r\n\t\tif ( openEnded === false ) {\r\n\r\n\t\t\tcount += ( ( radialSegments + 1 ) * nbCap ) + ( radialSegments * nbCap );\r\n\r\n\t\t}\r\n\r\n\t\treturn count;\r\n\r\n\t}\r\n\r\n\tfunction calculateIndexCount() {\r\n\r\n\t\tvar count = radialSegments * heightSegments * 2 * 3;\r\n\r\n\t\tif ( openEnded === false ) {\r\n\r\n\t\t\tcount += radialSegments * nbCap * 3;\r\n\r\n\t\t}\r\n\r\n\t\treturn count;\r\n\r\n\t}\r\n\r\n\tfunction generateTorso() {\r\n\r\n\t\tvar x, y;\r\n\t\tvar normal = new THREE.Vector3();\r\n\t\tvar vertex = new THREE.Vector3();\r\n\r\n\t\tvar groupCount = 0;\r\n\r\n\t\t// this will be used to calculate the normal\r\n\t\tvar tanTheta = ( radiusBottom - radiusTop ) / height;\r\n\r\n\t\t// generate vertices, normals and uvs\r\n\r\n\t\tfor ( y = 0; y <= heightSegments; y ++ ) {\r\n\r\n\t\t\tvar indexRow = [];\r\n\r\n\t\t\tvar v = y / heightSegments;\r\n\r\n\t\t\t// calculate the radius of the current row\r\n\t\t\tvar radius = v * ( radiusBottom - radiusTop ) + radiusTop;\r\n\r\n\t\t\tfor ( x = 0; x <= radialSegments; x ++ ) {\r\n\r\n\t\t\t\tvar u = x / radialSegments;\r\n\r\n\t\t\t\t// vertex\r\n\t\t\t\tvertex.x = radius * Math.sin( u * thetaLength + thetaStart );\r\n\t\t\t\tvertex.y = - v * height + halfHeight;\r\n\t\t\t\tvertex.z = radius * Math.cos( u * thetaLength + thetaStart );\r\n\t\t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t\t\t// normal\r\n\t\t\t\tnormal.copy( vertex );\r\n\r\n\t\t\t\t// handle special case if radiusTop/radiusBottom is zero\r\n\r\n\t\t\t\tif ( ( radiusTop === 0 && y === 0 ) || ( radiusBottom === 0 && y === heightSegments ) ) {\r\n\r\n\t\t\t\t\tnormal.x = Math.sin( u * thetaLength + thetaStart );\r\n\t\t\t\t\tnormal.z = Math.cos( u * thetaLength + thetaStart );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tnormal.setY( Math.sqrt( normal.x * normal.x + normal.z * normal.z ) * tanTheta ).normalize();\r\n\t\t\t\tnormals.setXYZ( index, normal.x, normal.y, normal.z );\r\n\r\n\t\t\t\t// uv\r\n\t\t\t\tuvs.setXY( index, u, 1 - v );\r\n\r\n\t\t\t\t// save index of vertex in respective row\r\n\t\t\t\tindexRow.push( index );\r\n\r\n\t\t\t\t// increase index\r\n\t\t\t\tindex ++;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// now save vertices of the row in our index array\r\n\t\t\tindexArray.push( indexRow );\r\n\r\n\t\t}\r\n\r\n\t\t// generate indices\r\n\r\n\t\tfor ( x = 0; x < radialSegments; x ++ ) {\r\n\r\n\t\t\tfor ( y = 0; y < heightSegments; y ++ ) {\r\n\r\n\t\t\t\t// we use the index array to access the correct indices\r\n\t\t\t\tvar i1 = indexArray[ y ][ x ];\r\n\t\t\t\tvar i2 = indexArray[ y + 1 ][ x ];\r\n\t\t\t\tvar i3 = indexArray[ y + 1 ][ x + 1 ];\r\n\t\t\t\tvar i4 = indexArray[ y ][ x + 1 ];\r\n\r\n\t\t\t\t// face one\r\n\t\t\t\tindices.setX( indexOffset, i1 ); indexOffset ++;\r\n\t\t\t\tindices.setX( indexOffset, i2 ); indexOffset ++;\r\n\t\t\t\tindices.setX( indexOffset, i4 ); indexOffset ++;\r\n\r\n\t\t\t\t// face two\r\n\t\t\t\tindices.setX( indexOffset, i2 ); indexOffset ++;\r\n\t\t\t\tindices.setX( indexOffset, i3 ); indexOffset ++;\r\n\t\t\t\tindices.setX( indexOffset, i4 ); indexOffset ++;\r\n\r\n\t\t\t\t// update counters\r\n\t\t\t\tgroupCount += 6;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// add a group to the geometry. this will ensure multi material support\r\n\t\tscope.addGroup( groupStart, groupCount, 0 );\r\n\r\n\t\t// calculate new start value for groups\r\n\t\tgroupStart += groupCount;\r\n\r\n\t}\r\n\r\n\tfunction generateCap( top ) {\r\n\r\n\t\tvar x, centerIndexStart, centerIndexEnd;\r\n\r\n\t\tvar uv = new THREE.Vector2();\r\n\t\tvar vertex = new THREE.Vector3();\r\n\r\n\t\tvar groupCount = 0;\r\n\r\n\t\tvar radius = ( top === true ) ? radiusTop : radiusBottom;\r\n\t\tvar sign = ( top === true ) ? 1 : - 1;\r\n\r\n\t\t// save the index of the first center vertex\r\n\t\tcenterIndexStart = index;\r\n\r\n\t\t// first we generate the center vertex data of the cap.\r\n\t\t// because the geometry needs one set of uvs per face,\r\n\t\t// we must generate a center vertex per face/segment\r\n\r\n\t\tfor ( x = 1; x <= radialSegments; x ++ ) {\r\n\r\n\t\t\t// vertex\r\n\t\t\tvertices.setXYZ( index, 0, halfHeight * sign, 0 );\r\n\r\n\t\t\t// normal\r\n\t\t\tnormals.setXYZ( index, 0, sign, 0 );\r\n\r\n\t\t\t// uv\r\n\t\t\tuv.x = 0.5;\r\n\t\t\tuv.y = 0.5;\r\n\r\n\t\t\tuvs.setXY( index, uv.x, uv.y );\r\n\r\n\t\t\t// increase index\r\n\t\t\tindex ++;\r\n\r\n\t\t}\r\n\r\n\t\t// save the index of the last center vertex\r\n\t\tcenterIndexEnd = index;\r\n\r\n\t\t// now we generate the surrounding vertices, normals and uvs\r\n\r\n\t\tfor ( x = 0; x <= radialSegments; x ++ ) {\r\n\r\n\t\t\tvar u = x / radialSegments;\r\n\t\t\tvar theta = u * thetaLength + thetaStart;\r\n\r\n\t\t\tvar cosTheta = Math.cos( theta );\r\n\t\t\tvar sinTheta = Math.sin( theta );\r\n\r\n\t\t\t// vertex\r\n\t\t\tvertex.x = radius * sinTheta;\r\n\t\t\tvertex.y = halfHeight * sign;\r\n\t\t\tvertex.z = radius * cosTheta;\r\n\t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t\t// normal\r\n\t\t\tnormals.setXYZ( index, 0, sign, 0 );\r\n\r\n\t\t\t// uv\r\n\t\t\tuv.x = ( cosTheta * 0.5 ) + 0.5;\r\n\t\t\tuv.y = ( sinTheta * 0.5 * sign ) + 0.5;\r\n\t\t\tuvs.setXY( index, uv.x, uv.y );\r\n\r\n\t\t\t// increase index\r\n\t\t\tindex ++;\r\n\r\n\t\t}\r\n\r\n\t\t// generate indices\r\n\r\n\t\tfor ( x = 0; x < radialSegments; x ++ ) {\r\n\r\n\t\t\tvar c = centerIndexStart + x;\r\n\t\t\tvar i = centerIndexEnd + x;\r\n\r\n\t\t\tif ( top === true ) {\r\n\r\n\t\t\t\t// face top\r\n\t\t\t\tindices.setX( indexOffset, i ); indexOffset ++;\r\n\t\t\t\tindices.setX( indexOffset, i + 1 ); indexOffset ++;\r\n\t\t\t\tindices.setX( indexOffset, c ); indexOffset ++;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// face bottom\r\n\t\t\t\tindices.setX( indexOffset, i + 1 ); indexOffset ++;\r\n\t\t\t\tindices.setX( indexOffset, i ); indexOffset ++;\r\n\t\t\t\tindices.setX( indexOffset, c ); indexOffset ++;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// update counters\r\n\t\t\tgroupCount += 3;\r\n\r\n\t\t}\r\n\r\n\t\t// add a group to the geometry. this will ensure multi material support\r\n\t\tscope.addGroup( groupStart, groupCount, top === true ? 1 : 2 );\r\n\r\n\t\t// calculate new start value for groups\r\n\t\tgroupStart += groupCount;\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.CylinderBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\r\nTHREE.CylinderBufferGeometry.prototype.constructor = THREE.CylinderBufferGeometry;\r\n\r\n// File:src/extras/geometries/CylinderGeometry.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.CylinderGeometry = function ( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {\r\n\r\n\tTHREE.Geometry.call( this );\r\n\r\n\tthis.type = 'CylinderGeometry';\r\n\r\n\tthis.parameters = {\r\n\t\tradiusTop: radiusTop,\r\n\t\tradiusBottom: radiusBottom,\r\n\t\theight: height,\r\n\t\tradialSegments: radialSegments,\r\n\t\theightSegments: heightSegments,\r\n\t\topenEnded: openEnded,\r\n\t\tthetaStart: thetaStart,\r\n\t\tthetaLength: thetaLength\r\n\t};\r\n\r\n\tthis.fromBufferGeometry( new THREE.CylinderBufferGeometry( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) );\r\n\tthis.mergeVertices();\r\n\r\n};\r\n\r\nTHREE.CylinderGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\nTHREE.CylinderGeometry.prototype.constructor = THREE.CylinderGeometry;\r\n\r\n// File:src/extras/geometries/ConeBufferGeometry.js\r\n\r\n/*\r\n * @author: abelnation / http://github.com/abelnation\r\n */\r\n\r\nTHREE.ConeBufferGeometry = function (\r\n\tradius, height,\r\n\tradialSegments, heightSegments,\r\n\topenEnded, thetaStart, thetaLength ) {\r\n\r\n\tTHREE.CylinderBufferGeometry.call( this,\r\n\t\t0, radius, height,\r\n\t\tradialSegments, heightSegments,\r\n\t\topenEnded, thetaStart, thetaLength );\r\n\r\n\tthis.type = 'ConeBufferGeometry';\r\n\r\n\tthis.parameters = {\r\n\t\tradius: radius,\r\n\t\theight: height,\r\n\t\tradialSegments: radialSegments,\r\n\t\theightSegments: heightSegments,\r\n\t\tthetaStart: thetaStart,\r\n\t\tthetaLength: thetaLength\r\n\t};\r\n\r\n};\r\n\r\nTHREE.ConeBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\r\nTHREE.ConeBufferGeometry.prototype.constructor = THREE.ConeBufferGeometry;\r\n\r\n// File:src/extras/geometries/ConeGeometry.js\r\n\r\n/**\r\n * @author abelnation / http://github.com/abelnation\r\n */\r\n\r\nTHREE.ConeGeometry = function (\r\n\tradius, height,\r\n\tradialSegments, heightSegments,\r\n\topenEnded, thetaStart, thetaLength ) {\r\n\r\n\tTHREE.CylinderGeometry.call( this,\r\n\t\t0, radius, height,\r\n\t\tradialSegments, heightSegments,\r\n\t\topenEnded, thetaStart, thetaLength );\r\n\r\n\tthis.type = 'ConeGeometry';\r\n\r\n\tthis.parameters = {\r\n\t\tradius: radius,\r\n\t\theight: height,\r\n\t\tradialSegments: radialSegments,\r\n\t\theightSegments: heightSegments,\r\n\t\topenEnded: openEnded,\r\n\t\tthetaStart: thetaStart,\r\n\t\tthetaLength: thetaLength\r\n\t};\r\n\r\n};\r\n\r\nTHREE.ConeGeometry.prototype = Object.create( THREE.CylinderGeometry.prototype );\r\nTHREE.ConeGeometry.prototype.constructor = THREE.ConeGeometry;\r\n\r\n// File:src/extras/geometries/EdgesGeometry.js\r\n\r\n/**\r\n * @author WestLangley / http://github.com/WestLangley\r\n */\r\n\r\nTHREE.EdgesGeometry = function ( geometry, thresholdAngle ) {\r\n\r\n\tTHREE.BufferGeometry.call( this );\r\n\r\n\tthresholdAngle = ( thresholdAngle !== undefined ) ? thresholdAngle : 1;\r\n\r\n\tvar thresholdDot = Math.cos( THREE.Math.DEG2RAD * thresholdAngle );\r\n\r\n\tvar edge = [ 0, 0 ], hash = {};\r\n\r\n\tfunction sortFunction( a, b ) {\r\n\r\n\t\treturn a - b;\r\n\r\n\t}\r\n\r\n\tvar keys = [ 'a', 'b', 'c' ];\r\n\r\n\tvar geometry2;\r\n\r\n\tif ( geometry instanceof THREE.BufferGeometry ) {\r\n\r\n\t\tgeometry2 = new THREE.Geometry();\r\n\t\tgeometry2.fromBufferGeometry( geometry );\r\n\r\n\t} else {\r\n\r\n\t\tgeometry2 = geometry.clone();\r\n\r\n\t}\r\n\r\n\tgeometry2.mergeVertices();\r\n\tgeometry2.computeFaceNormals();\r\n\r\n\tvar vertices = geometry2.vertices;\r\n\tvar faces = geometry2.faces;\r\n\r\n\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\r\n\r\n\t\tvar face = faces[ i ];\r\n\r\n\t\tfor ( var j = 0; j < 3; j ++ ) {\r\n\r\n\t\t\tedge[ 0 ] = face[ keys[ j ] ];\r\n\t\t\tedge[ 1 ] = face[ keys[ ( j + 1 ) % 3 ] ];\r\n\t\t\tedge.sort( sortFunction );\r\n\r\n\t\t\tvar key = edge.toString();\r\n\r\n\t\t\tif ( hash[ key ] === undefined ) {\r\n\r\n\t\t\t\thash[ key ] = { vert1: edge[ 0 ], vert2: edge[ 1 ], face1: i, face2: undefined };\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\thash[ key ].face2 = i;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tvar coords = [];\r\n\r\n\tfor ( var key in hash ) {\r\n\r\n\t\tvar h = hash[ key ];\r\n\r\n\t\tif ( h.face2 === undefined || faces[ h.face1 ].normal.dot( faces[ h.face2 ].normal ) <= thresholdDot ) {\r\n\r\n\t\t\tvar vertex = vertices[ h.vert1 ];\r\n\t\t\tcoords.push( vertex.x );\r\n\t\t\tcoords.push( vertex.y );\r\n\t\t\tcoords.push( vertex.z );\r\n\r\n\t\t\tvertex = vertices[ h.vert2 ];\r\n\t\t\tcoords.push( vertex.x );\r\n\t\t\tcoords.push( vertex.y );\r\n\t\t\tcoords.push( vertex.z );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tthis.addAttribute( 'position', new THREE.BufferAttribute( new Float32Array( coords ), 3 ) );\r\n\r\n};\r\n\r\nTHREE.EdgesGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\r\nTHREE.EdgesGeometry.prototype.constructor = THREE.EdgesGeometry;\r\n\r\n// File:src/extras/geometries/ExtrudeGeometry.js\r\n\r\n/**\r\n * @author zz85 / http://www.lab4games.net/zz85/blog\r\n *\r\n * Creates extruded geometry from a path shape.\r\n *\r\n * parameters = {\r\n *\r\n *  curveSegments: <int>, // number of points on the curves\r\n *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too\r\n *  amount: <int>, // Depth to extrude the shape\r\n *\r\n *  bevelEnabled: <bool>, // turn on bevel\r\n *  bevelThickness: <float>, // how deep into the original shape bevel goes\r\n *  bevelSize: <float>, // how far from shape outline is bevel\r\n *  bevelSegments: <int>, // number of bevel layers\r\n *\r\n *  extrudePath: <THREE.CurvePath> // 3d spline path to extrude shape along. (creates Frames if .frames aren't defined)\r\n *  frames: <THREE.TubeGeometry.FrenetFrames> // containing arrays of tangents, normals, binormals\r\n *\r\n *  uvGenerator: <Object> // object that provides UV generator functions\r\n *\r\n * }\r\n **/\r\n\r\nTHREE.ExtrudeGeometry = function ( shapes, options ) {\r\n\r\n\tif ( typeof( shapes ) === \"undefined\" ) {\r\n\r\n\t\tshapes = [];\r\n\t\treturn;\r\n\r\n\t}\r\n\r\n\tTHREE.Geometry.call( this );\r\n\r\n\tthis.type = 'ExtrudeGeometry';\r\n\r\n\tshapes = Array.isArray( shapes ) ? shapes : [ shapes ];\r\n\r\n\tthis.addShapeList( shapes, options );\r\n\r\n\tthis.computeFaceNormals();\r\n\r\n\t// can't really use automatic vertex normals\r\n\t// as then front and back sides get smoothed too\r\n\t// should do separate smoothing just for sides\r\n\r\n\t//this.computeVertexNormals();\r\n\r\n\t//console.log( \"took\", ( Date.now() - startTime ) );\r\n\r\n};\r\n\r\nTHREE.ExtrudeGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\nTHREE.ExtrudeGeometry.prototype.constructor = THREE.ExtrudeGeometry;\r\n\r\nTHREE.ExtrudeGeometry.prototype.addShapeList = function ( shapes, options ) {\r\n\r\n\tvar sl = shapes.length;\r\n\r\n\tfor ( var s = 0; s < sl; s ++ ) {\r\n\r\n\t\tvar shape = shapes[ s ];\r\n\t\tthis.addShape( shape, options );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.ExtrudeGeometry.prototype.addShape = function ( shape, options ) {\r\n\r\n\tvar amount = options.amount !== undefined ? options.amount : 100;\r\n\r\n\tvar bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6; // 10\r\n\tvar bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2; // 8\r\n\tvar bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;\r\n\r\n\tvar bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true; // false\r\n\r\n\tvar curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\r\n\r\n\tvar steps = options.steps !== undefined ? options.steps : 1;\r\n\r\n\tvar extrudePath = options.extrudePath;\r\n\tvar extrudePts, extrudeByPath = false;\r\n\r\n\t// Use default WorldUVGenerator if no UV generators are specified.\r\n\tvar uvgen = options.UVGenerator !== undefined ? options.UVGenerator : THREE.ExtrudeGeometry.WorldUVGenerator;\r\n\r\n\tvar splineTube, binormal, normal, position2;\r\n\tif ( extrudePath ) {\r\n\r\n\t\textrudePts = extrudePath.getSpacedPoints( steps );\r\n\r\n\t\textrudeByPath = true;\r\n\t\tbevelEnabled = false; // bevels not supported for path extrusion\r\n\r\n\t\t// SETUP TNB variables\r\n\r\n\t\t// Reuse TNB from TubeGeomtry for now.\r\n\t\t// TODO1 - have a .isClosed in spline?\r\n\r\n\t\tsplineTube = options.frames !== undefined ? options.frames : new THREE.TubeGeometry.FrenetFrames( extrudePath, steps, false );\r\n\r\n\t\t// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);\r\n\r\n\t\tbinormal = new THREE.Vector3();\r\n\t\tnormal = new THREE.Vector3();\r\n\t\tposition2 = new THREE.Vector3();\r\n\r\n\t}\r\n\r\n\t// Safeguards if bevels are not enabled\r\n\r\n\tif ( ! bevelEnabled ) {\r\n\r\n\t\tbevelSegments = 0;\r\n\t\tbevelThickness = 0;\r\n\t\tbevelSize = 0;\r\n\r\n\t}\r\n\r\n\t// Variables initialization\r\n\r\n\tvar ahole, h, hl; // looping of holes\r\n\tvar scope = this;\r\n\r\n\tvar shapesOffset = this.vertices.length;\r\n\r\n\tvar shapePoints = shape.extractPoints( curveSegments );\r\n\r\n\tvar vertices = shapePoints.shape;\r\n\tvar holes = shapePoints.holes;\r\n\r\n\tvar reverse = ! THREE.ShapeUtils.isClockWise( vertices );\r\n\r\n\tif ( reverse ) {\r\n\r\n\t\tvertices = vertices.reverse();\r\n\r\n\t\t// Maybe we should also check if holes are in the opposite direction, just to be safe ...\r\n\r\n\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\r\n\r\n\t\t\tahole = holes[ h ];\r\n\r\n\t\t\tif ( THREE.ShapeUtils.isClockWise( ahole ) ) {\r\n\r\n\t\t\t\tholes[ h ] = ahole.reverse();\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treverse = false; // If vertices are in order now, we shouldn't need to worry about them again (hopefully)!\r\n\r\n\t}\r\n\r\n\r\n\tvar faces = THREE.ShapeUtils.triangulateShape( vertices, holes );\r\n\r\n\t/* Vertices */\r\n\r\n\tvar contour = vertices; // vertices has all points but contour has only points of circumference\r\n\r\n\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\r\n\r\n\t\tahole = holes[ h ];\r\n\r\n\t\tvertices = vertices.concat( ahole );\r\n\r\n\t}\r\n\r\n\r\n\tfunction scalePt2 ( pt, vec, size ) {\r\n\r\n\t\tif ( ! vec ) console.error( \"THREE.ExtrudeGeometry: vec does not exist\" );\r\n\r\n\t\treturn vec.clone().multiplyScalar( size ).add( pt );\r\n\r\n\t}\r\n\r\n\tvar b, bs, t, z,\r\n\t\tvert, vlen = vertices.length,\r\n\t\tface, flen = faces.length;\r\n\r\n\r\n\t// Find directions for point movement\r\n\r\n\r\n\tfunction getBevelVec( inPt, inPrev, inNext ) {\r\n\r\n\t\t// computes for inPt the corresponding point inPt' on a new contour\r\n\t\t//   shifted by 1 unit (length of normalized vector) to the left\r\n\t\t// if we walk along contour clockwise, this new contour is outside the old one\r\n\t\t//\r\n\t\t// inPt' is the intersection of the two lines parallel to the two\r\n\t\t//  adjacent edges of inPt at a distance of 1 unit on the left side.\r\n\r\n\t\tvar v_trans_x, v_trans_y, shrink_by = 1;\t\t// resulting translation vector for inPt\r\n\r\n\t\t// good reading for geometry algorithms (here: line-line intersection)\r\n\t\t// http://geomalgorithms.com/a05-_intersect-1.html\r\n\r\n\t\tvar v_prev_x = inPt.x - inPrev.x, v_prev_y = inPt.y - inPrev.y;\r\n\t\tvar v_next_x = inNext.x - inPt.x, v_next_y = inNext.y - inPt.y;\r\n\r\n\t\tvar v_prev_lensq = ( v_prev_x * v_prev_x + v_prev_y * v_prev_y );\r\n\r\n\t\t// check for collinear edges\r\n\t\tvar collinear0 = ( v_prev_x * v_next_y - v_prev_y * v_next_x );\r\n\r\n\t\tif ( Math.abs( collinear0 ) > Number.EPSILON ) {\r\n\r\n\t\t\t// not collinear\r\n\r\n\t\t\t// length of vectors for normalizing\r\n\r\n\t\t\tvar v_prev_len = Math.sqrt( v_prev_lensq );\r\n\t\t\tvar v_next_len = Math.sqrt( v_next_x * v_next_x + v_next_y * v_next_y );\r\n\r\n\t\t\t// shift adjacent points by unit vectors to the left\r\n\r\n\t\t\tvar ptPrevShift_x = ( inPrev.x - v_prev_y / v_prev_len );\r\n\t\t\tvar ptPrevShift_y = ( inPrev.y + v_prev_x / v_prev_len );\r\n\r\n\t\t\tvar ptNextShift_x = ( inNext.x - v_next_y / v_next_len );\r\n\t\t\tvar ptNextShift_y = ( inNext.y + v_next_x / v_next_len );\r\n\r\n\t\t\t// scaling factor for v_prev to intersection point\r\n\r\n\t\t\tvar sf = (  ( ptNextShift_x - ptPrevShift_x ) * v_next_y -\r\n\t\t\t\t\t\t( ptNextShift_y - ptPrevShift_y ) * v_next_x    ) /\r\n\t\t\t\t\t  ( v_prev_x * v_next_y - v_prev_y * v_next_x );\r\n\r\n\t\t\t// vector from inPt to intersection point\r\n\r\n\t\t\tv_trans_x = ( ptPrevShift_x + v_prev_x * sf - inPt.x );\r\n\t\t\tv_trans_y = ( ptPrevShift_y + v_prev_y * sf - inPt.y );\r\n\r\n\t\t\t// Don't normalize!, otherwise sharp corners become ugly\r\n\t\t\t//  but prevent crazy spikes\r\n\t\t\tvar v_trans_lensq = ( v_trans_x * v_trans_x + v_trans_y * v_trans_y );\r\n\t\t\tif ( v_trans_lensq <= 2 ) {\r\n\r\n\t\t\t\treturn\tnew THREE.Vector2( v_trans_x, v_trans_y );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tshrink_by = Math.sqrt( v_trans_lensq / 2 );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// handle special case of collinear edges\r\n\r\n\t\t\tvar direction_eq = false;\t\t// assumes: opposite\r\n\t\t\tif ( v_prev_x > Number.EPSILON ) {\r\n\r\n\t\t\t\tif ( v_next_x > Number.EPSILON ) {\r\n\r\n\t\t\t\t\tdirection_eq = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tif ( v_prev_x < - Number.EPSILON ) {\r\n\r\n\t\t\t\t\tif ( v_next_x < - Number.EPSILON ) {\r\n\r\n\t\t\t\t\t\tdirection_eq = true;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tif ( Math.sign( v_prev_y ) === Math.sign( v_next_y ) ) {\r\n\r\n\t\t\t\t\t\tdirection_eq = true;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( direction_eq ) {\r\n\r\n\t\t\t\t// console.log(\"Warning: lines are a straight sequence\");\r\n\t\t\t\tv_trans_x = - v_prev_y;\r\n\t\t\t\tv_trans_y =  v_prev_x;\r\n\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// console.log(\"Warning: lines are a straight spike\");\r\n\t\t\t\tv_trans_x = v_prev_x;\r\n\t\t\t\tv_trans_y = v_prev_y;\r\n\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq / 2 );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn\tnew THREE.Vector2( v_trans_x / shrink_by, v_trans_y / shrink_by );\r\n\r\n\t}\r\n\r\n\r\n\tvar contourMovements = [];\r\n\r\n\tfor ( var i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\r\n\r\n\t\tif ( j === il ) j = 0;\r\n\t\tif ( k === il ) k = 0;\r\n\r\n\t\t//  (j)---(i)---(k)\r\n\t\t// console.log('i,j,k', i, j , k)\r\n\r\n\t\tcontourMovements[ i ] = getBevelVec( contour[ i ], contour[ j ], contour[ k ] );\r\n\r\n\t}\r\n\r\n\tvar holesMovements = [], oneHoleMovements, verticesMovements = contourMovements.concat();\r\n\r\n\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\r\n\r\n\t\tahole = holes[ h ];\r\n\r\n\t\toneHoleMovements = [];\r\n\r\n\t\tfor ( i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\r\n\r\n\t\t\tif ( j === il ) j = 0;\r\n\t\t\tif ( k === il ) k = 0;\r\n\r\n\t\t\t//  (j)---(i)---(k)\r\n\t\t\toneHoleMovements[ i ] = getBevelVec( ahole[ i ], ahole[ j ], ahole[ k ] );\r\n\r\n\t\t}\r\n\r\n\t\tholesMovements.push( oneHoleMovements );\r\n\t\tverticesMovements = verticesMovements.concat( oneHoleMovements );\r\n\r\n\t}\r\n\r\n\r\n\t// Loop bevelSegments, 1 for the front, 1 for the back\r\n\r\n\tfor ( b = 0; b < bevelSegments; b ++ ) {\r\n\r\n\t\t//for ( b = bevelSegments; b > 0; b -- ) {\r\n\r\n\t\tt = b / bevelSegments;\r\n\t\tz = bevelThickness * ( 1 - t );\r\n\r\n\t\t//z = bevelThickness * t;\r\n\t\tbs = bevelSize * ( Math.sin ( t * Math.PI / 2 ) ); // curved\r\n\t\t//bs = bevelSize * t; // linear\r\n\r\n\t\t// contract shape\r\n\r\n\t\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\r\n\r\n\t\t\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\r\n\r\n\t\t\tv( vert.x, vert.y,  - z );\r\n\r\n\t\t}\r\n\r\n\t\t// expand holes\r\n\r\n\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\r\n\r\n\t\t\tahole = holes[ h ];\r\n\t\t\toneHoleMovements = holesMovements[ h ];\r\n\r\n\t\t\tfor ( i = 0, il = ahole.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\r\n\r\n\t\t\t\tv( vert.x, vert.y,  - z );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tbs = bevelSize;\r\n\r\n\t// Back facing vertices\r\n\r\n\tfor ( i = 0; i < vlen; i ++ ) {\r\n\r\n\t\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\r\n\r\n\t\tif ( ! extrudeByPath ) {\r\n\r\n\t\t\tv( vert.x, vert.y, 0 );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );\r\n\r\n\t\t\tnormal.copy( splineTube.normals[ 0 ] ).multiplyScalar( vert.x );\r\n\t\t\tbinormal.copy( splineTube.binormals[ 0 ] ).multiplyScalar( vert.y );\r\n\r\n\t\t\tposition2.copy( extrudePts[ 0 ] ).add( normal ).add( binormal );\r\n\r\n\t\t\tv( position2.x, position2.y, position2.z );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// Add stepped vertices...\r\n\t// Including front facing vertices\r\n\r\n\tvar s;\r\n\r\n\tfor ( s = 1; s <= steps; s ++ ) {\r\n\r\n\t\tfor ( i = 0; i < vlen; i ++ ) {\r\n\r\n\t\t\tvert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\r\n\r\n\t\t\tif ( ! extrudeByPath ) {\r\n\r\n\t\t\t\tv( vert.x, vert.y, amount / steps * s );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );\r\n\r\n\t\t\t\tnormal.copy( splineTube.normals[ s ] ).multiplyScalar( vert.x );\r\n\t\t\t\tbinormal.copy( splineTube.binormals[ s ] ).multiplyScalar( vert.y );\r\n\r\n\t\t\t\tposition2.copy( extrudePts[ s ] ).add( normal ).add( binormal );\r\n\r\n\t\t\t\tv( position2.x, position2.y, position2.z );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n\t// Add bevel segments planes\r\n\r\n\t//for ( b = 1; b <= bevelSegments; b ++ ) {\r\n\tfor ( b = bevelSegments - 1; b >= 0; b -- ) {\r\n\r\n\t\tt = b / bevelSegments;\r\n\t\tz = bevelThickness * ( 1 - t );\r\n\t\t//bs = bevelSize * ( 1-Math.sin ( ( 1 - t ) * Math.PI/2 ) );\r\n\t\tbs = bevelSize * Math.sin ( t * Math.PI / 2 );\r\n\r\n\t\t// contract shape\r\n\r\n\t\tfor ( i = 0, il = contour.length; i < il; i ++ ) {\r\n\r\n\t\t\tvert = scalePt2( contour[ i ], contourMovements[ i ], bs );\r\n\t\t\tv( vert.x, vert.y,  amount + z );\r\n\r\n\t\t}\r\n\r\n\t\t// expand holes\r\n\r\n\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\r\n\r\n\t\t\tahole = holes[ h ];\r\n\t\t\toneHoleMovements = holesMovements[ h ];\r\n\r\n\t\t\tfor ( i = 0, il = ahole.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tvert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\r\n\r\n\t\t\t\tif ( ! extrudeByPath ) {\r\n\r\n\t\t\t\t\tv( vert.x, vert.y,  amount + z );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tv( vert.x, vert.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/* Faces */\r\n\r\n\t// Top and bottom faces\r\n\r\n\tbuildLidFaces();\r\n\r\n\t// Sides faces\r\n\r\n\tbuildSideFaces();\r\n\r\n\r\n\t/////  Internal functions\r\n\r\n\tfunction buildLidFaces() {\r\n\r\n\t\tif ( bevelEnabled ) {\r\n\r\n\t\t\tvar layer = 0; // steps + 1\r\n\t\t\tvar offset = vlen * layer;\r\n\r\n\t\t\t// Bottom faces\r\n\r\n\t\t\tfor ( i = 0; i < flen; i ++ ) {\r\n\r\n\t\t\t\tface = faces[ i ];\r\n\t\t\t\tf3( face[ 2 ] + offset, face[ 1 ] + offset, face[ 0 ] + offset );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tlayer = steps + bevelSegments * 2;\r\n\t\t\toffset = vlen * layer;\r\n\r\n\t\t\t// Top faces\r\n\r\n\t\t\tfor ( i = 0; i < flen; i ++ ) {\r\n\r\n\t\t\t\tface = faces[ i ];\r\n\t\t\t\tf3( face[ 0 ] + offset, face[ 1 ] + offset, face[ 2 ] + offset );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// Bottom faces\r\n\r\n\t\t\tfor ( i = 0; i < flen; i ++ ) {\r\n\r\n\t\t\t\tface = faces[ i ];\r\n\t\t\t\tf3( face[ 2 ], face[ 1 ], face[ 0 ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Top faces\r\n\r\n\t\t\tfor ( i = 0; i < flen; i ++ ) {\r\n\r\n\t\t\t\tface = faces[ i ];\r\n\t\t\t\tf3( face[ 0 ] + vlen * steps, face[ 1 ] + vlen * steps, face[ 2 ] + vlen * steps );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// Create faces for the z-sides of the shape\r\n\r\n\tfunction buildSideFaces() {\r\n\r\n\t\tvar layeroffset = 0;\r\n\t\tsidewalls( contour, layeroffset );\r\n\t\tlayeroffset += contour.length;\r\n\r\n\t\tfor ( h = 0, hl = holes.length; h < hl; h ++ ) {\r\n\r\n\t\t\tahole = holes[ h ];\r\n\t\t\tsidewalls( ahole, layeroffset );\r\n\r\n\t\t\t//, true\r\n\t\t\tlayeroffset += ahole.length;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfunction sidewalls( contour, layeroffset ) {\r\n\r\n\t\tvar j, k;\r\n\t\ti = contour.length;\r\n\r\n\t\twhile ( -- i >= 0 ) {\r\n\r\n\t\t\tj = i;\r\n\t\t\tk = i - 1;\r\n\t\t\tif ( k < 0 ) k = contour.length - 1;\r\n\r\n\t\t\t//console.log('b', i,j, i-1, k,vertices.length);\r\n\r\n\t\t\tvar s = 0, sl = steps  + bevelSegments * 2;\r\n\r\n\t\t\tfor ( s = 0; s < sl; s ++ ) {\r\n\r\n\t\t\t\tvar slen1 = vlen * s;\r\n\t\t\t\tvar slen2 = vlen * ( s + 1 );\r\n\r\n\t\t\t\tvar a = layeroffset + j + slen1,\r\n\t\t\t\t\tb = layeroffset + k + slen1,\r\n\t\t\t\t\tc = layeroffset + k + slen2,\r\n\t\t\t\t\td = layeroffset + j + slen2;\r\n\r\n\t\t\t\tf4( a, b, c, d, contour, s, sl, j, k );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n\tfunction v( x, y, z ) {\r\n\r\n\t\tscope.vertices.push( new THREE.Vector3( x, y, z ) );\r\n\r\n\t}\r\n\r\n\tfunction f3( a, b, c ) {\r\n\r\n\t\ta += shapesOffset;\r\n\t\tb += shapesOffset;\r\n\t\tc += shapesOffset;\r\n\r\n\t\tscope.faces.push( new THREE.Face3( a, b, c, null, null, 0 ) );\r\n\r\n\t\tvar uvs = uvgen.generateTopUV( scope, a, b, c );\r\n\r\n\t\tscope.faceVertexUvs[ 0 ].push( uvs );\r\n\r\n\t}\r\n\r\n\tfunction f4( a, b, c, d, wallContour, stepIndex, stepsLength, contourIndex1, contourIndex2 ) {\r\n\r\n\t\ta += shapesOffset;\r\n\t\tb += shapesOffset;\r\n\t\tc += shapesOffset;\r\n\t\td += shapesOffset;\r\n\r\n\t\tscope.faces.push( new THREE.Face3( a, b, d, null, null, 1 ) );\r\n\t\tscope.faces.push( new THREE.Face3( b, c, d, null, null, 1 ) );\r\n\r\n\t\tvar uvs = uvgen.generateSideWallUV( scope, a, b, c, d );\r\n\r\n\t\tscope.faceVertexUvs[ 0 ].push( [ uvs[ 0 ], uvs[ 1 ], uvs[ 3 ] ] );\r\n\t\tscope.faceVertexUvs[ 0 ].push( [ uvs[ 1 ], uvs[ 2 ], uvs[ 3 ] ] );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.ExtrudeGeometry.WorldUVGenerator = {\r\n\r\n\tgenerateTopUV: function ( geometry, indexA, indexB, indexC ) {\r\n\r\n\t\tvar vertices = geometry.vertices;\r\n\r\n\t\tvar a = vertices[ indexA ];\r\n\t\tvar b = vertices[ indexB ];\r\n\t\tvar c = vertices[ indexC ];\r\n\r\n\t\treturn [\r\n\t\t\tnew THREE.Vector2( a.x, a.y ),\r\n\t\t\tnew THREE.Vector2( b.x, b.y ),\r\n\t\t\tnew THREE.Vector2( c.x, c.y )\r\n\t\t];\r\n\r\n\t},\r\n\r\n\tgenerateSideWallUV: function ( geometry, indexA, indexB, indexC, indexD ) {\r\n\r\n\t\tvar vertices = geometry.vertices;\r\n\r\n\t\tvar a = vertices[ indexA ];\r\n\t\tvar b = vertices[ indexB ];\r\n\t\tvar c = vertices[ indexC ];\r\n\t\tvar d = vertices[ indexD ];\r\n\r\n\t\tif ( Math.abs( a.y - b.y ) < 0.01 ) {\r\n\r\n\t\t\treturn [\r\n\t\t\t\tnew THREE.Vector2( a.x, 1 - a.z ),\r\n\t\t\t\tnew THREE.Vector2( b.x, 1 - b.z ),\r\n\t\t\t\tnew THREE.Vector2( c.x, 1 - c.z ),\r\n\t\t\t\tnew THREE.Vector2( d.x, 1 - d.z )\r\n\t\t\t];\r\n\r\n\t\t} else {\r\n\r\n\t\t\treturn [\r\n\t\t\t\tnew THREE.Vector2( a.y, 1 - a.z ),\r\n\t\t\t\tnew THREE.Vector2( b.y, 1 - b.z ),\r\n\t\t\t\tnew THREE.Vector2( c.y, 1 - c.z ),\r\n\t\t\t\tnew THREE.Vector2( d.y, 1 - d.z )\r\n\t\t\t];\r\n\r\n\t\t}\r\n\r\n\t}\r\n};\r\n\r\n// File:src/extras/geometries/ShapeGeometry.js\r\n\r\n/**\r\n * @author jonobr1 / http://jonobr1.com\r\n *\r\n * Creates a one-sided polygonal geometry from a path shape. Similar to\r\n * ExtrudeGeometry.\r\n *\r\n * parameters = {\r\n *\r\n *\tcurveSegments: <int>, // number of points on the curves. NOT USED AT THE MOMENT.\r\n *\r\n *\tmaterial: <int> // material index for front and back faces\r\n *\tuvGenerator: <Object> // object that provides UV generator functions\r\n *\r\n * }\r\n **/\r\n\r\nTHREE.ShapeGeometry = function ( shapes, options ) {\r\n\r\n\tTHREE.Geometry.call( this );\r\n\r\n\tthis.type = 'ShapeGeometry';\r\n\r\n\tif ( Array.isArray( shapes ) === false ) shapes = [ shapes ];\r\n\r\n\tthis.addShapeList( shapes, options );\r\n\r\n\tthis.computeFaceNormals();\r\n\r\n};\r\n\r\nTHREE.ShapeGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\nTHREE.ShapeGeometry.prototype.constructor = THREE.ShapeGeometry;\r\n\r\n/**\r\n * Add an array of shapes to THREE.ShapeGeometry.\r\n */\r\nTHREE.ShapeGeometry.prototype.addShapeList = function ( shapes, options ) {\r\n\r\n\tfor ( var i = 0, l = shapes.length; i < l; i ++ ) {\r\n\r\n\t\tthis.addShape( shapes[ i ], options );\r\n\r\n\t}\r\n\r\n\treturn this;\r\n\r\n};\r\n\r\n/**\r\n * Adds a shape to THREE.ShapeGeometry, based on THREE.ExtrudeGeometry.\r\n */\r\nTHREE.ShapeGeometry.prototype.addShape = function ( shape, options ) {\r\n\r\n\tif ( options === undefined ) options = {};\r\n\tvar curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\r\n\r\n\tvar material = options.material;\r\n\tvar uvgen = options.UVGenerator === undefined ? THREE.ExtrudeGeometry.WorldUVGenerator : options.UVGenerator;\r\n\r\n\t//\r\n\r\n\tvar i, l, hole;\r\n\r\n\tvar shapesOffset = this.vertices.length;\r\n\tvar shapePoints = shape.extractPoints( curveSegments );\r\n\r\n\tvar vertices = shapePoints.shape;\r\n\tvar holes = shapePoints.holes;\r\n\r\n\tvar reverse = ! THREE.ShapeUtils.isClockWise( vertices );\r\n\r\n\tif ( reverse ) {\r\n\r\n\t\tvertices = vertices.reverse();\r\n\r\n\t\t// Maybe we should also check if holes are in the opposite direction, just to be safe...\r\n\r\n\t\tfor ( i = 0, l = holes.length; i < l; i ++ ) {\r\n\r\n\t\t\thole = holes[ i ];\r\n\r\n\t\t\tif ( THREE.ShapeUtils.isClockWise( hole ) ) {\r\n\r\n\t\t\t\tholes[ i ] = hole.reverse();\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treverse = false;\r\n\r\n\t}\r\n\r\n\tvar faces = THREE.ShapeUtils.triangulateShape( vertices, holes );\r\n\r\n\t// Vertices\r\n\r\n\tfor ( i = 0, l = holes.length; i < l; i ++ ) {\r\n\r\n\t\thole = holes[ i ];\r\n\t\tvertices = vertices.concat( hole );\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tvar vert, vlen = vertices.length;\r\n\tvar face, flen = faces.length;\r\n\r\n\tfor ( i = 0; i < vlen; i ++ ) {\r\n\r\n\t\tvert = vertices[ i ];\r\n\r\n\t\tthis.vertices.push( new THREE.Vector3( vert.x, vert.y, 0 ) );\r\n\r\n\t}\r\n\r\n\tfor ( i = 0; i < flen; i ++ ) {\r\n\r\n\t\tface = faces[ i ];\r\n\r\n\t\tvar a = face[ 0 ] + shapesOffset;\r\n\t\tvar b = face[ 1 ] + shapesOffset;\r\n\t\tvar c = face[ 2 ] + shapesOffset;\r\n\r\n\t\tthis.faces.push( new THREE.Face3( a, b, c, null, null, material ) );\r\n\t\tthis.faceVertexUvs[ 0 ].push( uvgen.generateTopUV( this, a, b, c ) );\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/extras/geometries/LatheBufferGeometry.js\r\n\r\n/**\r\n * @author Mugen87 / https://github.com/Mugen87\r\n */\r\n\r\n // points - to create a closed torus, one must use a set of points\r\n //    like so: [ a, b, c, d, a ], see first is the same as last.\r\n // segments - the number of circumference segments to create\r\n // phiStart - the starting radian\r\n // phiLength - the radian (0 to 2PI) range of the lathed section\r\n //    2PI is a closed lathe, less than 2PI is a portion.\r\n\r\nTHREE.LatheBufferGeometry = function ( points, segments, phiStart, phiLength ) {\r\n\r\n\tTHREE.BufferGeometry.call( this );\r\n\r\n\tthis.type = 'LatheBufferGeometry';\r\n\r\n\tthis.parameters = {\r\n\t\tpoints: points,\r\n\t\tsegments: segments,\r\n\t\tphiStart: phiStart,\r\n\t\tphiLength: phiLength\r\n\t};\r\n\r\n\tsegments = Math.floor( segments ) || 12;\r\n\tphiStart = phiStart || 0;\r\n\tphiLength = phiLength || Math.PI * 2;\r\n\r\n\t// clamp phiLength so it's in range of [ 0, 2PI ]\r\n\tphiLength = THREE.Math.clamp( phiLength, 0, Math.PI * 2 );\r\n\r\n\t// these are used to calculate buffer length\r\n\tvar vertexCount = ( segments + 1 ) * points.length;\r\n\tvar indexCount = segments * points.length * 2 * 3;\r\n\r\n\t// buffers\r\n\tvar indices = new THREE.BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ) , 1 );\r\n\tvar vertices = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\r\n\tvar uvs = new THREE.BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\r\n\r\n\t// helper variables\r\n\tvar index = 0, indexOffset = 0, base;\r\n\tvar inversePointLength = 1.0 / ( points.length - 1 );\r\n\tvar inverseSegments = 1.0 / segments;\r\n\tvar vertex = new THREE.Vector3();\r\n\tvar uv = new THREE.Vector2();\r\n\tvar i, j;\r\n\r\n\t// generate vertices and uvs\r\n\r\n\tfor ( i = 0; i <= segments; i ++ ) {\r\n\r\n\t\tvar phi = phiStart + i * inverseSegments * phiLength;\r\n\r\n\t\tvar sin = Math.sin( phi );\r\n\t\tvar cos = Math.cos( phi );\r\n\r\n\t\tfor ( j = 0; j <= ( points.length - 1 ); j ++ ) {\r\n\r\n\t\t\t// vertex\r\n\t\t\tvertex.x = points[ j ].x * sin;\r\n\t\t\tvertex.y = points[ j ].y;\r\n\t\t\tvertex.z = points[ j ].x * cos;\r\n\t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t\t// uv\r\n\t\t\tuv.x = i / segments;\r\n\t\t\tuv.y = j / ( points.length - 1 );\r\n\t\t\tuvs.setXY( index, uv.x, uv.y );\r\n\r\n\t\t\t// increase index\r\n\t\t\tindex ++;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// generate indices\r\n\r\n\tfor ( i = 0; i < segments; i ++ ) {\r\n\r\n\t\tfor ( j = 0; j < ( points.length - 1 ); j ++ ) {\r\n\r\n\t\t\tbase = j + i * points.length;\r\n\r\n\t\t\t// indices\r\n\t\t\tvar a = base;\r\n\t\t\tvar b = base + points.length;\r\n\t\t\tvar c = base + points.length + 1;\r\n\t\t\tvar d = base + 1;\r\n\r\n\t\t\t// face one\r\n\t\t\tindices.setX( indexOffset, a ); indexOffset++;\r\n\t\t\tindices.setX( indexOffset, b ); indexOffset++;\r\n\t\t\tindices.setX( indexOffset, d ); indexOffset++;\r\n\r\n\t\t\t// face two\r\n\t\t\tindices.setX( indexOffset, b ); indexOffset++;\r\n\t\t\tindices.setX( indexOffset, c ); indexOffset++;\r\n\t\t\tindices.setX( indexOffset, d ); indexOffset++;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// build geometry\r\n\r\n\tthis.setIndex( indices );\r\n\tthis.addAttribute( 'position', vertices );\r\n\tthis.addAttribute( 'uv', uvs );\r\n\r\n\t// generate normals\r\n\r\n\tthis.computeVertexNormals();\r\n\r\n\t// if the geometry is closed, we need to average the normals along the seam.\r\n\t// because the corresponding vertices are identical (but still have different UVs).\r\n\r\n\tif( phiLength === Math.PI * 2 ) {\r\n\r\n\t\tvar normals = this.attributes.normal.array;\r\n\t\tvar n1 = new THREE.Vector3();\r\n\t\tvar n2 = new THREE.Vector3();\r\n\t\tvar n = new THREE.Vector3();\r\n\r\n\t\t// this is the buffer offset for the last line of vertices\r\n\t\tbase = segments * points.length * 3;\r\n\r\n\t\tfor( i = 0, j = 0; i < points.length; i ++, j += 3 ) {\r\n\r\n\t\t\t// select the normal of the vertex in the first line\r\n\t\t\tn1.x = normals[ j + 0 ];\r\n\t\t\tn1.y = normals[ j + 1 ];\r\n\t\t\tn1.z = normals[ j + 2 ];\r\n\r\n\t\t\t// select the normal of the vertex in the last line\r\n\t\t\tn2.x = normals[ base + j + 0 ];\r\n\t\t\tn2.y = normals[ base + j + 1 ];\r\n\t\t\tn2.z = normals[ base + j + 2 ];\r\n\r\n\t\t\t// average normals\r\n\t\t\tn.addVectors( n1, n2 ).normalize();\r\n\r\n\t\t\t// assign the new values to both normals\r\n\t\t\tnormals[ j + 0 ] = normals[ base + j + 0 ] = n.x;\r\n\t\t\tnormals[ j + 1 ] = normals[ base + j + 1 ] = n.y;\r\n\t\t\tnormals[ j + 2 ] = normals[ base + j + 2 ] = n.z;\r\n\r\n\t\t} // next row\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.LatheBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\r\nTHREE.LatheBufferGeometry.prototype.constructor = THREE.LatheBufferGeometry;\r\n\r\n// File:src/extras/geometries/LatheGeometry.js\r\n\r\n/**\r\n * @author astrodud / http://astrodud.isgreat.org/\r\n * @author zz85 / https://github.com/zz85\r\n * @author bhouston / http://clara.io\r\n */\r\n\r\n// points - to create a closed torus, one must use a set of points\r\n//    like so: [ a, b, c, d, a ], see first is the same as last.\r\n// segments - the number of circumference segments to create\r\n// phiStart - the starting radian\r\n// phiLength - the radian (0 to 2PI) range of the lathed section\r\n//    2PI is a closed lathe, less than 2PI is a portion.\r\n\r\nTHREE.LatheGeometry = function ( points, segments, phiStart, phiLength ) {\r\n\r\n\tTHREE.Geometry.call( this );\r\n\r\n\tthis.type = 'LatheGeometry';\r\n\r\n\tthis.parameters = {\r\n\t\tpoints: points,\r\n\t\tsegments: segments,\r\n\t\tphiStart: phiStart,\r\n\t\tphiLength: phiLength\r\n\t};\r\n\r\n\tthis.fromBufferGeometry( new THREE.LatheBufferGeometry( points, segments, phiStart, phiLength ) );\r\n\tthis.mergeVertices();\r\n\r\n};\r\n\r\nTHREE.LatheGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\nTHREE.LatheGeometry.prototype.constructor = THREE.LatheGeometry;\r\n\r\n// File:src/extras/geometries/PlaneGeometry.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Plane.as\r\n */\r\n\r\nTHREE.PlaneGeometry = function ( width, height, widthSegments, heightSegments ) {\r\n\r\n\tTHREE.Geometry.call( this );\r\n\r\n\tthis.type = 'PlaneGeometry';\r\n\r\n\tthis.parameters = {\r\n\t\twidth: width,\r\n\t\theight: height,\r\n\t\twidthSegments: widthSegments,\r\n\t\theightSegments: heightSegments\r\n\t};\r\n\r\n\tthis.fromBufferGeometry( new THREE.PlaneBufferGeometry( width, height, widthSegments, heightSegments ) );\r\n\r\n};\r\n\r\nTHREE.PlaneGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\nTHREE.PlaneGeometry.prototype.constructor = THREE.PlaneGeometry;\r\n\r\n// File:src/extras/geometries/PlaneBufferGeometry.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Plane.as\r\n */\r\n\r\nTHREE.PlaneBufferGeometry = function ( width, height, widthSegments, heightSegments ) {\r\n\r\n\tTHREE.BufferGeometry.call( this );\r\n\r\n\tthis.type = 'PlaneBufferGeometry';\r\n\r\n\tthis.parameters = {\r\n\t\twidth: width,\r\n\t\theight: height,\r\n\t\twidthSegments: widthSegments,\r\n\t\theightSegments: heightSegments\r\n\t};\r\n\r\n\tvar width_half = width / 2;\r\n\tvar height_half = height / 2;\r\n\r\n\tvar gridX = Math.floor( widthSegments ) || 1;\r\n\tvar gridY = Math.floor( heightSegments ) || 1;\r\n\r\n\tvar gridX1 = gridX + 1;\r\n\tvar gridY1 = gridY + 1;\r\n\r\n\tvar segment_width = width / gridX;\r\n\tvar segment_height = height / gridY;\r\n\r\n\tvar vertices = new Float32Array( gridX1 * gridY1 * 3 );\r\n\tvar normals = new Float32Array( gridX1 * gridY1 * 3 );\r\n\tvar uvs = new Float32Array( gridX1 * gridY1 * 2 );\r\n\r\n\tvar offset = 0;\r\n\tvar offset2 = 0;\r\n\r\n\tfor ( var iy = 0; iy < gridY1; iy ++ ) {\r\n\r\n\t\tvar y = iy * segment_height - height_half;\r\n\r\n\t\tfor ( var ix = 0; ix < gridX1; ix ++ ) {\r\n\r\n\t\t\tvar x = ix * segment_width - width_half;\r\n\r\n\t\t\tvertices[ offset ] = x;\r\n\t\t\tvertices[ offset + 1 ] = - y;\r\n\r\n\t\t\tnormals[ offset + 2 ] = 1;\r\n\r\n\t\t\tuvs[ offset2 ] = ix / gridX;\r\n\t\t\tuvs[ offset2 + 1 ] = 1 - ( iy / gridY );\r\n\r\n\t\t\toffset += 3;\r\n\t\t\toffset2 += 2;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\toffset = 0;\r\n\r\n\tvar indices = new ( ( vertices.length / 3 ) > 65535 ? Uint32Array : Uint16Array )( gridX * gridY * 6 );\r\n\r\n\tfor ( var iy = 0; iy < gridY; iy ++ ) {\r\n\r\n\t\tfor ( var ix = 0; ix < gridX; ix ++ ) {\r\n\r\n\t\t\tvar a = ix + gridX1 * iy;\r\n\t\t\tvar b = ix + gridX1 * ( iy + 1 );\r\n\t\t\tvar c = ( ix + 1 ) + gridX1 * ( iy + 1 );\r\n\t\t\tvar d = ( ix + 1 ) + gridX1 * iy;\r\n\r\n\t\t\tindices[ offset ] = a;\r\n\t\t\tindices[ offset + 1 ] = b;\r\n\t\t\tindices[ offset + 2 ] = d;\r\n\r\n\t\t\tindices[ offset + 3 ] = b;\r\n\t\t\tindices[ offset + 4 ] = c;\r\n\t\t\tindices[ offset + 5 ] = d;\r\n\r\n\t\t\toffset += 6;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tthis.setIndex( new THREE.BufferAttribute( indices, 1 ) );\r\n\tthis.addAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );\r\n\tthis.addAttribute( 'normal', new THREE.BufferAttribute( normals, 3 ) );\r\n\tthis.addAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ) );\r\n\r\n};\r\n\r\nTHREE.PlaneBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\r\nTHREE.PlaneBufferGeometry.prototype.constructor = THREE.PlaneBufferGeometry;\r\n\r\n// File:src/extras/geometries/RingBufferGeometry.js\r\n\r\n/**\r\n * @author Mugen87 / https://github.com/Mugen87\r\n */\r\n\r\nTHREE.RingBufferGeometry = function ( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\r\n\r\n\tTHREE.BufferGeometry.call( this );\r\n\r\n\tthis.type = 'RingBufferGeometry';\r\n\r\n\tthis.parameters = {\r\n\t\tinnerRadius: innerRadius,\r\n\t\touterRadius: outerRadius,\r\n\t\tthetaSegments: thetaSegments,\r\n\t\tphiSegments: phiSegments,\r\n\t\tthetaStart: thetaStart,\r\n\t\tthetaLength: thetaLength\r\n\t};\r\n\r\n\tinnerRadius = innerRadius || 20;\r\n\touterRadius = outerRadius || 50;\r\n\r\n\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\r\n\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;\r\n\r\n\tthetaSegments = thetaSegments !== undefined ? Math.max( 3, thetaSegments ) : 8;\r\n\tphiSegments = phiSegments !== undefined ? Math.max( 1, phiSegments ) : 1;\r\n\r\n\t// these are used to calculate buffer length\r\n\tvar vertexCount = ( thetaSegments + 1 ) * ( phiSegments + 1 );\r\n\tvar indexCount = thetaSegments * phiSegments * 2 * 3;\r\n\r\n\t// buffers\r\n\tvar indices = new THREE.BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ) , 1 );\r\n\tvar vertices = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\r\n\tvar normals = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\r\n\tvar uvs = new THREE.BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\r\n\r\n\t// some helper variables\r\n\tvar index = 0, indexOffset = 0, segment;\r\n\tvar radius = innerRadius;\r\n\tvar radiusStep = ( ( outerRadius - innerRadius ) / phiSegments );\r\n\tvar vertex = new THREE.Vector3();\r\n\tvar uv = new THREE.Vector2();\r\n\tvar j, i;\r\n\r\n\t// generate vertices, normals and uvs\r\n\r\n\t// values are generate from the inside of the ring to the outside\r\n\r\n\tfor ( j = 0; j <= phiSegments; j ++ ) {\r\n\r\n\t\tfor ( i = 0; i <= thetaSegments; i ++ ) {\r\n\r\n\t\t\tsegment = thetaStart + i / thetaSegments * thetaLength;\r\n\r\n\t\t\t// vertex\r\n\t\t\tvertex.x = radius * Math.cos( segment );\r\n\t\t\tvertex.y = radius * Math.sin( segment );\r\n\t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t\t// normal\r\n\t\t\tnormals.setXYZ( index, 0, 0, 1 );\r\n\r\n\t\t\t// uv\r\n\t\t\tuv.x = ( vertex.x / outerRadius + 1 ) / 2;\r\n\t\t\tuv.y = ( vertex.y / outerRadius + 1 ) / 2;\r\n\t\t\tuvs.setXY( index, uv.x, uv.y );\r\n\r\n\t\t\t// increase index\r\n\t\t\tindex++;\r\n\r\n\t\t}\r\n\r\n\t\t// increase the radius for next row of vertices\r\n\t\tradius += radiusStep;\r\n\r\n\t}\r\n\r\n\t// generate indices\r\n\r\n\tfor ( j = 0; j < phiSegments; j ++ ) {\r\n\r\n\t\tvar thetaSegmentLevel = j * ( thetaSegments + 1 );\r\n\r\n\t\tfor ( i = 0; i < thetaSegments; i ++ ) {\r\n\r\n\t\t\tsegment = i + thetaSegmentLevel;\r\n\r\n\t\t\t// indices\r\n\t\t\tvar a = segment;\r\n\t\t\tvar b = segment + thetaSegments + 1;\r\n\t\t\tvar c = segment + thetaSegments + 2;\r\n\t\t\tvar d = segment + 1;\r\n\r\n\t\t\t// face one\r\n\t\t\tindices.setX( indexOffset, a ); indexOffset++;\r\n\t\t\tindices.setX( indexOffset, b ); indexOffset++;\r\n\t\t\tindices.setX( indexOffset, c ); indexOffset++;\r\n\r\n\t\t\t// face two\r\n\t\t\tindices.setX( indexOffset, a ); indexOffset++;\r\n\t\t\tindices.setX( indexOffset, c ); indexOffset++;\r\n\t\t\tindices.setX( indexOffset, d ); indexOffset++;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// build geometry\r\n\r\n\tthis.setIndex( indices );\r\n\tthis.addAttribute( 'position', vertices );\r\n\tthis.addAttribute( 'normal', normals );\r\n\tthis.addAttribute( 'uv', uvs );\r\n\r\n};\r\n\r\nTHREE.RingBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\r\nTHREE.RingBufferGeometry.prototype.constructor = THREE.RingBufferGeometry;\r\n\r\n// File:src/extras/geometries/RingGeometry.js\r\n\r\n/**\r\n * @author Kaleb Murphy\r\n */\r\n\r\nTHREE.RingGeometry = function ( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {\r\n\r\n\tTHREE.Geometry.call( this );\r\n\r\n\tthis.type = 'RingGeometry';\r\n\r\n\tthis.parameters = {\r\n\t\tinnerRadius: innerRadius,\r\n\t\touterRadius: outerRadius,\r\n\t\tthetaSegments: thetaSegments,\r\n\t\tphiSegments: phiSegments,\r\n\t\tthetaStart: thetaStart,\r\n\t\tthetaLength: thetaLength\r\n\t};\r\n\r\n\tthis.fromBufferGeometry( new THREE.RingBufferGeometry( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) );\r\n\r\n};\r\n\r\nTHREE.RingGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\nTHREE.RingGeometry.prototype.constructor = THREE.RingGeometry;\r\n\r\n// File:src/extras/geometries/SphereGeometry.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.SphereGeometry = function ( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\r\n\r\n\tTHREE.Geometry.call( this );\r\n\r\n\tthis.type = 'SphereGeometry';\r\n\r\n\tthis.parameters = {\r\n\t\tradius: radius,\r\n\t\twidthSegments: widthSegments,\r\n\t\theightSegments: heightSegments,\r\n\t\tphiStart: phiStart,\r\n\t\tphiLength: phiLength,\r\n\t\tthetaStart: thetaStart,\r\n\t\tthetaLength: thetaLength\r\n\t};\r\n\r\n\tthis.fromBufferGeometry( new THREE.SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) );\r\n\r\n};\r\n\r\nTHREE.SphereGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\nTHREE.SphereGeometry.prototype.constructor = THREE.SphereGeometry;\r\n\r\n// File:src/extras/geometries/SphereBufferGeometry.js\r\n\r\n/**\r\n * @author benaadams / https://twitter.com/ben_a_adams\r\n * based on THREE.SphereGeometry\r\n */\r\n\r\nTHREE.SphereBufferGeometry = function ( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {\r\n\r\n\tTHREE.BufferGeometry.call( this );\r\n\r\n\tthis.type = 'SphereBufferGeometry';\r\n\r\n\tthis.parameters = {\r\n\t\tradius: radius,\r\n\t\twidthSegments: widthSegments,\r\n\t\theightSegments: heightSegments,\r\n\t\tphiStart: phiStart,\r\n\t\tphiLength: phiLength,\r\n\t\tthetaStart: thetaStart,\r\n\t\tthetaLength: thetaLength\r\n\t};\r\n\r\n\tradius = radius || 50;\r\n\r\n\twidthSegments = Math.max( 3, Math.floor( widthSegments ) || 8 );\r\n\theightSegments = Math.max( 2, Math.floor( heightSegments ) || 6 );\r\n\r\n\tphiStart = phiStart !== undefined ? phiStart : 0;\r\n\tphiLength = phiLength !== undefined ? phiLength : Math.PI * 2;\r\n\r\n\tthetaStart = thetaStart !== undefined ? thetaStart : 0;\r\n\tthetaLength = thetaLength !== undefined ? thetaLength : Math.PI;\r\n\r\n\tvar thetaEnd = thetaStart + thetaLength;\r\n\r\n\tvar vertexCount = ( ( widthSegments + 1 ) * ( heightSegments + 1 ) );\r\n\r\n\tvar positions = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\r\n\tvar normals = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\r\n\tvar uvs = new THREE.BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\r\n\r\n\tvar index = 0, vertices = [], normal = new THREE.Vector3();\r\n\r\n\tfor ( var y = 0; y <= heightSegments; y ++ ) {\r\n\r\n\t\tvar verticesRow = [];\r\n\r\n\t\tvar v = y / heightSegments;\r\n\r\n\t\tfor ( var x = 0; x <= widthSegments; x ++ ) {\r\n\r\n\t\t\tvar u = x / widthSegments;\r\n\r\n\t\t\tvar px = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\r\n\t\t\tvar py = radius * Math.cos( thetaStart + v * thetaLength );\r\n\t\t\tvar pz = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\r\n\r\n\t\t\tnormal.set( px, py, pz ).normalize();\r\n\r\n\t\t\tpositions.setXYZ( index, px, py, pz );\r\n\t\t\tnormals.setXYZ( index, normal.x, normal.y, normal.z );\r\n\t\t\tuvs.setXY( index, u, 1 - v );\r\n\r\n\t\t\tverticesRow.push( index );\r\n\r\n\t\t\tindex ++;\r\n\r\n\t\t}\r\n\r\n\t\tvertices.push( verticesRow );\r\n\r\n\t}\r\n\r\n\tvar indices = [];\r\n\r\n\tfor ( var y = 0; y < heightSegments; y ++ ) {\r\n\r\n\t\tfor ( var x = 0; x < widthSegments; x ++ ) {\r\n\r\n\t\t\tvar v1 = vertices[ y ][ x + 1 ];\r\n\t\t\tvar v2 = vertices[ y ][ x ];\r\n\t\t\tvar v3 = vertices[ y + 1 ][ x ];\r\n\t\t\tvar v4 = vertices[ y + 1 ][ x + 1 ];\r\n\r\n\t\t\tif ( y !== 0 || thetaStart > 0 ) indices.push( v1, v2, v4 );\r\n\t\t\tif ( y !== heightSegments - 1 || thetaEnd < Math.PI ) indices.push( v2, v3, v4 );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tthis.setIndex( new ( positions.count > 65535 ? THREE.Uint32Attribute : THREE.Uint16Attribute )( indices, 1 ) );\r\n\tthis.addAttribute( 'position', positions );\r\n\tthis.addAttribute( 'normal', normals );\r\n\tthis.addAttribute( 'uv', uvs );\r\n\r\n\tthis.boundingSphere = new THREE.Sphere( new THREE.Vector3(), radius );\r\n\r\n};\r\n\r\nTHREE.SphereBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\r\nTHREE.SphereBufferGeometry.prototype.constructor = THREE.SphereBufferGeometry;\r\n\r\n// File:src/extras/geometries/TextGeometry.js\r\n\r\n/**\r\n * @author zz85 / http://www.lab4games.net/zz85/blog\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n * Text = 3D Text\r\n *\r\n * parameters = {\r\n *  font: <THREE.Font>, // font\r\n *\r\n *  size: <float>, // size of the text\r\n *  height: <float>, // thickness to extrude text\r\n *  curveSegments: <int>, // number of points on the curves\r\n *\r\n *  bevelEnabled: <bool>, // turn on bevel\r\n *  bevelThickness: <float>, // how deep into text bevel goes\r\n *  bevelSize: <float> // how far from text outline is bevel\r\n * }\r\n */\r\n\r\nTHREE.TextGeometry = function ( text, parameters ) {\r\n\r\n\tparameters = parameters || {};\r\n\r\n\tvar font = parameters.font;\r\n\r\n\tif ( font instanceof THREE.Font === false ) {\r\n\r\n\t\tconsole.error( 'THREE.TextGeometry: font parameter is not an instance of THREE.Font.' );\r\n\t\treturn new THREE.Geometry();\r\n\r\n\t}\r\n\r\n\tvar shapes = font.generateShapes( text, parameters.size, parameters.curveSegments );\r\n\r\n\t// translate parameters to ExtrudeGeometry API\r\n\r\n\tparameters.amount = parameters.height !== undefined ? parameters.height : 50;\r\n\r\n\t// defaults\r\n\r\n\tif ( parameters.bevelThickness === undefined ) parameters.bevelThickness = 10;\r\n\tif ( parameters.bevelSize === undefined ) parameters.bevelSize = 8;\r\n\tif ( parameters.bevelEnabled === undefined ) parameters.bevelEnabled = false;\r\n\r\n\tTHREE.ExtrudeGeometry.call( this, shapes, parameters );\r\n\r\n\tthis.type = 'TextGeometry';\r\n\r\n};\r\n\r\nTHREE.TextGeometry.prototype = Object.create( THREE.ExtrudeGeometry.prototype );\r\nTHREE.TextGeometry.prototype.constructor = THREE.TextGeometry;\r\n\r\n// File:src/extras/geometries/TorusBufferGeometry.js\r\n\r\n/**\r\n * @author Mugen87 / https://github.com/Mugen87\r\n */\r\n\r\nTHREE.TorusBufferGeometry = function ( radius, tube, radialSegments, tubularSegments, arc ) {\r\n\r\n\tTHREE.BufferGeometry.call( this );\r\n\r\n\tthis.type = 'TorusBufferGeometry';\r\n\r\n\tthis.parameters = {\r\n\t\tradius: radius,\r\n\t\ttube: tube,\r\n\t\tradialSegments: radialSegments,\r\n\t\ttubularSegments: tubularSegments,\r\n\t\tarc: arc\r\n\t};\r\n\r\n\tradius = radius || 100;\r\n\ttube = tube || 40;\r\n\tradialSegments = Math.floor( radialSegments ) || 8;\r\n\ttubularSegments = Math.floor( tubularSegments ) || 6;\r\n\tarc = arc || Math.PI * 2;\r\n\r\n\t// used to calculate buffer length\r\n\tvar vertexCount = ( ( radialSegments + 1 ) * ( tubularSegments + 1 ) );\r\n\tvar indexCount = radialSegments * tubularSegments * 2 * 3;\r\n\r\n\t// buffers\r\n\tvar indices = new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount );\r\n\tvar vertices = new Float32Array( vertexCount * 3 );\r\n\tvar normals = new Float32Array( vertexCount * 3 );\r\n\tvar uvs = new Float32Array( vertexCount * 2 );\r\n\r\n\t// offset variables\r\n\tvar vertexBufferOffset = 0;\r\n\tvar uvBufferOffset = 0;\r\n\tvar indexBufferOffset = 0;\r\n\r\n\t// helper variables\r\n\tvar center = new THREE.Vector3();\r\n\tvar vertex = new THREE.Vector3();\r\n\tvar normal = new THREE.Vector3();\r\n\r\n\tvar j, i;\r\n\r\n\t// generate vertices, normals and uvs\r\n\r\n\tfor ( j = 0; j <= radialSegments; j ++ ) {\r\n\r\n\t\tfor ( i = 0; i <= tubularSegments; i ++ ) {\r\n\r\n\t\t\tvar u = i / tubularSegments * arc;\r\n\t\t\tvar v = j / radialSegments * Math.PI * 2;\r\n\r\n\t\t\t// vertex\r\n\t\t\tvertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );\r\n\t\t\tvertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );\r\n\t\t\tvertex.z = tube * Math.sin( v );\r\n\r\n\t\t\tvertices[ vertexBufferOffset ] = vertex.x;\r\n\t\t\tvertices[ vertexBufferOffset + 1 ] = vertex.y;\r\n\t\t\tvertices[ vertexBufferOffset + 2 ] = vertex.z;\r\n\r\n\t\t\t// this vector is used to calculate the normal\r\n\t\t\tcenter.x = radius * Math.cos( u );\r\n\t\t\tcenter.y = radius * Math.sin( u );\r\n\r\n\t\t\t// normal\r\n\t\t\tnormal.subVectors( vertex, center ).normalize();\r\n\r\n\t\t\tnormals[ vertexBufferOffset ] = normal.x;\r\n\t\t\tnormals[ vertexBufferOffset + 1 ] = normal.y;\r\n\t\t\tnormals[ vertexBufferOffset + 2 ] = normal.z;\r\n\r\n\t\t\t// uv\r\n\t\t\tuvs[ uvBufferOffset ] = i / tubularSegments;\r\n\t\t\tuvs[ uvBufferOffset + 1 ] = j / radialSegments;\r\n\r\n\t\t\t// update offsets\r\n\t\t\tvertexBufferOffset += 3;\r\n\t\t\tuvBufferOffset += 2;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// generate indices\r\n\r\n\tfor ( j = 1; j <= radialSegments; j ++ ) {\r\n\r\n\t\tfor ( i = 1; i <= tubularSegments; i ++ ) {\r\n\r\n\t\t\t// indices\r\n\t\t\tvar a = ( tubularSegments + 1 ) * j + i - 1;\r\n\t\t\tvar b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;\r\n\t\t\tvar c = ( tubularSegments + 1 ) * ( j - 1 ) + i;\r\n\t\t\tvar d = ( tubularSegments + 1 ) * j + i;\r\n\r\n\t\t\t// face one\r\n\t\t\tindices[ indexBufferOffset ] = a;\r\n\t\t\tindices[ indexBufferOffset + 1 ] = b;\r\n\t\t\tindices[ indexBufferOffset + 2 ] = d;\r\n\r\n\t\t\t// face two\r\n\t\t\tindices[ indexBufferOffset + 3 ] = b;\r\n\t\t\tindices[ indexBufferOffset + 4 ] = c;\r\n\t\t\tindices[ indexBufferOffset + 5 ] = d;\r\n\r\n\t\t\t// update offset\r\n\t\t\tindexBufferOffset += 6;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// build geometry\r\n\tthis.setIndex( new THREE.BufferAttribute( indices, 1 ) );\r\n\tthis.addAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );\r\n\tthis.addAttribute( 'normal', new THREE.BufferAttribute( normals, 3 ) );\r\n\tthis.addAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ) );\r\n\r\n};\r\n\r\nTHREE.TorusBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\r\nTHREE.TorusBufferGeometry.prototype.constructor = THREE.TorusBufferGeometry;\r\n\r\n// File:src/extras/geometries/TorusGeometry.js\r\n\r\n/**\r\n * @author oosmoxiecode\r\n * @author mrdoob / http://mrdoob.com/\r\n * based on http://code.google.com/p/away3d/source/browse/trunk/fp10/Away3DLite/src/away3dlite/primitives/Torus.as?r=2888\r\n */\r\n\r\nTHREE.TorusGeometry = function ( radius, tube, radialSegments, tubularSegments, arc ) {\r\n\r\n\tTHREE.Geometry.call( this );\r\n\r\n\tthis.type = 'TorusGeometry';\r\n\r\n\tthis.parameters = {\r\n\t\tradius: radius,\r\n\t\ttube: tube,\r\n\t\tradialSegments: radialSegments,\r\n\t\ttubularSegments: tubularSegments,\r\n\t\tarc: arc\r\n\t};\r\n\r\n\tthis.fromBufferGeometry( new THREE.TorusBufferGeometry( radius, tube, radialSegments, tubularSegments, arc ) );\r\n\r\n};\r\n\r\nTHREE.TorusGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\nTHREE.TorusGeometry.prototype.constructor = THREE.TorusGeometry;\r\n\r\n// File:src/extras/geometries/TorusKnotBufferGeometry.js\r\n\r\n/**\r\n * @author Mugen87 / https://github.com/Mugen87\r\n *\r\n * see: http://www.blackpawn.com/texts/pqtorus/\r\n */\r\nTHREE.TorusKnotBufferGeometry = function ( radius, tube, tubularSegments, radialSegments, p, q ) {\r\n\r\n\tTHREE.BufferGeometry.call( this );\r\n\r\n\tthis.type = 'TorusKnotBufferGeometry';\r\n\r\n\tthis.parameters = {\r\n\t\tradius: radius,\r\n\t\ttube: tube,\r\n\t\ttubularSegments: tubularSegments,\r\n\t\tradialSegments: radialSegments,\r\n\t\tp: p,\r\n\t\tq: q\r\n\t};\r\n\r\n\tradius = radius || 100;\r\n\ttube = tube || 40;\r\n\ttubularSegments = Math.floor( tubularSegments ) || 64;\r\n\tradialSegments = Math.floor( radialSegments ) || 8;\r\n\tp = p || 2;\r\n\tq = q || 3;\r\n\r\n\t// used to calculate buffer length\r\n\tvar vertexCount = ( ( radialSegments + 1 ) * ( tubularSegments + 1 ) );\r\n\tvar indexCount = radialSegments * tubularSegments * 2 * 3;\r\n\r\n\t// buffers\r\n\tvar indices = new THREE.BufferAttribute( new ( indexCount > 65535 ? Uint32Array : Uint16Array )( indexCount ) , 1 );\r\n\tvar vertices = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\r\n\tvar normals = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );\r\n\tvar uvs = new THREE.BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );\r\n\r\n\t// helper variables\r\n\tvar i, j, index = 0, indexOffset = 0;\r\n\r\n\tvar vertex = new THREE.Vector3();\r\n\tvar normal = new THREE.Vector3();\r\n\tvar uv = new THREE.Vector2();\r\n\r\n\tvar P1 = new THREE.Vector3();\r\n\tvar P2 = new THREE.Vector3();\r\n\r\n\tvar B = new THREE.Vector3();\r\n\tvar T = new THREE.Vector3();\r\n\tvar N = new THREE.Vector3();\r\n\r\n\t// generate vertices, normals and uvs\r\n\r\n\tfor ( i = 0; i <= tubularSegments; ++ i ) {\r\n\r\n\t\t// the radian \"u\" is used to calculate the position on the torus curve of the current tubular segement\r\n\r\n\t\tvar u = i / tubularSegments * p * Math.PI * 2;\r\n\r\n\t\t// now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.\r\n\t\t// these points are used to create a special \"coordinate space\", which is necessary to calculate the correct vertex positions\r\n\r\n\t\tcalculatePositionOnCurve( u, p, q, radius, P1 );\r\n\t\tcalculatePositionOnCurve( u + 0.01, p, q, radius, P2 );\r\n\r\n\t\t// calculate orthonormal basis\r\n\r\n\t\tT.subVectors( P2, P1 );\r\n\t\tN.addVectors( P2, P1 );\r\n\t\tB.crossVectors( T, N );\r\n\t\tN.crossVectors( B, T );\r\n\r\n\t\t// normalize B, N. T can be ignored, we don't use it\r\n\r\n\t\tB.normalize();\r\n\t\tN.normalize();\r\n\r\n\t\tfor ( j = 0; j <= radialSegments; ++ j ) {\r\n\r\n\t\t\t// now calculate the vertices. they are nothing more than an extrusion of the torus curve.\r\n\t\t\t// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.\r\n\r\n\t\t\tvar v = j / radialSegments * Math.PI * 2;\r\n\t\t\tvar cx = - tube * Math.cos( v );\r\n\t\t\tvar cy = tube * Math.sin( v );\r\n\r\n\t\t\t// now calculate the final vertex position.\r\n\t\t\t// first we orient the extrusion with our basis vectos, then we add it to the current position on the curve\r\n\r\n\t\t\tvertex.x = P1.x + ( cx * N.x + cy * B.x );\r\n\t\t\tvertex.y = P1.y + ( cx * N.y + cy * B.y );\r\n\t\t\tvertex.z = P1.z + ( cx * N.z + cy * B.z );\r\n\r\n\t\t\t// vertex\r\n\t\t\tvertices.setXYZ( index, vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t\t// normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)\r\n\t\t\tnormal.subVectors( vertex, P1 ).normalize();\r\n\t\t\tnormals.setXYZ( index, normal.x, normal.y, normal.z );\r\n\r\n\t\t\t// uv\r\n\t\t\tuv.x = i / tubularSegments;\r\n\t\t\tuv.y = j / radialSegments;\r\n\t\t\tuvs.setXY( index, uv.x, uv.y );\r\n\r\n\t\t\t// increase index\r\n\t\t\tindex ++;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// generate indices\r\n\r\n\tfor ( j = 1; j <= tubularSegments; j ++ ) {\r\n\r\n\t\tfor ( i = 1; i <= radialSegments; i ++ ) {\r\n\r\n\t\t\t// indices\r\n\t\t\tvar a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );\r\n\t\t\tvar b = ( radialSegments + 1 ) * j + ( i - 1 );\r\n\t\t\tvar c = ( radialSegments + 1 ) * j + i;\r\n\t\t\tvar d = ( radialSegments + 1 ) * ( j - 1 ) + i;\r\n\r\n\t\t\t// face one\r\n\t\t\tindices.setX( indexOffset, a ); indexOffset++;\r\n\t\t\tindices.setX( indexOffset, b ); indexOffset++;\r\n\t\t\tindices.setX( indexOffset, d ); indexOffset++;\r\n\r\n\t\t\t// face two\r\n\t\t\tindices.setX( indexOffset, b ); indexOffset++;\r\n\t\t\tindices.setX( indexOffset, c ); indexOffset++;\r\n\t\t\tindices.setX( indexOffset, d ); indexOffset++;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// build geometry\r\n\r\n\tthis.setIndex( indices );\r\n\tthis.addAttribute( 'position', vertices );\r\n\tthis.addAttribute( 'normal', normals );\r\n\tthis.addAttribute( 'uv', uvs );\r\n\r\n\t// this function calculates the current position on the torus curve\r\n\r\n\tfunction calculatePositionOnCurve( u, p, q, radius, position ) {\r\n\r\n\t\tvar cu = Math.cos( u );\r\n\t\tvar su = Math.sin( u );\r\n\t\tvar quOverP = q / p * u;\r\n\t\tvar cs = Math.cos( quOverP );\r\n\r\n\t\tposition.x = radius * ( 2 + cs ) * 0.5 * cu;\r\n\t\tposition.y = radius * ( 2 + cs ) * su * 0.5;\r\n\t\tposition.z = radius * Math.sin( quOverP ) * 0.5;\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.TorusKnotBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\r\nTHREE.TorusKnotBufferGeometry.prototype.constructor = THREE.TorusKnotBufferGeometry;\r\n\r\n// File:src/extras/geometries/TorusKnotGeometry.js\r\n\r\n/**\r\n * @author oosmoxiecode\r\n */\r\n\r\nTHREE.TorusKnotGeometry = function ( radius, tube, tubularSegments, radialSegments, p, q, heightScale ) {\r\n\r\n\tTHREE.Geometry.call( this );\r\n\r\n\tthis.type = 'TorusKnotGeometry';\r\n\r\n\tthis.parameters = {\r\n\t\tradius: radius,\r\n\t\ttube: tube,\r\n\t\ttubularSegments: tubularSegments,\r\n\t\tradialSegments: radialSegments,\r\n\t\tp: p,\r\n\t\tq: q\r\n\t};\r\n\r\n\tif( heightScale !== undefined ) console.warn( 'THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.' );\r\n\r\n\tthis.fromBufferGeometry( new THREE.TorusKnotBufferGeometry( radius, tube, tubularSegments, radialSegments, p, q ) );\r\n\tthis.mergeVertices();\r\n\r\n};\r\n\r\nTHREE.TorusKnotGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\nTHREE.TorusKnotGeometry.prototype.constructor = THREE.TorusKnotGeometry;\r\n\r\n// File:src/extras/geometries/TubeGeometry.js\r\n\r\n/**\r\n * @author WestLangley / https://github.com/WestLangley\r\n * @author zz85 / https://github.com/zz85\r\n * @author miningold / https://github.com/miningold\r\n * @author jonobr1 / https://github.com/jonobr1\r\n *\r\n * Modified from the TorusKnotGeometry by @oosmoxiecode\r\n *\r\n * Creates a tube which extrudes along a 3d spline\r\n *\r\n * Uses parallel transport frames as described in\r\n * http://www.cs.indiana.edu/pub/techreports/TR425.pdf\r\n */\r\n\r\nTHREE.TubeGeometry = function ( path, segments, radius, radialSegments, closed, taper ) {\r\n\r\n\tTHREE.Geometry.call( this );\r\n\r\n\tthis.type = 'TubeGeometry';\r\n\r\n\tthis.parameters = {\r\n\t\tpath: path,\r\n\t\tsegments: segments,\r\n\t\tradius: radius,\r\n\t\tradialSegments: radialSegments,\r\n\t\tclosed: closed,\r\n\t\ttaper: taper\r\n\t};\r\n\r\n\tsegments = segments || 64;\r\n\tradius = radius || 1;\r\n\tradialSegments = radialSegments || 8;\r\n\tclosed = closed || false;\r\n\ttaper = taper || THREE.TubeGeometry.NoTaper;\r\n\r\n\tvar grid = [];\r\n\r\n\tvar scope = this,\r\n\r\n\t\ttangent,\r\n\t\tnormal,\r\n\t\tbinormal,\r\n\r\n\t\tnumpoints = segments + 1,\r\n\r\n\t\tu, v, r,\r\n\r\n\t\tcx, cy,\r\n\t\tpos, pos2 = new THREE.Vector3(),\r\n\t\ti, j,\r\n\t\tip, jp,\r\n\t\ta, b, c, d,\r\n\t\tuva, uvb, uvc, uvd;\r\n\r\n\tvar frames = new THREE.TubeGeometry.FrenetFrames( path, segments, closed ),\r\n\t\ttangents = frames.tangents,\r\n\t\tnormals = frames.normals,\r\n\t\tbinormals = frames.binormals;\r\n\r\n\t// proxy internals\r\n\tthis.tangents = tangents;\r\n\tthis.normals = normals;\r\n\tthis.binormals = binormals;\r\n\r\n\tfunction vert( x, y, z ) {\r\n\r\n\t\treturn scope.vertices.push( new THREE.Vector3( x, y, z ) ) - 1;\r\n\r\n\t}\r\n\r\n\t// construct the grid\r\n\r\n\tfor ( i = 0; i < numpoints; i ++ ) {\r\n\r\n\t\tgrid[ i ] = [];\r\n\r\n\t\tu = i / ( numpoints - 1 );\r\n\r\n\t\tpos = path.getPointAt( u );\r\n\r\n\t\ttangent = tangents[ i ];\r\n\t\tnormal = normals[ i ];\r\n\t\tbinormal = binormals[ i ];\r\n\r\n\t\tr = radius * taper( u );\r\n\r\n\t\tfor ( j = 0; j < radialSegments; j ++ ) {\r\n\r\n\t\t\tv = j / radialSegments * 2 * Math.PI;\r\n\r\n\t\t\tcx = - r * Math.cos( v ); // TODO: Hack: Negating it so it faces outside.\r\n\t\t\tcy = r * Math.sin( v );\r\n\r\n\t\t\tpos2.copy( pos );\r\n\t\t\tpos2.x += cx * normal.x + cy * binormal.x;\r\n\t\t\tpos2.y += cx * normal.y + cy * binormal.y;\r\n\t\t\tpos2.z += cx * normal.z + cy * binormal.z;\r\n\r\n\t\t\tgrid[ i ][ j ] = vert( pos2.x, pos2.y, pos2.z );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n\t// construct the mesh\r\n\r\n\tfor ( i = 0; i < segments; i ++ ) {\r\n\r\n\t\tfor ( j = 0; j < radialSegments; j ++ ) {\r\n\r\n\t\t\tip = ( closed ) ? ( i + 1 ) % segments : i + 1;\r\n\t\t\tjp = ( j + 1 ) % radialSegments;\r\n\r\n\t\t\ta = grid[ i ][ j ];\t\t// *** NOT NECESSARILY PLANAR ! ***\r\n\t\t\tb = grid[ ip ][ j ];\r\n\t\t\tc = grid[ ip ][ jp ];\r\n\t\t\td = grid[ i ][ jp ];\r\n\r\n\t\t\tuva = new THREE.Vector2( i / segments, j / radialSegments );\r\n\t\t\tuvb = new THREE.Vector2( ( i + 1 ) / segments, j / radialSegments );\r\n\t\t\tuvc = new THREE.Vector2( ( i + 1 ) / segments, ( j + 1 ) / radialSegments );\r\n\t\t\tuvd = new THREE.Vector2( i / segments, ( j + 1 ) / radialSegments );\r\n\r\n\t\t\tthis.faces.push( new THREE.Face3( a, b, d ) );\r\n\t\t\tthis.faceVertexUvs[ 0 ].push( [ uva, uvb, uvd ] );\r\n\r\n\t\t\tthis.faces.push( new THREE.Face3( b, c, d ) );\r\n\t\t\tthis.faceVertexUvs[ 0 ].push( [ uvb.clone(), uvc, uvd.clone() ] );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tthis.computeFaceNormals();\r\n\tthis.computeVertexNormals();\r\n\r\n};\r\n\r\nTHREE.TubeGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\nTHREE.TubeGeometry.prototype.constructor = THREE.TubeGeometry;\r\n\r\nTHREE.TubeGeometry.NoTaper = function ( u ) {\r\n\r\n\treturn 1;\r\n\r\n};\r\n\r\nTHREE.TubeGeometry.SinusoidalTaper = function ( u ) {\r\n\r\n\treturn Math.sin( Math.PI * u );\r\n\r\n};\r\n\r\n// For computing of Frenet frames, exposing the tangents, normals and binormals the spline\r\nTHREE.TubeGeometry.FrenetFrames = function ( path, segments, closed ) {\r\n\r\n\tvar\tnormal = new THREE.Vector3(),\r\n\r\n\t\ttangents = [],\r\n\t\tnormals = [],\r\n\t\tbinormals = [],\r\n\r\n\t\tvec = new THREE.Vector3(),\r\n\t\tmat = new THREE.Matrix4(),\r\n\r\n\t\tnumpoints = segments + 1,\r\n\t\ttheta,\r\n\t\tsmallest,\r\n\r\n\t\ttx, ty, tz,\r\n\t\ti, u;\r\n\r\n\r\n\t// expose internals\r\n\tthis.tangents = tangents;\r\n\tthis.normals = normals;\r\n\tthis.binormals = binormals;\r\n\r\n\t// compute the tangent vectors for each segment on the path\r\n\r\n\tfor ( i = 0; i < numpoints; i ++ ) {\r\n\r\n\t\tu = i / ( numpoints - 1 );\r\n\r\n\t\ttangents[ i ] = path.getTangentAt( u );\r\n\t\ttangents[ i ].normalize();\r\n\r\n\t}\r\n\r\n\tinitialNormal3();\r\n\r\n\t/*\r\n\tfunction initialNormal1(lastBinormal) {\r\n\t\t// fixed start binormal. Has dangers of 0 vectors\r\n\t\tnormals[ 0 ] = new THREE.Vector3();\r\n\t\tbinormals[ 0 ] = new THREE.Vector3();\r\n\t\tif (lastBinormal===undefined) lastBinormal = new THREE.Vector3( 0, 0, 1 );\r\n\t\tnormals[ 0 ].crossVectors( lastBinormal, tangents[ 0 ] ).normalize();\r\n\t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] ).normalize();\r\n\t}\r\n\r\n\tfunction initialNormal2() {\r\n\r\n\t\t// This uses the Frenet-Serret formula for deriving binormal\r\n\t\tvar t2 = path.getTangentAt( epsilon );\r\n\r\n\t\tnormals[ 0 ] = new THREE.Vector3().subVectors( t2, tangents[ 0 ] ).normalize();\r\n\t\tbinormals[ 0 ] = new THREE.Vector3().crossVectors( tangents[ 0 ], normals[ 0 ] );\r\n\r\n\t\tnormals[ 0 ].crossVectors( binormals[ 0 ], tangents[ 0 ] ).normalize(); // last binormal x tangent\r\n\t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] ).normalize();\r\n\r\n\t}\r\n\t*/\r\n\r\n\tfunction initialNormal3() {\r\n\r\n\t\t// select an initial normal vector perpendicular to the first tangent vector,\r\n\t\t// and in the direction of the smallest tangent xyz component\r\n\r\n\t\tnormals[ 0 ] = new THREE.Vector3();\r\n\t\tbinormals[ 0 ] = new THREE.Vector3();\r\n\t\tsmallest = Number.MAX_VALUE;\r\n\t\ttx = Math.abs( tangents[ 0 ].x );\r\n\t\tty = Math.abs( tangents[ 0 ].y );\r\n\t\ttz = Math.abs( tangents[ 0 ].z );\r\n\r\n\t\tif ( tx <= smallest ) {\r\n\r\n\t\t\tsmallest = tx;\r\n\t\t\tnormal.set( 1, 0, 0 );\r\n\r\n\t\t}\r\n\r\n\t\tif ( ty <= smallest ) {\r\n\r\n\t\t\tsmallest = ty;\r\n\t\t\tnormal.set( 0, 1, 0 );\r\n\r\n\t\t}\r\n\r\n\t\tif ( tz <= smallest ) {\r\n\r\n\t\t\tnormal.set( 0, 0, 1 );\r\n\r\n\t\t}\r\n\r\n\t\tvec.crossVectors( tangents[ 0 ], normal ).normalize();\r\n\r\n\t\tnormals[ 0 ].crossVectors( tangents[ 0 ], vec );\r\n\t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );\r\n\r\n\t}\r\n\r\n\r\n\t// compute the slowly-varying normal and binormal vectors for each segment on the path\r\n\r\n\tfor ( i = 1; i < numpoints; i ++ ) {\r\n\r\n\t\tnormals[ i ] = normals[ i - 1 ].clone();\r\n\r\n\t\tbinormals[ i ] = binormals[ i - 1 ].clone();\r\n\r\n\t\tvec.crossVectors( tangents[ i - 1 ], tangents[ i ] );\r\n\r\n\t\tif ( vec.length() > Number.EPSILON ) {\r\n\r\n\t\t\tvec.normalize();\r\n\r\n\t\t\ttheta = Math.acos( THREE.Math.clamp( tangents[ i - 1 ].dot( tangents[ i ] ), - 1, 1 ) ); // clamp for floating pt errors\r\n\r\n\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );\r\n\r\n\t\t}\r\n\r\n\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\r\n\r\n\t}\r\n\r\n\r\n\t// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same\r\n\r\n\tif ( closed ) {\r\n\r\n\t\ttheta = Math.acos( THREE.Math.clamp( normals[ 0 ].dot( normals[ numpoints - 1 ] ), - 1, 1 ) );\r\n\t\ttheta /= ( numpoints - 1 );\r\n\r\n\t\tif ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ numpoints - 1 ] ) ) > 0 ) {\r\n\r\n\t\t\ttheta = - theta;\r\n\r\n\t\t}\r\n\r\n\t\tfor ( i = 1; i < numpoints; i ++ ) {\r\n\r\n\t\t\t// twist a little...\r\n\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );\r\n\t\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n\r\n// File:src/extras/geometries/PolyhedronGeometry.js\r\n\r\n/**\r\n * @author clockworkgeek / https://github.com/clockworkgeek\r\n * @author timothypratley / https://github.com/timothypratley\r\n * @author WestLangley / http://github.com/WestLangley\r\n*/\r\n\r\nTHREE.PolyhedronGeometry = function ( vertices, indices, radius, detail ) {\r\n\r\n\tTHREE.Geometry.call( this );\r\n\r\n\tthis.type = 'PolyhedronGeometry';\r\n\r\n\tthis.parameters = {\r\n\t\tvertices: vertices,\r\n\t\tindices: indices,\r\n\t\tradius: radius,\r\n\t\tdetail: detail\r\n\t};\r\n\r\n\tradius = radius || 1;\r\n\tdetail = detail || 0;\r\n\r\n\tvar that = this;\r\n\r\n\tfor ( var i = 0, l = vertices.length; i < l; i += 3 ) {\r\n\r\n\t\tprepare( new THREE.Vector3( vertices[ i ], vertices[ i + 1 ], vertices[ i + 2 ] ) );\r\n\r\n\t}\r\n\r\n\tvar p = this.vertices;\r\n\r\n\tvar faces = [];\r\n\r\n\tfor ( var i = 0, j = 0, l = indices.length; i < l; i += 3, j ++ ) {\r\n\r\n\t\tvar v1 = p[ indices[ i ] ];\r\n\t\tvar v2 = p[ indices[ i + 1 ] ];\r\n\t\tvar v3 = p[ indices[ i + 2 ] ];\r\n\r\n\t\tfaces[ j ] = new THREE.Face3( v1.index, v2.index, v3.index, [ v1.clone(), v2.clone(), v3.clone() ], undefined, j );\r\n\r\n\t}\r\n\r\n\tvar centroid = new THREE.Vector3();\r\n\r\n\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\r\n\r\n\t\tsubdivide( faces[ i ], detail );\r\n\r\n\t}\r\n\r\n\r\n\t// Handle case when face straddles the seam\r\n\r\n\tfor ( var i = 0, l = this.faceVertexUvs[ 0 ].length; i < l; i ++ ) {\r\n\r\n\t\tvar uvs = this.faceVertexUvs[ 0 ][ i ];\r\n\r\n\t\tvar x0 = uvs[ 0 ].x;\r\n\t\tvar x1 = uvs[ 1 ].x;\r\n\t\tvar x2 = uvs[ 2 ].x;\r\n\r\n\t\tvar max = Math.max( x0, x1, x2 );\r\n\t\tvar min = Math.min( x0, x1, x2 );\r\n\r\n\t\tif ( max > 0.9 && min < 0.1 ) {\r\n\r\n\t\t\t// 0.9 is somewhat arbitrary\r\n\r\n\t\t\tif ( x0 < 0.2 ) uvs[ 0 ].x += 1;\r\n\t\t\tif ( x1 < 0.2 ) uvs[ 1 ].x += 1;\r\n\t\t\tif ( x2 < 0.2 ) uvs[ 2 ].x += 1;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n\t// Apply radius\r\n\r\n\tfor ( var i = 0, l = this.vertices.length; i < l; i ++ ) {\r\n\r\n\t\tthis.vertices[ i ].multiplyScalar( radius );\r\n\r\n\t}\r\n\r\n\r\n\t// Merge vertices\r\n\r\n\tthis.mergeVertices();\r\n\r\n\tthis.computeFaceNormals();\r\n\r\n\tthis.boundingSphere = new THREE.Sphere( new THREE.Vector3(), radius );\r\n\r\n\r\n\t// Project vector onto sphere's surface\r\n\r\n\tfunction prepare( vector ) {\r\n\r\n\t\tvar vertex = vector.normalize().clone();\r\n\t\tvertex.index = that.vertices.push( vertex ) - 1;\r\n\r\n\t\t// Texture coords are equivalent to map coords, calculate angle and convert to fraction of a circle.\r\n\r\n\t\tvar u = azimuth( vector ) / 2 / Math.PI + 0.5;\r\n\t\tvar v = inclination( vector ) / Math.PI + 0.5;\r\n\t\tvertex.uv = new THREE.Vector2( u, 1 - v );\r\n\r\n\t\treturn vertex;\r\n\r\n\t}\r\n\r\n\r\n\t// Approximate a curved face with recursively sub-divided triangles.\r\n\r\n\tfunction make( v1, v2, v3, materialIndex ) {\r\n\r\n\t\tvar face = new THREE.Face3( v1.index, v2.index, v3.index, [ v1.clone(), v2.clone(), v3.clone() ], undefined, materialIndex );\r\n\t\tthat.faces.push( face );\r\n\r\n\t\tcentroid.copy( v1 ).add( v2 ).add( v3 ).divideScalar( 3 );\r\n\r\n\t\tvar azi = azimuth( centroid );\r\n\r\n\t\tthat.faceVertexUvs[ 0 ].push( [\r\n\t\t\tcorrectUV( v1.uv, v1, azi ),\r\n\t\t\tcorrectUV( v2.uv, v2, azi ),\r\n\t\t\tcorrectUV( v3.uv, v3, azi )\r\n\t\t] );\r\n\r\n\t}\r\n\r\n\r\n\t// Analytically subdivide a face to the required detail level.\r\n\r\n\tfunction subdivide( face, detail ) {\r\n\r\n\t\tvar cols = Math.pow( 2, detail );\r\n\t\tvar a = prepare( that.vertices[ face.a ] );\r\n\t\tvar b = prepare( that.vertices[ face.b ] );\r\n\t\tvar c = prepare( that.vertices[ face.c ] );\r\n\t\tvar v = [];\r\n\r\n\t\tvar materialIndex = face.materialIndex;\r\n\r\n\t\t// Construct all of the vertices for this subdivision.\r\n\r\n\t\tfor ( var i = 0 ; i <= cols; i ++ ) {\r\n\r\n\t\t\tv[ i ] = [];\r\n\r\n\t\t\tvar aj = prepare( a.clone().lerp( c, i / cols ) );\r\n\t\t\tvar bj = prepare( b.clone().lerp( c, i / cols ) );\r\n\t\t\tvar rows = cols - i;\r\n\r\n\t\t\tfor ( var j = 0; j <= rows; j ++ ) {\r\n\r\n\t\t\t\tif ( j === 0 && i === cols ) {\r\n\r\n\t\t\t\t\tv[ i ][ j ] = aj;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tv[ i ][ j ] = prepare( aj.clone().lerp( bj, j / rows ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// Construct all of the faces.\r\n\r\n\t\tfor ( var i = 0; i < cols ; i ++ ) {\r\n\r\n\t\t\tfor ( var j = 0; j < 2 * ( cols - i ) - 1; j ++ ) {\r\n\r\n\t\t\t\tvar k = Math.floor( j / 2 );\r\n\r\n\t\t\t\tif ( j % 2 === 0 ) {\r\n\r\n\t\t\t\t\tmake(\r\n\t\t\t\t\t\tv[ i ][ k + 1 ],\r\n\t\t\t\t\t\tv[ i + 1 ][ k ],\r\n\t\t\t\t\t\tv[ i ][ k ],\r\n\t\t\t\t\t\tmaterialIndex\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tmake(\r\n\t\t\t\t\t\tv[ i ][ k + 1 ],\r\n\t\t\t\t\t\tv[ i + 1 ][ k + 1 ],\r\n\t\t\t\t\t\tv[ i + 1 ][ k ],\r\n\t\t\t\t\t\tmaterialIndex\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\r\n\t// Angle around the Y axis, counter-clockwise when looking from above.\r\n\r\n\tfunction azimuth( vector ) {\r\n\r\n\t\treturn Math.atan2( vector.z, - vector.x );\r\n\r\n\t}\r\n\r\n\r\n\t// Angle above the XZ plane.\r\n\r\n\tfunction inclination( vector ) {\r\n\r\n\t\treturn Math.atan2( - vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );\r\n\r\n\t}\r\n\r\n\r\n\t// Texture fixing helper. Spheres have some odd behaviours.\r\n\r\n\tfunction correctUV( uv, vector, azimuth ) {\r\n\r\n\t\tif ( ( azimuth < 0 ) && ( uv.x === 1 ) ) uv = new THREE.Vector2( uv.x - 1, uv.y );\r\n\t\tif ( ( vector.x === 0 ) && ( vector.z === 0 ) ) uv = new THREE.Vector2( azimuth / 2 / Math.PI + 0.5, uv.y );\r\n\t\treturn uv.clone();\r\n\r\n\t}\r\n\r\n\r\n};\r\n\r\nTHREE.PolyhedronGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\nTHREE.PolyhedronGeometry.prototype.constructor = THREE.PolyhedronGeometry;\r\n\r\n// File:src/extras/geometries/DodecahedronGeometry.js\r\n\r\n/**\r\n * @author Abe Pazos / https://hamoid.com\r\n */\r\n\r\nTHREE.DodecahedronGeometry = function ( radius, detail ) {\r\n\r\n\tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\r\n\tvar r = 1 / t;\r\n\r\n\tvar vertices = [\r\n\r\n\t\t// (±1, ±1, ±1)\r\n\t\t- 1, - 1, - 1,    - 1, - 1,  1,\r\n\t\t- 1,  1, - 1,    - 1,  1,  1,\r\n\t\t 1, - 1, - 1,     1, - 1,  1,\r\n\t\t 1,  1, - 1,     1,  1,  1,\r\n\r\n\t\t// (0, ±1/φ, ±φ)\r\n\t\t 0, - r, - t,     0, - r,  t,\r\n\t\t 0,  r, - t,     0,  r,  t,\r\n\r\n\t\t// (±1/φ, ±φ, 0)\r\n\t\t- r, - t,  0,    - r,  t,  0,\r\n\t\t r, - t,  0,     r,  t,  0,\r\n\r\n\t\t// (±φ, 0, ±1/φ)\r\n\t\t- t,  0, - r,     t,  0, - r,\r\n\t\t- t,  0,  r,     t,  0,  r\r\n\t];\r\n\r\n\tvar indices = [\r\n\t\t 3, 11,  7,      3,  7, 15,      3, 15, 13,\r\n\t\t 7, 19, 17,      7, 17,  6,      7,  6, 15,\r\n\t\t17,  4,  8,     17,  8, 10,     17, 10,  6,\r\n\t\t 8,  0, 16,      8, 16,  2,      8,  2, 10,\r\n\t\t 0, 12,  1,      0,  1, 18,      0, 18, 16,\r\n\t\t 6, 10,  2,      6,  2, 13,      6, 13, 15,\r\n\t\t 2, 16, 18,      2, 18,  3,      2,  3, 13,\r\n\t\t18,  1,  9,     18,  9, 11,     18, 11,  3,\r\n\t\t 4, 14, 12,      4, 12,  0,      4,  0,  8,\r\n\t\t11,  9,  5,     11,  5, 19,     11, 19,  7,\r\n\t\t19,  5, 14,     19, 14,  4,     19,  4, 17,\r\n\t\t 1, 12, 14,      1, 14,  5,      1,  5,  9\r\n\t];\r\n\r\n\tTHREE.PolyhedronGeometry.call( this, vertices, indices, radius, detail );\r\n\r\n\tthis.type = 'DodecahedronGeometry';\r\n\r\n\tthis.parameters = {\r\n\t\tradius: radius,\r\n\t\tdetail: detail\r\n\t};\r\n\r\n};\r\n\r\nTHREE.DodecahedronGeometry.prototype = Object.create( THREE.PolyhedronGeometry.prototype );\r\nTHREE.DodecahedronGeometry.prototype.constructor = THREE.DodecahedronGeometry;\r\n\r\n// File:src/extras/geometries/IcosahedronGeometry.js\r\n\r\n/**\r\n * @author timothypratley / https://github.com/timothypratley\r\n */\r\n\r\nTHREE.IcosahedronGeometry = function ( radius, detail ) {\r\n\r\n\tvar t = ( 1 + Math.sqrt( 5 ) ) / 2;\r\n\r\n\tvar vertices = [\r\n\t\t- 1,  t,  0,    1,  t,  0,   - 1, - t,  0,    1, - t,  0,\r\n\t\t 0, - 1,  t,    0,  1,  t,    0, - 1, - t,    0,  1, - t,\r\n\t\t t,  0, - 1,    t,  0,  1,   - t,  0, - 1,   - t,  0,  1\r\n\t];\r\n\r\n\tvar indices = [\r\n\t\t 0, 11,  5,    0,  5,  1,    0,  1,  7,    0,  7, 10,    0, 10, 11,\r\n\t\t 1,  5,  9,    5, 11,  4,   11, 10,  2,   10,  7,  6,    7,  1,  8,\r\n\t\t 3,  9,  4,    3,  4,  2,    3,  2,  6,    3,  6,  8,    3,  8,  9,\r\n\t\t 4,  9,  5,    2,  4, 11,    6,  2, 10,    8,  6,  7,    9,  8,  1\r\n\t];\r\n\r\n\tTHREE.PolyhedronGeometry.call( this, vertices, indices, radius, detail );\r\n\r\n\tthis.type = 'IcosahedronGeometry';\r\n\r\n\tthis.parameters = {\r\n\t\tradius: radius,\r\n\t\tdetail: detail\r\n\t};\r\n\r\n};\r\n\r\nTHREE.IcosahedronGeometry.prototype = Object.create( THREE.PolyhedronGeometry.prototype );\r\nTHREE.IcosahedronGeometry.prototype.constructor = THREE.IcosahedronGeometry;\r\n\r\n// File:src/extras/geometries/OctahedronGeometry.js\r\n\r\n/**\r\n * @author timothypratley / https://github.com/timothypratley\r\n */\r\n\r\nTHREE.OctahedronGeometry = function ( radius, detail ) {\r\n\r\n\tvar vertices = [\r\n\t\t1, 0, 0,   - 1, 0, 0,    0, 1, 0,    0, - 1, 0,    0, 0, 1,    0, 0, - 1\r\n\t];\r\n\r\n\tvar indices = [\r\n\t\t0, 2, 4,    0, 4, 3,    0, 3, 5,    0, 5, 2,    1, 2, 5,    1, 5, 3,    1, 3, 4,    1, 4, 2\r\n\t];\r\n\r\n\tTHREE.PolyhedronGeometry.call( this, vertices, indices, radius, detail );\r\n\r\n\tthis.type = 'OctahedronGeometry';\r\n\r\n\tthis.parameters = {\r\n\t\tradius: radius,\r\n\t\tdetail: detail\r\n\t};\r\n\r\n};\r\n\r\nTHREE.OctahedronGeometry.prototype = Object.create( THREE.PolyhedronGeometry.prototype );\r\nTHREE.OctahedronGeometry.prototype.constructor = THREE.OctahedronGeometry;\r\n\r\n// File:src/extras/geometries/TetrahedronGeometry.js\r\n\r\n/**\r\n * @author timothypratley / https://github.com/timothypratley\r\n */\r\n\r\nTHREE.TetrahedronGeometry = function ( radius, detail ) {\r\n\r\n\tvar vertices = [\r\n\t\t 1,  1,  1,   - 1, - 1,  1,   - 1,  1, - 1,    1, - 1, - 1\r\n\t];\r\n\r\n\tvar indices = [\r\n\t\t 2,  1,  0,    0,  3,  2,    1,  3,  0,    2,  3,  1\r\n\t];\r\n\r\n\tTHREE.PolyhedronGeometry.call( this, vertices, indices, radius, detail );\r\n\r\n\tthis.type = 'TetrahedronGeometry';\r\n\r\n\tthis.parameters = {\r\n\t\tradius: radius,\r\n\t\tdetail: detail\r\n\t};\r\n\r\n};\r\n\r\nTHREE.TetrahedronGeometry.prototype = Object.create( THREE.PolyhedronGeometry.prototype );\r\nTHREE.TetrahedronGeometry.prototype.constructor = THREE.TetrahedronGeometry;\r\n\r\n// File:src/extras/geometries/ParametricGeometry.js\r\n\r\n/**\r\n * @author zz85 / https://github.com/zz85\r\n * Parametric Surfaces Geometry\r\n * based on the brilliant article by @prideout http://prideout.net/blog/?p=44\r\n *\r\n * new THREE.ParametricGeometry( parametricFunction, uSegments, ySegements );\r\n *\r\n */\r\n\r\nTHREE.ParametricGeometry = function ( func, slices, stacks ) {\r\n\r\n\tTHREE.Geometry.call( this );\r\n\r\n\tthis.type = 'ParametricGeometry';\r\n\r\n\tthis.parameters = {\r\n\t\tfunc: func,\r\n\t\tslices: slices,\r\n\t\tstacks: stacks\r\n\t};\r\n\r\n\tvar verts = this.vertices;\r\n\tvar faces = this.faces;\r\n\tvar uvs = this.faceVertexUvs[ 0 ];\r\n\r\n\tvar i, j, p;\r\n\tvar u, v;\r\n\r\n\tvar sliceCount = slices + 1;\r\n\r\n\tfor ( i = 0; i <= stacks; i ++ ) {\r\n\r\n\t\tv = i / stacks;\r\n\r\n\t\tfor ( j = 0; j <= slices; j ++ ) {\r\n\r\n\t\t\tu = j / slices;\r\n\r\n\t\t\tp = func( u, v );\r\n\t\t\tverts.push( p );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tvar a, b, c, d;\r\n\tvar uva, uvb, uvc, uvd;\r\n\r\n\tfor ( i = 0; i < stacks; i ++ ) {\r\n\r\n\t\tfor ( j = 0; j < slices; j ++ ) {\r\n\r\n\t\t\ta = i * sliceCount + j;\r\n\t\t\tb = i * sliceCount + j + 1;\r\n\t\t\tc = ( i + 1 ) * sliceCount + j + 1;\r\n\t\t\td = ( i + 1 ) * sliceCount + j;\r\n\r\n\t\t\tuva = new THREE.Vector2( j / slices, i / stacks );\r\n\t\t\tuvb = new THREE.Vector2( ( j + 1 ) / slices, i / stacks );\r\n\t\t\tuvc = new THREE.Vector2( ( j + 1 ) / slices, ( i + 1 ) / stacks );\r\n\t\t\tuvd = new THREE.Vector2( j / slices, ( i + 1 ) / stacks );\r\n\r\n\t\t\tfaces.push( new THREE.Face3( a, b, d ) );\r\n\t\t\tuvs.push( [ uva, uvb, uvd ] );\r\n\r\n\t\t\tfaces.push( new THREE.Face3( b, c, d ) );\r\n\t\t\tuvs.push( [ uvb.clone(), uvc, uvd.clone() ] );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// console.log(this);\r\n\r\n\t// magic bullet\r\n\t// var diff = this.mergeVertices();\r\n\t// console.log('removed ', diff, ' vertices by merging');\r\n\r\n\tthis.computeFaceNormals();\r\n\tthis.computeVertexNormals();\r\n\r\n};\r\n\r\nTHREE.ParametricGeometry.prototype = Object.create( THREE.Geometry.prototype );\r\nTHREE.ParametricGeometry.prototype.constructor = THREE.ParametricGeometry;\r\n\r\n// File:src/extras/geometries/WireframeGeometry.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.WireframeGeometry = function ( geometry ) {\r\n\r\n\tTHREE.BufferGeometry.call( this );\r\n\r\n\tvar edge = [ 0, 0 ], hash = {};\r\n\r\n\tfunction sortFunction( a, b ) {\r\n\r\n\t\treturn a - b;\r\n\r\n\t}\r\n\r\n\tvar keys = [ 'a', 'b', 'c' ];\r\n\r\n\tif ( geometry instanceof THREE.Geometry ) {\r\n\r\n\t\tvar vertices = geometry.vertices;\r\n\t\tvar faces = geometry.faces;\r\n\t\tvar numEdges = 0;\r\n\r\n\t\t// allocate maximal size\r\n\t\tvar edges = new Uint32Array( 6 * faces.length );\r\n\r\n\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar face = faces[ i ];\r\n\r\n\t\t\tfor ( var j = 0; j < 3; j ++ ) {\r\n\r\n\t\t\t\tedge[ 0 ] = face[ keys[ j ] ];\r\n\t\t\t\tedge[ 1 ] = face[ keys[ ( j + 1 ) % 3 ] ];\r\n\t\t\t\tedge.sort( sortFunction );\r\n\r\n\t\t\t\tvar key = edge.toString();\r\n\r\n\t\t\t\tif ( hash[ key ] === undefined ) {\r\n\r\n\t\t\t\t\tedges[ 2 * numEdges ] = edge[ 0 ];\r\n\t\t\t\t\tedges[ 2 * numEdges + 1 ] = edge[ 1 ];\r\n\t\t\t\t\thash[ key ] = true;\r\n\t\t\t\t\tnumEdges ++;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tvar coords = new Float32Array( numEdges * 2 * 3 );\r\n\r\n\t\tfor ( var i = 0, l = numEdges; i < l; i ++ ) {\r\n\r\n\t\t\tfor ( var j = 0; j < 2; j ++ ) {\r\n\r\n\t\t\t\tvar vertex = vertices[ edges [ 2 * i + j ] ];\r\n\r\n\t\t\t\tvar index = 6 * i + 3 * j;\r\n\t\t\t\tcoords[ index + 0 ] = vertex.x;\r\n\t\t\t\tcoords[ index + 1 ] = vertex.y;\r\n\t\t\t\tcoords[ index + 2 ] = vertex.z;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis.addAttribute( 'position', new THREE.BufferAttribute( coords, 3 ) );\r\n\r\n\t} else if ( geometry instanceof THREE.BufferGeometry ) {\r\n\r\n\t\tif ( geometry.index !== null ) {\r\n\r\n\t\t\t// Indexed BufferGeometry\r\n\r\n\t\t\tvar indices = geometry.index.array;\r\n\t\t\tvar vertices = geometry.attributes.position;\r\n\t\t\tvar groups = geometry.groups;\r\n\t\t\tvar numEdges = 0;\r\n\r\n\t\t\tif ( groups.length === 0 ) {\r\n\r\n\t\t\t\tgeometry.addGroup( 0, indices.length );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// allocate maximal size\r\n\t\t\tvar edges = new Uint32Array( 2 * indices.length );\r\n\r\n\t\t\tfor ( var o = 0, ol = groups.length; o < ol; ++ o ) {\r\n\r\n\t\t\t\tvar group = groups[ o ];\r\n\r\n\t\t\t\tvar start = group.start;\r\n\t\t\t\tvar count = group.count;\r\n\r\n\t\t\t\tfor ( var i = start, il = start + count; i < il; i += 3 ) {\r\n\r\n\t\t\t\t\tfor ( var j = 0; j < 3; j ++ ) {\r\n\r\n\t\t\t\t\t\tedge[ 0 ] = indices[ i + j ];\r\n\t\t\t\t\t\tedge[ 1 ] = indices[ i + ( j + 1 ) % 3 ];\r\n\t\t\t\t\t\tedge.sort( sortFunction );\r\n\r\n\t\t\t\t\t\tvar key = edge.toString();\r\n\r\n\t\t\t\t\t\tif ( hash[ key ] === undefined ) {\r\n\r\n\t\t\t\t\t\t\tedges[ 2 * numEdges ] = edge[ 0 ];\r\n\t\t\t\t\t\t\tedges[ 2 * numEdges + 1 ] = edge[ 1 ];\r\n\t\t\t\t\t\t\thash[ key ] = true;\r\n\t\t\t\t\t\t\tnumEdges ++;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tvar coords = new Float32Array( numEdges * 2 * 3 );\r\n\r\n\t\t\tfor ( var i = 0, l = numEdges; i < l; i ++ ) {\r\n\r\n\t\t\t\tfor ( var j = 0; j < 2; j ++ ) {\r\n\r\n\t\t\t\t\tvar index = 6 * i + 3 * j;\r\n\t\t\t\t\tvar index2 = edges[ 2 * i + j ];\r\n\r\n\t\t\t\t\tcoords[ index + 0 ] = vertices.getX( index2 );\r\n\t\t\t\t\tcoords[ index + 1 ] = vertices.getY( index2 );\r\n\t\t\t\t\tcoords[ index + 2 ] = vertices.getZ( index2 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.addAttribute( 'position', new THREE.BufferAttribute( coords, 3 ) );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// non-indexed BufferGeometry\r\n\r\n\t\t\tvar vertices = geometry.attributes.position.array;\r\n\t\t\tvar numEdges = vertices.length / 3;\r\n\t\t\tvar numTris = numEdges / 3;\r\n\r\n\t\t\tvar coords = new Float32Array( numEdges * 2 * 3 );\r\n\r\n\t\t\tfor ( var i = 0, l = numTris; i < l; i ++ ) {\r\n\r\n\t\t\t\tfor ( var j = 0; j < 3; j ++ ) {\r\n\r\n\t\t\t\t\tvar index = 18 * i + 6 * j;\r\n\r\n\t\t\t\t\tvar index1 = 9 * i + 3 * j;\r\n\t\t\t\t\tcoords[ index + 0 ] = vertices[ index1 ];\r\n\t\t\t\t\tcoords[ index + 1 ] = vertices[ index1 + 1 ];\r\n\t\t\t\t\tcoords[ index + 2 ] = vertices[ index1 + 2 ];\r\n\r\n\t\t\t\t\tvar index2 = 9 * i + 3 * ( ( j + 1 ) % 3 );\r\n\t\t\t\t\tcoords[ index + 3 ] = vertices[ index2 ];\r\n\t\t\t\t\tcoords[ index + 4 ] = vertices[ index2 + 1 ];\r\n\t\t\t\t\tcoords[ index + 5 ] = vertices[ index2 + 2 ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.addAttribute( 'position', new THREE.BufferAttribute( coords, 3 ) );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.WireframeGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );\r\nTHREE.WireframeGeometry.prototype.constructor = THREE.WireframeGeometry;\r\n\r\n// File:src/extras/helpers/AxisHelper.js\r\n\r\n/**\r\n * @author sroucheray / http://sroucheray.org/\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.AxisHelper = function ( size ) {\r\n\r\n\tsize = size || 1;\r\n\r\n\tvar vertices = new Float32Array( [\r\n\t\t0, 0, 0,  size, 0, 0,\r\n\t\t0, 0, 0,  0, size, 0,\r\n\t\t0, 0, 0,  0, 0, size\r\n\t] );\r\n\r\n\tvar colors = new Float32Array( [\r\n\t\t1, 0, 0,  1, 0.6, 0,\r\n\t\t0, 1, 0,  0.6, 1, 0,\r\n\t\t0, 0, 1,  0, 0.6, 1\r\n\t] );\r\n\r\n\tvar geometry = new THREE.BufferGeometry();\r\n\tgeometry.addAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );\r\n\tgeometry.addAttribute( 'color', new THREE.BufferAttribute( colors, 3 ) );\r\n\r\n\tvar material = new THREE.LineBasicMaterial( { vertexColors: THREE.VertexColors } );\r\n\r\n\tTHREE.LineSegments.call( this, geometry, material );\r\n\r\n};\r\n\r\nTHREE.AxisHelper.prototype = Object.create( THREE.LineSegments.prototype );\r\nTHREE.AxisHelper.prototype.constructor = THREE.AxisHelper;\r\n\r\n// File:src/extras/helpers/ArrowHelper.js\r\n\r\n/**\r\n * @author WestLangley / http://github.com/WestLangley\r\n * @author zz85 / http://github.com/zz85\r\n * @author bhouston / http://clara.io\r\n *\r\n * Creates an arrow for visualizing directions\r\n *\r\n * Parameters:\r\n *  dir - Vector3\r\n *  origin - Vector3\r\n *  length - Number\r\n *  color - color in hex value\r\n *  headLength - Number\r\n *  headWidth - Number\r\n */\r\n\r\nTHREE.ArrowHelper = ( function () {\r\n\r\n\tvar lineGeometry = new THREE.BufferGeometry();\r\n\tlineGeometry.addAttribute( 'position', new THREE.Float32Attribute( [ 0, 0, 0, 0, 1, 0 ], 3 ) );\r\n\r\n\tvar coneGeometry = new THREE.CylinderBufferGeometry( 0, 0.5, 1, 5, 1 );\r\n\tconeGeometry.translate( 0, - 0.5, 0 );\r\n\r\n\treturn function ArrowHelper( dir, origin, length, color, headLength, headWidth ) {\r\n\r\n\t\t// dir is assumed to be normalized\r\n\r\n\t\tTHREE.Object3D.call( this );\r\n\r\n\t\tif ( color === undefined ) color = 0xffff00;\r\n\t\tif ( length === undefined ) length = 1;\r\n\t\tif ( headLength === undefined ) headLength = 0.2 * length;\r\n\t\tif ( headWidth === undefined ) headWidth = 0.2 * headLength;\r\n\r\n\t\tthis.position.copy( origin );\r\n\r\n\t\tthis.line = new THREE.Line( lineGeometry, new THREE.LineBasicMaterial( { color: color } ) );\r\n\t\tthis.line.matrixAutoUpdate = false;\r\n\t\tthis.add( this.line );\r\n\r\n\t\tthis.cone = new THREE.Mesh( coneGeometry, new THREE.MeshBasicMaterial( { color: color } ) );\r\n\t\tthis.cone.matrixAutoUpdate = false;\r\n\t\tthis.add( this.cone );\r\n\r\n\t\tthis.setDirection( dir );\r\n\t\tthis.setLength( length, headLength, headWidth );\r\n\r\n\t};\r\n\r\n}() );\r\n\r\nTHREE.ArrowHelper.prototype = Object.create( THREE.Object3D.prototype );\r\nTHREE.ArrowHelper.prototype.constructor = THREE.ArrowHelper;\r\n\r\nTHREE.ArrowHelper.prototype.setDirection = ( function () {\r\n\r\n\tvar axis = new THREE.Vector3();\r\n\tvar radians;\r\n\r\n\treturn function setDirection( dir ) {\r\n\r\n\t\t// dir is assumed to be normalized\r\n\r\n\t\tif ( dir.y > 0.99999 ) {\r\n\r\n\t\t\tthis.quaternion.set( 0, 0, 0, 1 );\r\n\r\n\t\t} else if ( dir.y < - 0.99999 ) {\r\n\r\n\t\t\tthis.quaternion.set( 1, 0, 0, 0 );\r\n\r\n\t\t} else {\r\n\r\n\t\t\taxis.set( dir.z, 0, - dir.x ).normalize();\r\n\r\n\t\t\tradians = Math.acos( dir.y );\r\n\r\n\t\t\tthis.quaternion.setFromAxisAngle( axis, radians );\r\n\r\n\t\t}\r\n\r\n\t};\r\n\r\n}() );\r\n\r\nTHREE.ArrowHelper.prototype.setLength = function ( length, headLength, headWidth ) {\r\n\r\n\tif ( headLength === undefined ) headLength = 0.2 * length;\r\n\tif ( headWidth === undefined ) headWidth = 0.2 * headLength;\r\n\r\n\tthis.line.scale.set( 1, Math.max( 0, length - headLength ), 1 );\r\n\tthis.line.updateMatrix();\r\n\r\n\tthis.cone.scale.set( headWidth, headLength, headWidth );\r\n\tthis.cone.position.y = length;\r\n\tthis.cone.updateMatrix();\r\n\r\n};\r\n\r\nTHREE.ArrowHelper.prototype.setColor = function ( color ) {\r\n\r\n\tthis.line.material.color.copy( color );\r\n\tthis.cone.material.color.copy( color );\r\n\r\n};\r\n\r\n// File:src/extras/helpers/BoxHelper.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.BoxHelper = function ( object ) {\r\n\r\n\tvar indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );\r\n\tvar positions = new Float32Array( 8 * 3 );\r\n\r\n\tvar geometry = new THREE.BufferGeometry();\r\n\tgeometry.setIndex( new THREE.BufferAttribute( indices, 1 ) );\r\n\tgeometry.addAttribute( 'position', new THREE.BufferAttribute( positions, 3 ) );\r\n\r\n\tTHREE.LineSegments.call( this, geometry, new THREE.LineBasicMaterial( { color: 0xffff00 } ) );\r\n\r\n\tif ( object !== undefined ) {\r\n\r\n\t\tthis.update( object );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.BoxHelper.prototype = Object.create( THREE.LineSegments.prototype );\r\nTHREE.BoxHelper.prototype.constructor = THREE.BoxHelper;\r\n\r\nTHREE.BoxHelper.prototype.update = ( function () {\r\n\r\n\tvar box = new THREE.Box3();\r\n\r\n\treturn function ( object ) {\r\n\r\n\t\tif ( object instanceof THREE.Box3 ) {\r\n\r\n\t\t\tbox.copy( object );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tbox.setFromObject( object );\r\n\r\n\t\t}\r\n\r\n\t\tif ( box.isEmpty() ) return;\r\n\r\n\t\tvar min = box.min;\r\n\t\tvar max = box.max;\r\n\r\n\t\t/*\r\n\t\t  5____4\r\n\t\t1/___0/|\r\n\t\t| 6__|_7\r\n\t\t2/___3/\r\n\r\n\t\t0: max.x, max.y, max.z\r\n\t\t1: min.x, max.y, max.z\r\n\t\t2: min.x, min.y, max.z\r\n\t\t3: max.x, min.y, max.z\r\n\t\t4: max.x, max.y, min.z\r\n\t\t5: min.x, max.y, min.z\r\n\t\t6: min.x, min.y, min.z\r\n\t\t7: max.x, min.y, min.z\r\n\t\t*/\r\n\r\n\t\tvar position = this.geometry.attributes.position;\r\n\t\tvar array = position.array;\r\n\r\n\t\tarray[  0 ] = max.x; array[  1 ] = max.y; array[  2 ] = max.z;\r\n\t\tarray[  3 ] = min.x; array[  4 ] = max.y; array[  5 ] = max.z;\r\n\t\tarray[  6 ] = min.x; array[  7 ] = min.y; array[  8 ] = max.z;\r\n\t\tarray[  9 ] = max.x; array[ 10 ] = min.y; array[ 11 ] = max.z;\r\n\t\tarray[ 12 ] = max.x; array[ 13 ] = max.y; array[ 14 ] = min.z;\r\n\t\tarray[ 15 ] = min.x; array[ 16 ] = max.y; array[ 17 ] = min.z;\r\n\t\tarray[ 18 ] = min.x; array[ 19 ] = min.y; array[ 20 ] = min.z;\r\n\t\tarray[ 21 ] = max.x; array[ 22 ] = min.y; array[ 23 ] = min.z;\r\n\r\n\t\tposition.needsUpdate = true;\r\n\r\n\t\tthis.geometry.computeBoundingSphere();\r\n\r\n\t};\r\n\r\n} )();\r\n\r\n// File:src/extras/helpers/BoundingBoxHelper.js\r\n\r\n/**\r\n * @author WestLangley / http://github.com/WestLangley\r\n */\r\n\r\n// a helper to show the world-axis-aligned bounding box for an object\r\n\r\nTHREE.BoundingBoxHelper = function ( object, hex ) {\r\n\r\n\tvar color = ( hex !== undefined ) ? hex : 0x888888;\r\n\r\n\tthis.object = object;\r\n\r\n\tthis.box = new THREE.Box3();\r\n\r\n\tTHREE.Mesh.call( this, new THREE.BoxGeometry( 1, 1, 1 ), new THREE.MeshBasicMaterial( { color: color, wireframe: true } ) );\r\n\r\n};\r\n\r\nTHREE.BoundingBoxHelper.prototype = Object.create( THREE.Mesh.prototype );\r\nTHREE.BoundingBoxHelper.prototype.constructor = THREE.BoundingBoxHelper;\r\n\r\nTHREE.BoundingBoxHelper.prototype.update = function () {\r\n\r\n\tthis.box.setFromObject( this.object );\r\n\r\n\tthis.box.size( this.scale );\r\n\r\n\tthis.box.center( this.position );\r\n\r\n};\r\n\r\n// File:src/extras/helpers/CameraHelper.js\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n *\r\n *\t- shows frustum, line of sight and up of the camera\r\n *\t- suitable for fast updates\r\n * \t- based on frustum visualization in lightgl.js shadowmap example\r\n *\t\thttp://evanw.github.com/lightgl.js/tests/shadowmap.html\r\n */\r\n\r\nTHREE.CameraHelper = function ( camera ) {\r\n\r\n\tvar geometry = new THREE.Geometry();\r\n\tvar material = new THREE.LineBasicMaterial( { color: 0xffffff, vertexColors: THREE.FaceColors } );\r\n\r\n\tvar pointMap = {};\r\n\r\n\t// colors\r\n\r\n\tvar hexFrustum = 0xffaa00;\r\n\tvar hexCone = 0xff0000;\r\n\tvar hexUp = 0x00aaff;\r\n\tvar hexTarget = 0xffffff;\r\n\tvar hexCross = 0x333333;\r\n\r\n\t// near\r\n\r\n\taddLine( \"n1\", \"n2\", hexFrustum );\r\n\taddLine( \"n2\", \"n4\", hexFrustum );\r\n\taddLine( \"n4\", \"n3\", hexFrustum );\r\n\taddLine( \"n3\", \"n1\", hexFrustum );\r\n\r\n\t// far\r\n\r\n\taddLine( \"f1\", \"f2\", hexFrustum );\r\n\taddLine( \"f2\", \"f4\", hexFrustum );\r\n\taddLine( \"f4\", \"f3\", hexFrustum );\r\n\taddLine( \"f3\", \"f1\", hexFrustum );\r\n\r\n\t// sides\r\n\r\n\taddLine( \"n1\", \"f1\", hexFrustum );\r\n\taddLine( \"n2\", \"f2\", hexFrustum );\r\n\taddLine( \"n3\", \"f3\", hexFrustum );\r\n\taddLine( \"n4\", \"f4\", hexFrustum );\r\n\r\n\t// cone\r\n\r\n\taddLine( \"p\", \"n1\", hexCone );\r\n\taddLine( \"p\", \"n2\", hexCone );\r\n\taddLine( \"p\", \"n3\", hexCone );\r\n\taddLine( \"p\", \"n4\", hexCone );\r\n\r\n\t// up\r\n\r\n\taddLine( \"u1\", \"u2\", hexUp );\r\n\taddLine( \"u2\", \"u3\", hexUp );\r\n\taddLine( \"u3\", \"u1\", hexUp );\r\n\r\n\t// target\r\n\r\n\taddLine( \"c\", \"t\", hexTarget );\r\n\taddLine( \"p\", \"c\", hexCross );\r\n\r\n\t// cross\r\n\r\n\taddLine( \"cn1\", \"cn2\", hexCross );\r\n\taddLine( \"cn3\", \"cn4\", hexCross );\r\n\r\n\taddLine( \"cf1\", \"cf2\", hexCross );\r\n\taddLine( \"cf3\", \"cf4\", hexCross );\r\n\r\n\tfunction addLine( a, b, hex ) {\r\n\r\n\t\taddPoint( a, hex );\r\n\t\taddPoint( b, hex );\r\n\r\n\t}\r\n\r\n\tfunction addPoint( id, hex ) {\r\n\r\n\t\tgeometry.vertices.push( new THREE.Vector3() );\r\n\t\tgeometry.colors.push( new THREE.Color( hex ) );\r\n\r\n\t\tif ( pointMap[ id ] === undefined ) {\r\n\r\n\t\t\tpointMap[ id ] = [];\r\n\r\n\t\t}\r\n\r\n\t\tpointMap[ id ].push( geometry.vertices.length - 1 );\r\n\r\n\t}\r\n\r\n\tTHREE.LineSegments.call( this, geometry, material );\r\n\r\n\tthis.camera = camera;\r\n\tthis.camera.updateProjectionMatrix();\r\n\r\n\tthis.matrix = camera.matrixWorld;\r\n\tthis.matrixAutoUpdate = false;\r\n\r\n\tthis.pointMap = pointMap;\r\n\r\n\tthis.update();\r\n\r\n};\r\n\r\nTHREE.CameraHelper.prototype = Object.create( THREE.LineSegments.prototype );\r\nTHREE.CameraHelper.prototype.constructor = THREE.CameraHelper;\r\n\r\nTHREE.CameraHelper.prototype.update = function () {\r\n\r\n\tvar geometry, pointMap;\r\n\r\n\tvar vector = new THREE.Vector3();\r\n\tvar camera = new THREE.Camera();\r\n\r\n\tfunction setPoint( point, x, y, z ) {\r\n\r\n\t\tvector.set( x, y, z ).unproject( camera );\r\n\r\n\t\tvar points = pointMap[ point ];\r\n\r\n\t\tif ( points !== undefined ) {\r\n\r\n\t\t\tfor ( var i = 0, il = points.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tgeometry.vertices[ points[ i ] ].copy( vector );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn function () {\r\n\r\n\t\tgeometry = this.geometry;\r\n\t\tpointMap = this.pointMap;\r\n\r\n\t\tvar w = 1, h = 1;\r\n\r\n\t\t// we need just camera projection matrix\r\n\t\t// world matrix must be identity\r\n\r\n\t\tcamera.projectionMatrix.copy( this.camera.projectionMatrix );\r\n\r\n\t\t// center / target\r\n\r\n\t\tsetPoint( \"c\", 0, 0, - 1 );\r\n\t\tsetPoint( \"t\", 0, 0,  1 );\r\n\r\n\t\t// near\r\n\r\n\t\tsetPoint( \"n1\", - w, - h, - 1 );\r\n\t\tsetPoint( \"n2\",   w, - h, - 1 );\r\n\t\tsetPoint( \"n3\", - w,   h, - 1 );\r\n\t\tsetPoint( \"n4\",   w,   h, - 1 );\r\n\r\n\t\t// far\r\n\r\n\t\tsetPoint( \"f1\", - w, - h, 1 );\r\n\t\tsetPoint( \"f2\",   w, - h, 1 );\r\n\t\tsetPoint( \"f3\", - w,   h, 1 );\r\n\t\tsetPoint( \"f4\",   w,   h, 1 );\r\n\r\n\t\t// up\r\n\r\n\t\tsetPoint( \"u1\",   w * 0.7, h * 1.1, - 1 );\r\n\t\tsetPoint( \"u2\", - w * 0.7, h * 1.1, - 1 );\r\n\t\tsetPoint( \"u3\",         0, h * 2,   - 1 );\r\n\r\n\t\t// cross\r\n\r\n\t\tsetPoint( \"cf1\", - w,   0, 1 );\r\n\t\tsetPoint( \"cf2\",   w,   0, 1 );\r\n\t\tsetPoint( \"cf3\",   0, - h, 1 );\r\n\t\tsetPoint( \"cf4\",   0,   h, 1 );\r\n\r\n\t\tsetPoint( \"cn1\", - w,   0, - 1 );\r\n\t\tsetPoint( \"cn2\",   w,   0, - 1 );\r\n\t\tsetPoint( \"cn3\",   0, - h, - 1 );\r\n\t\tsetPoint( \"cn4\",   0,   h, - 1 );\r\n\r\n\t\tgeometry.verticesNeedUpdate = true;\r\n\r\n\t};\r\n\r\n}();\r\n\r\n// File:src/extras/helpers/DirectionalLightHelper.js\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author WestLangley / http://github.com/WestLangley\r\n */\r\n\r\nTHREE.DirectionalLightHelper = function ( light, size ) {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.light = light;\r\n\tthis.light.updateMatrixWorld();\r\n\r\n\tthis.matrix = light.matrixWorld;\r\n\tthis.matrixAutoUpdate = false;\r\n\r\n\tif ( size === undefined ) size = 1;\r\n\r\n\tvar geometry = new THREE.BufferGeometry();\r\n\tgeometry.addAttribute( 'position', new THREE.Float32Attribute( [\r\n\t\t- size,   size, 0,\r\n\t\t  size,   size, 0,\r\n\t\t  size, - size, 0,\r\n\t\t- size, - size, 0,\r\n\t\t- size,   size, 0\r\n\t], 3 ) );\r\n\r\n\tvar material = new THREE.LineBasicMaterial( { fog: false } );\r\n\r\n\tthis.add( new THREE.Line( geometry, material ) );\r\n\r\n\tgeometry = new THREE.BufferGeometry();\r\n\tgeometry.addAttribute( 'position', new THREE.Float32Attribute( [ 0, 0, 0, 0, 0, 1 ], 3 ) );\r\n\r\n\tthis.add( new THREE.Line( geometry, material ));\r\n\r\n\tthis.update();\r\n\r\n};\r\n\r\nTHREE.DirectionalLightHelper.prototype = Object.create( THREE.Object3D.prototype );\r\nTHREE.DirectionalLightHelper.prototype.constructor = THREE.DirectionalLightHelper;\r\n\r\nTHREE.DirectionalLightHelper.prototype.dispose = function () {\r\n\r\n\tvar lightPlane = this.children[ 0 ];\r\n\tvar targetLine = this.children[ 1 ];\r\n\r\n\tlightPlane.geometry.dispose();\r\n\tlightPlane.material.dispose();\r\n\ttargetLine.geometry.dispose();\r\n\ttargetLine.material.dispose();\r\n\r\n};\r\n\r\nTHREE.DirectionalLightHelper.prototype.update = function () {\r\n\r\n\tvar v1 = new THREE.Vector3();\r\n\tvar v2 = new THREE.Vector3();\r\n\tvar v3 = new THREE.Vector3();\r\n\r\n\treturn function () {\r\n\r\n\t\tv1.setFromMatrixPosition( this.light.matrixWorld );\r\n\t\tv2.setFromMatrixPosition( this.light.target.matrixWorld );\r\n\t\tv3.subVectors( v2, v1 );\r\n\r\n\t\tvar lightPlane = this.children[ 0 ];\r\n\t\tvar targetLine = this.children[ 1 ];\r\n\r\n\t\tlightPlane.lookAt( v3 );\r\n\t\tlightPlane.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\r\n\r\n\t\ttargetLine.lookAt( v3 );\r\n\t\ttargetLine.scale.z = v3.length();\r\n\r\n\t};\r\n\r\n}();\r\n\r\n// File:src/extras/helpers/EdgesHelper.js\r\n\r\n/**\r\n * @author WestLangley / http://github.com/WestLangley\r\n * @param object THREE.Mesh whose geometry will be used\r\n * @param hex line color\r\n * @param thresholdAngle the minimum angle (in degrees),\r\n * between the face normals of adjacent faces,\r\n * that is required to render an edge. A value of 10 means\r\n * an edge is only rendered if the angle is at least 10 degrees.\r\n */\r\n\r\nTHREE.EdgesHelper = function ( object, hex, thresholdAngle ) {\r\n\r\n\tvar color = ( hex !== undefined ) ? hex : 0xffffff;\r\n\r\n\tTHREE.LineSegments.call( this, new THREE.EdgesGeometry( object.geometry, thresholdAngle ), new THREE.LineBasicMaterial( { color: color } ) );\r\n\r\n\tthis.matrix = object.matrixWorld;\r\n\tthis.matrixAutoUpdate = false;\r\n\r\n};\r\n\r\nTHREE.EdgesHelper.prototype = Object.create( THREE.LineSegments.prototype );\r\nTHREE.EdgesHelper.prototype.constructor = THREE.EdgesHelper;\r\n\r\n// File:src/extras/helpers/FaceNormalsHelper.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author WestLangley / http://github.com/WestLangley\r\n*/\r\n\r\nTHREE.FaceNormalsHelper = function ( object, size, hex, linewidth ) {\r\n\r\n\t// FaceNormalsHelper only supports THREE.Geometry\r\n\r\n\tthis.object = object;\r\n\r\n\tthis.size = ( size !== undefined ) ? size : 1;\r\n\r\n\tvar color = ( hex !== undefined ) ? hex : 0xffff00;\r\n\r\n\tvar width = ( linewidth !== undefined ) ? linewidth : 1;\r\n\r\n\t//\r\n\r\n\tvar nNormals = 0;\r\n\r\n\tvar objGeometry = this.object.geometry;\r\n\r\n\tif ( objGeometry instanceof THREE.Geometry ) {\r\n\r\n\t\tnNormals = objGeometry.faces.length;\r\n\r\n\t} else {\r\n\r\n\t\tconsole.warn( 'THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.' );\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tvar geometry = new THREE.BufferGeometry();\r\n\r\n\tvar positions = new THREE.Float32Attribute( nNormals * 2 * 3, 3 );\r\n\r\n\tgeometry.addAttribute( 'position', positions );\r\n\r\n\tTHREE.LineSegments.call( this, geometry, new THREE.LineBasicMaterial( { color: color, linewidth: width } ) );\r\n\r\n\t//\r\n\r\n\tthis.matrixAutoUpdate = false;\r\n\tthis.update();\r\n\r\n};\r\n\r\nTHREE.FaceNormalsHelper.prototype = Object.create( THREE.LineSegments.prototype );\r\nTHREE.FaceNormalsHelper.prototype.constructor = THREE.FaceNormalsHelper;\r\n\r\nTHREE.FaceNormalsHelper.prototype.update = ( function () {\r\n\r\n\tvar v1 = new THREE.Vector3();\r\n\tvar v2 = new THREE.Vector3();\r\n\tvar normalMatrix = new THREE.Matrix3();\r\n\r\n\treturn function update() {\r\n\r\n\t\tthis.object.updateMatrixWorld( true );\r\n\r\n\t\tnormalMatrix.getNormalMatrix( this.object.matrixWorld );\r\n\r\n\t\tvar matrixWorld = this.object.matrixWorld;\r\n\r\n\t\tvar position = this.geometry.attributes.position;\r\n\r\n\t\t//\r\n\r\n\t\tvar objGeometry = this.object.geometry;\r\n\r\n\t\tvar vertices = objGeometry.vertices;\r\n\r\n\t\tvar faces = objGeometry.faces;\r\n\r\n\t\tvar idx = 0;\r\n\r\n\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\r\n\r\n\t\t\tvar face = faces[ i ];\r\n\r\n\t\t\tvar normal = face.normal;\r\n\r\n\t\t\tv1.copy( vertices[ face.a ] )\r\n\t\t\t\t.add( vertices[ face.b ] )\r\n\t\t\t\t.add( vertices[ face.c ] )\r\n\t\t\t\t.divideScalar( 3 )\r\n\t\t\t\t.applyMatrix4( matrixWorld );\r\n\r\n\t\t\tv2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\r\n\r\n\t\t\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\r\n\r\n\t\t\tidx = idx + 1;\r\n\r\n\t\t\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\r\n\r\n\t\t\tidx = idx + 1;\r\n\r\n\t\t}\r\n\r\n\t\tposition.needsUpdate = true;\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n}() );\r\n\r\n// File:src/extras/helpers/GridHelper.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.GridHelper = function ( size, step, color1, color2 ) {\r\n\r\n\tcolor1 = new THREE.Color( color1 !== undefined ? color1 : 0x444444 );\r\n\tcolor2 = new THREE.Color( color2 !== undefined ? color2 : 0x888888 );\r\n\r\n\tvar vertices = [];\r\n\tvar colors = [];\r\n\r\n\tfor ( var i = - size, j = 0; i <= size; i += step ) {\r\n\r\n\t\tvertices.push( - size, 0, i, size, 0, i );\r\n\t\tvertices.push( i, 0, - size, i, 0, size );\r\n\r\n\t\tvar color = i === 0 ? color1 : color2;\r\n\r\n\t\tcolor.toArray( colors, j ); j += 3;\r\n\t\tcolor.toArray( colors, j ); j += 3;\r\n\t\tcolor.toArray( colors, j ); j += 3;\r\n\t\tcolor.toArray( colors, j ); j += 3;\r\n\r\n\t}\r\n\r\n\tvar geometry = new THREE.BufferGeometry();\r\n\tgeometry.addAttribute( 'position', new THREE.Float32Attribute( vertices, 3 ) );\r\n\tgeometry.addAttribute( 'color', new THREE.Float32Attribute( colors, 3 ) );\r\n\r\n\tvar material = new THREE.LineBasicMaterial( { vertexColors: THREE.VertexColors } );\r\n\r\n\tTHREE.LineSegments.call( this, geometry, material );\r\n\r\n};\r\n\r\nTHREE.GridHelper.prototype = Object.create( THREE.LineSegments.prototype );\r\nTHREE.GridHelper.prototype.constructor = THREE.GridHelper;\r\n\r\nTHREE.GridHelper.prototype.setColors = function () {\r\n\r\n\tconsole.error( 'THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.' );\r\n\r\n};\r\n\r\n// File:src/extras/helpers/HemisphereLightHelper.js\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.HemisphereLightHelper = function ( light, sphereSize ) {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.light = light;\r\n\tthis.light.updateMatrixWorld();\r\n\r\n\tthis.matrix = light.matrixWorld;\r\n\tthis.matrixAutoUpdate = false;\r\n\r\n\tthis.colors = [ new THREE.Color(), new THREE.Color() ];\r\n\r\n\tvar geometry = new THREE.SphereGeometry( sphereSize, 4, 2 );\r\n\tgeometry.rotateX( - Math.PI / 2 );\r\n\r\n\tfor ( var i = 0, il = 8; i < il; i ++ ) {\r\n\r\n\t\tgeometry.faces[ i ].color = this.colors[ i < 4 ? 0 : 1 ];\r\n\r\n\t}\r\n\r\n\tvar material = new THREE.MeshBasicMaterial( { vertexColors: THREE.FaceColors, wireframe: true } );\r\n\r\n\tthis.lightSphere = new THREE.Mesh( geometry, material );\r\n\tthis.add( this.lightSphere );\r\n\r\n\tthis.update();\r\n\r\n};\r\n\r\nTHREE.HemisphereLightHelper.prototype = Object.create( THREE.Object3D.prototype );\r\nTHREE.HemisphereLightHelper.prototype.constructor = THREE.HemisphereLightHelper;\r\n\r\nTHREE.HemisphereLightHelper.prototype.dispose = function () {\r\n\r\n\tthis.lightSphere.geometry.dispose();\r\n\tthis.lightSphere.material.dispose();\r\n\r\n};\r\n\r\nTHREE.HemisphereLightHelper.prototype.update = function () {\r\n\r\n\tvar vector = new THREE.Vector3();\r\n\r\n\treturn function () {\r\n\r\n\t\tthis.colors[ 0 ].copy( this.light.color ).multiplyScalar( this.light.intensity );\r\n\t\tthis.colors[ 1 ].copy( this.light.groundColor ).multiplyScalar( this.light.intensity );\r\n\r\n\t\tthis.lightSphere.lookAt( vector.setFromMatrixPosition( this.light.matrixWorld ).negate() );\r\n\t\tthis.lightSphere.geometry.colorsNeedUpdate = true;\r\n\r\n\t};\r\n\r\n}();\r\n\r\n// File:src/extras/helpers/PointLightHelper.js\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.PointLightHelper = function ( light, sphereSize ) {\r\n\r\n\tthis.light = light;\r\n\tthis.light.updateMatrixWorld();\r\n\r\n\tvar geometry = new THREE.SphereBufferGeometry( sphereSize, 4, 2 );\r\n\tvar material = new THREE.MeshBasicMaterial( { wireframe: true, fog: false } );\r\n\tmaterial.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\r\n\r\n\tTHREE.Mesh.call( this, geometry, material );\r\n\r\n\tthis.matrix = this.light.matrixWorld;\r\n\tthis.matrixAutoUpdate = false;\r\n\r\n\t/*\r\n\tvar distanceGeometry = new THREE.IcosahedronGeometry( 1, 2 );\r\n\tvar distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );\r\n\r\n\tthis.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );\r\n\tthis.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );\r\n\r\n\tvar d = light.distance;\r\n\r\n\tif ( d === 0.0 ) {\r\n\r\n\t\tthis.lightDistance.visible = false;\r\n\r\n\t} else {\r\n\r\n\t\tthis.lightDistance.scale.set( d, d, d );\r\n\r\n\t}\r\n\r\n\tthis.add( this.lightDistance );\r\n\t*/\r\n\r\n};\r\n\r\nTHREE.PointLightHelper.prototype = Object.create( THREE.Mesh.prototype );\r\nTHREE.PointLightHelper.prototype.constructor = THREE.PointLightHelper;\r\n\r\nTHREE.PointLightHelper.prototype.dispose = function () {\r\n\r\n\tthis.geometry.dispose();\r\n\tthis.material.dispose();\r\n\r\n};\r\n\r\nTHREE.PointLightHelper.prototype.update = function () {\r\n\r\n\tthis.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\r\n\r\n\t/*\r\n\tvar d = this.light.distance;\r\n\r\n\tif ( d === 0.0 ) {\r\n\r\n\t\tthis.lightDistance.visible = false;\r\n\r\n\t} else {\r\n\r\n\t\tthis.lightDistance.visible = true;\r\n\t\tthis.lightDistance.scale.set( d, d, d );\r\n\r\n\t}\r\n\t*/\r\n\r\n};\r\n\r\n// File:src/extras/helpers/SkeletonHelper.js\r\n\r\n/**\r\n * @author Sean Griffin / http://twitter.com/sgrif\r\n * @author Michael Guerrero / http://realitymeltdown.com\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author ikerr / http://verold.com\r\n */\r\n\r\nTHREE.SkeletonHelper = function ( object ) {\r\n\r\n\tthis.bones = this.getBoneList( object );\r\n\r\n\tvar geometry = new THREE.Geometry();\r\n\r\n\tfor ( var i = 0; i < this.bones.length; i ++ ) {\r\n\r\n\t\tvar bone = this.bones[ i ];\r\n\r\n\t\tif ( bone.parent instanceof THREE.Bone ) {\r\n\r\n\t\t\tgeometry.vertices.push( new THREE.Vector3() );\r\n\t\t\tgeometry.vertices.push( new THREE.Vector3() );\r\n\t\t\tgeometry.colors.push( new THREE.Color( 0, 0, 1 ) );\r\n\t\t\tgeometry.colors.push( new THREE.Color( 0, 1, 0 ) );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tgeometry.dynamic = true;\r\n\r\n\tvar material = new THREE.LineBasicMaterial( { vertexColors: THREE.VertexColors, depthTest: false, depthWrite: false, transparent: true } );\r\n\r\n\tTHREE.LineSegments.call( this, geometry, material );\r\n\r\n\tthis.root = object;\r\n\r\n\tthis.matrix = object.matrixWorld;\r\n\tthis.matrixAutoUpdate = false;\r\n\r\n\tthis.update();\r\n\r\n};\r\n\r\n\r\nTHREE.SkeletonHelper.prototype = Object.create( THREE.LineSegments.prototype );\r\nTHREE.SkeletonHelper.prototype.constructor = THREE.SkeletonHelper;\r\n\r\nTHREE.SkeletonHelper.prototype.getBoneList = function( object ) {\r\n\r\n\tvar boneList = [];\r\n\r\n\tif ( object instanceof THREE.Bone ) {\r\n\r\n\t\tboneList.push( object );\r\n\r\n\t}\r\n\r\n\tfor ( var i = 0; i < object.children.length; i ++ ) {\r\n\r\n\t\tboneList.push.apply( boneList, this.getBoneList( object.children[ i ] ) );\r\n\r\n\t}\r\n\r\n\treturn boneList;\r\n\r\n};\r\n\r\nTHREE.SkeletonHelper.prototype.update = function () {\r\n\r\n\tvar geometry = this.geometry;\r\n\r\n\tvar matrixWorldInv = new THREE.Matrix4().getInverse( this.root.matrixWorld );\r\n\r\n\tvar boneMatrix = new THREE.Matrix4();\r\n\r\n\tvar j = 0;\r\n\r\n\tfor ( var i = 0; i < this.bones.length; i ++ ) {\r\n\r\n\t\tvar bone = this.bones[ i ];\r\n\r\n\t\tif ( bone.parent instanceof THREE.Bone ) {\r\n\r\n\t\t\tboneMatrix.multiplyMatrices( matrixWorldInv, bone.matrixWorld );\r\n\t\t\tgeometry.vertices[ j ].setFromMatrixPosition( boneMatrix );\r\n\r\n\t\t\tboneMatrix.multiplyMatrices( matrixWorldInv, bone.parent.matrixWorld );\r\n\t\t\tgeometry.vertices[ j + 1 ].setFromMatrixPosition( boneMatrix );\r\n\r\n\t\t\tj += 2;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tgeometry.verticesNeedUpdate = true;\r\n\r\n\tgeometry.computeBoundingSphere();\r\n\r\n};\r\n\r\n// File:src/extras/helpers/SpotLightHelper.js\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author WestLangley / http://github.com/WestLangley\r\n*/\r\n\r\nTHREE.SpotLightHelper = function ( light ) {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.light = light;\r\n\tthis.light.updateMatrixWorld();\r\n\r\n\tthis.matrix = light.matrixWorld;\r\n\tthis.matrixAutoUpdate = false;\r\n\r\n\tvar geometry = new THREE.BufferGeometry();\r\n\r\n\tvar positions = [\r\n\t\t0, 0, 0,   0,   0,   1,\r\n\t\t0, 0, 0,   1,   0,   1,\r\n\t\t0, 0, 0, - 1,   0,   1,\r\n\t\t0, 0, 0,   0,   1,   1,\r\n\t\t0, 0, 0,   0, - 1,   1\r\n\t];\r\n\r\n\tfor ( var i = 0, j = 1, l = 32; i < l; i ++, j ++ ) {\r\n\r\n\t\tvar p1 = ( i / l ) * Math.PI * 2;\r\n\t\tvar p2 = ( j / l ) * Math.PI * 2;\r\n\r\n\t\tpositions.push(\r\n\t\t\tMath.cos( p1 ), Math.sin( p1 ), 1,\r\n\t\t\tMath.cos( p2 ), Math.sin( p2 ), 1\r\n\t\t);\r\n\r\n\t}\r\n\r\n\tgeometry.addAttribute( 'position', new THREE.Float32Attribute( positions, 3 ) );\r\n\r\n\tvar material = new THREE.LineBasicMaterial( { fog: false } );\r\n\r\n\tthis.cone = new THREE.LineSegments( geometry, material );\r\n\tthis.add( this.cone );\r\n\r\n\tthis.update();\r\n\r\n};\r\n\r\nTHREE.SpotLightHelper.prototype = Object.create( THREE.Object3D.prototype );\r\nTHREE.SpotLightHelper.prototype.constructor = THREE.SpotLightHelper;\r\n\r\nTHREE.SpotLightHelper.prototype.dispose = function () {\r\n\r\n\tthis.cone.geometry.dispose();\r\n\tthis.cone.material.dispose();\r\n\r\n};\r\n\r\nTHREE.SpotLightHelper.prototype.update = function () {\r\n\r\n\tvar vector = new THREE.Vector3();\r\n\tvar vector2 = new THREE.Vector3();\r\n\r\n\treturn function () {\r\n\r\n\t\tvar coneLength = this.light.distance ? this.light.distance : 1000;\r\n\t\tvar coneWidth = coneLength * Math.tan( this.light.angle );\r\n\r\n\t\tthis.cone.scale.set( coneWidth, coneWidth, coneLength );\r\n\r\n\t\tvector.setFromMatrixPosition( this.light.matrixWorld );\r\n\t\tvector2.setFromMatrixPosition( this.light.target.matrixWorld );\r\n\r\n\t\tthis.cone.lookAt( vector2.sub( vector ) );\r\n\r\n\t\tthis.cone.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );\r\n\r\n\t};\r\n\r\n}();\r\n\r\n// File:src/extras/helpers/VertexNormalsHelper.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n * @author WestLangley / http://github.com/WestLangley\r\n*/\r\n\r\nTHREE.VertexNormalsHelper = function ( object, size, hex, linewidth ) {\r\n\r\n\tthis.object = object;\r\n\r\n\tthis.size = ( size !== undefined ) ? size : 1;\r\n\r\n\tvar color = ( hex !== undefined ) ? hex : 0xff0000;\r\n\r\n\tvar width = ( linewidth !== undefined ) ? linewidth : 1;\r\n\r\n\t//\r\n\r\n\tvar nNormals = 0;\r\n\r\n\tvar objGeometry = this.object.geometry;\r\n\r\n\tif ( objGeometry instanceof THREE.Geometry ) {\r\n\r\n\t\tnNormals = objGeometry.faces.length * 3;\r\n\r\n\t} else if ( objGeometry instanceof THREE.BufferGeometry ) {\r\n\r\n\t\tnNormals = objGeometry.attributes.normal.count;\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tvar geometry = new THREE.BufferGeometry();\r\n\r\n\tvar positions = new THREE.Float32Attribute( nNormals * 2 * 3, 3 );\r\n\r\n\tgeometry.addAttribute( 'position', positions );\r\n\r\n\tTHREE.LineSegments.call( this, geometry, new THREE.LineBasicMaterial( { color: color, linewidth: width } ) );\r\n\r\n\t//\r\n\r\n\tthis.matrixAutoUpdate = false;\r\n\r\n\tthis.update();\r\n\r\n};\r\n\r\nTHREE.VertexNormalsHelper.prototype = Object.create( THREE.LineSegments.prototype );\r\nTHREE.VertexNormalsHelper.prototype.constructor = THREE.VertexNormalsHelper;\r\n\r\nTHREE.VertexNormalsHelper.prototype.update = ( function () {\r\n\r\n\tvar v1 = new THREE.Vector3();\r\n\tvar v2 = new THREE.Vector3();\r\n\tvar normalMatrix = new THREE.Matrix3();\r\n\r\n\treturn function update() {\r\n\r\n\t\tvar keys = [ 'a', 'b', 'c' ];\r\n\r\n\t\tthis.object.updateMatrixWorld( true );\r\n\r\n\t\tnormalMatrix.getNormalMatrix( this.object.matrixWorld );\r\n\r\n\t\tvar matrixWorld = this.object.matrixWorld;\r\n\r\n\t\tvar position = this.geometry.attributes.position;\r\n\r\n\t\t//\r\n\r\n\t\tvar objGeometry = this.object.geometry;\r\n\r\n\t\tif ( objGeometry instanceof THREE.Geometry ) {\r\n\r\n\t\t\tvar vertices = objGeometry.vertices;\r\n\r\n\t\t\tvar faces = objGeometry.faces;\r\n\r\n\t\t\tvar idx = 0;\r\n\r\n\t\t\tfor ( var i = 0, l = faces.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tvar face = faces[ i ];\r\n\r\n\t\t\t\tfor ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\tvar vertex = vertices[ face[ keys[ j ] ] ];\r\n\r\n\t\t\t\t\tvar normal = face.vertexNormals[ j ];\r\n\r\n\t\t\t\t\tv1.copy( vertex ).applyMatrix4( matrixWorld );\r\n\r\n\t\t\t\t\tv2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\r\n\r\n\t\t\t\t\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\r\n\r\n\t\t\t\t\tidx = idx + 1;\r\n\r\n\t\t\t\t\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\r\n\r\n\t\t\t\t\tidx = idx + 1;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( objGeometry instanceof THREE.BufferGeometry ) {\r\n\r\n\t\t\tvar objPos = objGeometry.attributes.position;\r\n\r\n\t\t\tvar objNorm = objGeometry.attributes.normal;\r\n\r\n\t\t\tvar idx = 0;\r\n\r\n\t\t\t// for simplicity, ignore index and drawcalls, and render every normal\r\n\r\n\t\t\tfor ( var j = 0, jl = objPos.count; j < jl; j ++ ) {\r\n\r\n\t\t\t\tv1.set( objPos.getX( j ), objPos.getY( j ), objPos.getZ( j ) ).applyMatrix4( matrixWorld );\r\n\r\n\t\t\t\tv2.set( objNorm.getX( j ), objNorm.getY( j ), objNorm.getZ( j ) );\r\n\r\n\t\t\t\tv2.applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );\r\n\r\n\t\t\t\tposition.setXYZ( idx, v1.x, v1.y, v1.z );\r\n\r\n\t\t\t\tidx = idx + 1;\r\n\r\n\t\t\t\tposition.setXYZ( idx, v2.x, v2.y, v2.z );\r\n\r\n\t\t\t\tidx = idx + 1;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tposition.needsUpdate = true;\r\n\r\n\t\treturn this;\r\n\r\n\t};\r\n\r\n}() );\r\n\r\n// File:src/extras/helpers/WireframeHelper.js\r\n\r\n/**\r\n * @author mrdoob / http://mrdoob.com/\r\n */\r\n\r\nTHREE.WireframeHelper = function ( object, hex ) {\r\n\r\n\tvar color = ( hex !== undefined ) ? hex : 0xffffff;\r\n\r\n\tTHREE.LineSegments.call( this, new THREE.WireframeGeometry( object.geometry ), new THREE.LineBasicMaterial( { color: color } ) );\r\n\r\n\tthis.matrix = object.matrixWorld;\r\n\tthis.matrixAutoUpdate = false;\r\n\r\n};\r\n\r\nTHREE.WireframeHelper.prototype = Object.create( THREE.LineSegments.prototype );\r\nTHREE.WireframeHelper.prototype.constructor = THREE.WireframeHelper;\r\n\r\n// File:src/extras/objects/ImmediateRenderObject.js\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.ImmediateRenderObject = function ( material ) {\r\n\r\n\tTHREE.Object3D.call( this );\r\n\r\n\tthis.material = material;\r\n\tthis.render = function ( renderCallback ) {};\r\n\r\n};\r\n\r\nTHREE.ImmediateRenderObject.prototype = Object.create( THREE.Object3D.prototype );\r\nTHREE.ImmediateRenderObject.prototype.constructor = THREE.ImmediateRenderObject;\r\n\r\n// File:src/extras/objects/MorphBlendMesh.js\r\n\r\n/**\r\n * @author alteredq / http://alteredqualia.com/\r\n */\r\n\r\nTHREE.MorphBlendMesh = function( geometry, material ) {\r\n\r\n\tTHREE.Mesh.call( this, geometry, material );\r\n\r\n\tthis.animationsMap = {};\r\n\tthis.animationsList = [];\r\n\r\n\t// prepare default animation\r\n\t// (all frames played together in 1 second)\r\n\r\n\tvar numFrames = this.geometry.morphTargets.length;\r\n\r\n\tvar name = \"__default\";\r\n\r\n\tvar startFrame = 0;\r\n\tvar endFrame = numFrames - 1;\r\n\r\n\tvar fps = numFrames / 1;\r\n\r\n\tthis.createAnimation( name, startFrame, endFrame, fps );\r\n\tthis.setAnimationWeight( name, 1 );\r\n\r\n};\r\n\r\nTHREE.MorphBlendMesh.prototype = Object.create( THREE.Mesh.prototype );\r\nTHREE.MorphBlendMesh.prototype.constructor = THREE.MorphBlendMesh;\r\n\r\nTHREE.MorphBlendMesh.prototype.createAnimation = function ( name, start, end, fps ) {\r\n\r\n\tvar animation = {\r\n\r\n\t\tstart: start,\r\n\t\tend: end,\r\n\r\n\t\tlength: end - start + 1,\r\n\r\n\t\tfps: fps,\r\n\t\tduration: ( end - start ) / fps,\r\n\r\n\t\tlastFrame: 0,\r\n\t\tcurrentFrame: 0,\r\n\r\n\t\tactive: false,\r\n\r\n\t\ttime: 0,\r\n\t\tdirection: 1,\r\n\t\tweight: 1,\r\n\r\n\t\tdirectionBackwards: false,\r\n\t\tmirroredLoop: false\r\n\r\n\t};\r\n\r\n\tthis.animationsMap[ name ] = animation;\r\n\tthis.animationsList.push( animation );\r\n\r\n};\r\n\r\nTHREE.MorphBlendMesh.prototype.autoCreateAnimations = function ( fps ) {\r\n\r\n\tvar pattern = /([a-z]+)_?(\\d+)/i;\r\n\r\n\tvar firstAnimation, frameRanges = {};\r\n\r\n\tvar geometry = this.geometry;\r\n\r\n\tfor ( var i = 0, il = geometry.morphTargets.length; i < il; i ++ ) {\r\n\r\n\t\tvar morph = geometry.morphTargets[ i ];\r\n\t\tvar chunks = morph.name.match( pattern );\r\n\r\n\t\tif ( chunks && chunks.length > 1 ) {\r\n\r\n\t\t\tvar name = chunks[ 1 ];\r\n\r\n\t\t\tif ( ! frameRanges[ name ] ) frameRanges[ name ] = { start: Infinity, end: - Infinity };\r\n\r\n\t\t\tvar range = frameRanges[ name ];\r\n\r\n\t\t\tif ( i < range.start ) range.start = i;\r\n\t\t\tif ( i > range.end ) range.end = i;\r\n\r\n\t\t\tif ( ! firstAnimation ) firstAnimation = name;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tfor ( var name in frameRanges ) {\r\n\r\n\t\tvar range = frameRanges[ name ];\r\n\t\tthis.createAnimation( name, range.start, range.end, fps );\r\n\r\n\t}\r\n\r\n\tthis.firstAnimation = firstAnimation;\r\n\r\n};\r\n\r\nTHREE.MorphBlendMesh.prototype.setAnimationDirectionForward = function ( name ) {\r\n\r\n\tvar animation = this.animationsMap[ name ];\r\n\r\n\tif ( animation ) {\r\n\r\n\t\tanimation.direction = 1;\r\n\t\tanimation.directionBackwards = false;\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.MorphBlendMesh.prototype.setAnimationDirectionBackward = function ( name ) {\r\n\r\n\tvar animation = this.animationsMap[ name ];\r\n\r\n\tif ( animation ) {\r\n\r\n\t\tanimation.direction = - 1;\r\n\t\tanimation.directionBackwards = true;\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.MorphBlendMesh.prototype.setAnimationFPS = function ( name, fps ) {\r\n\r\n\tvar animation = this.animationsMap[ name ];\r\n\r\n\tif ( animation ) {\r\n\r\n\t\tanimation.fps = fps;\r\n\t\tanimation.duration = ( animation.end - animation.start ) / animation.fps;\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.MorphBlendMesh.prototype.setAnimationDuration = function ( name, duration ) {\r\n\r\n\tvar animation = this.animationsMap[ name ];\r\n\r\n\tif ( animation ) {\r\n\r\n\t\tanimation.duration = duration;\r\n\t\tanimation.fps = ( animation.end - animation.start ) / animation.duration;\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.MorphBlendMesh.prototype.setAnimationWeight = function ( name, weight ) {\r\n\r\n\tvar animation = this.animationsMap[ name ];\r\n\r\n\tif ( animation ) {\r\n\r\n\t\tanimation.weight = weight;\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.MorphBlendMesh.prototype.setAnimationTime = function ( name, time ) {\r\n\r\n\tvar animation = this.animationsMap[ name ];\r\n\r\n\tif ( animation ) {\r\n\r\n\t\tanimation.time = time;\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.MorphBlendMesh.prototype.getAnimationTime = function ( name ) {\r\n\r\n\tvar time = 0;\r\n\r\n\tvar animation = this.animationsMap[ name ];\r\n\r\n\tif ( animation ) {\r\n\r\n\t\ttime = animation.time;\r\n\r\n\t}\r\n\r\n\treturn time;\r\n\r\n};\r\n\r\nTHREE.MorphBlendMesh.prototype.getAnimationDuration = function ( name ) {\r\n\r\n\tvar duration = - 1;\r\n\r\n\tvar animation = this.animationsMap[ name ];\r\n\r\n\tif ( animation ) {\r\n\r\n\t\tduration = animation.duration;\r\n\r\n\t}\r\n\r\n\treturn duration;\r\n\r\n};\r\n\r\nTHREE.MorphBlendMesh.prototype.playAnimation = function ( name ) {\r\n\r\n\tvar animation = this.animationsMap[ name ];\r\n\r\n\tif ( animation ) {\r\n\r\n\t\tanimation.time = 0;\r\n\t\tanimation.active = true;\r\n\r\n\t} else {\r\n\r\n\t\tconsole.warn( \"THREE.MorphBlendMesh: animation[\" + name + \"] undefined in .playAnimation()\" );\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.MorphBlendMesh.prototype.stopAnimation = function ( name ) {\r\n\r\n\tvar animation = this.animationsMap[ name ];\r\n\r\n\tif ( animation ) {\r\n\r\n\t\tanimation.active = false;\r\n\r\n\t}\r\n\r\n};\r\n\r\nTHREE.MorphBlendMesh.prototype.update = function ( delta ) {\r\n\r\n\tfor ( var i = 0, il = this.animationsList.length; i < il; i ++ ) {\r\n\r\n\t\tvar animation = this.animationsList[ i ];\r\n\r\n\t\tif ( ! animation.active ) continue;\r\n\r\n\t\tvar frameTime = animation.duration / animation.length;\r\n\r\n\t\tanimation.time += animation.direction * delta;\r\n\r\n\t\tif ( animation.mirroredLoop ) {\r\n\r\n\t\t\tif ( animation.time > animation.duration || animation.time < 0 ) {\r\n\r\n\t\t\t\tanimation.direction *= - 1;\r\n\r\n\t\t\t\tif ( animation.time > animation.duration ) {\r\n\r\n\t\t\t\t\tanimation.time = animation.duration;\r\n\t\t\t\t\tanimation.directionBackwards = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( animation.time < 0 ) {\r\n\r\n\t\t\t\t\tanimation.time = 0;\r\n\t\t\t\t\tanimation.directionBackwards = false;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tanimation.time = animation.time % animation.duration;\r\n\r\n\t\t\tif ( animation.time < 0 ) animation.time += animation.duration;\r\n\r\n\t\t}\r\n\r\n\t\tvar keyframe = animation.start + THREE.Math.clamp( Math.floor( animation.time / frameTime ), 0, animation.length - 1 );\r\n\t\tvar weight = animation.weight;\r\n\r\n\t\tif ( keyframe !== animation.currentFrame ) {\r\n\r\n\t\t\tthis.morphTargetInfluences[ animation.lastFrame ] = 0;\r\n\t\t\tthis.morphTargetInfluences[ animation.currentFrame ] = 1 * weight;\r\n\r\n\t\t\tthis.morphTargetInfluences[ keyframe ] = 0;\r\n\r\n\t\t\tanimation.lastFrame = animation.currentFrame;\r\n\t\t\tanimation.currentFrame = keyframe;\r\n\r\n\t\t}\r\n\r\n\t\tvar mix = ( animation.time % frameTime ) / frameTime;\r\n\r\n\t\tif ( animation.directionBackwards ) mix = 1 - mix;\r\n\r\n\t\tif ( animation.currentFrame !== animation.lastFrame ) {\r\n\r\n\t\t\tthis.morphTargetInfluences[ animation.currentFrame ] = mix * weight;\r\n\t\t\tthis.morphTargetInfluences[ animation.lastFrame ] = ( 1 - mix ) * weight;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.morphTargetInfluences[ animation.currentFrame ] = weight;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n};\r\n\r\n\r\n// Export the THREE object for **Node.js**, with\r\n// backwards-compatibility for the old `require()` API. If we're in\r\n// the browser, add `_` as a global object via a string identifier,\r\n// for Closure Compiler \"advanced\" mode.\r\nif (typeof exports !== 'undefined') {\r\n  if (typeof module !== 'undefined' && module.exports) {\r\n    exports = module.exports = THREE;\r\n  }\r\n  exports.THREE = THREE;\r\n} else {\r\n  this['THREE'] = THREE;\r\n}\r\n","import { Vector3 } from 'three';\n\nexport default class Vector {\n    constructor(x, y, z) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n\n    static random(range) {\n        const rand = (n) => Math.floor(Math.random() * n) + 1;\n        return new Vector(rand(range), rand(range), rand(range))\n    }\n\n    add (vector) {\n        return new Vector(this.x + vector.x, this.y + vector.y, this.z + vector.z);\n    }\n\n    invert () {\n        return new Vector(-this.x, -this.y, -this.z);\n    }\n\n    scale (factor) {\n        return new Vector(this.x * factor, this.y * factor, this.z * factor);\n    }\n\n    subtract (vector) {\n        return this.add(vector.invert());\n    }\n\n    dot (vector) {\n        return this.x * vector.x + this.y * vector.y + this.z + vector.z;\n    }\n\n    rk4 (h, fn) {\n        const k1 = fn(this).scale(h),\n            k2 = fn(this.add(k1.scale(0.5))).scale(h),\n            k3 = fn(this.add(k2.scale(0.5))).scale(h),\n            k4 = fn(this.add(k3)).scale(h);\n        return this.add((k1.add(k2.scale(2)).add(k3.scale(2)).add(k4)).scale(1 / 6));\n    }\n\n    toString() {\n        return `(${ this.x.toFixed(2) }, ${ this.y.toFixed(2) }, ${ this.z.toFixed(2) })`;\n    }\n\n    toVector3() {\n        return new Vector3(this.x, this.y, this.z);\n    }\n}","import Vector from './vector';\n\nexport default class LorenzSystem {\n    constructor(id) {\n        this.id = id;\n        this.sigma = 10;\n        this.rho = 28;\n        this.beta = 8 / 3;\n        this.delta = 0.01;\n\n        this.initialPosition = new Vector.random(100);\n        this.currentPosition = this.initialPosition;\n        this.previousPosition = this.initialPosition;\n        this.time = 0;\n    }\n\n    process() {\n        this.previousPosition = this.currentPosition;\n        // Vector.rk4 uses Runge-Kutta method\n        this.currentPosition = this.currentPosition.rk4(this.delta, (p) => this.calculateNextVector(p));\n        this.time += this.delta;\n    }\n\n    calculateNextVector(position) {\n        return new Vector(\n            this.sigma * (position.y - position.x),\n            position.x * (this.rho - position.z) - position.y,\n            position.x * position.y - (this.beta * position.z)\n        );\n    }\n}","import App from './src/app'\n\nconst app = new App(10);\n\ndocument.app = app;","import {\n    Scene,\n    LineDashedMaterial,\n    Geometry,\n    Vector3,\n    Color,\n    Line,\n    PerspectiveCamera,\n    WebGLRenderer,\n} from 'three';\nimport LorenzSystem from './maths/system';\n\nexport default class App {\n    constructor(systemCount) {\n        this.systemCount = systemCount;\n        this.scene = new Scene();\n        this.width = window.innerWidth * 0.95;\n        this.height = window.innerHeight * 0.95;\n        console.log(this.systems)\n        this.mustRender = false;\n\n        this.initialize();\n    }\n\n    static newColorizedMaterial(color) {\n        return new LineDashedMaterial({\n            linewidth: 1,\n            color: color\n        });\n    }\n\n    generateSystems() {\n        const count = document.getElementById('count').value;\n        const rand = () => (Math.floor(Math.random() * 100) + 1) / 100;\n        this.systems = [];\n        let systemDoms = '';\n        for (let i = 0; i < count; i++) {\n            const newMaterial = App.newColorizedMaterial(new Color(rand(), rand(), rand()));\n            const newSystem = new LorenzSystem(i)\n            this.systems.push({\n                system: newSystem,\n                material: newMaterial,\n            });\n            const colorBox = `<div id=\"color-box-${i}\"class=\"color-box\" style=\"background-color: #${newMaterial.color.getHexString()};\"></div>`;\n            systemDoms += `<span id=\"system-${i}\">${colorBox}<span id=\"info-${i}\"></span></span>`;\n        }\n        document.getElementById('systems').innerHTML = systemDoms;\n    }\n\n\n    initialize() {\n        // Configure camera settings\n        this.camera = new PerspectiveCamera(50, this.width / this.height, 0.1, 1000);\n        this.camera.position.set(0, 0, 200);\n        this.camera.lookAt(new Vector3(0, 0, 0));\n\n        this.renderer = new WebGLRenderer({antialias: true});\n        this.renderer.setSize(this.width, this.height);\n        this.renderer.setClearColor(0xffffff, 1);\n\n        document.body.appendChild(this.renderer.domElement);\n\n        this.geometry = new Geometry();\n        this.geometry.dynamic = true;\n\n        this.renderer.render(this.scene, this.camera);\n    }\n\n    clearThree (){\n        while(this.scene.children.length > 0){\n            clearThree(this.scene.children[0])\n            this.scene.remove(this.scene.children[0]);\n        }\n        if(this.scene.geometry) this.scene.geometry.dispose()\n        if(this.scene.material) this.scene.material.dispose()\n        if(this.scene.texture) this.scene.texture.dispose()\n    }\n\n\n    run () {\n        while(this.scene.children.length > 0){\n            this.scene.remove(this.scene.children[0]);\n        }\n        console.log('coucou');\n        this.mustRender = true;\n\n        this.generateSystems(this.systemCount);\n\n        this.render();\n    }\n\n    stop () {\n        this.mustRender = false;\n    }\n\n    render() {\n        if (this.mustRender) {\n            requestAnimationFrame(() => {\n                this.render()\n            });\n\n            this.systems.forEach((element) => {\n                console.log(element);\n                element.system.process();\n\n                const previous = element.system.previousPosition;\n                const current = element.system.currentPosition;\n\n                let geo = new Geometry();\n                geo.vertices.push(previous.toVector3());\n                geo.vertices.push(current.toVector3());\n\n                this.scene.add(new Line(geo, element.material));\n\n                const infoDOM = document.getElementById(`info-${element.system.id}`);\n                infoDOM.innerHTML =\n                    `-> initial : ${element.system.initialPosition.toString()} - current ${element.system.currentPosition.toString()}<br>`;\n            });\n            document.getElementById(`time`).innerHTML = this.systems[0].system.time;\n\n            // Spin camera around the visualization\n            const timer = new Date().getTime() * 0.0005;\n            this.camera.position.x = Math.floor(Math.cos(timer) * 200);\n            this.camera.position.z = Math.floor(Math.sin(timer) * 200);\n            this.camera.lookAt(this.scene.position);\n\n            this.renderer.render(this.scene, this.camera);\n        }\n    }\n}"],"sourceRoot":""}